.. -*- coding: utf-8 -*-
   Copyright Â© 2016, Michael Rohan <mrohan@zanyblue.com>
   All rights reserved.

.. _zb-text-messages:

Messages and Arguments
======================

The localization of a message cannot, in general, occur using just the
text "snippets" surrounding values generated by an application, e.g., the
externally visible message::

    There are 2 moons orbiting "Mars".

could be divided into the "snippets"

* ``There are``
* ``moons orbiting "``
* ``".``

concatenated together at runtime along with formatted values for the number
of moons and the planet name.  If delivered to a translation vendor, the
"snippets" would needs to localize independently. This is a rather
difficult task to do for general text "snippets" as the order of the
"snippets" is defined by the application and cannot be changed by localization
vendors.  Also, the "snippets" themselves are generally too short to give
translators sufficient context.  As a general rule, translation should be
performed on complete sentences.

A complete sentence is possible if place-holders are used for message
arguments.  Using Java style arguments, the above message would be defined as::

    There are {0} moons orbiting "{1}".

The application message arguments are referenced within chain brackets.
In the example here, argument 0 would be the integer ``2`` and argument
1 would be the string ``Mars``.

This message is then stored in a ``.properties`` file, external to the
application and given a key name, e.g., to use they key string
``moons`` to refer to the message in the application code, the
``.properties`` file definition would be::

    moons=There are {0} moons orbiting "{1}".

This sentence can be localized independently of the application and, since
the English string is also defined externally to the application, this
text can also be changed.  For example, if a technical writer review of the
English used in an application decided, for consistency reasons, to rephrase
the sentence, just the English properties file need be adjusted, e.g.,::

    moons=The planet "{1}" has {0} moons.

This model of searching ``.properties`` files is a conceptual model in the
context of the ZanyBlue Text library.  The ZanyBlue implementation compiles
the set of properties files for a facility into Ada code and localized message
resolution for a particular key occurs against run-time data structures rather
than accessing files.  This makes for an efficient implementation where the
major portion of the data processing occurs at application build time.  See
details on the ``zbmcompile`` (:ref:`zb-text-zbmcompile`), the ZanyBlue message
compiler, later.
