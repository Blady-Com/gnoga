#
#  ZanyBlue, an Ada library and framework for finite element analysis.
#
#  Copyright (c) 2012, Michael Rohan <mrohan@zanyblue.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#
#    * Neither the name of ZanyBlue nor the names of its contributors may
#      be used to endorse or promote products derived from this software
#      without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

#
#  Messages used by the zbmcompile application
#

00001=This is ZBTest, Version {0,*}.{1,*}.{2,*} {3} (r{4}) at {5,time} on {5,date}
00002=Copyright (c) 2009-{0,*}, Michael Rohan.  All rights reserved
00003=ZBTest completed at {0,time} on {0,date}, elapsed time {1}
00004={0}
00005=Emtpy list
00006={0}) "{1}"
00007=This is ZBTest, a simple application testing application.\n\n\
Available commands:\n
00008=\nFor additional information on a command, use "help command"\n
00009=Creating test area directory "{0}"
00010=zbtest [ -h ] [ -t test-area ] [ -X xml-summary ] [ test-script ]
00011=Copied the file "{0}" to the test area
00012=Renamed the file "{0}" to "{1}"
00013=Executing the ZBTest script "{0}"
00014={0} ({1}) {2}
00015=Set the test description to "{0}"
00016=Incremented the parmeter "{0}" to {1}
00017=Deleted the file "{0}"
00018=Status for "{0}": {1} failures, {2} OK
00019=Copied the directory "{0}" to the test area
00020=Deleted the directory "{0}"
00021=Created the directory "{0}"
00022=Generated status report on the file "{0}" to "{1}"
00023=Generated status report on the file "{0}" (non-existent) to "{1}"
00024=The file "{0}" does not exist
00025=File name: "{0}"
00026=File type: {0}
00027=File size: {0}
00028=File date: {0}
00029=Executing the command "{0}"
00030=The parameter "{0}" is already defined, ignoring conditional definition
00031=Setting the parameter "{0}" to the value "{1}"
00032=Executing the 'undo' action "{0}"
00033={0}

00034=Failure expected
00035=Success expected
00036=Command completed successfully
00037=Command failed

10001=Error, cannot "end", currently at level 0
10002=Error, too few arguments for the command "{0}"
10003=Error, too many arguments for the command "{0}"
10004=Error, invalid value "{0}"
10005=The parameter "{0}" is not defined
10006=Error, the value "{0}" is not supported (only supported value is "now")
10007=Warning: the environment variable "{0}" is not defined
10008=NOT-USED
10009=Error, "{0}" is not a known command
10010=Warning, the file "{0}" was not found
10011=Warning, test area "{0}", already exists, removing it
10012=Error, test area "{0}", already exists and is not a directory
10013=Error, failed to remove existing test area "{0}": {1}
10014=Error, failed to create the test area "{0}": {1}
10015=Error, missing argument for option "{0}"
10016=Error, unexpected command line argument "{0}"
10017={0}
10018=Warning, the source "{0}" could not be found, failed to copy
10019=Warning, failed to rename "{0}" to "{1}": {2}
10020=Error, failed to locate the ZBTest script "{0}"
10021=Error, the parameter "{0}" is not an integer, cannot increment
10022=Error, the log file "{0}" was not found
10023=Test "{0}" successful
10024=Test "{0}" failed
10025=Error, regular expression matching failed: {0} ({0,name})
10026=Warning, failed to delete "{0}": {1}
10027=Error, failure for test "{0}", unexpected exception "{1,name}"
10028=Error, the reference log file "{0}" was not found
10029=Error, failed to create the directory "{0}": {1}
10030=Warning, referenced to undefined parameter "{0}"
10031=Error, empty text function call
10032=Error, text function call to unknown function: "{0}"
10033=Error, unexpected exception ({0,name}) encountered
10034=Error, failed to rename "{0}" to "{1}": {2}
10035=Error, missing arguments for option "{0}"
10036=Error, could not locate the executeable "{0}"
10037=Error, test script, "{0}", not found

20000=Usage for unknown command, not used.
30000=Summary line for a command
40000=Not a known command.

20001=Usage: append parameter value
30001={0:>3}) "append", append values to a list parameter
40001=The append command adds a value to the end of a list parameter within\n\
current scope.

20002=Usage: begin
30002={0:>3}) "begin", begin a new parameter scope
40002=Start a new scope level.  Variable assignments, e.g.,\n\n\
\    set xyx abc\n\n\
retain their effect for the lifetime of the scope.  Ending the scope\n\
using the "end" command restores any previous values for the parameters\n\
adjusted during the scope.\n\n\
It is not normally necessary to explicitly begin a new scope, each test\n\
script run automatically starts a new scope which is automatically ended\n\
when the test script completes.\n\n\
The "begin" command does not have options.

20003=Usage: dump [ -o output-file ] [ -a ]
30003={0:>3}) "dump", dump the contents of the parameter scope(s)
40003=Dump parameters values.  The default is to dump the parameters\n\
for the current scope.  This is primarily a debugging command.\n\n\
The options are\n\
\  -a  Dump the parameters for all scopes\n\
\  -o  Dump the output to a file in the test area

20004=Usage: end
30004={0:>3}) "end", end a parameter scope returning to previous scope
40004=Exit a parameter scope.  Any assignments to made duing the scope\n\
are lost.  Previous definitions are restored, e.g.,\n\n\
\    set xyz abc\n\
\    begin\n\
\    set xyz 123\n\
\    echo $xyz\n\
\    end\n\
\    echo $xyz\n\n\
The first "echo" prints the value "123" which the second prints the value\n\
"abc".\n\n\
It not normally necessary to use the "begin" and "end" commands as running\n\
a test script automatically start a new scope which is ended when the script\n\
completes.

20005=Usage: exit
30005={0:>3}) "exit", exit the current test script
40005=Exit a test script.  This command is normally only used when entering\n\
commands interactively to exit the zbtest application.  Using it in a test\n\
script causes immediate exit of the zbtest application.

20006=Usage: getenv [ -l | -s | -p | -a ] name [ parameter ]
30006={0:>3}) "getenv", define a parameter based on an environment variable
40006=Define an internal parameter (target) based on the value of an\n\
environment variable.\n\
\n\
The options are\n\
\  -l  Define an internal list parameter by splitting on the pathsep\n\
\  -s  Define a simple scalar (string) parameter (default)\n\
\  -a  If defining a list parameter, append the values\n\
\  -p  If defining a list parameter, prepend the values\n\
\n\
If the target is not given then import to name (lowercased).

20007=Usage: help [ command ]
30007={0:>3}) "help", print help information on commands
40007=Get help information on a command.  Without a command argument the\n\
help command prints a summary of available commands.  With an argument\n\
the help command print help information on the argument command.

20008=Usage: noop
30008={0:>3}) "noop", the no operation command
40008=No operation.  The noop command does nothing.

20009=Usage: prepend parameter value
30009={0:>3}) "prepend", prepend a value to list parameter
40009=The prepend command adds a value to the beginning of a list parameter.\n\
If the parameter doesn't exist in the current scope, it is created as a list\n\
parameter.  The prepend append is normally used to force a path to the "front\n\
of a search path parameter, e.g., the "path" or "searchpath" parameters.\n\n\
Example of use, where the "begin" command is used start a new, empty, scope\n\n\
ZBTest> begin\n\
ZBTest> print -l l\n\
Emtpy list\n\
ZBTest> prepend l a\n\
ZBTest> print -l l\n\
1) "a"\n\
ZBTest> prepend l b\n\
ZBTest> print -l l\n\
1) "b"\n\
2) "a"

20010=Usage: print [ -l | -s ] parameter [ -l | -s | parameter ...
30010={0:>3}) "print", print the value of parameters
40010=Print the value of a scalar (-s, default) or list (-l) parameters

20011=Usage: set [ -s | -i | -b | -f | -t ] parameter value
30011={0:>3}) "set", set the value of a parameter
40011=Set the value of a parameter (option selects type: integer, boolean, ...)

20012=Usage: which [ -e | -f ] file ...
30012={0:>3}) "which", print the location of a file or command
40012=Print the locations of files

20013=Usage: copy file
30013={0:>3}) "copy", copy a file to the test area
40013=Copy a file to the test area to use as input to commands under test.

20014=Usage: execute [ -f | -s | -o output ] command [ command-arg ... ]
30014={0:>3}) "execute", execute a system command
40014=Execute a command

20015=Usage: rename old-name new-name
30015={0:>3}) "rename", rename a file in the test area
40015=Rename a file

20016=Usage: run script
30016={0:>3}) "run", run another ZBTest script
40016=Run a script

20017=Usage: desc word ...
30017={0:>3}) "desc", set the test description
40017=Set the test description

20018=Usage: desc word ...
30018={0:>3}) "desc", set the test description
40018=Set the test description

20019=Usage: compare log-file [ ref-log-file ]
30019={0:>3}) "compare", compare a log file with a reference log
40019=The compare command compares (with regular expression matching) a\n\
generated log file with a reference log file.  It the files match, a\n\
.ok file is created and the number of OK tests is incremented, otherwise\n\
a .fail file is created and the number of FAIL tests is incremented.

20020=Usage: delete name
30020={0:>3}) "delete", delete a file in the test area
40020=Delete a file from the test area

20021=Usage: mkdir name
30021={0:>3}) "mkdir", create a directory
40021=Create a new directory in the test area

20022=Usage: filestat name log-file
30022={0:>3}) "filestat", write status of a test area file to a log file
40022=Write status of a test area file to a log file

20023=Usage: echo name ...
30023={0:>3}) "echo", echo arguments to output
40023=Echo arguments to output

20024=Usage: setifundef [ -s | -i | -b | -f | -t ] parameter value
30024={0:>3}) "setifundef", set the value of a parameter if it is not defined
40024=Conditionally set the value of a parameter to the given value provided\n\
the parameter is not already defined.  This can be used to allow command line\n\
definitions of parameters to over-ride script definitions.  Or, put another\n\
way, allow scripts to provide defaults for parameters not defined on the\n\
command line.

