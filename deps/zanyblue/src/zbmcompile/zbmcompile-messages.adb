--  -*- encoding: utf-8 -*-
--
--  Ada implementation generated by ZBMCompile, V1.3.0 - BETA.
--  This is a generated file and should not be edited.
--

package body ZBMCompile.Messages is

   package ZT  renames ZanyBlue.Text;
   package ZTC renames ZanyBlue.Text.Catalogs;

   subtype Z is ZTC.ZBMCompile_Definition;

   Facility_1 : aliased constant Wide_String := ""
      & "zbmcompile"
      & "";
   Facility_2 : aliased constant Wide_String := ""
      & "zbmbase"
      & "";
   Facility_3 : aliased constant Wide_String := ""
      & "zbmprints"
      & "";
   Facility_4 : aliased constant Wide_String := ""
      & "zbmwprints"
      & "";
   Facility_5 : aliased constant Wide_String := ""
      & "zbmwstrings"
      & "";
   Facility_6 : aliased constant Wide_String := ""
      & "zbmexceptions"
      & "";
   Facility_7 : aliased constant Wide_String := ""
      & "zbmstrings"
      & "";
   Facilities : constant ZT.Constant_String_List (1 .. 7) := (
                   1 => Facility_1'Access,
                   2 => Facility_2'Access,
                   3 => Facility_3'Access,
                   4 => Facility_4'Access,
                   5 => Facility_5'Access,
                   6 => Facility_6'Access,
                   7 => Facility_7'Access);

   Key_1 : aliased constant Wide_String := ""
      & "E00002"
      & "";
   Key_2 : aliased constant Wide_String := ""
      & "10027"
      & "";
   Key_3 : aliased constant Wide_String := ""
      & "10028"
      & "";
   Key_4 : aliased constant Wide_String := ""
      & "20008"
      & "";
   Key_5 : aliased constant Wide_String := ""
      & "10009"
      & "";
   Key_6 : aliased constant Wide_String := ""
      & "00004"
      & "";
   Key_7 : aliased constant Wide_String := ""
      & "00009"
      & "";
   Key_8 : aliased constant Wide_String := ""
      & "00007"
      & "";
   Key_9 : aliased constant Wide_String := ""
      & "10026"
      & "";
   Key_10 : aliased constant Wide_String := ""
      & "10025"
      & "";
   Key_11 : aliased constant Wide_String := ""
      & "20001"
      & "";
   Key_12 : aliased constant Wide_String := ""
      & "10001"
      & "";
   Key_13 : aliased constant Wide_String := ""
      & "00001"
      & "";
   Key_14 : aliased constant Wide_String := ""
      & "20007"
      & "";
   Key_15 : aliased constant Wide_String := ""
      & "00008"
      & "";
   Key_16 : aliased constant Wide_String := ""
      & "20012"
      & "";
   Key_17 : aliased constant Wide_String := ""
      & "10003"
      & "";
   Key_18 : aliased constant Wide_String := ""
      & "00006"
      & "";
   Key_19 : aliased constant Wide_String := ""
      & "10005"
      & "";
   Key_20 : aliased constant Wide_String := ""
      & "10002"
      & "";
   Key_21 : aliased constant Wide_String := ""
      & "E00012"
      & "";
   Key_22 : aliased constant Wide_String := ""
      & "10006"
      & "";
   Key_23 : aliased constant Wide_String := ""
      & "E00021"
      & "";
   Key_24 : aliased constant Wide_String := ""
      & "I00001"
      & "";
   Key_25 : aliased constant Wide_String := ""
      & "E00014"
      & "";
   Key_26 : aliased constant Wide_String := ""
      & "E00015"
      & "";
   Key_27 : aliased constant Wide_String := ""
      & "10020"
      & "";
   Key_28 : aliased constant Wide_String := ""
      & "E00016"
      & "";
   Key_29 : aliased constant Wide_String := ""
      & "V00006"
      & "";
   Key_30 : aliased constant Wide_String := ""
      & "10007"
      & "";
   Key_31 : aliased constant Wide_String := ""
      & "10019"
      & "";
   Key_32 : aliased constant Wide_String := ""
      & "E00027"
      & "";
   Key_33 : aliased constant Wide_String := ""
      & "E00028"
      & "";
   Key_34 : aliased constant Wide_String := ""
      & "10014"
      & "";
   Key_35 : aliased constant Wide_String := ""
      & "E00011"
      & "";
   Key_36 : aliased constant Wide_String := ""
      & "E00013"
      & "";
   Key_37 : aliased constant Wide_String := ""
      & "V00003"
      & "";
   Key_38 : aliased constant Wide_String := ""
      & "20006"
      & "";
   Key_39 : aliased constant Wide_String := ""
      & "E00025"
      & "";
   Key_40 : aliased constant Wide_String := ""
      & "V00004"
      & "";
   Key_41 : aliased constant Wide_String := ""
      & "E00004"
      & "";
   Key_42 : aliased constant Wide_String := ""
      & "10018"
      & "";
   Key_43 : aliased constant Wide_String := ""
      & "I00003"
      & "";
   Key_44 : aliased constant Wide_String := ""
      & "20003"
      & "";
   Key_45 : aliased constant Wide_String := ""
      & "V00002"
      & "";
   Key_46 : aliased constant Wide_String := ""
      & "D00001"
      & "";
   Key_47 : aliased constant Wide_String := ""
      & "I00002"
      & "";
   Key_48 : aliased constant Wide_String := ""
      & "10015"
      & "";
   Key_49 : aliased constant Wide_String := ""
      & "00002"
      & "";
   Key_50 : aliased constant Wide_String := ""
      & "10008"
      & "";
   Key_51 : aliased constant Wide_String := ""
      & "10016"
      & "";
   Key_52 : aliased constant Wide_String := ""
      & "I00007"
      & "";
   Key_53 : aliased constant Wide_String := ""
      & "E00023"
      & "";
   Key_54 : aliased constant Wide_String := ""
      & "E00026"
      & "";
   Key_55 : aliased constant Wide_String := ""
      & "V00001"
      & "";
   Key_56 : aliased constant Wide_String := ""
      & "E00024"
      & "";
   Key_57 : aliased constant Wide_String := ""
      & "I00005"
      & "";
   Key_58 : aliased constant Wide_String := ""
      & "E00017"
      & "";
   Key_59 : aliased constant Wide_String := ""
      & "E00010"
      & "";
   Key_60 : aliased constant Wide_String := ""
      & "I00008"
      & "";
   Key_61 : aliased constant Wide_String := ""
      & "V00005"
      & "";
   Key_62 : aliased constant Wide_String := ""
      & "10017"
      & "";
   Key_63 : aliased constant Wide_String := ""
      & "E00018"
      & "";
   Key_64 : aliased constant Wide_String := ""
      & "10004"
      & "";
   Key_65 : aliased constant Wide_String := ""
      & "10011"
      & "";
   Key_66 : aliased constant Wide_String := ""
      & "V00011"
      & "";
   Key_67 : aliased constant Wide_String := ""
      & "V00009"
      & "";
   Key_68 : aliased constant Wide_String := ""
      & "E00001"
      & "";
   Key_69 : aliased constant Wide_String := ""
      & "V00007"
      & "";
   Key_70 : aliased constant Wide_String := ""
      & "V00008"
      & "";
   Key_71 : aliased constant Wide_String := ""
      & "V00010"
      & "";
   Key_72 : aliased constant Wide_String := ""
      & "E00006"
      & "";
   Key_73 : aliased constant Wide_String := ""
      & "V00015"
      & "";
   Key_74 : aliased constant Wide_String := ""
      & "V00013"
      & "";
   Key_75 : aliased constant Wide_String := ""
      & "E00009"
      & "";
   Key_76 : aliased constant Wide_String := ""
      & "20011"
      & "";
   Key_77 : aliased constant Wide_String := ""
      & "E00020"
      & "";
   Key_78 : aliased constant Wide_String := ""
      & "E00007"
      & "";
   Key_79 : aliased constant Wide_String := ""
      & "00010"
      & "";
   Key_80 : aliased constant Wide_String := ""
      & "I00004"
      & "";
   Key_81 : aliased constant Wide_String := ""
      & "V00014"
      & "";
   Key_82 : aliased constant Wide_String := ""
      & "10012"
      & "";
   Key_83 : aliased constant Wide_String := ""
      & "V00012"
      & "";
   Key_84 : aliased constant Wide_String := ""
      & "00005"
      & "";
   Key_85 : aliased constant Wide_String := ""
      & "10010"
      & "";
   Key_86 : aliased constant Wide_String := ""
      & "E00003"
      & "";
   Key_87 : aliased constant Wide_String := ""
      & "E00019"
      & "";
   Key_88 : aliased constant Wide_String := ""
      & "E00005"
      & "";
   Key_89 : aliased constant Wide_String := ""
      & "20005"
      & "";
   Key_90 : aliased constant Wide_String := ""
      & "V00016"
      & "";
   Key_91 : aliased constant Wide_String := ""
      & "V00017"
      & "";
   Key_92 : aliased constant Wide_String := ""
      & "20009"
      & "";
   Key_93 : aliased constant Wide_String := ""
      & "20002"
      & "";
   Key_94 : aliased constant Wide_String := ""
      & "10029"
      & "";
   Key_95 : aliased constant Wide_String := ""
      & "10013"
      & "";
   Key_96 : aliased constant Wide_String := ""
      & "E00022"
      & "";
   Key_97 : aliased constant Wide_String := ""
      & "I00006"
      & "";
   Key_98 : aliased constant Wide_String := ""
      & "10022"
      & "";
   Key_99 : aliased constant Wide_String := ""
      & "20004"
      & "";
   Key_100 : aliased constant Wide_String := ""
      & "00000"
      & "";
   Key_101 : aliased constant Wide_String := ""
      & "00003"
      & "";
   Key_102 : aliased constant Wide_String := ""
      & "10023"
      & "";
   Key_103 : aliased constant Wide_String := ""
      & "10024"
      & "";
   Key_104 : aliased constant Wide_String := ""
      & "20013"
      & "";
   Key_105 : aliased constant Wide_String := ""
      & "20010"
      & "";
   Key_106 : aliased constant Wide_String := ""
      & "10030"
      & "";
   Key_107 : aliased constant Wide_String := ""
      & "00011"
      & "";
   Key_108 : aliased constant Wide_String := ""
      & "10021"
      & "";
   Key_109 : aliased constant Wide_String := ""
      & "E00008"
      & "";
   Keys : constant ZT.Constant_String_List (1 .. 109) := (
                   1 => Key_1'Access,
                   2 => Key_2'Access,
                   3 => Key_3'Access,
                   4 => Key_4'Access,
                   5 => Key_5'Access,
                   6 => Key_6'Access,
                   7 => Key_7'Access,
                   8 => Key_8'Access,
                   9 => Key_9'Access,
                   10 => Key_10'Access,
                   11 => Key_11'Access,
                   12 => Key_12'Access,
                   13 => Key_13'Access,
                   14 => Key_14'Access,
                   15 => Key_15'Access,
                   16 => Key_16'Access,
                   17 => Key_17'Access,
                   18 => Key_18'Access,
                   19 => Key_19'Access,
                   20 => Key_20'Access,
                   21 => Key_21'Access,
                   22 => Key_22'Access,
                   23 => Key_23'Access,
                   24 => Key_24'Access,
                   25 => Key_25'Access,
                   26 => Key_26'Access,
                   27 => Key_27'Access,
                   28 => Key_28'Access,
                   29 => Key_29'Access,
                   30 => Key_30'Access,
                   31 => Key_31'Access,
                   32 => Key_32'Access,
                   33 => Key_33'Access,
                   34 => Key_34'Access,
                   35 => Key_35'Access,
                   36 => Key_36'Access,
                   37 => Key_37'Access,
                   38 => Key_38'Access,
                   39 => Key_39'Access,
                   40 => Key_40'Access,
                   41 => Key_41'Access,
                   42 => Key_42'Access,
                   43 => Key_43'Access,
                   44 => Key_44'Access,
                   45 => Key_45'Access,
                   46 => Key_46'Access,
                   47 => Key_47'Access,
                   48 => Key_48'Access,
                   49 => Key_49'Access,
                   50 => Key_50'Access,
                   51 => Key_51'Access,
                   52 => Key_52'Access,
                   53 => Key_53'Access,
                   54 => Key_54'Access,
                   55 => Key_55'Access,
                   56 => Key_56'Access,
                   57 => Key_57'Access,
                   58 => Key_58'Access,
                   59 => Key_59'Access,
                   60 => Key_60'Access,
                   61 => Key_61'Access,
                   62 => Key_62'Access,
                   63 => Key_63'Access,
                   64 => Key_64'Access,
                   65 => Key_65'Access,
                   66 => Key_66'Access,
                   67 => Key_67'Access,
                   68 => Key_68'Access,
                   69 => Key_69'Access,
                   70 => Key_70'Access,
                   71 => Key_71'Access,
                   72 => Key_72'Access,
                   73 => Key_73'Access,
                   74 => Key_74'Access,
                   75 => Key_75'Access,
                   76 => Key_76'Access,
                   77 => Key_77'Access,
                   78 => Key_78'Access,
                   79 => Key_79'Access,
                   80 => Key_80'Access,
                   81 => Key_81'Access,
                   82 => Key_82'Access,
                   83 => Key_83'Access,
                   84 => Key_84'Access,
                   85 => Key_85'Access,
                   86 => Key_86'Access,
                   87 => Key_87'Access,
                   88 => Key_88'Access,
                   89 => Key_89'Access,
                   90 => Key_90'Access,
                   91 => Key_91'Access,
                   92 => Key_92'Access,
                   93 => Key_93'Access,
                   94 => Key_94'Access,
                   95 => Key_95'Access,
                   96 => Key_96'Access,
                   97 => Key_97'Access,
                   98 => Key_98'Access,
                   99 => Key_99'Access,
                   100 => Key_100'Access,
                   101 => Key_101'Access,
                   102 => Key_102'Access,
                   103 => Key_103'Access,
                   104 => Key_104'Access,
                   105 => Key_105'Access,
                   106 => Key_106'Access,
                   107 => Key_107'Access,
                   108 => Key_108'Access,
                   109 => Key_109'Access);

   Locale_1 : aliased constant Wide_String := ""
      & "";
   Locales : constant ZT.Constant_String_List (1 .. 1) := (
                   1 => Locale_1'Access);

   Pool_Data_1 : aliased constant Wide_String := ""
      & "Usage: zbmcompile [ options ] package facility"
      & Wide_Character'Val (10)
      & "where available options are"
      & Wide_Character'Val (10)
      & "  -q             Quiet mode"
      & Wide_Character'Val (10)
      & "  -v             Verbose mode"
      & Wide_Character'Val (10)
      & "  -m             Always include argument modes in generated"
      & " code"
      & Wide_Character'Val (10)
      & "  -p             Number list entries (gnatcheck +RPositiona"
      & "l_Components)"
      & Wide_Character'Val (10)
      & "  -D             Debug mode (dump the catalog definitions)"
      & Wide_Character'Val (10)
      & "  -d directory   Directory containing facility (defaults to"
      & " ""."")"
      & Wide_Character'Val (10)
      & "  -e extension   Properties extension (default ""properties"
      & """)"
      & Wide_Character'Val (10)
      & "  -i             Include initialization call in body"
      & Wide_Character'Val (10)
      & "  -O             Optimize string pool for locale based acce"
      & "ss"
      & Wide_Character'Val (10)
      & "  -g             Disable locale based access optimization ("
      & "default)"
      & Wide_Character'Val (10)
      & "  -B             Compile only the base locale"
      & Wide_Character'Val (10)
      & "  -u             Disable consistency checked (unchecked mod"
      & "e)"
      & Wide_Character'Val (10)
      & "  -L locale      Compile only the named locale, e.g., ""fr"""
      & ", ""fr_FR"""
      & Wide_Character'Val (10)
      & "  -r locale      Define reference (base) locale for consist"
      & "ency checking"
      & Wide_Character'Val (10)
      & "  -s locale      Define source root locale"
      & Wide_Character'Val (10)
      & "  -S stamp-file  File to always create/update (contains a t"
      & "imestamp)"
      & Wide_Character'Val (10)
      & "  -x name        Define external name for Initialize proced"
      & "ure"
      & Wide_Character'Val (10)
      & "  -F             Force generation, ignoring errors.  Genera"
      & "ted code might"
      & Wide_Character'Val (10)
      & "                 not compile"
      & Wide_Character'Val (10)
      & "  -a             Generate all accessors ([w]prints, [w]stri"
      & "ngs, exceptions)"
      & Wide_Character'Val (10)
      & "  -G name        Generate named accessor ([w]prints, [w]str"
      & "ings, exceptions)"
      & Wide_Character'Val (10)
      & "  -C             Disable comments on generated accessor rou"
      & "tines"
      & Wide_Character'Val (10)
      & "  -T item size   Set the size of an Ada output limit: pool "
      & "or comment   ----------------"
      & Wide_Character'Val (10)
      & "   -- Initialize --"
      & Wide_Character'Val (10)
      & "   ----------------"
      & Wide_Character'Val (10)
      & Wide_Character'Val (10)
      & "   procedure Initialize (Catalog :{0}ZTC.Catalog_Type := St"
      & "andard_Catalog) is"
      & Wide_Character'Val (10)
      & "   begin"
      & Wide_Character'Val (10)
      & "      ZTC.Initialize (Catalog, Messages, Pool, Facilities, "
      & "Keys, Locales,"
      & Wide_Character'Val (10)
      & "                      ""{1}"","
      & Wide_Character'Val (10)
      & "                      Pool_Data_1''Length, {2});"
      & Wide_Character'Val (10)
      & "   end Initialize;"
      & Wide_Character'Val (10)
      & "   ----------------"
      & Wide_Character'Val (10)
      & "   -- Initialize --"
      & Wide_Character'Val (10)
      & "   ----------------"
      & Wide_Character'Val (10)
      & Wide_Character'Val (10)
      & "   procedure Initialize (Catalog :{0}ZTC.Catalog_Type := St"
      & "andard_Catalog) is"
      & Wide_Character'Val (10)
      & "      pragma Unreferenced (Catalog);"
      & Wide_Character'Val (10)
      & "   begin"
      & Wide_Character'Val (10)
      & "      null;"
      & Wide_Character'Val (10)
      & "   end Initialize;"
      & Wide_Character'Val (10)
      & "      Destination :{0}File_Type    := Current_Output;"
      & Wide_Character'Val (10)
      & "      With_NL     :{0}Boolean      := True;"
      & Wide_Character'Val (10)
      & "      Locale      :{0}Locale_Type  := Current_Locale;"
      & Wide_Character'Val (10)
      & "      Catalog     :{0}Catalog_Type := Standard_Catalog)"
      & Wide_Character'Val (10)
      & "   is      Destination :{1}File_Type    := Current_Output;"
      & Wide_Character'Val (10)
      & "      With_NL     :{1}Boolean      := True;"
      & Wide_Character'Val (10)
      & "      Locale      :{1}Locale_Type  := Current_Locale;"
      & Wide_Character'Val (10)
      & "      Catalog     :{1}Catalog_Type := Standard_Catalog);   "
      & "--  Since the body calls the Initialize procedure, this pac"
      & "kage need"
      & Wide_Character'Val (10)
      & "   --  only be with''ed.  Suppress any compiler warnings ab"
      & "out an unused"
      & Wide_Character'Val (10)
      & "   --  with''ed package."
      & Wide_Character'Val (10)
      & "   pragma Warnings (Off, {0});"
      & Wide_Character'Val (10)
      & "   procedure Initialize ("
      & Wide_Character'Val (10)
      & "      Catalog :{0}ZanyBlue.Text.Catalogs.Catalog_Type := St"
      & "andard_Catalog);"
      & Wide_Character'Val (10)
      & "   --  The catalog initialization routine: load the compile"
      & "d messages into"
      & Wide_Character'Val (10)
      & "   --  a catalog.   function {0} (Index :{1}Positive) retur"
      & "n Wide_String;"
      & Wide_Character'Val (10)
      & "   --  The name of the Index''th {0} item compiled."
      & Wide_Character'Val (10)
      & "   --  This routine is normally only used by generated acce"
      & "ssor code."
      & Wide_Character'Val (10)
      & "   ---{2:-^{3,*}}----------"
      & Wide_Character'Val (10)
      & "   --- {0}_Count --"
      & Wide_Character'Val (10)
      & "   ---{2:-^{3,*}}----------"
      & Wide_Character'Val (10)
      & Wide_Character'Val (10)
      & "   function {0}_Count return Natural is"
      & Wide_Character'Val (10)
      & "   begin"
      & Wide_Character'Val (10)
      & "      return {1}''Length;"
      & Wide_Character'Val (10)
      & "   end {0}_Count;"
      & Wide_Character'Val (10)
      & "   ---{3:-^{4,*}}----"
      & Wide_Character'Val (10)
      & "   --- {0} --"
      & Wide_Character'Val (10)
      & "   ---{3:-^{4,*}}----"
      & Wide_Character'Val (10)
      & Wide_Character'Val (10)
      & "   function {0} (Index :{1}Positive) return Wide_String is"
      & Wide_Character'Val (10)
      & "   begin"
      & Wide_Character'Val (10)
      & "      return {2} (Index).all;"
      & Wide_Character'Val (10)
      & "   end {0};"
      & Wide_Character'Val (10)
      & "--  -*- encoding: utf-8 -*-"
      & Wide_Character'Val (10)
      & "--"
      & Wide_Character'Val (10)
      & "--  Ada implementation generated by ZBMCompile, V{0}.{1}.{2"
      & "} - {3}."
      & Wide_Character'Val (10)
      & "--  This is a generated file and should not be edited."
      & Wide_Character'Val (10)
      & "--"
      & Wide_Character'Val (10)
      & "--  -*- encoding: utf-8 -*-"
      & Wide_Character'Val (10)
      & "--"
      & Wide_Character'Val (10)
      & "--  Ada specification generated by ZBMCompile, V{0}.{1}.{2}"
      & " - {3}."
      & Wide_Character'Val (10)
      & "--  This is a generated file and should not be edited."
      & Wide_Character'Val (10)
      & "--"
      & Wide_Character'Val (10)
      & "   ---------{1:-^{2,*}}---"
      & Wide_Character'Val (10)
      & "   -- Raise_{0} --"
      & Wide_Character'Val (10)
      & "   ---------{1:-^{2,*}}---"
      & Wide_Character'Val (10)
      & Wide_Character'Val (10)
      & "   procedure Raise_{0} ("
      & Wide_Character'Val (10)
      & "      E           :{3}Ada.Exceptions.Exception_Id;   functi"
      & "on {0}_Count return Natural;"
      & Wide_Character'Val (10)
      & "   --  Numnber of {0} items compiled."
      & Wide_Character'Val (10)
      & "   --  This routine is normally only used by generated acce"
      & "ssor code."
      & Wide_Character'Val (10)
      & "      Locale      :{1}Locale_Type  := Current_Locale;"
      & Wide_Character'Val (10)
      & "      Catalog     :{1}Catalog_Type := Standard_Catalog);"
      & Wide_Character'Val (10)
      & "   pragma No_Return (Raise_{0});      Locale      :{0}Local"
      & "e_Type  := Current_Locale;"
      & Wide_Character'Val (10)
      & "      Catalog     :{0}Catalog_Type := Standard_Catalog) ret"
      & "urn Wide_String"
      & Wide_Character'Val (10)
      & "   is      Write_Message (Destination, Facility ({0}), Key "
      & "({1}),"
      & Wide_Character'Val (10)
      & "                     {3}, With_NL, Locale, Catalog);"
      & Wide_Character'Val (10)
      & "   end Print_{2};"
      & Wide_Character'Val (10)
      & "   package ZT  renames ZanyBlue.Text;"
      & Wide_Character'Val (10)
      & "   package ZTC renames ZanyBlue.Text.Catalogs;"
      & Wide_Character'Val (10)
      & Wide_Character'Val (10)
      & "   subtype Z is ZTC.ZBMCompile_Definition;"
      & Wide_Character'Val (10)
      & "      Locale      :{1}Locale_Type  := Current_Locale;"
      & Wide_Character'Val (10)
      & "      Catalog     :{1}Catalog_Type := Standard_Catalog) ret"
      & "urn Wide_String;      Locale      :{0}Locale_Type  := Curre"
      & "nt_Locale;"
      & Wide_Character'Val (10)
      & "      Catalog     :{0}Catalog_Type := Standard_Catalog) ret"
      & "urn String"
      & Wide_Character'Val (10)
      & "   is   function Standard_Catalog return ZanyBlue.Text.Cata"
      & "logs.Catalog_Type"
      & Wide_Character'Val (10)
      & "      renames ZanyBlue.Text.Formatting.Standard_Catalog;"
      & Wide_Character'Val (10)
      & "      Locale      :{1}Locale_Type  := Current_Locale;"
      & Wide_Character'Val (10)
      & "      Catalog     :{1}Catalog_Type := Standard_Catalog) ret"
      & "urn String;   use Ada.Wide_Text_IO;"
      & Wide_Character'Val (10)
      & "   use ZanyBlue.Text.Catalogs;"
      & Wide_Character'Val (10)
      & "   use ZanyBlue.Text.Locales;"
      & Wide_Character'Val (10)
      & "   use ZanyBlue.Text.Arguments;"
      & Wide_Character'Val (10)
      & "      Raise_Exception (E, Facility ({0}), Key ({1}),"
      & Wide_Character'Val (10)
      & "                       {3}, Locale, Catalog);"
      & Wide_Character'Val (10)
      & "   end Raise_{2};"
      & Wide_Character'Val (10)
      & "   use Ada.Text_IO;"
      & Wide_Character'Val (10)
      & "   use ZanyBlue.Text.Catalogs;"
      & Wide_Character'Val (10)
      & "   use ZanyBlue.Text.Locales;"
      & Wide_Character'Val (10)
      & "   use ZanyBlue.Text.Arguments;"
      & Wide_Character'Val (10)
      & "      return Format (Facility ({0}), Key ({1}),"
      & Wide_Character'Val (10)
      & "                     {3}, Locale, Catalog);"
      & Wide_Character'Val (10)
      & "   end Format_{2};"
      & Wide_Character'Val (10)
      & "with Ada.Wide_Text_IO;"
      & Wide_Character'Val (10)
      & "with ZanyBlue.Text.Catalogs;"
      & Wide_Character'Val (10)
      & "with ZanyBlue.Text.Locales;"
      & Wide_Character'Val (10)
      & "with ZanyBlue.Text.Arguments;"
      & Wide_Character'Val (10)
      & "with Ada.Exceptions;"
      & Wide_Character'Val (10)
      & "with ZanyBlue.Text.Catalogs;"
      & Wide_Character'Val (10)
      & "with ZanyBlue.Text.Locales;"
      & Wide_Character'Val (10)
      & "with ZanyBlue.Text.Arguments;"
      & Wide_Character'Val (10)
      & "with Ada.Text_IO;"
      & Wide_Character'Val (10)
      & "with ZanyBlue.Text.Catalogs;"
      & Wide_Character'Val (10)
      & "with ZanyBlue.Text.Locales;"
      & Wide_Character'Val (10)
      & "with ZanyBlue.Text.Arguments;"
      & Wide_Character'Val (10)
      & "   ----------{1:-^{2,*}}---"
      & Wide_Character'Val (10)
      & "   -- Format_{0} --"
      & Wide_Character'Val (10)
      & "   ----------{1:-^{2,*}}---"
      & Wide_Character'Val (10)
      & Wide_Character'Val (10)
      & "   function Format_{0} (   ---------{1:-^{2,*}}---"
      & Wide_Character'Val (10)
      & "   -- Print_{0} --"
      & Wide_Character'Val (10)
      & "   ---------{1:-^{2,*}}---"
      & Wide_Character'Val (10)
      & Wide_Character'Val (10)
      & "   procedure Print_{0} (""{0}"", line {1}, Error, Illegal f"
      & "ormat for key ""{2}"", character ''{3}'' at position {4}War"
      & "ning, no messages defined for the facility ""{0}"", no acce"
      & "ssor packages createdThis is ZBMCompile, Version {0,*}.{1,*"
      & "}.{2,*} {3} (r{4}) on {5,date} at {5,time}Warning, the key "
      & """{0}"" in the facility ""{1}"" is defined for the locale """
      & "{2}""Error, too many arguments for key ""{0}"" in facility "
      & """{1}"" for locale ""{2}""                    Locale_Index "
      & "=> {0,*}, Source_Locale_Index => {1,*}));Error, cannot disa"
      & "ble checks (-u) when generating accessors packages (-a)Skip"
      & "ping consistency checks for ""{0}"", base locale (""{1}"") "
      & "is not defined   procedure Raise_{0}"
      & Wide_Character'Val (10)
      & "     (E           :{1}Ada.Exceptions.Exception_Id;         "
      & "           Locale_Index => {0,*}, Source_Locale_Index => {1"
      & ",*}),""{0}"", line {1}, Error, type mis-match for argument "
      & "{2}: ""{3}"" and ""{4}""""{0}"", line {1}, invalid (non ISO"
      & "-644) character, use \u escapes instead   Pool : constant Z"
      & "T.Static_Message_Pool_Type := Pool_Data_1''Access;"
      & Wide_Character'Val (10)
      & """{0}"", line {1}, Error, Format not closed for key ""{2}"""
      & " at position {3}Error, no reference definition for the key "
      & """{0}"" in the facility ""{1}""Loaded total {0} characters,"
      & " stored {1} unique characters, {2}% saving   use ZanyBlue.T"
      & "ext.Arguments;"
      & Wide_Character'Val (10)
      & "   use ZanyBlue.Text.Formatting;"
      & Wide_Character'Val (10)
      & "Error, invalid accessor type name value, ""{0}"", for the -"
      & "G optionPerforming consistency checks for the accessor pack"
      & "age generation""{0}"", line {1}, duplicate key ""{2}"" prev"
      & "ious defined on line {3}                    Facility_Index "
      & "=> {0,*}, Key_Index => {1,*},ZBMCompile completed on {0,dat"
      & "e} at {0,time}, elapsed time {1}with ZanyBlue.Text.Argument"
      & "s;"
      & Wide_Character'Val (10)
      & "with ZanyBlue.Text.Formatting;"
      & Wide_Character'Val (10)
      & "Loaded {0} facilities, {1} keys, {2} locales and {3} messag"
      & "esDebug: Writing optimize catalog description to optimized."
      & "dumpCopyright (c) 2009-{0,*}, Michael Rohan.  All rights re"
      & "served   Messages : constant ZTC.ZBMCompile_List (1 .. {0,*"
      & "}) := (with ZanyBlue.Text.Catalogs;"
      & Wide_Character'Val (10)
      & "with ZanyBlue.Text.Formatting;"
      & Wide_Character'Val (10)
      & "   {0} : constant ZT.Constant_String_List (1 .. {1,*}) := ("
      & "                 {0} => Z''(First => {1,*}, Last => {2,*},C"
      & "reated the stamp file ""{0}"" containing the time stamp {1}"
      & "Error, the name ""{0}"" does not name a valid sizing target"
      & "Error, the -a and -G options should not be used togetherLoa"
      & "ded {0} messages for the facility ""{1}"" ({2} locales)Erro"
      & "r, the argument ""{0}"" is not a valid positive numberAccum"
      & "ulated messages for the locale ""{0}"" ({1} messages)Error,"
      & " the facility ""{0}"" is not a valid Ada identifier{0} erro"
      & "rs detected, forcing generation of Ada sourcesSuppressing b"
      & "ase message comments on accessor routinesPerforming consist"
      & "ency checks for the facility ""{0}""                 Z''(Fi"
      & "rst => {1,*}, Last => {2,*},Error, the key ""{0}"" is not a"
      & " valid Ada identifier   {0}_{1,*} : aliased constant Wide_S"
      & "tring := """"                   {1,*} => {0}_{1,*}''Access)"
      & ";                   {1,*} => {0}_{1,*}''Access,Optimizing t"
      & "he catalog for locale order accessGenerated accessor packag"
      & "e body ""{0}"" to ""{1}""Error, the option ''{0}'' requires"
      & " an argumentGenerated accessor package spec ""{0}"" to ""{1"
      & "}""Retained accessor package spec ""{0}"" in ""{1}""Retaine"
      & "d accessor package body ""{0}"" in ""{1}""Error, a package "
      & "name argument is requiredRetained the spec ""{0}"" in the f"
      & "ile ""{1}""Retained the body ""{0}"" in the file ""{1}""{0}"
      & " errors detected, no sources generated      Append (Argumen"
      & "ts, Argument{0,*});Error, invalid command line option ""{0}"
      & """Error, no source .properties files given   pragma Export "
      & "(C, Initialize, ""{0}"");Bootstrap loaded {0} messages for "
      & """{1}""Wrote the spec ""{0}"" to the file ""{1}""          "
      & "         {0}_{1,*}''Access);Wrote the body ""{0}"" to the f"
      & "ile ""{1}""      Argument{0,<3*} :{1}{2}''Class;   --  Defi"
      & "nition of access routines.                   {0}_{1,*}''Acc"
      & "ess,      & Wide_Character''Val ({0,*})""{0}"", line {1}, s"
      & "yntax error: {2}Error, failed to create ""{0}"": {1}Error, "
      & "no messages files processedOutput package spec file is ""{0"
      & "}""Output package body file is ""{0}""      Arguments : Arg"
      & "ument_List;begin  --  {0}"
      & Wide_Character'Val (10)
      & "   Initialize;              others => <>);Invalid command u"
      & "sage: {0}Stamp file created on {0}   --  No base messagepac"
      & "kage body {0} is"
      & Wide_Character'Val (10)
      & "{0}.{1}_Wide_Strings{0}.{1}_Wide_Prints{0}.{1}_Exceptionspa"
      & "ckage {0} is"
      & Wide_Character'Val (10)
      & "{0}.{1}_Strings   --  ↦{0}{1}{0}.{1}_Prints      & ""{0}"" "
      & "     & """";"
      & "";
   Pool : constant ZT.Static_Message_Pool_Type := Pool_Data_1'Access;

   Messages : constant ZTC.ZBMCompile_List (1 .. 215) := (
                 1 => Z'(First => 8623, Last => 8672,
                    Facility_Index => 1, Key_Index => 63,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, the key "{0}" is not a valid Ada identifier
                 2 => Z'(First => 6869, Last => 6939,
                    Facility_Index => 2, Key_Index => 34,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   Pool : constant ZT.Static_Message_Pool_Type := Pool_⤶
   --  ↦Data_1''Access;⏎
                 3 => Z'(First => 3931, Last => 4073,
                    Facility_Index => 6, Key_Index => 5,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Locale      :{1}Locale_Type  := Current_Locale;⏎
   --  ↦      Catalog     :{1}Catalog_Type := Standard_Catalog)⤶
   --  ↦;⏎
   --  ↦   pragma No_Return (Raise_{0});
                 4 => Z'(First => 10120, Last => 10134,
                    Facility_Index => 2, Key_Index => 101,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦package {0} is⏎
                 5 => Z'(First => 3314, Last => 3321,
                    Facility_Index => 2, Key_Index => 107,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦end {0};
                 6 => Z'(First => 8572, Last => 8622,
                    Facility_Index => 2, Key_Index => 62,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦                 Z''(First => {1,*}, Last => {2,*},
                 7 => Z'(First => 3314, Last => 3321,
                    Facility_Index => 6, Key_Index => 85,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦end {0};
                 8 => Z'(First => 9491, Last => 9528,
                    Facility_Index => 2, Key_Index => 82,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦                   {0}_{1,*}''Access);
                 9 => Z'(First => 1593, Last => 1600,
                    Facility_Index => 4, Key_Index => 105,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   begin
                 10 => Z'(First => 10043, Last => 10062,
                    Facility_Index => 4, Key_Index => 99,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦package body {0} is⏎
                 11 => Z'(First => 5005, Last => 5065,
                    Facility_Index => 7, Key_Index => 22,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   use ZanyBlue.Text.Catalogs;⏎
   --  ↦   use ZanyBlue.Text.Locales;⏎
                 12 => Z'(First => 5215, Last => 5327,
                    Facility_Index => 3, Key_Index => 19,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   use Ada.Text_IO;⏎
   --  ↦   use ZanyBlue.Text.Catalogs;⏎
   --  ↦   use ZanyBlue.Text.Locales;⏎
   --  ↦   use ZanyBlue.Text.Arguments;⏎
                 13 => Z'(First => 10120, Last => 10134,
                    Facility_Index => 4, Key_Index => 64,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦package {0} is⏎
                 14 => Z'(First => 8999, Last => 9043,
                    Facility_Index => 1, Key_Index => 70,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Retained accessor package spec "{0}" in "{1}"
                 15 => Z'(First => 9747, Last => 9780,
                    Facility_Index => 1, Key_Index => 87,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, failed to create "{0}": {1}
                 16 => Z'(First => 7183, Last => 7215,
                    Facility_Index => 7, Key_Index => 89,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   use ZanyBlue.Text.Formatting;⏎
                 17 => Z'(First => 5328, Last => 5438,
                    Facility_Index => 5, Key_Index => 16,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      return Format (Facility ({0}), Key ({1}),⏎
   --  ↦                     {3}, Locale, Catalog);⏎
   --  ↦   end Format_{2};⏎
                 18 => Z'(First => 7281, Last => 7345,
                    Facility_Index => 1, Key_Index => 40,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Performing consistency checks for the accessor package ⤶
   --  ↦generation
                 19 => Z'(First => 8133, Last => 8188,
                    Facility_Index => 1, Key_Index => 54,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, the -a and -G options should not be used togethe⤶
   --  ↦r
                 20 => Z'(First => 5762, Last => 5862,
                    Facility_Index => 5, Key_Index => 14,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   ----------{1:-^{2,*}}---⏎
   --  ↦   -- Format_{0} --⏎
   --  ↦   ----------{1:-^{2,*}}---⏎
   --  ↦⏎
   --  ↦   function Format_{0} (
                 21 => Z'(First => 7081, Last => 7150,
                    Facility_Index => 1, Key_Index => 37,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Loaded total {0} characters, stored {1} unique characte⤶
   --  ↦rs, {2}% saving
                 22 => Z'(First => 5005, Last => 5097,
                    Facility_Index => 6, Key_Index => 19,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   use ZanyBlue.Text.Catalogs;⏎
   --  ↦   use ZanyBlue.Text.Locales;⏎
   --  ↦   use ZanyBlue.Text.Arguments;⏎
                 23 => Z'(First => 2805, Last => 2983,
                    Facility_Index => 2, Key_Index => 8,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   function {0} (Index :{1}Positive) return Wide_String⤶
   --  ↦;⏎
   --  ↦   --  The name of the Index''th {0} item compiled.⏎
   --  ↦   --  This routine is normally only used by generated ⤶
   --  ↦accessor code.⏎
                 24 => Z'(First => 3785, Last => 3930,
                    Facility_Index => 2, Key_Index => 15,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   function {0}_Count return Natural;⏎
   --  ↦   --  Numnber of {0} items compiled.⏎
   --  ↦   --  This routine is normally only used by generated ⤶
   --  ↦accessor code.⏎
                 25 => Z'(First => 10191, Last => 10201,
                    Facility_Index => 2, Key_Index => 30,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      & "";
                 26 => Z'(First => 10150, Last => 10160,
                    Facility_Index => 2, Key_Index => 103,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   --  ↦{0}
                 27 => Z'(First => 5657, Last => 5761,
                    Facility_Index => 3, Key_Index => 20,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦with Ada.Text_IO;⏎
   --  ↦with ZanyBlue.Text.Catalogs;⏎
   --  ↦with ZanyBlue.Text.Locales;⏎
   --  ↦with ZanyBlue.Text.Arguments;⏎
                 28 => Z'(First => 3314, Last => 3321,
                    Facility_Index => 4, Key_Index => 85,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦end {0};
                 29 => Z'(First => 10083, Last => 10101,
                    Facility_Index => 4, Key_Index => 100,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0}.{1}_Wide_Prints
                 30 => Z'(First => 5439, Last => 5518,
                    Facility_Index => 4, Key_Index => 17,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦with Ada.Wide_Text_IO;⏎
   --  ↦with ZanyBlue.Text.Catalogs;⏎
   --  ↦with ZanyBlue.Text.Locales;⏎
                 31 => Z'(First => 5005, Last => 5097,
                    Facility_Index => 7, Key_Index => 19,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   use ZanyBlue.Text.Catalogs;⏎
   --  ↦   use ZanyBlue.Text.Locales;⏎
   --  ↦   use ZanyBlue.Text.Arguments;⏎
                 32 => Z'(First => 9254, Last => 9293,
                    Facility_Index => 4, Key_Index => 76,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Append (Arguments, Argument{0,*});
                 33 => Z'(First => 3314, Last => 3321,
                    Facility_Index => 3, Key_Index => 85,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦end {0};
                 34 => Z'(First => 1593, Last => 1600,
                    Facility_Index => 3, Key_Index => 105,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   begin
                 35 => Z'(First => 10043, Last => 10062,
                    Facility_Index => 3, Key_Index => 99,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦package body {0} is⏎
                 36 => Z'(First => 5439, Last => 5548,
                    Facility_Index => 4, Key_Index => 20,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦with Ada.Wide_Text_IO;⏎
   --  ↦with ZanyBlue.Text.Catalogs;⏎
   --  ↦with ZanyBlue.Text.Locales;⏎
   --  ↦with ZanyBlue.Text.Arguments;⏎
                 37 => Z'(First => 9213, Last => 9253,
                    Facility_Index => 1, Key_Index => 75,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0} errors detected, no sources generated
                 38 => Z'(First => 10043, Last => 10062,
                    Facility_Index => 7, Key_Index => 99,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦package body {0} is⏎
                 39 => Z'(First => 5961, Last => 6047,
                    Facility_Index => 1, Key_Index => 21,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦"{0}", line {1}, Error, Illegal format for key "{2}", c⤶
   --  ↦haracter ''{3}'' at position {4}
                 40 => Z'(First => 10043, Last => 10062,
                    Facility_Index => 5, Key_Index => 99,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦package body {0} is⏎
                 41 => Z'(First => 7598, Last => 7658,
                    Facility_Index => 1, Key_Index => 45,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Loaded {0} facilities, {1} keys, {2} locales and {3} me⤶
   --  ↦ssages
                 42 => Z'(First => 8412, Last => 8465,
                    Facility_Index => 1, Key_Index => 59,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0} errors detected, forcing generation of Ada sources
                 43 => Z'(First => 7901, Last => 7959,
                    Facility_Index => 2, Key_Index => 50,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   {0} : constant ZT.Constant_String_List (1 .. {1,*}) ⤶
   --  ↦:= (
                 44 => Z'(First => 5005, Last => 5065,
                    Facility_Index => 6, Key_Index => 22,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   use ZanyBlue.Text.Catalogs;⏎
   --  ↦   use ZanyBlue.Text.Locales;⏎
                 45 => Z'(First => 3154, Last => 3322,
                    Facility_Index => 2, Key_Index => 10,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   ---{3:-^{4,*}}----⏎
   --  ↦   --- {0} --⏎
   --  ↦   ---{3:-^{4,*}}----⏎
   --  ↦⏎
   --  ↦   function {0} (Index :{1}Positive) return Wide_String⤶
   --  ↦ is⏎
   --  ↦   begin⏎
   --  ↦      return {2} (Index).all;⏎
   --  ↦   end {0};⏎
                 46 => Z'(First => 2202, Last => 2409,
                    Facility_Index => 3, Key_Index => 5,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Destination :{1}File_Type    := Current_Output;⏎
   --  ↦      With_NL     :{1}Boolean      := True;⏎
   --  ↦      Locale      :{1}Locale_Type  := Current_Locale;⏎
   --  ↦      Catalog     :{1}Catalog_Type := Standard_Catalog)⤶
   --  ↦;
                 47 => Z'(First => 5863, Last => 5960,
                    Facility_Index => 3, Key_Index => 14,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   ---------{1:-^{2,*}}---⏎
   --  ↦   -- Print_{0} --⏎
   --  ↦   ---------{1:-^{2,*}}---⏎
   --  ↦⏎
   --  ↦   procedure Print_{0} (
                 48 => Z'(First => 9881, Last => 9912,
                    Facility_Index => 3, Key_Index => 92,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Arguments : Argument_List;
                 49 => Z'(First => 3323, Last => 3479,
                    Facility_Index => 4, Key_Index => 11,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦--  -*- encoding: utf-8 -*-⏎
   --  ↦--⏎
   --  ↦--  Ada implementation generated by ZBMCompile, V{0}.{1⤶
   --  ↦}.{2} - {3}.⏎
   --  ↦--  This is a generated file and should not be edited.⏎⤶
   --  ↦--⏎
                 50 => Z'(First => 10164, Last => 10177,
                    Facility_Index => 3, Key_Index => 100,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0}.{1}_Prints
                 51 => Z'(First => 8815, Last => 8860,
                    Facility_Index => 1, Key_Index => 66,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Optimizing the catalog for locale order access
                 52 => Z'(First => 7537, Last => 7597,
                    Facility_Index => 4, Key_Index => 44,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦with ZanyBlue.Text.Arguments;⏎
   --  ↦with ZanyBlue.Text.Formatting;⏎
                 53 => Z'(First => 9254, Last => 9293,
                    Facility_Index => 5, Key_Index => 76,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Append (Arguments, Argument{0,*});
                 54 => Z'(First => 9089, Last => 9130,
                    Facility_Index => 1, Key_Index => 72,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, a package name argument is required
                 55 => Z'(First => 7151, Last => 7215,
                    Facility_Index => 4, Key_Index => 38,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   use ZanyBlue.Text.Arguments;⏎
   --  ↦   use ZanyBlue.Text.Formatting;⏎
                 56 => Z'(First => 7567, Last => 7597,
                    Facility_Index => 7, Key_Index => 93,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦with ZanyBlue.Text.Formatting;⏎
                 57 => Z'(First => 6285, Last => 6358,
                    Facility_Index => 1, Key_Index => 26,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, too many arguments for key "{0}" in facility "{1⤶
   --  ↦}" for locale "{2}"
                 58 => Z'(First => 5462, Last => 5548,
                    Facility_Index => 5, Key_Index => 20,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦with ZanyBlue.Text.Catalogs;⏎
   --  ↦with ZanyBlue.Text.Locales;⏎
   --  ↦with ZanyBlue.Text.Arguments;⏎
                 59 => Z'(First => 9970, Last => 9995,
                    Facility_Index => 1, Key_Index => 96,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Invalid command usage: {0}
                 60 => Z'(First => 5863, Last => 5960,
                    Facility_Index => 4, Key_Index => 14,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   ---------{1:-^{2,*}}---⏎
   --  ↦   -- Print_{0} --⏎
   --  ↦   ---------{1:-^{2,*}}---⏎
   --  ↦⏎
   --  ↦   procedure Print_{0} (
                 61 => Z'(First => 7011, Last => 7080,
                    Facility_Index => 1, Key_Index => 36,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, no reference definition for the key "{0}" in the⤶
   --  ↦ facility "{1}"
                 62 => Z'(First => 8245, Last => 8300,
                    Facility_Index => 1, Key_Index => 56,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, the argument "{0}" is not a valid positive numbe⤶
   --  ↦r
                 63 => Z'(First => 9567, Last => 9603,
                    Facility_Index => 5, Key_Index => 50,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Argument{0,<3*} :{1}{2}''Class;
                 64 => Z'(First => 7841, Last => 7900,
                    Facility_Index => 2, Key_Index => 49,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦with ZanyBlue.Text.Catalogs;⏎
   --  ↦with ZanyBlue.Text.Formatting;⏎
                 65 => Z'(First => 6797, Last => 6868,
                    Facility_Index => 1, Key_Index => 33,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦"{0}", line {1}, invalid (non ISO-644) character, use \⤶
   --  ↦u escapes instead
                 66 => Z'(First => 1773, Last => 1988,
                    Facility_Index => 2, Key_Index => 3,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   ----------------⏎
   --  ↦   -- Initialize --⏎
   --  ↦   ----------------⏎
   --  ↦⏎
   --  ↦   procedure Initialize (Catalog :{0}ZTC.Catalog_Type :⤶
   --  ↦= Standard_Catalog) is⏎
   --  ↦      pragma Unreferenced (Catalog);⏎
   --  ↦   begin⏎
   --  ↦      null;⏎
   --  ↦   end Initialize;⏎
                 67 => Z'(First => 4727, Last => 4855,
                    Facility_Index => 2, Key_Index => 18,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   function Standard_Catalog return ZanyBlue.Text.Catal⤶
   --  ↦ogs.Catalog_Type⏎
   --  ↦      renames ZanyBlue.Text.Formatting.Standard_Catalog⤶
   --  ↦;⏎
                 68 => Z'(First => 2087, Last => 2201,
                    Facility_Index => 6, Key_Index => 4,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Locale      :{0}Locale_Type  := Current_Locale;⏎
   --  ↦      Catalog     :{0}Catalog_Type := Standard_Catalog)⤶
   --  ↦⏎
   --  ↦   is
                 69 => Z'(First => 9641, Last => 9677,
                    Facility_Index => 2, Key_Index => 85,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦                   {0}_{1,*}''Access,
                 70 => Z'(First => 9567, Last => 9603,
                    Facility_Index => 6, Key_Index => 50,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Argument{0,<3*} :{1}{2}''Class;
                 71 => Z'(First => 3314, Last => 3321,
                    Facility_Index => 2, Key_Index => 106,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦end {0};
                 72 => Z'(First => 4598, Last => 4726,
                    Facility_Index => 7, Key_Index => 4,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Locale      :{0}Locale_Type  := Current_Locale;⏎
   --  ↦      Catalog     :{0}Catalog_Type := Standard_Catalog)⤶
   --  ↦ return String⏎
   --  ↦   is
                 73 => Z'(First => 4208, Last => 4339,
                    Facility_Index => 3, Key_Index => 16,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Write_Message (Destination, Facility ({0}), Key (⤶
   --  ↦{1}),⏎
   --  ↦                     {3}, With_NL, Locale, Catalog);⏎
   --  ↦   end Print_{2};⏎
                 74 => Z'(First => 5762, Last => 5862,
                    Facility_Index => 7, Key_Index => 14,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   ----------{1:-^{2,*}}---⏎
   --  ↦   -- Format_{0} --⏎
   --  ↦   ----------{1:-^{2,*}}---⏎
   --  ↦⏎
   --  ↦   function Format_{0} (
                 75 => Z'(First => 7183, Last => 7215,
                    Facility_Index => 4, Key_Index => 89,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   use ZanyBlue.Text.Formatting;⏎
                 76 => Z'(First => 3314, Last => 3321,
                    Facility_Index => 4, Key_Index => 104,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦end {0};
                 77 => Z'(First => 7151, Last => 7215,
                    Facility_Index => 7, Key_Index => 38,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   use ZanyBlue.Text.Arguments;⏎
   --  ↦   use ZanyBlue.Text.Formatting;⏎
                 78 => Z'(First => 9414, Last => 9452,
                    Facility_Index => 1, Key_Index => 80,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Bootstrap loaded {0} messages for "{1}"
                 79 => Z'(First => 10120, Last => 10134,
                    Facility_Index => 3, Key_Index => 64,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦package {0} is⏎
                 80 => Z'(First => 9044, Last => 9088,
                    Facility_Index => 1, Key_Index => 71,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Retained accessor package body "{0}" in "{1}"
                 81 => Z'(First => 9294, Last => 9333,
                    Facility_Index => 1, Key_Index => 77,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, invalid command line option "{0}"
                 82 => Z'(First => 5462, Last => 5518,
                    Facility_Index => 5, Key_Index => 17,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦with ZanyBlue.Text.Catalogs;⏎
   --  ↦with ZanyBlue.Text.Locales;⏎
                 83 => Z'(First => 7346, Last => 7410,
                    Facility_Index => 1, Key_Index => 41,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦"{0}", line {1}, duplicate key "{2}" previous defined o⤶
   --  ↦n line {3}
                 84 => Z'(First => 8189, Last => 8244,
                    Facility_Index => 1, Key_Index => 55,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Loaded {0} messages for the facility "{1}" ({2} locales⤶
   --  ↦)
                 85 => Z'(First => 4340, Last => 4468,
                    Facility_Index => 2, Key_Index => 17,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   package ZT  renames ZanyBlue.Text;⏎
   --  ↦   package ZTC renames ZanyBlue.Text.Catalogs;⏎
   --  ↦⏎
   --  ↦   subtype Z is ZTC.ZBMCompile_Definition;⏎
                 86 => Z'(First => 3323, Last => 3479,
                    Facility_Index => 6, Key_Index => 11,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦--  -*- encoding: utf-8 -*-⏎
   --  ↦--⏎
   --  ↦--  Ada implementation generated by ZBMCompile, V{0}.{1⤶
   --  ↦}.{2} - {3}.⏎
   --  ↦--  This is a generated file and should not be edited.⏎⤶
   --  ↦--⏎
                 87 => Z'(First => 10043, Last => 10062,
                    Facility_Index => 6, Key_Index => 99,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦package body {0} is⏎
                 88 => Z'(First => 1593, Last => 1600,
                    Facility_Index => 6, Key_Index => 105,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   begin
                 89 => Z'(First => 8722, Last => 8768,
                    Facility_Index => 2, Key_Index => 65,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦                   {1,*} => {0}_{1,*}''Access);
                 90 => Z'(First => 10150, Last => 10163,
                    Facility_Index => 2, Key_Index => 102,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   --  ↦{0}{1}
                 91 => Z'(First => 5328, Last => 5438,
                    Facility_Index => 7, Key_Index => 16,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      return Format (Facility ({0}), Key ({1}),⏎
   --  ↦                     {3}, Locale, Catalog);⏎
   --  ↦   end Format_{2};⏎
                 92 => Z'(First => 3323, Last => 3479,
                    Facility_Index => 7, Key_Index => 11,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦--  -*- encoding: utf-8 -*-⏎
   --  ↦--⏎
   --  ↦--  Ada implementation generated by ZBMCompile, V{0}.{1⤶
   --  ↦}.{2} - {3}.⏎
   --  ↦--  This is a generated file and should not be edited.⏎⤶
   --  ↦--⏎
                 93 => Z'(First => 4208, Last => 4339,
                    Facility_Index => 4, Key_Index => 16,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Write_Message (Destination, Facility ({0}), Key (⤶
   --  ↦{1}),⏎
   --  ↦                     {3}, With_NL, Locale, Catalog);⏎
   --  ↦   end Print_{2};⏎
                 94 => Z'(First => 8907, Last => 8952,
                    Facility_Index => 1, Key_Index => 68,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, the option ''{0}'' requires an argument
                 95 => Z'(First => 9881, Last => 9912,
                    Facility_Index => 5, Key_Index => 92,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Arguments : Argument_List;
                 96 => Z'(First => 6433, Last => 6505,
                    Facility_Index => 1, Key_Index => 28,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, cannot disable checks (-u) when generating acces⤶
   --  ↦sors packages (-a)
                 97 => Z'(First => 6598, Last => 6601,
                    Facility_Index => 1, Key_Index => 109,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0}⏎
                 98 => Z'(First => 10063, Last => 10082,
                    Facility_Index => 5, Key_Index => 100,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0}.{1}_Wide_Strings
                 99 => Z'(First => 7659, Last => 7719,
                    Facility_Index => 1, Key_Index => 46,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Debug: Writing optimize catalog description to optimize⤶
   --  ↦d.dump
                 100 => Z'(First => 8018, Last => 8075,
                    Facility_Index => 1, Key_Index => 52,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Created the stamp file "{0}" containing the time stamp ⤶
   --  ↦{1}
                 101 => Z'(First => 2611, Last => 2804,
                    Facility_Index => 2, Key_Index => 7,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   procedure Initialize (⏎
   --  ↦      Catalog :{0}ZanyBlue.Text.Catalogs.Catalog_Type :⤶
   --  ↦= Standard_Catalog);⏎
   --  ↦   --  The catalog initialization routine: load the com⤶
   --  ↦piled messages into⏎
   --  ↦   --  a catalog.
                 102 => Z'(First => 10178, Last => 10190,
                    Facility_Index => 2, Key_Index => 22,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      & "{0}"
                 103 => Z'(First => 5549, Last => 5626,
                    Facility_Index => 6, Key_Index => 17,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦with Ada.Exceptions;⏎
   --  ↦with ZanyBlue.Text.Catalogs;⏎
   --  ↦with ZanyBlue.Text.Locales;⏎
                 104 => Z'(First => 3480, Last => 3635,
                    Facility_Index => 2, Key_Index => 13,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦--  -*- encoding: utf-8 -*-⏎
   --  ↦--⏎
   --  ↦--  Ada specification generated by ZBMCompile, V{0}.{1}⤶
   --  ↦.{2} - {3}.⏎
   --  ↦--  This is a generated file and should not be edited.⏎⤶
   --  ↦--⏎
                 105 => Z'(First => 3636, Last => 3784,
                    Facility_Index => 6, Key_Index => 14,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   ---------{1:-^{2,*}}---⏎
   --  ↦   -- Raise_{0} --⏎
   --  ↦   ---------{1:-^{2,*}}---⏎
   --  ↦⏎
   --  ↦   procedure Raise_{0} (⏎
   --  ↦      E           :{3}Ada.Exceptions.Exception_Id;
                 106 => Z'(First => 9942, Last => 9969,
                    Facility_Index => 2, Key_Index => 95,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦              others => <>);
                 107 => Z'(First => 5215, Last => 5295,
                    Facility_Index => 3, Key_Index => 22,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   use Ada.Text_IO;⏎
   --  ↦   use ZanyBlue.Text.Catalogs;⏎
   --  ↦   use ZanyBlue.Text.Locales;⏎
                 108 => Z'(First => 7567, Last => 7597,
                    Facility_Index => 4, Key_Index => 93,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦with ZanyBlue.Text.Formatting;⏎
                 109 => Z'(First => 4980, Last => 5097,
                    Facility_Index => 4, Key_Index => 19,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   use Ada.Wide_Text_IO;⏎
   --  ↦   use ZanyBlue.Text.Catalogs;⏎
   --  ↦   use ZanyBlue.Text.Locales;⏎
   --  ↦   use ZanyBlue.Text.Arguments;⏎
                 110 => Z'(First => 7537, Last => 7597,
                    Facility_Index => 7, Key_Index => 44,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦with ZanyBlue.Text.Arguments;⏎
   --  ↦with ZanyBlue.Text.Formatting;⏎
                 111 => Z'(First => 3314, Last => 3321,
                    Facility_Index => 7, Key_Index => 104,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦end {0};
                 112 => Z'(First => 9815, Last => 9847,
                    Facility_Index => 1, Key_Index => 90,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Output package spec file is "{0}"
                 113 => Z'(First => 9254, Last => 9293,
                    Facility_Index => 3, Key_Index => 76,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Append (Arguments, Argument{0,*});
                 114 => Z'(First => 7567, Last => 7597,
                    Facility_Index => 3, Key_Index => 93,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦with ZanyBlue.Text.Formatting;⏎
                 115 => Z'(First => 8861, Last => 8906,
                    Facility_Index => 1, Key_Index => 67,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Generated accessor package body "{0}" to "{1}"
                 116 => Z'(First => 4980, Last => 5065,
                    Facility_Index => 4, Key_Index => 22,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   use Ada.Wide_Text_IO;⏎
   --  ↦   use ZanyBlue.Text.Catalogs;⏎
   --  ↦   use ZanyBlue.Text.Locales;⏎
                 117 => Z'(First => 9131, Last => 9171,
                    Facility_Index => 1, Key_Index => 73,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Retained the spec "{0}" in the file "{1}"
                 118 => Z'(First => 8466, Last => 8519,
                    Facility_Index => 1, Key_Index => 60,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Suppressing base message comments on accessor routines
                 119 => Z'(First => 7183, Last => 7215,
                    Facility_Index => 5, Key_Index => 89,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   use ZanyBlue.Text.Formatting;⏎
                 120 => Z'(First => 4074, Last => 4207,
                    Facility_Index => 5, Key_Index => 4,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Locale      :{0}Locale_Type  := Current_Locale;⏎
   --  ↦      Catalog     :{0}Catalog_Type := Standard_Catalog)⤶
   --  ↦ return Wide_String⏎
   --  ↦   is
                 121 => Z'(First => 9996, Last => 10020,
                    Facility_Index => 1, Key_Index => 97,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Stamp file created on {0}
                 122 => Z'(First => 7537, Last => 7597,
                    Facility_Index => 5, Key_Index => 44,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦with ZanyBlue.Text.Arguments;⏎
   --  ↦with ZanyBlue.Text.Formatting;⏎
                 123 => Z'(First => 8301, Last => 8356,
                    Facility_Index => 1, Key_Index => 57,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Accumulated messages for the locale "{0}" ({1} messages⤶
   --  ↦)
                 124 => Z'(First => 6359, Last => 6432,
                    Facility_Index => 2, Key_Index => 27,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦                    Locale_Index => {0,*}, Source_Local⤶
   --  ↦e_Index => {1,*}));
                 125 => Z'(First => 7411, Last => 7474,
                    Facility_Index => 2, Key_Index => 42,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦                    Facility_Index => {0,*}, Key_Index ⤶
   --  ↦=> {1,*},
                 126 => Z'(First => 7781, Last => 7840,
                    Facility_Index => 2, Key_Index => 48,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   Messages : constant ZTC.ZBMCompile_List (1 .. {0,*})⤶
   --  ↦ := (
                 127 => Z'(First => 1454, Last => 1772,
                    Facility_Index => 2, Key_Index => 2,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   ----------------⏎
   --  ↦   -- Initialize --⏎
   --  ↦   ----------------⏎
   --  ↦⏎
   --  ↦   procedure Initialize (Catalog :{0}ZTC.Catalog_Type :⤶
   --  ↦= Standard_Catalog) is⏎
   --  ↦   begin⏎
   --  ↦      ZTC.Initialize (Catalog, Messages, Pool, Faciliti⤶
   --  ↦es, Keys, Locales,⏎
   --  ↦                      "{1}",⏎
   --  ↦                      Pool_Data_1''Length, {2});⏎
   --  ↦   end Initialize;⏎
                 128 => Z'(First => 5549, Last => 5656,
                    Facility_Index => 6, Key_Index => 20,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦with Ada.Exceptions;⏎
   --  ↦with ZanyBlue.Text.Catalogs;⏎
   --  ↦with ZanyBlue.Text.Locales;⏎
   --  ↦with ZanyBlue.Text.Arguments;⏎
                 129 => Z'(First => 9604, Last => 9640,
                    Facility_Index => 2, Key_Index => 84,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   --  Definition of access routines.
                 130 => Z'(First => 7567, Last => 7597,
                    Facility_Index => 6, Key_Index => 93,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦with ZanyBlue.Text.Formatting;⏎
                 131 => Z'(First => 9254, Last => 9293,
                    Facility_Index => 6, Key_Index => 76,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Append (Arguments, Argument{0,*});
                 132 => Z'(First => 5462, Last => 5548,
                    Facility_Index => 7, Key_Index => 20,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦with ZanyBlue.Text.Catalogs;⏎
   --  ↦with ZanyBlue.Text.Locales;⏎
   --  ↦with ZanyBlue.Text.Arguments;⏎
                 133 => Z'(First => 4856, Last => 4979,
                    Facility_Index => 7, Key_Index => 5,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Locale      :{1}Locale_Type  := Current_Locale;⏎
   --  ↦      Catalog     :{1}Catalog_Type := Standard_Catalog)⤶
   --  ↦ return String;
                 134 => Z'(First => 5839, Last => 5862,
                    Facility_Index => 7, Key_Index => 30,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   function Format_{0} (
                 135 => Z'(First => 5657, Last => 5731,
                    Facility_Index => 3, Key_Index => 17,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦with Ada.Text_IO;⏎
   --  ↦with ZanyBlue.Text.Catalogs;⏎
   --  ↦with ZanyBlue.Text.Locales;⏎
                 136 => Z'(First => 9254, Last => 9293,
                    Facility_Index => 7, Key_Index => 76,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Append (Arguments, Argument{0,*});
                 137 => Z'(First => 2202, Last => 2409,
                    Facility_Index => 4, Key_Index => 5,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Destination :{1}File_Type    := Current_Output;⏎
   --  ↦      With_NL     :{1}Boolean      := True;⏎
   --  ↦      Locale      :{1}Locale_Type  := Current_Locale;⏎
   --  ↦      Catalog     :{1}Catalog_Type := Standard_Catalog)⤶
   --  ↦;
                 138 => Z'(First => 10135, Last => 10149,
                    Facility_Index => 7, Key_Index => 100,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0}.{1}_Strings
                 139 => Z'(First => 9453, Last => 9490,
                    Facility_Index => 1, Key_Index => 81,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Wrote the spec "{0}" to the file "{1}"
                 140 => Z'(First => 3314, Last => 3321,
                    Facility_Index => 7, Key_Index => 85,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦end {0};
                 141 => Z'(First => 9334, Last => 9373,
                    Facility_Index => 1, Key_Index => 78,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, no source .properties files given
                 142 => Z'(First => 10120, Last => 10134,
                    Facility_Index => 5, Key_Index => 64,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦package {0} is⏎
                 143 => Z'(First => 6129, Last => 6208,
                    Facility_Index => 1, Key_Index => 24,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦This is ZBMCompile, Version {0,*}.{1,*}.{2,*} {3} (r{4}⤶
   --  ↦) on {5,date} at {5,time}
                 144 => Z'(First => 3314, Last => 3321,
                    Facility_Index => 5, Key_Index => 104,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦end {0};
                 145 => Z'(First => 1, Last => 1453,
                    Facility_Index => 1, Key_Index => 1,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Usage: zbmcompile [ options ] package facility⏎
   --  ↦where available options are⏎
   --  ↦  -q             Quiet mode⏎
   --  ↦  -v             Verbose mode⏎
   --  ↦  -m             Always include argument modes in gener⤶
   --  ↦ated code⏎
   --  ↦  -p             Number list entries (gnatcheck +RPosit⤶
   --  ↦ional_Components)⏎
   --  ↦  -D             Debug mode (dump the catalog definitio⤶
   --  ↦ns)⏎
   --  ↦  -d directory   Directory containing facility (default⤶
   --  ↦s to ".")⏎
   --  ↦  -e extension   Properties extension (default "propert⤶
   --  ↦ies")⏎
   --  ↦  -i             Include initialization call in body⏎
   --  ↦  -O             Optimize string pool for locale based ⤶
   --  ↦access⏎
   --  ↦  -g             Disable locale based access optimizati⤶
   --  ↦on (default)⏎
   --  ↦  -B             Compile only the base locale⏎
   --  ↦  -u             Disable consistency checked (unchecked⤶
   --  ↦ mode)⏎
   --  ↦  -L locale      Compile only the named locale, e.g., "⤶
   --  ↦fr", "fr_FR"⏎
   --  ↦  -r locale      Define reference (base) locale for con⤶
   --  ↦sistency checking⏎
   --  ↦  -s locale      Define source root locale⏎
   --  ↦  -S stamp-file  File to always create/update (contains⤶
   --  ↦ a timestamp)⏎
   --  ↦  -x name        Define external name for Initialize pr⤶
   --  ↦ocedure⏎
   --  ↦  -F             Force generation, ignoring errors.  Ge⤶
   --  ↦nerated code might⏎
   --  ↦                 not compile⏎
   --  ↦  -a             Generate all accessors ([w]prints, [w]⤶
   --  ↦strings, exceptions)⏎
   --  ↦  -G name        Generate named accessor ([w]prints, [w⤶
   --  ↦]strings, exceptions)⏎
   --  ↦  -C             Disable comments on generated accessor⤶
   --  ↦ routines⏎
   --  ↦  -T item size   Set the size of an Ada output limit: p⤶
   --  ↦ool or comment
                 146 => Z'(First => 3323, Last => 3479,
                    Facility_Index => 5, Key_Index => 11,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦--  -*- encoding: utf-8 -*-⏎
   --  ↦--⏎
   --  ↦--  Ada implementation generated by ZBMCompile, V{0}.{1⤶
   --  ↦}.{2} - {3}.⏎
   --  ↦--  This is a generated file and should not be edited.⏎⤶
   --  ↦--⏎
                 147 => Z'(First => 7216, Last => 7280,
                    Facility_Index => 1, Key_Index => 39,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, invalid accessor type name value, "{0}", for the⤶
   --  ↦ -G option
                 148 => Z'(First => 10021, Last => 10042,
                    Facility_Index => 2, Key_Index => 98,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   --  No base message
                 149 => Z'(First => 3314, Last => 3321,
                    Facility_Index => 6, Key_Index => 104,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦end {0};
                 150 => Z'(First => 8673, Last => 8721,
                    Facility_Index => 2, Key_Index => 64,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   {0}_{1,*} : aliased constant Wide_String := ""
                 151 => Z'(First => 10120, Last => 10134,
                    Facility_Index => 6, Key_Index => 64,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦package {0} is⏎
                 152 => Z'(First => 3323, Last => 3479,
                    Facility_Index => 3, Key_Index => 11,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦--  -*- encoding: utf-8 -*-⏎
   --  ↦--⏎
   --  ↦--  Ada implementation generated by ZBMCompile, V{0}.{1⤶
   --  ↦}.{2} - {3}.⏎
   --  ↦--  This is a generated file and should not be edited.⏎⤶
   --  ↦--⏎
                 153 => Z'(First => 5462, Last => 5518,
                    Facility_Index => 7, Key_Index => 17,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦with ZanyBlue.Text.Catalogs;⏎
   --  ↦with ZanyBlue.Text.Locales;⏎
                 154 => Z'(First => 9713, Last => 9746,
                    Facility_Index => 1, Key_Index => 86,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦"{0}", line {1}, syntax error: {2}
                 155 => Z'(First => 7183, Last => 7215,
                    Facility_Index => 3, Key_Index => 89,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   use ZanyBlue.Text.Formatting;⏎
                 156 => Z'(First => 9567, Last => 9603,
                    Facility_Index => 4, Key_Index => 50,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Argument{0,<3*} :{1}{2}''Class;
                 157 => Z'(First => 8953, Last => 8998,
                    Facility_Index => 1, Key_Index => 69,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Generated accessor package spec "{0}" to "{1}"
                 158 => Z'(First => 9529, Last => 9566,
                    Facility_Index => 1, Key_Index => 83,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Wrote the body "{0}" to the file "{1}"
                 159 => Z'(First => 7567, Last => 7597,
                    Facility_Index => 5, Key_Index => 93,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦with ZanyBlue.Text.Formatting;⏎
                 160 => Z'(First => 6048, Last => 6128,
                    Facility_Index => 1, Key_Index => 23,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Warning, no messages defined for the facility "{0}", no⤶
   --  ↦ accessor packages created
                 161 => Z'(First => 5839, Last => 5862,
                    Facility_Index => 5, Key_Index => 30,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   function Format_{0} (
                 162 => Z'(First => 6506, Last => 6578,
                    Facility_Index => 1, Key_Index => 29,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Skipping consistency checks for "{0}", base locale ("{1⤶
   --  ↦}") is not defined
                 163 => Z'(First => 7720, Last => 7780,
                    Facility_Index => 1, Key_Index => 47,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Copyright (c) 2009-{0,*}, Michael Rohan.  All rights re⤶
   --  ↦served
                 164 => Z'(First => 2984, Last => 3153,
                    Facility_Index => 2, Key_Index => 9,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   ---{2:-^{3,*}}----------⏎
   --  ↦   --- {0}_Count --⏎
   --  ↦   ---{2:-^{3,*}}----------⏎
   --  ↦⏎
   --  ↦   function {0}_Count return Natural is⏎
   --  ↦   begin⏎
   --  ↦      return {1}''Length;⏎
   --  ↦   end {0}_Count;⏎
                 165 => Z'(First => 8076, Last => 8132,
                    Facility_Index => 1, Key_Index => 53,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, the name "{0}" does not name a valid sizing targ⤶
   --  ↦et
                 166 => Z'(First => 7151, Last => 7215,
                    Facility_Index => 5, Key_Index => 38,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   use ZanyBlue.Text.Arguments;⏎
   --  ↦   use ZanyBlue.Text.Formatting;⏎
                 167 => Z'(First => 6652, Last => 6724,
                    Facility_Index => 2, Key_Index => 31,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦                    Locale_Index => {0,*}, Source_Local⤶
   --  ↦e_Index => {1,*}),
                 168 => Z'(First => 7151, Last => 7215,
                    Facility_Index => 6, Key_Index => 38,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   use ZanyBlue.Text.Arguments;⏎
   --  ↦   use ZanyBlue.Text.Formatting;⏎
                 169 => Z'(First => 7537, Last => 7597,
                    Facility_Index => 6, Key_Index => 44,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦with ZanyBlue.Text.Arguments;⏎
   --  ↦with ZanyBlue.Text.Formatting;⏎
                 170 => Z'(First => 2410, Last => 2610,
                    Facility_Index => 2, Key_Index => 6,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   --  Since the body calls the Initialize procedure, t⤶
   --  ↦his package need⏎
   --  ↦   --  only be with''ed.  Suppress any compiler warning⤶
   --  ↦s about an unused⏎
   --  ↦   --  with''ed package.⏎
   --  ↦   pragma Warnings (Off, {0});⏎
                 171 => Z'(First => 5098, Last => 5214,
                    Facility_Index => 6, Key_Index => 16,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Raise_Exception (E, Facility ({0}), Key ({1}),⏎
   --  ↦                       {3}, Locale, Catalog);⏎
   --  ↦   end Raise_{2};⏎
                 172 => Z'(First => 3323, Last => 3479,
                    Facility_Index => 2, Key_Index => 12,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦--  -*- encoding: utf-8 -*-⏎
   --  ↦--⏎
   --  ↦--  Ada implementation generated by ZBMCompile, V{0}.{1⤶
   --  ↦}.{2} - {3}.⏎
   --  ↦--  This is a generated file and should not be edited.⏎⤶
   --  ↦--⏎
                 173 => Z'(First => 6579, Last => 6651,
                    Facility_Index => 6, Key_Index => 30,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   procedure Raise_{0}⏎
   --  ↦     (E           :{1}Ada.Exceptions.Exception_Id;
                 174 => Z'(First => 9374, Last => 9413,
                    Facility_Index => 2, Key_Index => 79,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   pragma Export (C, Initialize, "{0}");
                 175 => Z'(First => 9913, Last => 9941,
                    Facility_Index => 2, Key_Index => 94,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦begin  --  {0}⏎
   --  ↦   Initialize;
                 176 => Z'(First => 7183, Last => 7215,
                    Facility_Index => 6, Key_Index => 89,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   use ZanyBlue.Text.Formatting;⏎
                 177 => Z'(First => 9567, Last => 9603,
                    Facility_Index => 3, Key_Index => 50,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Argument{0,<3*} :{1}{2}''Class;
                 178 => Z'(First => 3480, Last => 3635,
                    Facility_Index => 3, Key_Index => 12,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦--  -*- encoding: utf-8 -*-⏎
   --  ↦--⏎
   --  ↦--  Ada specification generated by ZBMCompile, V{0}.{1}⤶
   --  ↦.{2} - {3}.⏎
   --  ↦--  This is a generated file and should not be edited.⏎⤶
   --  ↦--⏎
                 179 => Z'(First => 10120, Last => 10134,
                    Facility_Index => 7, Key_Index => 64,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦package {0} is⏎
                 180 => Z'(First => 9881, Last => 9912,
                    Facility_Index => 4, Key_Index => 92,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Arguments : Argument_List;
                 181 => Z'(First => 3314, Last => 3321,
                    Facility_Index => 3, Key_Index => 104,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦end {0};
                 182 => Z'(First => 1593, Last => 1600,
                    Facility_Index => 7, Key_Index => 105,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   begin
                 183 => Z'(First => 9172, Last => 9212,
                    Facility_Index => 1, Key_Index => 74,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Retained the body "{0}" in the file "{1}"
                 184 => Z'(First => 9848, Last => 9880,
                    Facility_Index => 1, Key_Index => 91,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Output package body file is "{0}"
                 185 => Z'(First => 3314, Last => 3321,
                    Facility_Index => 5, Key_Index => 85,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦end {0};
                 186 => Z'(First => 5005, Last => 5065,
                    Facility_Index => 5, Key_Index => 22,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   use ZanyBlue.Text.Catalogs;⏎
   --  ↦   use ZanyBlue.Text.Locales;⏎
                 187 => Z'(First => 3480, Last => 3635,
                    Facility_Index => 4, Key_Index => 12,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦--  -*- encoding: utf-8 -*-⏎
   --  ↦--⏎
   --  ↦--  Ada specification generated by ZBMCompile, V{0}.{1}⤶
   --  ↦.{2} - {3}.⏎
   --  ↦--  This is a generated file and should not be edited.⏎⤶
   --  ↦--⏎
                 188 => Z'(First => 8520, Last => 8571,
                    Facility_Index => 1, Key_Index => 61,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Performing consistency checks for the facility "{0}"
                 189 => Z'(First => 8357, Last => 8411,
                    Facility_Index => 1, Key_Index => 58,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, the facility "{0}" is not a valid Ada identifier⤶
                 190 => Z'(First => 4469, Last => 4597,
                    Facility_Index => 5, Key_Index => 5,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Locale      :{1}Locale_Type  := Current_Locale;⏎
   --  ↦      Catalog     :{1}Catalog_Type := Standard_Catalog)⤶
   --  ↦ return Wide_String;
                 191 => Z'(First => 7960, Last => 8017,
                    Facility_Index => 2, Key_Index => 51,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦                 {0} => Z''(First => {1,*}, Last => {2,⤶
   --  ↦*},
                 192 => Z'(First => 6940, Last => 7010,
                    Facility_Index => 1, Key_Index => 35,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦"{0}", line {1}, Error, Format not closed for key "{2}"⤶
   --  ↦ at position {3}
                 193 => Z'(First => 8769, Last => 8814,
                    Facility_Index => 2, Key_Index => 5,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦                   {1,*} => {0}_{1,*}''Access,
                 194 => Z'(First => 10043, Last => 10062,
                    Facility_Index => 2, Key_Index => 20,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦package body {0} is⏎
                 195 => Z'(First => 3480, Last => 3635,
                    Facility_Index => 6, Key_Index => 12,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦--  -*- encoding: utf-8 -*-⏎
   --  ↦--⏎
   --  ↦--  Ada specification generated by ZBMCompile, V{0}.{1}⤶
   --  ↦.{2} - {3}.⏎
   --  ↦--  This is a generated file and should not be edited.⏎⤶
   --  ↦--⏎
                 196 => Z'(First => 1454, Last => 1458,
                    Facility_Index => 2, Key_Index => 108,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   --
                 197 => Z'(First => 1989, Last => 2201,
                    Facility_Index => 3, Key_Index => 4,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Destination :{0}File_Type    := Current_Output;⏎
   --  ↦      With_NL     :{0}Boolean      := True;⏎
   --  ↦      Locale      :{0}Locale_Type  := Current_Locale;⏎
   --  ↦      Catalog     :{0}Catalog_Type := Standard_Catalog)⤶
   --  ↦⏎
   --  ↦   is
                 198 => Z'(First => 10102, Last => 10119,
                    Facility_Index => 6, Key_Index => 100,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0}.{1}_Exceptions
                 199 => Z'(First => 5937, Last => 5960,
                    Facility_Index => 3, Key_Index => 30,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   procedure Print_{0} (
                 200 => Z'(First => 3480, Last => 3635,
                    Facility_Index => 7, Key_Index => 12,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦--  -*- encoding: utf-8 -*-⏎
   --  ↦--⏎
   --  ↦--  Ada specification generated by ZBMCompile, V{0}.{1}⤶
   --  ↦.{2} - {3}.⏎
   --  ↦--  This is a generated file and should not be edited.⏎⤶
   --  ↦--⏎
                 201 => Z'(First => 7537, Last => 7597,
                    Facility_Index => 3, Key_Index => 44,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦with ZanyBlue.Text.Arguments;⏎
   --  ↦with ZanyBlue.Text.Formatting;⏎
                 202 => Z'(First => 9567, Last => 9603,
                    Facility_Index => 7, Key_Index => 50,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Argument{0,<3*} :{1}{2}''Class;
                 203 => Z'(First => 9881, Last => 9912,
                    Facility_Index => 6, Key_Index => 92,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Arguments : Argument_List;
                 204 => Z'(First => 7151, Last => 7215,
                    Facility_Index => 3, Key_Index => 38,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   use ZanyBlue.Text.Arguments;⏎
   --  ↦   use ZanyBlue.Text.Formatting;⏎
                 205 => Z'(First => 9781, Last => 9814,
                    Facility_Index => 1, Key_Index => 88,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, no messages files processed
                 206 => Z'(First => 9881, Last => 9912,
                    Facility_Index => 7, Key_Index => 92,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Arguments : Argument_List;
                 207 => Z'(First => 1989, Last => 2201,
                    Facility_Index => 4, Key_Index => 4,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦      Destination :{0}File_Type    := Current_Output;⏎
   --  ↦      With_NL     :{0}Boolean      := True;⏎
   --  ↦      Locale      :{0}Locale_Type  := Current_Locale;⏎
   --  ↦      Catalog     :{0}Catalog_Type := Standard_Catalog)⤶
   --  ↦⏎
   --  ↦   is
                 208 => Z'(First => 5937, Last => 5960,
                    Facility_Index => 4, Key_Index => 30,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   procedure Print_{0} (
                 209 => Z'(First => 3480, Last => 3635,
                    Facility_Index => 5, Key_Index => 12,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦--  -*- encoding: utf-8 -*-⏎
   --  ↦--⏎
   --  ↦--  Ada specification generated by ZBMCompile, V{0}.{1}⤶
   --  ↦.{2} - {3}.⏎
   --  ↦--  This is a generated file and should not be edited.⏎⤶
   --  ↦--⏎
                 210 => Z'(First => 6209, Last => 6284,
                    Facility_Index => 1, Key_Index => 25,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Warning, the key "{0}" in the facility "{1}" is defined⤶
   --  ↦ for the locale "{2}"
                 211 => Z'(First => 5005, Last => 5097,
                    Facility_Index => 5, Key_Index => 19,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   use ZanyBlue.Text.Catalogs;⏎
   --  ↦   use ZanyBlue.Text.Locales;⏎
   --  ↦   use ZanyBlue.Text.Arguments;⏎
                 212 => Z'(First => 1593, Last => 1600,
                    Facility_Index => 5, Key_Index => 105,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦   begin
                 213 => Z'(First => 7475, Last => 7536,
                    Facility_Index => 1, Key_Index => 43,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦ZBMCompile completed on {0,date} at {0,time}, elapsed t⤶
   --  ↦ime {1}
                 214 => Z'(First => 6725, Last => 6796,
                    Facility_Index => 1, Key_Index => 32,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦"{0}", line {1}, Error, type mis-match for argument {2}⤶
   --  ↦: "{3}" and "{4}"
                 215 => Z'(First => 9678, Last => 9712,
                    Facility_Index => 2, Key_Index => 19,
                    Locale_Index => 1, Source_Locale_Index => 1));
   --  ↦      & Wide_Character''Val ({0,*})

   ---------------
   --- Facility --
   ---------------

   function Facility (Index : Positive) return Wide_String is
   begin
      return Facilities (Index).all;
   end Facility;

   ---------------------
   --- Facility_Count --
   ---------------------

   function Facility_Count return Natural is
   begin
      return Facilities'Length;
   end Facility_Count;

   ----------------
   -- Initialize --
   ----------------

   procedure Initialize (Catalog : ZTC.Catalog_Type := Standard_Catalog) is
   begin
      ZTC.Initialize (Catalog, Messages, Pool, Facilities, Keys, Locales,
                      "ZBMCompile.Messages",
                      Pool_Data_1'Length, 10201);
   end Initialize;

   ----------
   --- Key --
   ----------

   function Key (Index : Positive) return Wide_String is
   begin
      return Keys (Index).all;
   end Key;

   ----------------
   --- Key_Count --
   ----------------

   function Key_Count return Natural is
   begin
      return Keys'Length;
   end Key_Count;

end ZBMCompile.Messages;
