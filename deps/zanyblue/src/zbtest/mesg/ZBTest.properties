#  -*- coding: utf-8 -*-
#
#  ZanyBlue, an Ada library and framework for finite element analysis.
#
#  Copyright (c) 2012, 2016, Michael Rohan <mrohan@zanyblue.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#
#    * Neither the name of ZanyBlue nor the names of its contributors may
#      be used to endorse or promote products derived from this software
#      without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

#
#  Messages used by the zbmcompile application
#

00001=This is ZBTest, Version {0,*}.{1,*}.{2,*} {3} (r{4}) on {5,date} at {5,time}
00002=Copyright (c) 2009-{0,*}, Michael Rohan.  All rights reserved
00003=ZBTest completed on {0,date} at {0,time}, elapsed time {1,duration}
00004={0}
00005=Emtpy list
00006={0,integer}) "{1}"
00007=Available ZBTest commands:\n
00008=\nFor additional information on a command, use "help command"\n
00009=Creating test area directory "{0}"
00010=zbtest [ -h ] [ -t test-area ] [ -X xml-summary ] [ -d param value ] [ test-script ]
00011=Copied the file "{0}" to the test area file "{1}"
00012=Renamed the file "{0}" to "{1}"
00013=Executing the ZBTest script "{0}"
00014={0} ({1,integer}) {2}
00015=Set the test description to "{0}"
00016=Incremented the parmeter "{0}" to {1,integer}
00017=Deleted the file "{0}"
00018=Status for "{0}": {1,integer} failures, {2,integer} OK
00019=Copied the directory "{0}" to the test area directory "{1}"
00020=Deleted the directory "{0}"
00021=Created the directory "{0}"
00022=Generated status report on the file "{0}" to "{1}"
00023=Generated status report on the file "{0}" (non-existent) to "{1}"
00024=The file "{0}" does not exist
00025=File name: "{0}"
00026=File type: {0}
00027=File size: {0}
00028=File date: {0}
00029=Executing the command "{0}"
00030=The parameter "{0}" is already defined, ignoring conditional definition
00031=Setting the parameter "{0}" to the value "{1}"
00032=Executing the "end scope" action: {0}
00033={0}
00034=Failure expected
00035=Success expected
00036=Command completed successfully
00037=Command failed
00038=Setting the environment variable "{0}" to "{1}"
00039=The environment variable "{0}" is not defined, "delenv" is a noop
00040=Deleting environment variable "{0}"
00041=Available ZBTest functions:\n
00042=\nFor additional information on a function, use "help -f function"\n
00043=Error, unterminated string
00044={0} ({1,integer}> {2}
00045=Unexpected exit status for the command:
00046=  {0}
00047=Loading the initialization script "{0}"

10001=Error, cannot "end", currently at level 0
10002=Error, too few arguments for the command "{0}"
10003=Error, too many arguments for the command "{0}"
10004=Error, invalid value "{0}"
10005=The parameter "{0}" is not defined
10006=Error, the value "{0}" is not supported (only supported value is "now")
10007=Warning: the environment variable "{0}" is not defined
10008=NOT-USED
10009=Error, "{0}" is not a known command
10010=Warning, the file "{0}" was not found
10011=Warning, test area "{0}", already exists, removing it
10012=Error, test area "{0}", already exists and is not a directory
10013=Error, failed to remove existing test area "{0}": {1}
10014=Error, failed to create the test area "{0}": {1}
10015=Error, missing argument for option "{0}"
10016=Error, unexpected command line argument "{0}"
10017={0}
10018=Warning, the source "{0}" could not be found, failed to copy
10019=Warning, failed to rename "{0}" to "{1}": {2}
10020=Error, failed to locate the ZBTest script "{0}"
10021=Error, the parameter "{0}" is not an integer, cannot increment
10022=Error, the log file "{0}" was not found
10023=Test "{0}" successful
10024=Test "{0}" failed
10025=Error, regular expression matching failed: {0} ({0,exception,name})
10026=Warning, failed to delete "{0}": {1}
10027=Error, failure for test "{0}", unexpected exception "{1,exception,name}"
10028=Error, the reference log file "{0}" was not found
10029=Error, failed to create the directory "{0}": {1}
10030=Warning, referenced to undefined parameter "{0}"
10031=Error, empty text function call
10032=Error, text function call to unknown function: "{0}"
10033=Error, unexpected exception ({0,exception,name}) encountered: {0,exception,text}
10034=Error, failed to rename "{0}" to "{1}": {2}
10035=Error, missing arguments for option "{0}"
10036=Error, could not locate the executeable "{0}"
10037=Error, test script, "{0}", not found
10038=Error, failed to create "{0}": {1}
10039=Error, invalid "end" command, no corresponding "begin" in this script
10040=Error, unexpected exception {0} when executing "{1}"
10041=Error, cannot set an internal parameter "{0}" (leading underscore)
10042=Error, the function "{0}" is not known

20000=Usage for unknown command, not used.
30000={0:>3}) Summary line for an unknown command (not used!)
40000=Not a known command.

20001=Usage: append parameter value
30001={0:>3}) "append", append values to a list parameter
40001=The append command adds a value to the end of a list parameter within\n\
current scope.  If the parameter does not exist, it is created as a list value\n\
with a single element.  If the parameter exists but is not a list, the value\n\
is first converted to a string and then converted to a list with a single\n\
value.  The argument value is then append to this list.\n\
\n\
Example\n\
\    ZBTest> print l1\n\
\    The parameter "l1" is not defined\n\
\    ZBTest> append l1 a\n\
\    ZBTest> print l1\n\
\    [a]\n\
\    ZBTest> print -l l1\n\
\    1) "a"\n\
\    ZBTest> append l1 b\n\
\    ZBTest> print l1\n\
\    [a, b]\n\
\    ZBTest> print -l l1\n\
\    1) "a"\n\
\    2) "b"

20002=Usage: begin
30002={0:>3}) "begin", begin a new parameter scope
40002=Start a new scope level.  Variable assignments, e.g.,\n\n\
\    set xyx abc\n\n\
retain their effect for the lifetime of the scope.  Ending the scope\n\
using the "end" command restores any previous values for the parameters\n\
adjusted during the scope.\n\n\
It is not normally necessary to explicitly begin a new scope, each test\n\
script run automatically starts a new scope which is automatically ended\n\
when the test script completes.\n\n\
The "begin" command does not have options.

20003=Usage: dump [ -o output-file ] [ -a ]
30003={0:>3}) "dump", dump the contents of the parameter scope(s)
40003=Dump parameters values.  The default is to dump the parameters\n\
for the current scope.  This is primarily a debugging command.\n\n\
The options are\n\
\  -a  Dump the parameters for all scopes\n\
\  -o  Dump the output to a file in the test area

20004=Usage: end
30004={0:>3}) "end", end a parameter scope returning to previous scope
40004=Exit a parameter scope.  Any assignments to made duing the scope\n\
are lost.  Previous definitions are restored, e.g.,\n\n\
\    ZBTest> set xyz abc\n\
\    ZBTest> begin\n\
\    ZBTest> set xyz 123\n\
\    ZBTest> echo $xyz\n\
\    ZBTest> end\n\
\    ZBTest> echo $xyz\n\n\
The first "echo" prints the value "123" which the second prints the value\n\
"abc".\n\n\
It not normally necessary to use the "begin" and "end" commands as running\n\
a test script automatically start a new scope which is ended when the script\n\
completes.

20005=Usage: exit
30005={0:>3}) "exit", exit the current test script
40005=Exit a test script.  This command is normally only used when entering\n\
commands interactively to exit the zbtest application.  Using it in a test\n\
script causes immediate exit of the zbtest application.

20006=Usage: getenv [ -l | -s | -p | -a ] name [ parameter ]
30006={0:>3}) "getenv", define a parameter based on an environment variable
40006=Define an internal parameter based on the value of an environment\n\
variable.  For example,\n\n\
\    ZBTest> getenv HOME\n\
\    ZBTest> print HOME\n\
\    /home/mrohan\n\
\n\
The options available are\n\
\  -l  Define an internal list parameter by splitting on the pathsep\n\
\  -s  Define a simple scalar (string) parameter (default)\n\
\  -a  Append the values (implies the -l option)\n\
\  -p  Prepend the values (implies the -l option)\n\
\n\
If the target is not given then import to name.

20007=Usage: help [ -c | -f ] [ item ]
30007={0:>3}) "help", print help information on commands and functions
40007=Print help information on commands and functions.  The options "-c" and "-f"\n\
select either command or function information.  Without an item argument, a\n\
summary of available commands ("-c") or functions ("-f") is printed.\n\n\
Examples:\n\
\    ZBTest> help\n\
\        Print help information on the "help" command\n\
\    ZBTest> help -c help\n\
\        Print help information on the "help" command, equivalent to "help"\n\
\    ZBTest> help -c\n\
\        Print a summary of available commands\n\
\    ZBTest> help execute\n\
\        Print help information on the "execute" command\n\
\    ZBTest> help -f\n\
\        Print a summary of available functions\n\
\    ZBTest> help -f dirname\n\
\        Print help information on the "dirname" function

20008=Usage: noop
30008={0:>3}) "noop", the no operation command
40008=No operation.  The noop command does nothing.

20009=Usage: prepend parameter value
30009={0:>3}) "prepend", prepend a value to list parameter
40009=The prepend command adds a value to the beginning of a list parameter.\n\
If the parameter doesn''t exist in the current scope, it is created as a list\n\
parameter.  The prepend append is normally used to force a path to the "front\n\
of a search path parameter, e.g., the "path" or "searchpath" parameters.\n\n\
Example of use, where the "begin" command is used start a new, empty, scope\n\n\
ZBTest> begin\n\
ZBTest> print -l l\n\
Emtpy list\n\
ZBTest> prepend l a\n\
ZBTest> print -l l\n\
1) "a"\n\
ZBTest> prepend l b\n\
ZBTest> print -l l\n\
1) "b"\n\
2) "a"

20010=Usage: print [ -l | -s ] parameter [ -l | -s | parameter ...
30010={0:>3}) "print", print the value of parameters
40010=Print the value of a scalar (-s, default) or list (-l) parameters.\n\
With the -s option, the value is first converted to a string which gives\n\
the normal representation of value (list values are enclosed in square\n\
brackers, e.g., long lines have been wrapped\n\
\n\
\    ZBTest> print path\n\
\    [/home/mrohan/xmpl/test-area, /home/mrohan/bin, /usr/bin, /bin]\n\
\    ZBTest> print _platform\n\
\    unix\n\
\n\
With the -l option, the value is printed as a list.  If the parameter is not\n\
a list, it''s value is first converted to a list.  E.g.,\n\
\n\
\    ZBTest> print -l l1\n\
\    ZBTest> print _platform\n\
\    unix\n\
\    ZBTest> print -l _platform\n\
\    1) "unix"\n\
\    ZBTest> print -l path\n\
\    1) "/home/mrohan/xmpl/test-area"\n\
\    2) "/home/mrohan/bin"\n\
\    3) "/usr/bin"\n\
\    4) "/bin"

20011=Usage: set [ -s | -i | -b | -f | -t | -u ] parameter value
30011={0:>3}) "set", set the value of a parameter
40011=Set the value of a parameter.  The options selects type: integer,\n\
boolean, etc. or, for "-u" conditionally set the parameter only if it is\n\
not already defined, i.e., provide fall-back values for parameters that\n\
can be set on the command line.\n\
\n\
Examples,\n\
\n\
* Set a parameter to a string value, the "-s" is optional,\n\
\n\
\    ZBTest> set SFO "San Francisco"\n\
\    ZBTest> print SFO\n\
\    San Francisco\n\
\    ZBTest> set -s LLW Lilongwe\n\
\    ZBTest> print LLW\n\
\    Lilongwe\n\
\n\
* Set a parameter to an integer value, the "-i" is required,\n\
\n\
\    ZBTest> set -i ten 10\n\
\    ZBTest> print ten\n\
\    10\n\
\n\
* Set a parameter to a Boolean value, the "-b" is required,\n\
\n\
\    ZBTest> set -b flag true\n\
\    ZBTest> print flag\n\
\    TRUE\n\
\n\
* Set a parameter to a floating point value, the "-f" is required,\n\
\n\
\    ZBTest> set -f pi 3.141592\n\
\    ZBTest> print pi\n\
\    3.14159E+00\n\
\n\
* Set a parameter to a time value, the "-t" is required.  The only time value\n\
\  supported is the special time "now",\n\
\n\
\    ZBTest> set -t start now\n\
\    ZBTest> print start\n\
\    1:59 PM 11/21/11\n\
\n\
* Set a parameter if not already defined, e.g., via the command line,\n\
\n\
\    ZBTest> set -u -s build_opt ""

20012=Usage: which [ -e | -f ] name
30012={0:>3}) "which", print the location of a file or command
40012=Print the locations of files.  The zbtest locates various files\n\
during the execution of a test script, e.g., the "copy" command will\n\
copy a data file located via a search of the directories on the "searchpath"\n\
parameter, the "execute" command uses the "path" parameter.  As an aid to\n\
debugging, the "which" command print the results of these searches.  The\n\
options select the type of file to search for:\n\n\
* "-e" Search for a file that is executables\n\
* "-f" Search for a file\n\n\
The result is printed.\n\n\
Examples:\n\n\
* Executeable:\n\
\    ZBTest> which -e ls\n\
\    /bin/ls

20013=Usage: copy file [ target ]
30013={0:>3}) "copy", copy a file to the test area
40013=Copy a file to the test area to use as input to commands under test.\n\
The file copied is located by searching the directories listed on the\n\
''searchpath'' parameter.\n\n\
The file copied retains the name of the source file.  To use another name\n\
the optional second argument can be used.\n\n\
Examples:\n\n\
* copy xmpl.in\n\
\  Copy the file named "xmpl.in" to the test area retaining the name.\n\
* copy xmpl.in example.dat\n\
\  Copy the file "xmpl.in" to the name "example.dat" in the test area.\n\n\
Files or directories copied to the test area are automatically removed\n\
when the current scope exited (either at the end of the test script or\n\
via an explicit "end").

20014=Usage: execute [ -f | -s | -o output ] command [ command-arg ... ]
30014={0:>3}) "execute", execute a system command
40014=Execute a command given the command name and an optional list\n\
of command arguments.  The command to execute is located by search the\n\
value of the "path" list parameter (initialized to the value of the "PATH"\n\
environment variable).  The search attempts to find the first file with\n\
an extension defined by the "exes" list parameter that matches the command\n\
name.  For example, on Windows, the directories listed on the "path" parameter\n\
are searched for files with extensions "bat", "cmd", "com" or "exe".\n\n\
Once an executable is found, a new process is spawned to execute it.\n\
If the "-o" option is given, then the command output (standard output\n\
and standard error) is sent to the named file.\n\n\
The "-s" option defines a command that is expected to execute successfully.\n\
This is the default and the "-s" option is normally not given.\n\n\
The "-f" option defines a command that is expected fail (non-zero exit\n\
status).\n\n\
An execute failure file is generated if a command does not exit with the\n\
expected status.\n\n\
Examples:\n\n\
\    ZBTest> execute ls\n\
\       Execute the "ls" command, the output is sent to the "screen".\n\n\
\    ZBTest> execute -o ls.out ls\n\
\       Execute the "ls" command, the output is sent to the the file "ls.out"\n\
\       in the test area.\n\n\
\    ZBTest> execute -f -o ls.out ls nosuchfile\n\
\       Execute the "ls" command, the output is sent to the the file "ls.out"\n\
\       in the test area.  The command is expected to exit with a failure\n\
\       status in this case, i.e., the file "nosuchfile" is not expected to\n\
\       exist.

20015=Usage: rename old-name new-name
30015={0:>3}) "rename", rename a file in the test area
40015=Rename a file in the test area.  This is frequently used to rename\n\
files generated by applications to standard log file names.\n\n\
Example:\n\
\    ZBTest> rename generate.dat myapp-01.log

20016=Usage: run script
30016={0:>3}) "run", run another ZBTest script
40016=Run a script given the script name, i.e., without the "zbt" extension.\n\
The script should either be in the current directory or in a sub-directory\n\
with the same name as the script, e.g., "run xmpl", will try the files\n\n\
\    xmpl.zbt\n\
\    xmpl/xmpl.zbt\n\n\
Once located, the ZBTest commands in the script are executed within the\n\
context of a new implicit scope.  Modifications to the environment made\n\
by the script are discarded (via undo actions) when the script completes.

20017=Usage: desc word ...
30017={0:>3}) "desc", set the test description
40017=Set the test description

20018=Usage: desc word ...
30018={0:>3}) "desc", set the test description
40018=Set the test description

20019=Usage: compare log-file [ ref-log-file ]
30019={0:>3}) "compare", compare a log file with a reference log
40019=The compare command compares (with regular expression matching) a\n\
generated log file with a reference log file.  If the files match, a\n\
.ok file is created and the number of OK tests is incremented, otherwise\n\
a .fail file is created and the number of FAIL tests is incremented.\n\n\
The reference log file is found by searching the searchpath parameter\n\
and is normally in the same directory as the .zbt test script.

20020=Usage: delete [ -r ] name
30020={0:>3}) "delete", delete a file in the test area
40020=Delete a file from the test area

20021=Usage: mkdir name
30021={0:>3}) "mkdir", create a directory
40021=Create a new directory in the test area\n\
Directories created in the test area are automatically removed when the\n\
current scope exited (either at the end of the test script or via an\n\
explicit "end").

20022=Usage: filestat name log-file
30022={0:>3}) "filestat", write status of a test area file to a log file
40022=Write status of a test area file to a log file.  This is frequently\n\
used to verify the existence/non-existence of a file or directory in the\n\
test area.  The information written to the file stat log file, for ordinary\n\
files is:\n\n\
\   * The file name\n\
\   * The file type ("ORDINARY_FILE")\n\
\   * The file size in bytes\n\
\   * The time stamp associated with the file\n\n\
For directories and other non-ordinary files only the file name and type is\n\
writeen to the log file.\n\n\
If the target file for the filestat command does not exist in the test area\n\
the generated log file contains message\n\n\
\    The file "NAME" does not exist\n\n\
Examples\n\n\
\    ZBTest> filestat a\n\
\    ZBTest> filestat expected.txt expected01.log\n\
\    Generated status report on the file "expected.txt" (non-existent) to "expected01.log"\n\
\    ...\n\
\    ZBTest> filestat expected.txt expected02.log\n\
\    Generated status report on the file "expected.txt" to "expected02.log"

20023=Usage: echo name ...
30023={0:>3}) "echo", echo arguments to output
40023=Echo arguments to output.  References to parameters are expanded\n\
to string values before printing.\n\n\
Examples:\n\
\    ZBTest> echo a\n\
\    a\n\
\    ZBTest> set -i a 10\n\
\    ZBTest> echo a is $a\n\
\    a is 10

20024=Usage: incr [ -a ] name
30024={0:>3}) "incr", increment a parameter value
40024=Increment an integer parameter value.  The parameter must already\n\
exist and it's value is incremented by one.  This operation breaks the\n\
scoping models as the value is updated in the frrst scope the defines\n\
the parameter.  If this is deeper than the current scope, the incremented\n\
value is retained after the current scope ends.  If the -a option is given\n\
all instances of the parameter in all scopes is incremented (this is the\n\
mechanism used to increment the number of OK and failure tests).\n\n\
Examples:\n\
\    ZBTest> set -i num 0\n\
\    ZBTest> incr num\n\
\    Incremented the parmeter "num" to 1\n\
\    ZBTest> begin\n\
\    ZBTest> incr num\n\
\    Incremented the parmeter "num" to 2\n\
\    ZBTest> print num\n\
\    2\n\
\    ZBTest> end\n\
\    ZBTest> print num\n\
\    2

20025=Usage: setenv [ -l | -p ] variable value
30025={0:>3}) "setenv", set an environment variable
40025=Set an environment variable to a value, e.g.,\n\n\
\    ZBTest> setenv PROFILE yes\n\
\    Setting the environment variable "PROFILE" to "yes"\n\n\
sets the variable "PROFILE" to the value "yes" for the current process and\n\
any processes created using the "execute" command.  The definition is scoped\n\
and is reverted when the current scope exits (normally at the end of a test\n\
script).  The reversion is either by deleting the environment variable it it\n\
didn''t have a current value or by restoring the value prior to the setenv.\n\
\n\
The options allow the definition of environment variables based on the value\n\
of parameters.  For simple definitions, the "-p" option can be used, e.g.,\n\n\
\    ZBTest> set LLW Lilongwe\n\
\    ZBTest> setenv -p DESTINATION LLW\n\
\    Setting the environment variable "DESTINATION" to "Lilongwe"\n\n\
parameters are converted to strings for these simple definitions.  If the\n\
parameter is a list, the "-l" option can be used which concatenates the list\n\
elements into string separated by the OS separator character.   This can be\n\
used to set PATH values, etc., e.g.,\n\n\
\    ZBTest> set mypath /bin\n\
\    ZBTest> append mypath /usr/bin\n\
\    ZBTest> append mypath /usr/local/bin\n\
\    ZBTest> setenv -l PATH mypath\n\
\    Setting the environment variable "PATH" to "/bin:/usr/bin:/usr/local/bin"


20026=Usage: delenv name
30026={0:>3}) "delenv", delete an environment variable
40026=Delete an environment variable.  The value of the variable, if any,\n\
is restored on exiting the current scope.\n\n\
Examples:\n\
\    ZBTest> begin\n\
\    ZBTest> delenv HOME\n\
\    Deleting environment variable "HOME"\n\
\    ZBTest> end\n\
\    Executing the 'undo' action "setenv HOME "/home/mrohan""\n\
\    Setting the environment variable "HOME" to "/home/mrohan"\n\n\
Any commands executed after the "delenv" until the end of the scope will not\n\
see a value for the environment variable.

21000=Usage: dirname path
31000={0:>3}) "dirname", return directory component of a path
41000=The "dirname" function takes a path as an argument and returns the\n\
containing directory.  It is used in the zbmcompile tests to determine the\n\
installation directory for the zbmcompile executable, e.g.,\n\n\
\    ZBTest> set project_dir $(dirname $(dirname $(which zbmcompile)))\n

21001=Usage: joinpaths path ...
31001={0:>3}) "joinpath", return a list of path concatenated into a single path
41001=The "joinpaths" function takes one or more path components and combines\n\
them into a single path, e.g.,\n\n\
\    ZBTest> set libdir $(joinpaths $project_dir lib)\n

21002=Usage: nextlog [ -c counter ] [ -n ]
31002={0:>3}) "nextlog", return the name of next number log file
41002=The "nextlog" function returns the next log name for the current test\n\
based on a sequence controlled by the "_lognum" parameter.  By default, an\n\
undo action is also created to compare the generated log name with a reference\n\
log file on exiting the test scope.  The undo action creation is suppressed if\n\
the "-n" option is given.  The format of the log file name generated is\n\n\
\    TESTNAME-nn.log\n\n\
\where "TESTNAME" is the name of the current test and "nn" the sequence number.\n\
The use of the "nextlog" function can simplify test scripts, e.g.,\n\n\
\    execute -o mytest-01.log mycmd1\n\
\    execute -o mytest-02.log mycmd2\n\
\    compare mytest-01.log\n\
\    compare mytest-02.log\n\n\
can be re-written as\n\n\
\    execute -o $(nextlog) mycmd1\n\
\    execute -o $(nextlog) mycmd2\n\n\
The "-c" option can be used to start a new log naming sequence for log files\n\
that are not part of the normal test reference logs, e.g., the output of\n\
the build commands to generate an executable are too platform specific to\n\
to be used as reference log files but the output should be stored in a\n\
log file for debugging.  The argument to the "-c" option is the name of\n\
an integer parameter which is used to sequence the log file name (the\n\
parameter is created if it does not already exist in the current scope)\n\n\
By default, log file using alternative counter names do not create\n\
undo actions to execute the compare command.  If the log files should\n\
be compared on scope exit, the "-n" option can be used.\n\n\
For example, save the output of a build command:\n\n\
\    execute -o $(nextlog -c build) build.sh\n\n\
would generate the log file TESTNAME-build-nn.log, the counter name\n\
is embedded in the log file.

21003=Usage: which [ -f | -e ] filename
31003={0:>3}) "which", return the path to a file or executable
41003=The "which" function returns the path to a file searched on the\n\
"searchpath" list, using the "-f" option (the default) or an executable\n\
on the "path" list, using the "-e" option.\n\n\
The "which" function is primarily used to determine where applications are\n\
installed with the result normally processed by the "dirname" function to\n\
to determine the parent directory, e.g.\n\n\
\    ZBTest> set project_dir $(dirname $(dirname $(which zbmcompile)))\n\n\
where "project_dir" is set to "/usr/zb" for an installed "zbmcompile" located\n\
at "/usr/zb/bin/zbmcompile".
