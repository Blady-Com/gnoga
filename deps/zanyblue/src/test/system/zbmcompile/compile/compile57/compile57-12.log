--  -*- coding: utf-8 -*-
--
--  Ada specification generated by ZBMCompile, V.*
--  This is a generated file and should not be edited.
--

with Ada.Exceptions;
with ZanyBlue.Text.Catalogs;
with ZanyBlue.Text.Locales;
with ZanyBlue.Text.Arguments;

package ZBTest_Messages.ZBTest_Exceptions is

   use ZanyBlue.Text.Catalogs;
   use ZanyBlue.Text.Locales;
   use ZanyBlue.Text.Arguments;

   procedure Raise_00001
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Argument1   : in Any_Category_Type'Class;
      Argument2   : in Any_Category_Type'Class;
      Argument3   : in Any_Category_Type'Class;
      Argument4   : in Any_Category_Type'Class;
      Argument5   : in Calendar_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00001);
   --  ↦This is ZBTest, Version {0,*}.{1,*}.{2,*} {3} (r{4}) at⤶
   --  ↦ {5,time} on {5,date}

   procedure Raise_00002
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00002);
   --  ↦Copyright (c) 2009-{0,*}, Michael Rohan.  All rights re⤶
   --  ↦served

   procedure Raise_00003
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Calendar_Category_Type'Class;
      Argument1   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00003);
   --  ↦ZBTest completed at {0,time} on {0,date}, elapsed time ⤶
   --  ↦{1}

   procedure Raise_00004
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00004);
   --  ↦{0}

   procedure Raise_00005
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00005);
   --  ↦Emtpy list

   procedure Raise_00006
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Argument1   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00006);
   --  ↦{0}) "{1}"

   procedure Raise_00007
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00007);
   --  ↦This is ZBTest, a simple application testing applicatio⤶
   --  ↦n.⏎
   --  ↦⏎
   --  ↦Available commands:⏎

   procedure Raise_00008
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00008);
   --  ↦⏎
   --  ↦For additional information on a command, use "help comm⤶
   --  ↦and"⏎

   procedure Raise_00009
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00009);
   --  ↦Creating test area directory "{0}"

   procedure Raise_00010
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00010);
   --  ↦zbtest [ -h ] [ -t test-area ] [ -X xml-summary ] [ tes⤶
   --  ↦t-script ]

   procedure Raise_00011
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00011);
   --  ↦Copied the file "{0}" to the test area

   procedure Raise_00012
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Argument1   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00012);
   --  ↦Renamed the file "{0}" to "{1}"

   procedure Raise_00013
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00013);
   --  ↦Executing the ZBTest script "{0}"

   procedure Raise_00014
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Argument1   : in Any_Category_Type'Class;
      Argument2   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00014);
   --  ↦{0} ({1}) {2}

   procedure Raise_00015
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00015);
   --  ↦Set the test description to "{0}"

   procedure Raise_00016
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Argument1   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00016);
   --  ↦Incremented the parmeter "{0}" to {1}

   procedure Raise_00017
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00017);
   --  ↦Deleted the file "{0}"

   procedure Raise_00018
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Argument1   : in Any_Category_Type'Class;
      Argument2   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00018);
   --  ↦Status for "{0}": {1} failures, {2} OK

   procedure Raise_00019
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00019);
   --  ↦Copied the directory "{0}" to the test area

   procedure Raise_00020
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00020);
   --  ↦Deleted the directory "{0}"

   procedure Raise_00021
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00021);
   --  ↦Created the directory "{0}"

   procedure Raise_00022
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Argument1   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00022);
   --  ↦Generated status report on the file "{0}" to "{1}"

   procedure Raise_00023
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Argument1   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00023);
   --  ↦Generated status report on the file "{0}" (non-existent⤶
   --  ↦) to "{1}"

   procedure Raise_00024
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00024);
   --  ↦The file "{0}" does not exist

   procedure Raise_00025
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00025);
   --  ↦File name: "{0}"

   procedure Raise_00026
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00026);
   --  ↦File type: {0}

   procedure Raise_00027
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00027);
   --  ↦File size: {0}

   procedure Raise_00028
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00028);
   --  ↦File date: {0}

   procedure Raise_00029
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00029);
   --  ↦Executing the command "{0}"

   procedure Raise_00030
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00030);
   --  ↦The parameter "{0}" is already defined, ignoring condit⤶
   --  ↦ional definition

   procedure Raise_00031
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Argument1   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00031);
   --  ↦Setting the parameter "{0}" to the value "{1}"

   procedure Raise_00032
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00032);
   --  ↦Executing the 'undo' action "{0}"

   procedure Raise_00033
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00033);
   --  ↦{0}

   procedure Raise_00034
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00034);
   --  ↦Failure expected

   procedure Raise_00035
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00035);
   --  ↦Success expected

   procedure Raise_00036
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00036);
   --  ↦Command completed successfully

   procedure Raise_00037
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_00037);
   --  ↦Command failed

   procedure Raise_10001
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10001);
   --  ↦Error, cannot "end", currently at level 0

   procedure Raise_10002
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10002);
   --  ↦Error, too few arguments for the command "{0}"

   procedure Raise_10003
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10003);
   --  ↦Error, too many arguments for the command "{0}"

   procedure Raise_10004
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10004);
   --  ↦Error, invalid value "{0}"

   procedure Raise_10005
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10005);
   --  ↦The parameter "{0}" is not defined

   procedure Raise_10006
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10006);
   --  ↦Error, the value "{0}" is not supported (only supported⤶
   --  ↦ value is "now")

   procedure Raise_10007
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10007);
   --  ↦Warning: the environment variable "{0}" is not defined

   procedure Raise_10008
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10008);
   --  ↦NOT-USED

   procedure Raise_10009
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10009);
   --  ↦Error, "{0}" is not a known command

   procedure Raise_10010
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10010);
   --  ↦Warning, the file "{0}" was not found

   procedure Raise_10011
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10011);
   --  ↦Warning, test area "{0}", already exists, removing it

   procedure Raise_10012
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10012);
   --  ↦Error, test area "{0}", already exists and is not a dir⤶
   --  ↦ectory

   procedure Raise_10013
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Argument1   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10013);
   --  ↦Error, failed to remove existing test area "{0}": {1}

   procedure Raise_10014
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Argument1   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10014);
   --  ↦Error, failed to create the test area "{0}": {1}

   procedure Raise_10015
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10015);
   --  ↦Error, missing argument for option "{0}"

   procedure Raise_10016
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10016);
   --  ↦Error, unexpected command line argument "{0}"

   procedure Raise_10017
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10017);
   --  ↦{0}

   procedure Raise_10018
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10018);
   --  ↦Warning, the source "{0}" could not be found, failed to⤶
   --  ↦ copy

   procedure Raise_10019
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Argument1   : in Any_Category_Type'Class;
      Argument2   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10019);
   --  ↦Warning, failed to rename "{0}" to "{1}": {2}

   procedure Raise_10020
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10020);
   --  ↦Error, failed to locate the ZBTest script "{0}"

   procedure Raise_10021
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10021);
   --  ↦Error, the parameter "{0}" is not an integer, cannot in⤶
   --  ↦crement

   procedure Raise_10022
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10022);
   --  ↦Error, the log file "{0}" was not found

   procedure Raise_10023
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10023);
   --  ↦Test "{0}" successful

   procedure Raise_10024
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10024);
   --  ↦Test "{0}" failed

   procedure Raise_10025
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10025);
   --  ↦Error, regular expression matching failed: {0} ({0,name⤶
   --  ↦})

   procedure Raise_10026
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Argument1   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10026);
   --  ↦Warning, failed to delete "{0}": {1}

   procedure Raise_10027
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Argument1   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10027);
   --  ↦Error, failure for test "{0}", unexpected exception "{1⤶
   --  ↦,name}"

   procedure Raise_10028
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10028);
   --  ↦Error, the reference log file "{0}" was not found

   procedure Raise_10029
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Argument1   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10029);
   --  ↦Error, failed to create the directory "{0}": {1}

   procedure Raise_10030
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10030);
   --  ↦Warning, referenced to undefined parameter "{0}"

   procedure Raise_10031
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10031);
   --  ↦Error, empty text function call

   procedure Raise_10032
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10032);
   --  ↦Error, text function call to unknown function: "{0}"

   procedure Raise_10033
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10033);
   --  ↦Error, unexpected exception ({0,name}) encountered

   procedure Raise_10034
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Argument1   : in Any_Category_Type'Class;
      Argument2   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10034);
   --  ↦Error, failed to rename "{0}" to "{1}": {2}

   procedure Raise_10035
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10035);
   --  ↦Error, missing arguments for option "{0}"

   procedure Raise_10036
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10036);
   --  ↦Error, could not locate the executeable "{0}"

   procedure Raise_10037
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_10037);
   --  ↦Error, test script, "{0}", not found

   procedure Raise_20000
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_20000);
   --  ↦Usage for unknown command, not used.

   procedure Raise_20001
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_20001);
   --  ↦Usage: append parameter value

   procedure Raise_20002
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_20002);
   --  ↦Usage: begin

   procedure Raise_20003
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_20003);
   --  ↦Usage: dump [ -o output-file ] [ -a ]

   procedure Raise_20004
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_20004);
   --  ↦Usage: end

   procedure Raise_20005
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_20005);
   --  ↦Usage: exit

   procedure Raise_20006
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_20006);
   --  ↦Usage: getenv [ -l | -s | -p | -a ] name [ parameter ]

   procedure Raise_20007
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_20007);
   --  ↦Usage: help [ command ]

   procedure Raise_20008
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_20008);
   --  ↦Usage: noop

   procedure Raise_20009
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_20009);
   --  ↦Usage: prepend parameter value

   procedure Raise_20010
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_20010);
   --  ↦Usage: print [ -l | -s ] parameter [ -l | -s | paramete⤶
   --  ↦r ...

   procedure Raise_20011
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_20011);
   --  ↦Usage: set [ -s | -i | -b | -f | -t ] parameter value

   procedure Raise_20012
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_20012);
   --  ↦Usage: which [ -e | -f ] file ...

   procedure Raise_20013
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_20013);
   --  ↦Usage: copy file

   procedure Raise_20014
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_20014);
   --  ↦Usage: execute [ -f | -s | -o output ] command [ comman⤶
   --  ↦d-arg ... ]

   procedure Raise_20015
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_20015);
   --  ↦Usage: rename old-name new-name

   procedure Raise_20016
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_20016);
   --  ↦Usage: run script

   procedure Raise_20017
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_20017);
   --  ↦Usage: desc word ...

   procedure Raise_20018
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_20018);
   --  ↦Usage: desc word ...

   procedure Raise_20019
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_20019);
   --  ↦Usage: compare log-file [ ref-log-file ]

   procedure Raise_20020
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_20020);
   --  ↦Usage: delete name

   procedure Raise_20021
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_20021);
   --  ↦Usage: mkdir name

   procedure Raise_20022
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_20022);
   --  ↦Usage: filestat name log-file

   procedure Raise_20023
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_20023);
   --  ↦Usage: echo name ...

   procedure Raise_20024
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_20024);
   --  ↦Usage: setifundef [ -s | -i | -b | -f | -t ] parameter ⤶
   --  ↦value

   procedure Raise_30000
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_30000);
   --  ↦Summary line for a command

   procedure Raise_30001
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_30001);
   --  ↦{0:>3}) "append", append values to a list parameter

   procedure Raise_30002
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_30002);
   --  ↦{0:>3}) "begin", begin a new parameter scope

   procedure Raise_30003
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_30003);
   --  ↦{0:>3}) "dump", dump the contents of the parameter scop⤶
   --  ↦e(s)

   procedure Raise_30004
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_30004);
   --  ↦{0:>3}) "end", end a parameter scope returning to previ⤶
   --  ↦ous scope

   procedure Raise_30005
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_30005);
   --  ↦{0:>3}) "exit", exit the current test script

   procedure Raise_30006
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_30006);
   --  ↦{0:>3}) "getenv", define a parameter based on an enviro⤶
   --  ↦nment variable

   procedure Raise_30007
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_30007);
   --  ↦{0:>3}) "help", print help information on commands

   procedure Raise_30008
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_30008);
   --  ↦{0:>3}) "noop", the no operation command

   procedure Raise_30009
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_30009);
   --  ↦{0:>3}) "prepend", prepend a value to list parameter

   procedure Raise_30010
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_30010);
   --  ↦{0:>3}) "print", print the value of parameters

   procedure Raise_30011
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_30011);
   --  ↦{0:>3}) "set", set the value of a parameter

   procedure Raise_30012
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_30012);
   --  ↦{0:>3}) "which", print the location of a file or comman⤶
   --  ↦d

   procedure Raise_30013
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_30013);
   --  ↦{0:>3}) "copy", copy a file to the test area

   procedure Raise_30014
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_30014);
   --  ↦{0:>3}) "execute", execute a system command

   procedure Raise_30015
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_30015);
   --  ↦{0:>3}) "rename", rename a file in the test area

   procedure Raise_30016
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_30016);
   --  ↦{0:>3}) "run", run another ZBTest script

   procedure Raise_30017
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_30017);
   --  ↦{0:>3}) "desc", set the test description

   procedure Raise_30018
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_30018);
   --  ↦{0:>3}) "desc", set the test description

   procedure Raise_30019
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_30019);
   --  ↦{0:>3}) "compare", compare a log file with a reference ⤶
   --  ↦log

   procedure Raise_30020
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_30020);
   --  ↦{0:>3}) "delete", delete a file in the test area

   procedure Raise_30021
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_30021);
   --  ↦{0:>3}) "mkdir", create a directory

   procedure Raise_30022
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_30022);
   --  ↦{0:>3}) "filestat", write status of a test area file to⤶
   --  ↦ a log file

   procedure Raise_30023
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_30023);
   --  ↦{0:>3}) "echo", echo arguments to output

   procedure Raise_30024
     (E           : in Ada.Exceptions.Exception_Id;
      Argument0   : in Any_Category_Type'Class;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_30024);
   --  ↦{0:>3}) "setifundef", set the value of a parameter if i⤶
   --  ↦t is not defined

   procedure Raise_40000
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_40000);
   --  ↦Not a known command.

   procedure Raise_40001
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_40001);
   --  ↦The append command adds a value to the end of a list pa⤶
   --  ↦rameter within⏎
   --  ↦current scope.

   procedure Raise_40002
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_40002);
   --  ↦Start a new scope level.  Variable assignments, e.g.,⏎
   --  ↦⏎
   --  ↦    set xyx abc⏎
   --  ↦⏎
   --  ↦retain their effect for the lifetime of the scope.  End⤶
   --  ↦ing the scope⏎
   --  ↦using the "end" command restores any previous values fo⤶
   --  ↦r the parameters⏎
   --  ↦adjusted during the scope.⏎
   --  ↦⏎
   --  ↦It is not normally necessary to explicitly begin a new ⤶
   --  ↦scope, each test⏎
   --  ↦script run automatically starts a new scope which is au⤶
   --  ↦tomatically ended⏎
   --  ↦when the test script completes.⏎
   --  ↦⏎
   --  ↦The "begin" command does not have options.

   procedure Raise_40003
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_40003);
   --  ↦Dump parameters values.  The default is to dump the par⤶
   --  ↦ameters⏎
   --  ↦for the current scope.  This is primarily a debugging c⤶
   --  ↦ommand.⏎
   --  ↦⏎
   --  ↦The options are⏎
   --  ↦  -a  Dump the parameters for all scopes⏎
   --  ↦  -o  Dump the output to a file in the test area

   procedure Raise_40004
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_40004);
   --  ↦Exit a parameter scope.  Any assignments to made duing ⤶
   --  ↦the scope⏎
   --  ↦are lost.  Previous definitions are restored, e.g.,⏎
   --  ↦⏎
   --  ↦    set xyz abc⏎
   --  ↦    begin⏎
   --  ↦    set xyz 123⏎
   --  ↦    echo $xyz⏎
   --  ↦    end⏎
   --  ↦    echo $xyz⏎
   --  ↦⏎
   --  ↦The first "echo" prints the value "123" which the secon⤶
   --  ↦d prints the value⏎
   --  ↦"abc".⏎
   --  ↦⏎
   --  ↦It not normally necessary to use the "begin" and "end" ⤶
   --  ↦commands as running⏎
   --  ↦a test script automatically start a new scope which is ⤶
   --  ↦ended when the script⏎
   --  ↦completes.

   procedure Raise_40005
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_40005);
   --  ↦Exit a test script.  This command is normally only used⤶
   --  ↦ when entering⏎
   --  ↦commands interactively to exit the zbtest application. ⤶
   --  ↦ Using it in a test⏎
   --  ↦script causes immediate exit of the zbtest application.⤶

   procedure Raise_40006
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_40006);
   --  ↦Define an internal parameter (target) based on the valu⤶
   --  ↦e of an⏎
   --  ↦environment variable.⏎
   --  ↦⏎
   --  ↦The options are⏎
   --  ↦  -l  Define an internal list parameter by splitting on⤶
   --  ↦ the pathsep⏎
   --  ↦  -s  Define a simple scalar (string) parameter (defaul⤶
   --  ↦t)⏎
   --  ↦  -a  If defining a list parameter, append the values⏎
   --  ↦  -p  If defining a list parameter, prepend the values⏎⤶
   --  ↦⏎
   --  ↦If the target is not given then import to name (lowerca⤶
   --  ↦sed).

   procedure Raise_40007
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_40007);
   --  ↦Get help information on a command.  Without a command a⤶
   --  ↦rgument the⏎
   --  ↦help command prints a summary of available commands.  W⤶
   --  ↦ith an argument⏎
   --  ↦the help command print help information on the argument⤶
   --  ↦ command.

   procedure Raise_40008
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_40008);
   --  ↦No operation.  The noop command does nothing.

   procedure Raise_40009
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_40009);
   --  ↦The prepend command adds a value to the beginning of a ⤶
   --  ↦list parameter.⏎
   --  ↦If the parameter doesn't exist in the current scope, it⤶
   --  ↦ is created as a list⏎
   --  ↦parameter.  The prepend append is normally used to forc⤶
   --  ↦e a path to the "front⏎
   --  ↦of a search path parameter, e.g., the "path" or "search⤶
   --  ↦path" parameters.⏎
   --  ↦⏎
   --  ↦Example of use, where the "begin" command is used start⤶
   --  ↦ a new, empty, scope⏎
   --  ↦⏎
   --  ↦ZBTest> begin⏎
   --  ↦ZBTest> print -l l⏎
   --  ↦Emtpy list⏎
   --  ↦ZBTest> prepend l a⏎
   --  ↦ZBTest> print -l l⏎
   --  ↦1) "a"⏎
   --  ↦ZBTest> prepend l b⏎
   --  ↦ZBTest> print -l l⏎
   --  ↦1) "b"⏎
   --  ↦2) "a"

   procedure Raise_40010
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_40010);
   --  ↦Print the value of a scalar (-s, default) or list (-l) ⤶
   --  ↦parameters

   procedure Raise_40011
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_40011);
   --  ↦Set the value of a parameter (option selects type: inte⤶
   --  ↦ger, boolean, ...)

   procedure Raise_40012
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_40012);
   --  ↦Print the locations of files

   procedure Raise_40013
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_40013);
   --  ↦Copy a file to the test area to use as input to command⤶
   --  ↦s under test.

   procedure Raise_40014
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_40014);
   --  ↦Execute a command

   procedure Raise_40015
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_40015);
   --  ↦Rename a file

   procedure Raise_40016
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_40016);
   --  ↦Run a script

   procedure Raise_40017
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_40017);
   --  ↦Set the test description

   procedure Raise_40018
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_40018);
   --  ↦Set the test description

   procedure Raise_40019
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_40019);
   --  ↦The compare command compares (with regular expression m⤶
   --  ↦atching) a⏎
   --  ↦generated log file with a reference log file.  It the f⤶
   --  ↦iles match, a⏎
   --  ↦.ok file is created and the number of OK tests is incre⤶
   --  ↦mented, otherwise⏎
   --  ↦a .fail file is created and the number of FAIL tests is⤶
   --  ↦ incremented.

   procedure Raise_40020
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_40020);
   --  ↦Delete a file from the test area

   procedure Raise_40021
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_40021);
   --  ↦Create a new directory in the test area

   procedure Raise_40022
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_40022);
   --  ↦Write status of a test area file to a log file

   procedure Raise_40023
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_40023);
   --  ↦Echo arguments to output

   procedure Raise_40024
     (E           : in Ada.Exceptions.Exception_Id;
      Locale      : in Locale_Type  := Current_Locale;
      Catalog     : in Catalog_Type := Standard_Catalog);
   pragma No_Return (Raise_40024);
   --  ↦Conditionally set the value of a parameter to the given⤶
   --  ↦ value provided⏎
   --  ↦the parameter is not already defined.  This can be used⤶
   --  ↦ to allow command line⏎
   --  ↦definitions of parameters to over-ride script definitio⤶
   --  ↦ns.  Or, put another⏎
   --  ↦way, allow scripts to provide defaults for parameters n⤶
   --  ↦ot defined on the⏎
   --  ↦command line.

end ZBTest_Messages.ZBTest_Exceptions;
