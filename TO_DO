Stuff on my list of To Dos:
---------------------------

* GUI

* Server Side

Put variables
File submit to server

* Server Side Tools

Extend gnoga_make to handle:
	new_composite_widgets (Views)
	new_controllers

* Compiler side

GTK Webkit app, direct hooks to eval JS so for desktop apps no need for websockets.

Further MacGap integration, direct hooks to eval JS so for desktop apps no need for websockets.

GWindows IE embedded app with direct hooks to eval JS so for desktop apps no need for websockets.



Someday To Dos likely post 1.0
------------------------------

* GUI

Paging view - display pages of data at a time from server w/ random access

Reporting widgets

SVG DOM binding
WebGL
MathML

Data View - View to display or setup for edit of Active_Record objects

File Dialogs (Files on server side)
Font Picker Dialogs (Fonts on client side)
Color Picker Dialog (client side)
Find/replace Dialog
Print dialog (Server side printers) and cross platform server side printing support

Submit a canvas or img back to server

* Apps

Delphi / VB like IDE in Gnoga itself

* Application

Multiuser Application type with multiple levels of authentication / profiles

* Compiler side

GNAT with llvm to generate iOS apps
GNAT with llvm to generate ASM JavaScript = Full client side Gnoga
GNAT JVM and minimal android browser widget

* Server Side

Support AWS plugins
Support alternative transports to Websockets as fall backs.
   1) Use a combination of buffer output until return from On_Connect,
       then all bindings send back via Ajax, again buffer connection
       on event and return via Ajax result.
   2) Use a local webkit instance to (or other method) write output to
       and return full HTML to browser with Ajax results.
