Q) Where can I learn more about Gnoga?

A) http://www.gnoga.com and going to the sourceforge site and joining the mailing list. Reading the sources tests and demos are also a good place to start.

Q) What licenses does Gnoga use?

A) Gnoga is under the GNAT modified GPLv3 which means your code can use any license you like but any modifications, extensions, etc. of Gnoga fall under the same license and source for those changes must be distributed with binaries.

Q) Why does Gnoga use the GMGPL and not the GPL license?

A) One side goal of Gnoga is to encourage the use of Ada for general use  modern software development, forcing applications to be under the GPL license would limit that side goal. However those of use believing in the idea of "free" software would encourage choosing a "free" license for your projects.

Q) Can I distribute programs I compile with Gnoga?

A) If you use GNAT-FSF or GNAT-PRO you can distribute the binaries with out your source, since Gnoga and those versions of GNAT grant an exception if the libraries where not modified only compiled against. If you use GNAT-GPL, according to AdaCore your code will fall under the GPL license with out exception which means you would need to distribute the source with your binary, now is that a bad thing?! However.. Keep in mind that if you modify Gnoga, or add to it, you will need to distribute those sources. Of course if you are doing that you should be sharing them with all of use to make Gnoga better :)

Q) Can I launch a browser on start up to access by Gnoga Application?

A) Yes, See Gnoga.Applications.Open_URL_* there is a version of that procedure
   for Mac OSX, Windows and Linux

Q) How to compile Gnoga on Debian (wheezy), AWS doesn't support WebSockers?

A) You will need to use a more recent version of AWS (and perhaps GNAT). You
can install GNAT-GPL from http://libre.adacore.com You can try building the latest AWS, git clone --recursive http://forge.open-do.org/anonscm/git/aws/aws.git with the gnat installed.

Q) Do I need Sqlite3 or MySQL installed to use Gnoga?

A) Only if you choose to build database apps or compilie the database examples. You can disable compiling the MySQL example if you want to just use SqlLite3.

Q) How do I get AWS on Windows so I can use Gnoga with GNAT?

A) You can either download the source package from any other distro of GNAT GPL or git clone the AWS repo, git clone --recursive http://forge.open-do.org/anonscm/git/aws/aws.git. The run the following:

win32\build.cmd c:\gnat\2014 

Replace C:\gnat\2014 with an alternate path to your installed gnat directory
if needed.

Q) How do I get AWS on Mac so I can use Gnoga with GNAT?

A) You can either download the source package from any other distro of GNAT GPL or git clone the AWS repo, git clone --recursive http://forge.open-do.org/anonscm/git/aws/aws.git  Once you have unpacked it, to build you will need to set the include path to include the needed C libraries (included as part of Xcode) that do not come with the GNAT GPL or GNAT FSF versions. The following is an example on Mavericks:

export C_INCLUDE_PATH=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/usr/include

after that you can do the regular: make setup build install

Q) How do I get sqlite3 and MySQL on my Mac for use with Gnoga?

Sqlite3 is already built in to Mac OS X. You would only need to install MySQL if you wanted to run the MySQL test or wanted to use MySQL. There are many ways to install the need MySQL client libraries on Mac OS X, http://brew.sh/ is a simple solution. Here is a simple set of steps once you have installed homebrew on Mac:

--  Insure that all is up to date
brew update
brew doctor
brew upgrade

brew install mysql-connector-c

Q) How can I set up test for Gnoga Applications?

A) There are many products on the market for testing Web sites / apps, any of those can be used with Gnoga as well. For example one inexpensive one for Mac is Fake.app http://fakeapp.com/

Q) Can I Build native Mac OS X applications with Gnoga.

A) Yes, I have build native apps using - http://macgapproject.github.io/
   Gnoga will be adding specific support for MacGap soon

Q) Can I build standalone true native desktop apps?

A) Yes, there are a number of ways of doing it. As time permits various examples will be created using available products. Here are some options:

- https://github.com/subtleGradient/Appify-UI
- XulRunner
- https://github.com/neam/webapp-xul-wrapper
- http://fluidapp.com/ on Mac
- http://www.tidesdk.org/
- https://github.com/apache/cordova-osx

Q) Can I buid native iOS apps for my iPhone or iPad?

A) In theory it should be possible using GNAT with an LLVM back end and PhoneGAP. It does exist and but I have not explored it.

Q) Can I buid native Android Apps?

A) In theory it should be possible using GNAT and PhoneGAP. I have not explored it yet.

Q) Can I build native Chromebook apps?

A) It should be possible using GNAT, I have not yet explored the requirements for it, but Chromebooks are running linux and Google does have a spec for it.

Q) Which Tags are bound in Gnoga?

A) See the spec file for Gnoga.Gui.Element, it is possible to create any HTML and bind it using the Element_Type.Create_With_HTML. Gnoga though only includes specific types that are needed for application development.

Q) Is it possible to use a reverse proxies / load balancers with Gnoga Apps?

A) Gnoga uses websockets which uses an http "upgrade" mechanism which means
the proxy or load balancer must have some knowledge of how to handle websockets. The two most popular Apache and Nginx support it:

For nginx see:
   http://nginx.org/en/docs/http/websocket.html
   http://nginx.com/blog/websocket-nginx/

For Apache 2.4.5+ see:
   http://httpd.apache.org/docs/2.4/mod/mod_proxy_wstunnel.html

Example of a Gnoga application as a subdirectory on a larger site using apache:

<VirtualHost *:80>
    ServerName gnoga.com
    ServerAlias www.gnoga.com
    ServerAdmin david@botton.com
    DocumentRoot /www/gnoga

    ProxyPass /snake http://www.gnoga.com:8080
    ProxyPassReverse /snake http://www.gnoga.com:8080
    ProxyPass /gnoga ws://www.gnoga.com:8080/gnoga
    ProxyPass /js http://www.gnoga.com:8080/js
    ProxyPass /html  http://www.gnoga.com:8080/html

    ErrorLog ${APACHE_LOG_DIR}/gnoga.err.log
    CustomLog ${APACHE_LOG_DIR}/gnoga.log common
</VirtualHost>

