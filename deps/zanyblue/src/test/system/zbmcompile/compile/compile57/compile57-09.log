--  -*- coding: utf-8 -*-
--
--  Ada implementation generated by ZBMCompile, V.*
--  This is a generated file and should not be edited.
--

package body ZBTest_Messages is

   package ZT  renames ZanyBlue.Text;
   package ZTC renames ZanyBlue.Text.Catalogs;

   subtype Z is ZTC.ZBMCompile_Definition;

   Facility_1 : aliased constant Wide_String := ""
      & "ZBTest"
      & "";
   Facilities : constant ZT.Constant_String_List (1 .. 1) := (
                   1 => Facility_1'Access);

   Key_1 : aliased constant Wide_String := ""
      & "40009"
      & "";
   Key_2 : aliased constant Wide_String := ""
      & "40002"
      & "";
   Key_3 : aliased constant Wide_String := ""
      & "40004"
      & "";
   Key_4 : aliased constant Wide_String := ""
      & "40006"
      & "";
   Key_5 : aliased constant Wide_String := ""
      & "40024"
      & "";
   Key_6 : aliased constant Wide_String := ""
      & "40019"
      & "";
   Key_7 : aliased constant Wide_String := ""
      & "40003"
      & "";
   Key_8 : aliased constant Wide_String := ""
      & "40007"
      & "";
   Key_9 : aliased constant Wide_String := ""
      & "40005"
      & "";
   Key_10 : aliased constant Wide_String := ""
      & "40001"
      & "";
   Key_11 : aliased constant Wide_String := ""
      & "00007"
      & "";
   Key_12 : aliased constant Wide_String := ""
      & "00001"
      & "";
   Key_13 : aliased constant Wide_String := ""
      & "40011"
      & "";
   Key_14 : aliased constant Wide_String := ""
      & "30024"
      & "";
   Key_15 : aliased constant Wide_String := ""
      & "00030"
      & "";
   Key_16 : aliased constant Wide_String := ""
      & "10006"
      & "";
   Key_17 : aliased constant Wide_String := ""
      & "30006"
      & "";
   Key_18 : aliased constant Wide_String := ""
      & "40013"
      & "";
   Key_19 : aliased constant Wide_String := ""
      & "20014"
      & "";
   Key_20 : aliased constant Wide_String := ""
      & "30022"
      & "";
   Key_21 : aliased constant Wide_String := ""
      & "40010"
      & "";
   Key_22 : aliased constant Wide_String := ""
      & "00023"
      & "";
   Key_23 : aliased constant Wide_String := ""
      & "00010"
      & "";
   Key_24 : aliased constant Wide_String := ""
      & "30004"
      & "";
   Key_25 : aliased constant Wide_String := ""
      & "10027"
      & "";
   Key_26 : aliased constant Wide_String := ""
      & "10021"
      & "";
   Key_27 : aliased constant Wide_String := ""
      & "10012"
      & "";
   Key_28 : aliased constant Wide_String := ""
      & "00008"
      & "";
   Key_29 : aliased constant Wide_String := ""
      & "00002"
      & "";
   Key_30 : aliased constant Wide_String := ""
      & "20010"
      & "";
   Key_31 : aliased constant Wide_String := ""
      & "10018"
      & "";
   Key_32 : aliased constant Wide_String := ""
      & "20024"
      & "";
   Key_33 : aliased constant Wide_String := ""
      & "30003"
      & "";
   Key_34 : aliased constant Wide_String := ""
      & "30019"
      & "";
   Key_35 : aliased constant Wide_String := ""
      & "00003"
      & "";
   Key_36 : aliased constant Wide_String := ""
      & "10025"
      & "";
   Key_37 : aliased constant Wide_String := ""
      & "30012"
      & "";
   Key_38 : aliased constant Wide_String := ""
      & "10007"
      & "";
   Key_39 : aliased constant Wide_String := ""
      & "20006"
      & "";
   Key_40 : aliased constant Wide_String := ""
      & "10013"
      & "";
   Key_41 : aliased constant Wide_String := ""
      & "20011"
      & "";
   Key_42 : aliased constant Wide_String := ""
      & "10011"
      & "";
   Key_43 : aliased constant Wide_String := ""
      & "30009"
      & "";
   Key_44 : aliased constant Wide_String := ""
      & "10032"
      & "";
   Key_45 : aliased constant Wide_String := ""
      & "30001"
      & "";
   Key_46 : aliased constant Wide_String := ""
      & "30007"
      & "";
   Key_47 : aliased constant Wide_String := ""
      & "10033"
      & "";
   Key_48 : aliased constant Wide_String := ""
      & "00022"
      & "";
   Key_49 : aliased constant Wide_String := ""
      & "10028"
      & "";
   Key_50 : aliased constant Wide_String := ""
      & "10014"
      & "";
   Key_51 : aliased constant Wide_String := ""
      & "30015"
      & "";
   Key_52 : aliased constant Wide_String := ""
      & "30020"
      & "";
   Key_53 : aliased constant Wide_String := ""
      & "10029"
      & "";
   Key_54 : aliased constant Wide_String := ""
      & "10030"
      & "";
   Key_55 : aliased constant Wide_String := ""
      & "10003"
      & "";
   Key_56 : aliased constant Wide_String := ""
      & "10020"
      & "";
   Key_57 : aliased constant Wide_String := ""
      & "30010"
      & "";
   Key_58 : aliased constant Wide_String := ""
      & "00031"
      & "";
   Key_59 : aliased constant Wide_String := ""
      & "10002"
      & "";
   Key_60 : aliased constant Wide_String := ""
      & "40022"
      & "";
   Key_61 : aliased constant Wide_String := ""
      & "10036"
      & "";
   Key_62 : aliased constant Wide_String := ""
      & "10016"
      & "";
   Key_63 : aliased constant Wide_String := ""
      & "40008"
      & "";
   Key_64 : aliased constant Wide_String := ""
      & "10019"
      & "";
   Key_65 : aliased constant Wide_String := ""
      & "30005"
      & "";
   Key_66 : aliased constant Wide_String := ""
      & "30013"
      & "";
   Key_67 : aliased constant Wide_String := ""
      & "30002"
      & "";
   Key_68 : aliased constant Wide_String := ""
      & "30011"
      & "";
   Key_69 : aliased constant Wide_String := ""
      & "30014"
      & "";
   Key_70 : aliased constant Wide_String := ""
      & "10034"
      & "";
   Key_71 : aliased constant Wide_String := ""
      & "00019"
      & "";
   Key_72 : aliased constant Wide_String := ""
      & "10035"
      & "";
   Key_73 : aliased constant Wide_String := ""
      & "10001"
      & "";
   Key_74 : aliased constant Wide_String := ""
      & "30016"
      & "";
   Key_75 : aliased constant Wide_String := ""
      & "30008"
      & "";
   Key_76 : aliased constant Wide_String := ""
      & "30018"
      & "";
   Key_77 : aliased constant Wide_String := ""
      & "30023"
      & "";
   Key_78 : aliased constant Wide_String := ""
      & "20019"
      & "";
   Key_79 : aliased constant Wide_String := ""
      & "30017"
      & "";
   Key_80 : aliased constant Wide_String := ""
      & "10015"
      & "";
   Key_81 : aliased constant Wide_String := ""
      & "10022"
      & "";
   Key_82 : aliased constant Wide_String := ""
      & "40021"
      & "";
   Key_83 : aliased constant Wide_String := ""
      & "00018"
      & "";
   Key_84 : aliased constant Wide_String := ""
      & "00011"
      & "";
   Key_85 : aliased constant Wide_String := ""
      & "00016"
      & "";
   Key_86 : aliased constant Wide_String := ""
      & "20003"
      & "";
   Key_87 : aliased constant Wide_String := ""
      & "10010"
      & "";
   Key_88 : aliased constant Wide_String := ""
      & "10037"
      & "";
   Key_89 : aliased constant Wide_String := ""
      & "20000"
      & "";
   Key_90 : aliased constant Wide_String := ""
      & "10026"
      & "";
   Key_91 : aliased constant Wide_String := ""
      & "10009"
      & "";
   Key_92 : aliased constant Wide_String := ""
      & "30021"
      & "";
   Key_93 : aliased constant Wide_String := ""
      & "10005"
      & "";
   Key_94 : aliased constant Wide_String := ""
      & "00009"
      & "";
   Key_95 : aliased constant Wide_String := ""
      & "20012"
      & "";
   Key_96 : aliased constant Wide_String := ""
      & "00032"
      & "";
   Key_97 : aliased constant Wide_String := ""
      & "00015"
      & "";
   Key_98 : aliased constant Wide_String := ""
      & "00013"
      & "";
   Key_99 : aliased constant Wide_String := ""
      & "40020"
      & "";
   Key_100 : aliased constant Wide_String := ""
      & "10031"
      & "";
   Key_101 : aliased constant Wide_String := ""
      & "00012"
      & "";
   Key_102 : aliased constant Wide_String := ""
      & "20015"
      & "";
   Key_103 : aliased constant Wide_String := ""
      & "00036"
      & "";
   Key_104 : aliased constant Wide_String := ""
      & "20009"
      & "";
   Key_105 : aliased constant Wide_String := ""
      & "00024"
      & "";
   Key_106 : aliased constant Wide_String := ""
      & "20001"
      & "";
   Key_107 : aliased constant Wide_String := ""
      & "20022"
      & "";
   Key_108 : aliased constant Wide_String := ""
      & "40012"
      & "";
   Key_109 : aliased constant Wide_String := ""
      & "00021"
      & "";
   Key_110 : aliased constant Wide_String := ""
      & "00029"
      & "";
   Key_111 : aliased constant Wide_String := ""
      & "00020"
      & "";
   Key_112 : aliased constant Wide_String := ""
      & "30000"
      & "";
   Key_113 : aliased constant Wide_String := ""
      & "10004"
      & "";
   Key_114 : aliased constant Wide_String := ""
      & "40017"
      & "";
   Key_115 : aliased constant Wide_String := ""
      & "40018"
      & "";
   Key_116 : aliased constant Wide_String := ""
      & "40023"
      & "";
   Key_117 : aliased constant Wide_String := ""
      & "20007"
      & "";
   Key_118 : aliased constant Wide_String := ""
      & "00017"
      & "";
   Key_119 : aliased constant Wide_String := ""
      & "10023"
      & "";
   Key_120 : aliased constant Wide_String := ""
      & "20017"
      & "";
   Key_121 : aliased constant Wide_String := ""
      & "20018"
      & "";
   Key_122 : aliased constant Wide_String := ""
      & "20023"
      & "";
   Key_123 : aliased constant Wide_String := ""
      & "40000"
      & "";
   Key_124 : aliased constant Wide_String := ""
      & "20020"
      & "";
   Key_125 : aliased constant Wide_String := ""
      & "10024"
      & "";
   Key_126 : aliased constant Wide_String := ""
      & "20021"
      & "";
   Key_127 : aliased constant Wide_String := ""
      & "40014"
      & "";
   Key_128 : aliased constant Wide_String := ""
      & "20016"
      & "";
   Key_129 : aliased constant Wide_String := ""
      & "00034"
      & "";
   Key_130 : aliased constant Wide_String := ""
      & "00025"
      & "";
   Key_131 : aliased constant Wide_String := ""
      & "20013"
      & "";
   Key_132 : aliased constant Wide_String := ""
      & "00035"
      & "";
   Key_133 : aliased constant Wide_String := ""
      & "00027"
      & "";
   Key_134 : aliased constant Wide_String := ""
      & "00028"
      & "";
   Key_135 : aliased constant Wide_String := ""
      & "00037"
      & "";
   Key_136 : aliased constant Wide_String := ""
      & "00026"
      & "";
   Key_137 : aliased constant Wide_String := ""
      & "00014"
      & "";
   Key_138 : aliased constant Wide_String := ""
      & "40015"
      & "";
   Key_139 : aliased constant Wide_String := ""
      & "20002"
      & "";
   Key_140 : aliased constant Wide_String := ""
      & "40016"
      & "";
   Key_141 : aliased constant Wide_String := ""
      & "20005"
      & "";
   Key_142 : aliased constant Wide_String := ""
      & "20008"
      & "";
   Key_143 : aliased constant Wide_String := ""
      & "20004"
      & "";
   Key_144 : aliased constant Wide_String := ""
      & "00006"
      & "";
   Key_145 : aliased constant Wide_String := ""
      & "00005"
      & "";
   Key_146 : aliased constant Wide_String := ""
      & "10008"
      & "";
   Key_147 : aliased constant Wide_String := ""
      & "00004"
      & "";
   Key_148 : aliased constant Wide_String := ""
      & "00033"
      & "";
   Key_149 : aliased constant Wide_String := ""
      & "10017"
      & "";
   Keys : constant ZT.Constant_String_List (1 .. 149) := (
                   1 => Key_1'Access,
                   2 => Key_2'Access,
                   3 => Key_3'Access,
                   4 => Key_4'Access,
                   5 => Key_5'Access,
                   6 => Key_6'Access,
                   7 => Key_7'Access,
                   8 => Key_8'Access,
                   9 => Key_9'Access,
                   10 => Key_10'Access,
                   11 => Key_11'Access,
                   12 => Key_12'Access,
                   13 => Key_13'Access,
                   14 => Key_14'Access,
                   15 => Key_15'Access,
                   16 => Key_16'Access,
                   17 => Key_17'Access,
                   18 => Key_18'Access,
                   19 => Key_19'Access,
                   20 => Key_20'Access,
                   21 => Key_21'Access,
                   22 => Key_22'Access,
                   23 => Key_23'Access,
                   24 => Key_24'Access,
                   25 => Key_25'Access,
                   26 => Key_26'Access,
                   27 => Key_27'Access,
                   28 => Key_28'Access,
                   29 => Key_29'Access,
                   30 => Key_30'Access,
                   31 => Key_31'Access,
                   32 => Key_32'Access,
                   33 => Key_33'Access,
                   34 => Key_34'Access,
                   35 => Key_35'Access,
                   36 => Key_36'Access,
                   37 => Key_37'Access,
                   38 => Key_38'Access,
                   39 => Key_39'Access,
                   40 => Key_40'Access,
                   41 => Key_41'Access,
                   42 => Key_42'Access,
                   43 => Key_43'Access,
                   44 => Key_44'Access,
                   45 => Key_45'Access,
                   46 => Key_46'Access,
                   47 => Key_47'Access,
                   48 => Key_48'Access,
                   49 => Key_49'Access,
                   50 => Key_50'Access,
                   51 => Key_51'Access,
                   52 => Key_52'Access,
                   53 => Key_53'Access,
                   54 => Key_54'Access,
                   55 => Key_55'Access,
                   56 => Key_56'Access,
                   57 => Key_57'Access,
                   58 => Key_58'Access,
                   59 => Key_59'Access,
                   60 => Key_60'Access,
                   61 => Key_61'Access,
                   62 => Key_62'Access,
                   63 => Key_63'Access,
                   64 => Key_64'Access,
                   65 => Key_65'Access,
                   66 => Key_66'Access,
                   67 => Key_67'Access,
                   68 => Key_68'Access,
                   69 => Key_69'Access,
                   70 => Key_70'Access,
                   71 => Key_71'Access,
                   72 => Key_72'Access,
                   73 => Key_73'Access,
                   74 => Key_74'Access,
                   75 => Key_75'Access,
                   76 => Key_76'Access,
                   77 => Key_77'Access,
                   78 => Key_78'Access,
                   79 => Key_79'Access,
                   80 => Key_80'Access,
                   81 => Key_81'Access,
                   82 => Key_82'Access,
                   83 => Key_83'Access,
                   84 => Key_84'Access,
                   85 => Key_85'Access,
                   86 => Key_86'Access,
                   87 => Key_87'Access,
                   88 => Key_88'Access,
                   89 => Key_89'Access,
                   90 => Key_90'Access,
                   91 => Key_91'Access,
                   92 => Key_92'Access,
                   93 => Key_93'Access,
                   94 => Key_94'Access,
                   95 => Key_95'Access,
                   96 => Key_96'Access,
                   97 => Key_97'Access,
                   98 => Key_98'Access,
                   99 => Key_99'Access,
                   100 => Key_100'Access,
                   101 => Key_101'Access,
                   102 => Key_102'Access,
                   103 => Key_103'Access,
                   104 => Key_104'Access,
                   105 => Key_105'Access,
                   106 => Key_106'Access,
                   107 => Key_107'Access,
                   108 => Key_108'Access,
                   109 => Key_109'Access,
                   110 => Key_110'Access,
                   111 => Key_111'Access,
                   112 => Key_112'Access,
                   113 => Key_113'Access,
                   114 => Key_114'Access,
                   115 => Key_115'Access,
                   116 => Key_116'Access,
                   117 => Key_117'Access,
                   118 => Key_118'Access,
                   119 => Key_119'Access,
                   120 => Key_120'Access,
                   121 => Key_121'Access,
                   122 => Key_122'Access,
                   123 => Key_123'Access,
                   124 => Key_124'Access,
                   125 => Key_125'Access,
                   126 => Key_126'Access,
                   127 => Key_127'Access,
                   128 => Key_128'Access,
                   129 => Key_129'Access,
                   130 => Key_130'Access,
                   131 => Key_131'Access,
                   132 => Key_132'Access,
                   133 => Key_133'Access,
                   134 => Key_134'Access,
                   135 => Key_135'Access,
                   136 => Key_136'Access,
                   137 => Key_137'Access,
                   138 => Key_138'Access,
                   139 => Key_139'Access,
                   140 => Key_140'Access,
                   141 => Key_141'Access,
                   142 => Key_142'Access,
                   143 => Key_143'Access,
                   144 => Key_144'Access,
                   145 => Key_145'Access,
                   146 => Key_146'Access,
                   147 => Key_147'Access,
                   148 => Key_148'Access,
                   149 => Key_149'Access);

   Locale_1 : aliased constant Wide_String := ""
      & "";
   Locales : constant ZT.Constant_String_List (1 .. 1) := (
                   1 => Locale_1'Access);

   Pool_Data_1 : aliased constant Wide_String := ""
      & "The prepend command adds a value to the beginning of a list"
      & " parameter."
      & Wide_Character'Val (16#000A#)
      & "If the parameter doesn't exist in the current scope, it is "
      & "created as a list"
      & Wide_Character'Val (16#000A#)
      & "parameter.  The prepend append is normally used to force a "
      & "path to the ""front"
      & Wide_Character'Val (16#000A#)
      & "of a search path parameter, e.g., the ""path"" or ""searchp"
      & "ath"" parameters."
      & Wide_Character'Val (16#000A#)
      & Wide_Character'Val (16#000A#)
      & "Example of use, where the ""begin"" command is used start a"
      & " new, empty, scope"
      & Wide_Character'Val (16#000A#)
      & Wide_Character'Val (16#000A#)
      & "ZBTest> begin"
      & Wide_Character'Val (16#000A#)
      & "ZBTest> print -l l"
      & Wide_Character'Val (16#000A#)
      & "Emtpy list"
      & Wide_Character'Val (16#000A#)
      & "ZBTest> prepend l a"
      & Wide_Character'Val (16#000A#)
      & "ZBTest> print -l l"
      & Wide_Character'Val (16#000A#)
      & "1) ""a"""
      & Wide_Character'Val (16#000A#)
      & "ZBTest> prepend l b"
      & Wide_Character'Val (16#000A#)
      & "ZBTest> print -l l"
      & Wide_Character'Val (16#000A#)
      & "1) ""b"""
      & Wide_Character'Val (16#000A#)
      & "2) ""a""Start a new scope level.  Variable assignments, e.g"
      & ".,"
      & Wide_Character'Val (16#000A#)
      & Wide_Character'Val (16#000A#)
      & "    set xyx abc"
      & Wide_Character'Val (16#000A#)
      & Wide_Character'Val (16#000A#)
      & "retain their effect for the lifetime of the scope.  Ending "
      & "the scope"
      & Wide_Character'Val (16#000A#)
      & "using the ""end"" command restores any previous values for "
      & "the parameters"
      & Wide_Character'Val (16#000A#)
      & "adjusted during the scope."
      & Wide_Character'Val (16#000A#)
      & Wide_Character'Val (16#000A#)
      & "It is not normally necessary to explicitly begin a new scop"
      & "e, each test"
      & Wide_Character'Val (16#000A#)
      & "script run automatically starts a new scope which is automa"
      & "tically ended"
      & Wide_Character'Val (16#000A#)
      & "when the test script completes."
      & Wide_Character'Val (16#000A#)
      & Wide_Character'Val (16#000A#)
      & "The ""begin"" command does not have options.Exit a paramete"
      & "r scope.  Any assignments to made duing the scope"
      & Wide_Character'Val (16#000A#)
      & "are lost.  Previous definitions are restored, e.g.,"
      & Wide_Character'Val (16#000A#)
      & Wide_Character'Val (16#000A#)
      & "    set xyz abc"
      & Wide_Character'Val (16#000A#)
      & "    begin"
      & Wide_Character'Val (16#000A#)
      & "    set xyz 123"
      & Wide_Character'Val (16#000A#)
      & "    echo $xyz"
      & Wide_Character'Val (16#000A#)
      & "    end"
      & Wide_Character'Val (16#000A#)
      & "    echo $xyz"
      & Wide_Character'Val (16#000A#)
      & Wide_Character'Val (16#000A#)
      & "The first ""echo"" prints the value ""123"" which the secon"
      & "d prints the value"
      & Wide_Character'Val (16#000A#)
      & """abc""."
      & Wide_Character'Val (16#000A#)
      & Wide_Character'Val (16#000A#)
      & "It not normally necessary to use the ""begin"" and ""end"" "
      & "commands as running"
      & Wide_Character'Val (16#000A#)
      & "a test script automatically start a new scope which is ende"
      & "d when the script"
      & Wide_Character'Val (16#000A#)
      & "completes.Define an internal parameter (target) based on th"
      & "e value of an"
      & Wide_Character'Val (16#000A#)
      & "environment variable."
      & Wide_Character'Val (16#000A#)
      & Wide_Character'Val (16#000A#)
      & "The options are"
      & Wide_Character'Val (16#000A#)
      & "  -l  Define an internal list parameter by splitting on the"
      & " pathsep"
      & Wide_Character'Val (16#000A#)
      & "  -s  Define a simple scalar (string) parameter (default)"
      & Wide_Character'Val (16#000A#)
      & "  -a  If defining a list parameter, append the values"
      & Wide_Character'Val (16#000A#)
      & "  -p  If defining a list parameter, prepend the values"
      & Wide_Character'Val (16#000A#)
      & Wide_Character'Val (16#000A#)
      & "If the target is not given then import to name (lowercased)"
      & ".Conditionally set the value of a parameter to the given va"
      & "lue provided"
      & Wide_Character'Val (16#000A#)
      & "the parameter is not already defined.  This can be used to "
      & "allow command line"
      & Wide_Character'Val (16#000A#)
      & "definitions of parameters to over-ride script definitions. "
      & " Or, put another"
      & Wide_Character'Val (16#000A#)
      & "way, allow scripts to provide defaults for parameters not d"
      & "efined on the"
      & Wide_Character'Val (16#000A#)
      & "command line.The compare command compares (with regular exp"
      & "ression matching) a"
      & Wide_Character'Val (16#000A#)
      & "generated log file with a reference log file.  It the files"
      & " match, a"
      & Wide_Character'Val (16#000A#)
      & ".ok file is created and the number of OK tests is increment"
      & "ed, otherwise"
      & Wide_Character'Val (16#000A#)
      & "a .fail file is created and the number of FAIL tests is inc"
      & "remented.Dump parameters values.  The default is to dump th"
      & "e parameters"
      & Wide_Character'Val (16#000A#)
      & "for the current scope.  This is primarily a debugging comma"
      & "nd."
      & Wide_Character'Val (16#000A#)
      & Wide_Character'Val (16#000A#)
      & "The options are"
      & Wide_Character'Val (16#000A#)
      & "  -a  Dump the parameters for all scopes"
      & Wide_Character'Val (16#000A#)
      & "  -o  Dump the output to a file in the test areaGet help in"
      & "formation on a command.  Without a command argument the"
      & Wide_Character'Val (16#000A#)
      & "help command prints a summary of available commands.  With "
      & "an argument"
      & Wide_Character'Val (16#000A#)
      & "the help command print help information on the argument com"
      & "mand.Exit a test script.  This command is normally only use"
      & "d when entering"
      & Wide_Character'Val (16#000A#)
      & "commands interactively to exit the zbtest application.  Usi"
      & "ng it in a test"
      & Wide_Character'Val (16#000A#)
      & "script causes immediate exit of the zbtest application.The "
      & "append command adds a value to the end of a list parameter "
      & "within"
      & Wide_Character'Val (16#000A#)
      & "current scope.This is ZBTest, a simple application testing "
      & "application."
      & Wide_Character'Val (16#000A#)
      & Wide_Character'Val (16#000A#)
      & "Available commands:"
      & Wide_Character'Val (16#000A#)
      & "This is ZBTest, Version {0,*}.{1,*}.{2,*} {3} (r{4}) at {5,"
      & "time} on {5,date}Set the value of a parameter (option selec"
      & "ts type: integer, boolean, ...){0:>3}) ""setifundef"", set "
      & "the value of a parameter if it is not definedThe parameter "
      & """{0}"" is already defined, ignoring conditional definition"
      & "Error, the value ""{0}"" is not supported (only supported v"
      & "alue is ""now""){0:>3}) ""getenv"", define a parameter base"
      & "d on an environment variableCopy a file to the test area to"
      & " use as input to commands under test.Usage: execute [ -f | "
      & "-s | -o output ] command [ command-arg ... ]{0:>3}) ""files"
      & "tat"", write status of a test area file to a log filePrint "
      & "the value of a scalar (-s, default) or list (-l) parameters"
      & "Generated status report on the file ""{0}"" (non-existent) "
      & "to ""{1}""zbtest [ -h ] [ -t test-area ] [ -X xml-summary ]"
      & " [ test-script ]{0:>3}) ""end"", end a parameter scope retu"
      & "rning to previous scopeError, failure for test ""{0}"", une"
      & "xpected exception ""{1,name}""Error, the parameter ""{0}"" "
      & "is not an integer, cannot incrementError, test area ""{0}"""
      & ", already exists and is not a directory"
      & Wide_Character'Val (16#000A#)
      & "For additional information on a command, use ""help command"
      & """"
      & Wide_Character'Val (16#000A#)
      & "Copyright (c) 2009-{0,*}, Michael Rohan.  All rights reserv"
      & "edUsage: print [ -l | -s ] parameter [ -l | -s | parameter "
      & "...Warning, the source ""{0}"" could not be found, failed t"
      & "o copyUsage: setifundef [ -s | -i | -b | -f | -t ] paramete"
      & "r value{0:>3}) ""dump"", dump the contents of the parameter"
      & " scope(s){0:>3}) ""compare"", compare a log file with a ref"
      & "erence logZBTest completed at {0,time} on {0,date}, elapsed"
      & " time {1}Error, regular expression matching failed: {0} ({0"
      & ",name}){0:>3}) ""which"", print the location of a file or c"
      & "ommandWarning: the environment variable ""{0}"" is not defi"
      & "nedUsage: getenv [ -l | -s | -p | -a ] name [ parameter ]Er"
      & "ror, failed to remove existing test area ""{0}"": {1}Usage:"
      & " set [ -s | -i | -b | -f | -t ] parameter valueWarning, tes"
      & "t area ""{0}"", already exists, removing it{0:>3}) ""prepen"
      & "d"", prepend a value to list parameterError, text function "
      & "call to unknown function: ""{0}""{0:>3}) ""append"", append"
      & " values to a list parameter{0:>3}) ""help"", print help inf"
      & "ormation on commandsError, unexpected exception ({0,name}) "
      & "encounteredGenerated status report on the file ""{0}"" to """
      & "{1}""Error, the reference log file ""{0}"" was not foundErr"
      & "or, failed to create the test area ""{0}"": {1}{0:>3}) ""re"
      & "name"", rename a file in the test area{0:>3}) ""delete"", d"
      & "elete a file in the test areaError, failed to create the di"
      & "rectory ""{0}"": {1}Warning, referenced to undefined parame"
      & "ter ""{0}""Error, too many arguments for the command ""{0}"""
      & "Error, failed to locate the ZBTest script ""{0}""{0:>3}) """
      & "print"", print the value of parametersSetting the parameter"
      & " ""{0}"" to the value ""{1}""Error, too few arguments for t"
      & "he command ""{0}""Write status of a test area file to a log"
      & " fileError, could not locate the executeable ""{0}""Error, "
      & "unexpected command line argument ""{0}""No operation.  The "
      & "noop command does nothing.Warning, failed to rename ""{0}"""
      & " to ""{1}"": {2}{0:>3}) ""exit"", exit the current test scr"
      & "ipt{0:>3}) ""copy"", copy a file to the test area{0:>3}) """
      & "begin"", begin a new parameter scope{0:>3}) ""set"", set th"
      & "e value of a parameter{0:>3}) ""execute"", execute a system"
      & " commandError, failed to rename ""{0}"" to ""{1}"": {2}Copi"
      & "ed the directory ""{0}"" to the test areaError, missing arg"
      & "uments for option ""{0}""Error, cannot ""end"", currently a"
      & "t level 0{0:>3}) ""run"", run another ZBTest script{0:>3}) "
      & """noop"", the no operation command{0:>3}) ""desc"", set the"
      & " test description{0:>3}) ""echo"", echo arguments to output"
      & "Usage: compare log-file [ ref-log-file ]Error, missing argu"
      & "ment for option ""{0}""Error, the log file ""{0}"" was not "
      & "foundCreate a new directory in the test areaStatus for ""{0"
      & "}"": {1} failures, {2} OKCopied the file ""{0}"" to the tes"
      & "t areaIncremented the parmeter ""{0}"" to {1}Usage: dump [ "
      & "-o output-file ] [ -a ]Warning, the file ""{0}"" was not fo"
      & "undError, test script, ""{0}"", not foundUsage for unknown "
      & "command, not used.Warning, failed to delete ""{0}"": {1}Err"
      & "or, ""{0}"" is not a known command{0:>3}) ""mkdir"", create"
      & " a directoryThe parameter ""{0}"" is not definedCreating te"
      & "st area directory ""{0}""Usage: which [ -e | -f ] file ...E"
      & "xecuting the 'undo' action ""{0}""Set the test description "
      & "to ""{0}""Executing the ZBTest script ""{0}""Delete a file "
      & "from the test areaError, empty text function callRenamed th"
      & "e file ""{0}"" to ""{1}""Usage: rename old-name new-nameCom"
      & "mand completed successfullyUsage: prepend parameter valueTh"
      & "e file ""{0}"" does not existUsage: append parameter valueU"
      & "sage: filestat name log-filePrint the locations of filesCre"
      & "ated the directory ""{0}""Executing the command ""{0}""Dele"
      & "ted the directory ""{0}""Summary line for a commandError, i"
      & "nvalid value ""{0}""Echo arguments to outputUsage: help [ c"
      & "ommand ]Deleted the file ""{0}""Test ""{0}"" successfulUsag"
      & "e: desc word ...Usage: echo name ...Not a known command.Usa"
      & "ge: delete nameTest ""{0}"" failedUsage: mkdir nameExecute "
      & "a commandUsage: run scriptFailure expectedFile name: ""{0}"""
      & "Usage: copy fileSuccess expectedFile size: {0}File date: {0"
      & "}Command failedFile type: {0}{0} ({1}) {2}Rename a fileUsag"
      & "e: beginRun a scriptUsage: exitUsage: noopUsage: end{0}) """
      & "{1}""NOT-USED"
      & "";
   Pool : constant ZT.Static_Message_Pool_Type := Pool_Data_1'Access;

   Messages : constant ZTC.ZBMCompile_List (1 .. 149) := (
                 1 => Z'(First => 8218, Last => 8231,
                    Facility_Index => 1, Key_Index => 135,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Command failed
                 2 => Z'(First => 7937, Last => 7958,
                    Facility_Index => 1, Key_Index => 118,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Deleted the file "{0}"
                 3 => Z'(First => 6363, Last => 6405,
                    Facility_Index => 1, Key_Index => 69,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0:>3}) "execute", execute a system command
                 4 => Z'(First => 5586, Last => 5633,
                    Facility_Index => 1, Key_Index => 52,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0:>3}) "delete", delete a file in the test area
                 5 => Z'(First => 3125, Last => 3203,
                    Facility_Index => 1, Key_Index => 11,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦This is ZBTest, a simple application testing applicatio⤶
   --  ↦n.⏎
   --  ↦⏎
   --  ↦Available commands:⏎
                 6 => Z'(First => 8126, Last => 8141,
                    Facility_Index => 1, Key_Index => 129,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Failure expected
                 7 => Z'(First => 7838, Last => 7863,
                    Facility_Index => 1, Key_Index => 112,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Summary line for a command
                 8 => Z'(First => 6449, Last => 6491,
                    Facility_Index => 1, Key_Index => 71,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Copied the directory "{0}" to the test area
                 9 => Z'(First => 5682, Last => 5729,
                    Facility_Index => 1, Key_Index => 54,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Warning, referenced to undefined parameter "{0}"
                 10 => Z'(First => 1820, Last => 2130,
                    Facility_Index => 1, Key_Index => 5,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Conditionally set the value of a parameter to the given⤶
   --  ↦ value provided⏎
   --  ↦the parameter is not already defined.  This can be used⤶
   --  ↦ to allow command line⏎
   --  ↦definitions of parameters to over-ride script definitio⤶
   --  ↦ns.  Or, put another⏎
   --  ↦way, allow scripts to provide defaults for parameters n⤶
   --  ↦ot defined on the⏎
   --  ↦command line.
                 11 => Z'(First => 8158, Last => 8173,
                    Facility_Index => 1, Key_Index => 131,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Usage: copy file
                 12 => Z'(First => 7391, Last => 7414,
                    Facility_Index => 1, Key_Index => 114,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Set the test description
                 13 => Z'(First => 6188, Last => 6231,
                    Facility_Index => 1, Key_Index => 65,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0:>3}) "exit", exit the current test script
                 14 => Z'(First => 5391, Last => 5440,
                    Facility_Index => 1, Key_Index => 48,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Generated status report on the file "{0}" to "{1}"
                 15 => Z'(First => 2407, Last => 2638,
                    Facility_Index => 1, Key_Index => 7,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Dump parameters values.  The default is to dump the par⤶
   --  ↦ameters⏎
   --  ↦for the current scope.  This is primarily a debugging c⤶
   --  ↦ommand.⏎
   --  ↦⏎
   --  ↦The options are⏎
   --  ↦  -a  Dump the parameters for all scopes⏎
   --  ↦  -o  Dump the output to a file in the test area
                 16 => Z'(First => 7729, Last => 7756,
                    Facility_Index => 1, Key_Index => 108,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Print the locations of files
                 17 => Z'(First => 6276, Last => 6319,
                    Facility_Index => 1, Key_Index => 67,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0:>3}) "begin", begin a new parameter scope
                 18 => Z'(First => 5490, Last => 5537,
                    Facility_Index => 1, Key_Index => 50,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, failed to create the test area "{0}": {1}
                 19 => Z'(First => 1, Last => 519,
                    Facility_Index => 1, Key_Index => 1,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦The prepend command adds a value to the beginning of a ⤶
   --  ↦list parameter.⏎
   --  ↦If the parameter doesn't exist in the current scope, it⤶
   --  ↦ is created as a list⏎
   --  ↦parameter.  The prepend append is normally used to forc⤶
   --  ↦e a path to the "front⏎
   --  ↦of a search path parameter, e.g., the "path" or "search⤶
   --  ↦path" parameters.⏎
   --  ↦⏎
   --  ↦Example of use, where the "begin" command is used start⤶
   --  ↦ a new, empty, scope⏎
   --  ↦⏎
   --  ↦ZBTest> begin⏎
   --  ↦ZBTest> print -l l⏎
   --  ↦Emtpy list⏎
   --  ↦ZBTest> prepend l a⏎
   --  ↦ZBTest> print -l l⏎
   --  ↦1) "a"⏎
   --  ↦ZBTest> prepend l b⏎
   --  ↦ZBTest> print -l l⏎
   --  ↦1) "b"⏎
   --  ↦2) "a"
                 20 => Z'(First => 8058, Last => 8074,
                    Facility_Index => 1, Key_Index => 125,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Test "{0}" failed
                 21 => Z'(First => 7784, Last => 7810,
                    Facility_Index => 1, Key_Index => 110,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Executing the command "{0}"
                 22 => Z'(First => 5188, Last => 5239,
                    Facility_Index => 1, Key_Index => 44,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, text function call to unknown function: "{0}"
                 23 => Z'(First => 981, Last => 1421,
                    Facility_Index => 1, Key_Index => 3,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Exit a parameter scope.  Any assignments to made duing ⤶
   --  ↦the scope⏎
   --  ↦are lost.  Previous definitions are restored, e.g.,⏎
   --  ↦⏎
   --  ↦    set xyz abc⏎
   --  ↦    begin⏎
   --  ↦    set xyz 123⏎
   --  ↦    echo $xyz⏎
   --  ↦    end⏎
   --  ↦    echo $xyz⏎
   --  ↦⏎
   --  ↦The first "echo" prints the value "123" which the secon⤶
   --  ↦d prints the value⏎
   --  ↦"abc".⏎
   --  ↦⏎
   --  ↦It not normally necessary to use the "begin" and "end" ⤶
   --  ↦commands as running⏎
   --  ↦a test script automatically start a new scope which is ⤶
   --  ↦ended when the script⏎
   --  ↦completes.
                 24 => Z'(First => 7612, Last => 7641,
                    Facility_Index => 1, Key_Index => 104,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Usage: prepend parameter value
                 25 => Z'(First => 6008, Last => 6052,
                    Facility_Index => 1, Key_Index => 61,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, could not locate the executeable "{0}"
                 26 => Z'(First => 5291, Last => 5340,
                    Facility_Index => 1, Key_Index => 46,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0:>3}) "help", print help information on commands
                 27 => Z'(First => 7671, Last => 7699,
                    Facility_Index => 1, Key_Index => 106,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Usage: append parameter value
                 28 => Z'(First => 4977, Last => 5029,
                    Facility_Index => 1, Key_Index => 40,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, failed to remove existing test area "{0}": {1}
                 29 => Z'(First => 7489, Last => 7519,
                    Facility_Index => 1, Key_Index => 100,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, empty text function call
                 30 => Z'(First => 5083, Last => 5135,
                    Facility_Index => 1, Key_Index => 42,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Warning, test area "{0}", already exists, removing it
                 31 => Z'(First => 4756, Last => 4812,
                    Facility_Index => 1, Key_Index => 36,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, regular expression matching failed: {0} ({0,name⤶
   --  ↦})
                 32 => Z'(First => 8092, Last => 8108,
                    Facility_Index => 1, Key_Index => 127,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Execute a command
                 33 => Z'(First => 7980, Last => 7999,
                    Facility_Index => 1, Key_Index => 121,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Usage: desc word ...
                 34 => Z'(First => 6098, Last => 6142,
                    Facility_Index => 1, Key_Index => 63,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦No operation.  The noop command does nothing.
                 35 => Z'(First => 8020, Last => 8039,
                    Facility_Index => 1, Key_Index => 123,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Not a known command.
                 36 => Z'(First => 5824, Last => 5869,
                    Facility_Index => 1, Key_Index => 57,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0:>3}) "print", print the value of parameters
                 37 => Z'(First => 7914, Last => 7936,
                    Facility_Index => 1, Key_Index => 117,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Usage: help [ command ]
                 38 => Z'(First => 7551, Last => 7581,
                    Facility_Index => 1, Key_Index => 102,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Usage: rename old-name new-name
                 39 => Z'(First => 5916, Last => 5961,
                    Facility_Index => 1, Key_Index => 59,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, too few arguments for the command "{0}"
                 40 => Z'(First => 7959, Last => 7979,
                    Facility_Index => 1, Key_Index => 119,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Test "{0}" successful
                 41 => Z'(First => 7358, Last => 7390,
                    Facility_Index => 1, Key_Index => 96,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Executing the 'undo' action "{0}"
                 42 => Z'(First => 5634, Last => 5681,
                    Facility_Index => 1, Key_Index => 53,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, failed to create the directory "{0}": {1}
                 43 => Z'(First => 4869, Last => 4922,
                    Facility_Index => 1, Key_Index => 38,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Warning: the environment variable "{0}" is not defined
                 44 => Z'(First => 7864, Last => 7889,
                    Facility_Index => 1, Key_Index => 113,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, invalid value "{0}"
                 45 => Z'(First => 7424, Last => 7456,
                    Facility_Index => 1, Key_Index => 98,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Executing the ZBTest script "{0}"
                 46 => Z'(First => 7222, Last => 7256,
                    Facility_Index => 1, Key_Index => 92,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0:>3}) "mkdir", create a directory
                 47 => Z'(First => 5730, Last => 5776,
                    Facility_Index => 1, Key_Index => 55,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, too many arguments for the command "{0}"
                 48 => Z'(First => 4521, Last => 4580,
                    Facility_Index => 1, Key_Index => 32,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Usage: setifundef [ -s | -i | -b | -f | -t ] parameter ⤶
   --  ↦value
                 49 => Z'(First => 7391, Last => 7414,
                    Facility_Index => 1, Key_Index => 115,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Set the test description
                 50 => Z'(First => 7291, Last => 7324,
                    Facility_Index => 1, Key_Index => 94,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Creating test area directory "{0}"
                 51 => Z'(First => 5441, Last => 5489,
                    Facility_Index => 1, Key_Index => 49,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, the reference log file "{0}" was not found
                 52 => Z'(First => 4640, Last => 4697,
                    Facility_Index => 1, Key_Index => 34,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0:>3}) "compare", compare a log file with a reference ⤶
   --  ↦log
                 53 => Z'(First => 4279, Last => 4339,
                    Facility_Index => 1, Key_Index => 28,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦⏎
   --  ↦For additional information on a command, use "help comm⤶
   --  ↦and"⏎
                 54 => Z'(First => 7757, Last => 7783,
                    Facility_Index => 1, Key_Index => 109,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Created the directory "{0}"
                 55 => Z'(First => 7079, Last => 7114,
                    Facility_Index => 1, Key_Index => 88,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, test script, "{0}", not found
                 56 => Z'(First => 5538, Last => 5585,
                    Facility_Index => 1, Key_Index => 51,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0:>3}) "rename", rename a file in the test area
                 57 => Z'(First => 4401, Last => 4460,
                    Facility_Index => 1, Key_Index => 30,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Usage: print [ -l | -s ] parameter [ -l | -s | paramete⤶
   --  ↦r ...
                 58 => Z'(First => 3439, Last => 3441,
                    Facility_Index => 1, Key_Index => 148,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0}
                 59 => Z'(First => 7811, Last => 7837,
                    Facility_Index => 1, Key_Index => 111,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Deleted the directory "{0}"
                 60 => Z'(First => 7151, Last => 7186,
                    Facility_Index => 1, Key_Index => 90,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Warning, failed to delete "{0}": {1}
                 61 => Z'(First => 5240, Last => 5290,
                    Facility_Index => 1, Key_Index => 45,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0:>3}) "append", append values to a list parameter
                 62 => Z'(First => 4030, Last => 4093,
                    Facility_Index => 1, Key_Index => 24,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0:>3}) "end", end a parameter scope returning to previ⤶
   --  ↦ous scope
                 63 => Z'(First => 7642, Last => 7670,
                    Facility_Index => 1, Key_Index => 105,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦The file "{0}" does not exist
                 64 => Z'(First => 6930, Last => 6967,
                    Facility_Index => 1, Key_Index => 84,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Copied the file "{0}" to the test area
                 65 => Z'(First => 5341, Last => 5390,
                    Facility_Index => 1, Key_Index => 47,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, unexpected exception ({0,name}) encountered
                 66 => Z'(First => 4156, Last => 4217,
                    Facility_Index => 1, Key_Index => 26,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, the parameter "{0}" is not an integer, cannot in⤶
   --  ↦crement
                 67 => Z'(First => 8328, Last => 8337,
                    Facility_Index => 1, Key_Index => 144,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0}) "{1}"
                 68 => Z'(First => 7700, Last => 7728,
                    Facility_Index => 1, Key_Index => 107,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Usage: filestat name log-file
                 69 => Z'(First => 7005, Last => 7041,
                    Facility_Index => 1, Key_Index => 86,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Usage: dump [ -o output-file ] [ -a ]
                 70 => Z'(First => 5030, Last => 5082,
                    Facility_Index => 1, Key_Index => 41,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Usage: set [ -s | -i | -b | -f | -t ] parameter value
                 71 => Z'(First => 3769, Last => 3834,
                    Facility_Index => 1, Key_Index => 20,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0:>3}) "filestat", write status of a test area file to⤶
   --  ↦ a log file
                 72 => Z'(First => 6774, Last => 6813,
                    Facility_Index => 1, Key_Index => 80,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, missing argument for option "{0}"
                 73 => Z'(First => 5136, Last => 5187,
                    Facility_Index => 1, Key_Index => 43,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0:>3}) "prepend", prepend a value to list parameter
                 74 => Z'(First => 3900, Last => 3964,
                    Facility_Index => 1, Key_Index => 22,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Generated status report on the file "{0}" (non-existent⤶
   --  ↦) to "{1}"
                 75 => Z'(First => 3495, Last => 3565,
                    Facility_Index => 1, Key_Index => 16,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, the value "{0}" is not supported (only supported⤶
   --  ↦ value is "now")
                 76 => Z'(First => 8338, Last => 8345,
                    Facility_Index => 1, Key_Index => 146,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦NOT-USED
                 77 => Z'(First => 7520, Last => 7550,
                    Facility_Index => 1, Key_Index => 101,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Renamed the file "{0}" to "{1}"
                 78 => Z'(First => 8284, Last => 8295,
                    Facility_Index => 1, Key_Index => 140,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Run a script
                 79 => Z'(First => 7582, Last => 7611,
                    Facility_Index => 1, Key_Index => 103,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Command completed successfully
                 80 => Z'(First => 6853, Last => 6891,
                    Facility_Index => 1, Key_Index => 82,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Create a new directory in the test area
                 81 => Z'(First => 4813, Last => 4868,
                    Facility_Index => 1, Key_Index => 37,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0:>3}) "which", print the location of a file or comman⤶
   --  ↦d
                 82 => Z'(First => 8307, Last => 8317,
                    Facility_Index => 1, Key_Index => 142,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Usage: noop
                 83 => Z'(First => 7391, Last => 7423,
                    Facility_Index => 1, Key_Index => 97,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Set the test description to "{0}"
                 84 => Z'(First => 6654, Last => 6693,
                    Facility_Index => 1, Key_Index => 76,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0:>3}) "desc", set the test description
                 85 => Z'(First => 4923, Last => 4976,
                    Facility_Index => 1, Key_Index => 39,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Usage: getenv [ -l | -s | -p | -a ] name [ parameter ]
                 86 => Z'(First => 3635, Last => 3702,
                    Facility_Index => 1, Key_Index => 18,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Copy a file to the test area to use as input to command⤶
   --  ↦s under test.
                 87 => Z'(First => 8232, Last => 8245,
                    Facility_Index => 1, Key_Index => 136,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦File type: {0}
                 88 => Z'(First => 7457, Last => 7488,
                    Facility_Index => 1, Key_Index => 99,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Delete a file from the test area
                 89 => Z'(First => 7257, Last => 7290,
                    Facility_Index => 1, Key_Index => 93,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦The parameter "{0}" is not defined
                 90 => Z'(First => 6734, Last => 6773,
                    Facility_Index => 1, Key_Index => 78,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Usage: compare log-file [ ref-log-file ]
                 91 => Z'(First => 4581, Last => 4639,
                    Facility_Index => 1, Key_Index => 33,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0:>3}) "dump", dump the contents of the parameter scop⤶
   --  ↦e(s)
                 92 => Z'(First => 3204, Last => 3279,
                    Facility_Index => 1, Key_Index => 12,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦This is ZBTest, Version {0,*}.{1,*}.{2,*} {3} (r{4}) at⤶
   --  ↦ {5,time} on {5,date}
                 93 => Z'(First => 8259, Last => 8271,
                    Facility_Index => 1, Key_Index => 138,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Rename a file
                 94 => Z'(First => 7325, Last => 7357,
                    Facility_Index => 1, Key_Index => 95,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Usage: which [ -e | -f ] file ...
                 95 => Z'(First => 6492, Last => 6532,
                    Facility_Index => 1, Key_Index => 72,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, missing arguments for option "{0}"
                 96 => Z'(First => 4698, Last => 4755,
                    Facility_Index => 1, Key_Index => 35,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦ZBTest completed at {0,time} on {0,date}, elapsed time ⤶
   --  ↦{1}
                 97 => Z'(First => 4340, Last => 4400,
                    Facility_Index => 1, Key_Index => 29,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Copyright (c) 2009-{0,*}, Michael Rohan.  All rights re⤶
   --  ↦served
                 98 => Z'(First => 3353, Last => 3423,
                    Facility_Index => 1, Key_Index => 14,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0:>3}) "setifundef", set the value of a parameter if i⤶
   --  ↦t is not defined
                 99 => Z'(First => 8174, Last => 8189,
                    Facility_Index => 1, Key_Index => 132,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Success expected
                 100 => Z'(First => 7115, Last => 7150,
                    Facility_Index => 1, Key_Index => 89,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Usage for unknown command, not used.
                 101 => Z'(First => 6574, Last => 6613,
                    Facility_Index => 1, Key_Index => 74,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0:>3}) "run", run another ZBTest script
                 102 => Z'(First => 4461, Last => 4520,
                    Facility_Index => 1, Key_Index => 31,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Warning, the source "{0}" could not be found, failed to⤶
   --  ↦ copy
                 103 => Z'(First => 2639, Last => 2840,
                    Facility_Index => 1, Key_Index => 8,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Get help information on a command.  Without a command a⤶
   --  ↦rgument the⏎
   --  ↦help command prints a summary of available commands.  W⤶
   --  ↦ith an argument⏎
   --  ↦the help command print help information on the argument⤶
   --  ↦ command.
                 104 => Z'(First => 3439, Last => 3441,
                    Facility_Index => 1, Key_Index => 149,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0}
                 105 => Z'(First => 8204, Last => 8217,
                    Facility_Index => 1, Key_Index => 134,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦File date: {0}
                 106 => Z'(First => 7187, Last => 7221,
                    Facility_Index => 1, Key_Index => 91,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, "{0}" is not a known command
                 107 => Z'(First => 6320, Last => 6362,
                    Facility_Index => 1, Key_Index => 68,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0:>3}) "set", set the value of a parameter
                 108 => Z'(First => 4094, Last => 4155,
                    Facility_Index => 1, Key_Index => 25,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, failure for test "{0}", unexpected exception "{1⤶
   --  ↦,name}"
                 109 => Z'(First => 3041, Last => 3124,
                    Facility_Index => 1, Key_Index => 10,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦The append command adds a value to the end of a list pa⤶
   --  ↦rameter within⏎
   --  ↦current scope.
                 110 => Z'(First => 8109, Last => 8125,
                    Facility_Index => 1, Key_Index => 128,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Usage: run script
                 111 => Z'(First => 6968, Last => 7004,
                    Facility_Index => 1, Key_Index => 85,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Incremented the parmeter "{0}" to {1}
                 112 => Z'(First => 6406, Last => 6448,
                    Facility_Index => 1, Key_Index => 70,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, failed to rename "{0}" to "{1}": {2}
                 113 => Z'(First => 4218, Last => 4278,
                    Facility_Index => 1, Key_Index => 27,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, test area "{0}", already exists and is not a dir⤶
   --  ↦ectory
                 114 => Z'(First => 1422, Last => 1819,
                    Facility_Index => 1, Key_Index => 4,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Define an internal parameter (target) based on the valu⤶
   --  ↦e of an⏎
   --  ↦environment variable.⏎
   --  ↦⏎
   --  ↦The options are⏎
   --  ↦  -l  Define an internal list parameter by splitting on⤶
   --  ↦ the pathsep⏎
   --  ↦  -s  Define a simple scalar (string) parameter (defaul⤶
   --  ↦t)⏎
   --  ↦  -a  If defining a list parameter, append the values⏎
   --  ↦  -p  If defining a list parameter, prepend the values⏎⤶
   --  ↦⏎
   --  ↦If the target is not given then import to name (lowerca⤶
   --  ↦sed).
                 115 => Z'(First => 411, Last => 420,
                    Facility_Index => 1, Key_Index => 145,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Emtpy list
                 116 => Z'(First => 8142, Last => 8157,
                    Facility_Index => 1, Key_Index => 130,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦File name: "{0}"
                 117 => Z'(First => 7042, Last => 7078,
                    Facility_Index => 1, Key_Index => 87,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Warning, the file "{0}" was not found
                 118 => Z'(First => 6143, Last => 6187,
                    Facility_Index => 1, Key_Index => 64,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Warning, failed to rename "{0}" to "{1}": {2}
                 119 => Z'(First => 3835, Last => 3899,
                    Facility_Index => 1, Key_Index => 21,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Print the value of a scalar (-s, default) or list (-l) ⤶
   --  ↦parameters
                 120 => Z'(First => 2131, Last => 2406,
                    Facility_Index => 1, Key_Index => 6,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦The compare command compares (with regular expression m⤶
   --  ↦atching) a⏎
   --  ↦generated log file with a reference log file.  It the f⤶
   --  ↦iles match, a⏎
   --  ↦.ok file is created and the number of OK tests is incre⤶
   --  ↦mented, otherwise⏎
   --  ↦a .fail file is created and the number of FAIL tests is⤶
   --  ↦ incremented.
                 121 => Z'(First => 6814, Last => 6852,
                    Facility_Index => 1, Key_Index => 81,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, the log file "{0}" was not found
                 122 => Z'(First => 6232, Last => 6275,
                    Facility_Index => 1, Key_Index => 66,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0:>3}) "copy", copy a file to the test area
                 123 => Z'(First => 3965, Last => 4029,
                    Facility_Index => 1, Key_Index => 23,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦zbtest [ -h ] [ -t test-area ] [ -X xml-summary ] [ tes⤶
   --  ↦t-script ]
                 124 => Z'(First => 8040, Last => 8057,
                    Facility_Index => 1, Key_Index => 124,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Usage: delete name
                 125 => Z'(First => 3566, Last => 3634,
                    Facility_Index => 1, Key_Index => 17,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0:>3}) "getenv", define a parameter based on an enviro⤶
   --  ↦nment variable
                 126 => Z'(First => 520, Last => 980,
                    Facility_Index => 1, Key_Index => 2,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Start a new scope level.  Variable assignments, e.g.,⏎
   --  ↦⏎
   --  ↦    set xyx abc⏎
   --  ↦⏎
   --  ↦retain their effect for the lifetime of the scope.  End⤶
   --  ↦ing the scope⏎
   --  ↦using the "end" command restores any previous values fo⤶
   --  ↦r the parameters⏎
   --  ↦adjusted during the scope.⏎
   --  ↦⏎
   --  ↦It is not normally necessary to explicitly begin a new ⤶
   --  ↦scope, each test⏎
   --  ↦script run automatically starts a new scope which is au⤶
   --  ↦tomatically ended⏎
   --  ↦when the test script completes.⏎
   --  ↦⏎
   --  ↦The "begin" command does not have options.
                 127 => Z'(First => 8075, Last => 8091,
                    Facility_Index => 1, Key_Index => 126,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Usage: mkdir name
                 128 => Z'(First => 5962, Last => 6007,
                    Facility_Index => 1, Key_Index => 60,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Write status of a test area file to a log file
                 129 => Z'(First => 6053, Last => 6097,
                    Facility_Index => 1, Key_Index => 62,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, unexpected command line argument "{0}"
                 130 => Z'(First => 3439, Last => 3441,
                    Facility_Index => 1, Key_Index => 147,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0}
                 131 => Z'(First => 8296, Last => 8306,
                    Facility_Index => 1, Key_Index => 141,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Usage: exit
                 132 => Z'(First => 6892, Last => 6929,
                    Facility_Index => 1, Key_Index => 83,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Status for "{0}": {1} failures, {2} OK
                 133 => Z'(First => 8318, Last => 8327,
                    Facility_Index => 1, Key_Index => 143,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Usage: end
                 134 => Z'(First => 6694, Last => 6733,
                    Facility_Index => 1, Key_Index => 77,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0:>3}) "echo", echo arguments to output
                 135 => Z'(First => 3703, Last => 3768,
                    Facility_Index => 1, Key_Index => 19,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Usage: execute [ -f | -s | -o output ] command [ comman⤶
   --  ↦d-arg ... ]
                 136 => Z'(First => 8246, Last => 8258,
                    Facility_Index => 1, Key_Index => 137,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0} ({1}) {2}
                 137 => Z'(First => 7980, Last => 7999,
                    Facility_Index => 1, Key_Index => 120,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Usage: desc word ...
                 138 => Z'(First => 6654, Last => 6693,
                    Facility_Index => 1, Key_Index => 79,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0:>3}) "desc", set the test description
                 139 => Z'(First => 3280, Last => 3352,
                    Facility_Index => 1, Key_Index => 13,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Set the value of a parameter (option selects type: inte⤶
   --  ↦ger, boolean, ...)
                 140 => Z'(First => 8272, Last => 8283,
                    Facility_Index => 1, Key_Index => 139,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Usage: begin
                 141 => Z'(First => 8000, Last => 8019,
                    Facility_Index => 1, Key_Index => 122,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Usage: echo name ...
                 142 => Z'(First => 6533, Last => 6573,
                    Facility_Index => 1, Key_Index => 73,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, cannot "end", currently at level 0
                 143 => Z'(First => 5777, Last => 5823,
                    Facility_Index => 1, Key_Index => 56,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Error, failed to locate the ZBTest script "{0}"
                 144 => Z'(First => 3424, Last => 3494,
                    Facility_Index => 1, Key_Index => 15,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦The parameter "{0}" is already defined, ignoring condit⤶
   --  ↦ional definition
                 145 => Z'(First => 8190, Last => 8203,
                    Facility_Index => 1, Key_Index => 133,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦File size: {0}
                 146 => Z'(First => 7890, Last => 7913,
                    Facility_Index => 1, Key_Index => 116,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Echo arguments to output
                 147 => Z'(First => 6614, Last => 6653,
                    Facility_Index => 1, Key_Index => 75,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦{0:>3}) "noop", the no operation command
                 148 => Z'(First => 5870, Last => 5915,
                    Facility_Index => 1, Key_Index => 58,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Setting the parameter "{0}" to the value "{1}"
                 149 => Z'(First => 2841, Last => 3040,
                    Facility_Index => 1, Key_Index => 9,
                    Locale_Index => 1, Source_Locale_Index => 1));
   --  ↦Exit a test script.  This command is normally only used⤶
   --  ↦ when entering⏎
   --  ↦commands interactively to exit the zbtest application. ⤶
   --  ↦ Using it in a test⏎
   --  ↦script causes immediate exit of the zbtest application.⤶

   ---------------
   --- Facility --
   ---------------

   function Facility (Index : in Positive) return Wide_String is
   begin
      return Facilities (Index).all;
   end Facility;

   ---------------------
   --- Facility_Count --
   ---------------------

   function Facility_Count return Natural is
   begin
      return Facilities'Length;
   end Facility_Count;

   ----------------
   -- Initialize --
   ----------------

   procedure Initialize (Catalog : in ZTC.Catalog_Type := Standard_Catalog) is
   begin
      ZTC.Initialize (Catalog, Messages, Pool, Facilities, Keys, Locales,
                      "ZBTest_Messages",
                      Pool_Data_1'Length, 8345);
   end Initialize;

   ----------
   --- Key --
   ----------

   function Key (Index : in Positive) return Wide_String is
   begin
      return Keys (Index).all;
   end Key;

   ----------------
   --- Key_Count --
   ----------------

   function Key_Count return Natural is
   begin
      return Keys'Length;
   end Key_Count;

end ZBTest_Messages;
