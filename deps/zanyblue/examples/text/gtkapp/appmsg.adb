--  -*- coding: utf-8 -*-
--
--  Ada implementation generated by ZBMCompile, V1.3.0 - BETA.
--  This is a generated file and should not be edited.
--

package body AppMsg is

   package ZT  renames ZanyBlue.Text;
   package ZTC renames ZanyBlue.Text.Catalogs;

   subtype Z is ZTC.ZBMCompile_Definition;

   Facility_1 : aliased constant Wide_String := ""
      & "appmsg"
      & "";
   Facilities : constant ZT.Constant_String_List (1 .. 1) := (
                   1 => Facility_1'Access);

   Key_1 : aliased constant Wide_String := ""
      & "banner"
      & "";
   Key_2 : aliased constant Wide_String := ""
      & "langname"
      & "";
   Key_3 : aliased constant Wide_String := ""
      & "close"
      & "";
   Key_4 : aliased constant Wide_String := ""
      & "usage"
      & "";
   Key_5 : aliased constant Wide_String := ""
      & "button_text"
      & "";
   Keys : constant ZT.Constant_String_List (1 .. 5) := (
                   Key_1'Access,
                   Key_2'Access,
                   Key_3'Access,
                   Key_4'Access,
                   Key_5'Access);

   Locale_1 : aliased constant Wide_String := ""
      & "";
   Locale_2 : aliased constant Wide_String := ""
      & "fr"
      & "";
   Locales : constant ZT.Constant_String_List (1 .. 2) := (
                   Locale_1'Access,
                   Locale_2'Access);

   Pool_Data_1 : aliased constant Wide_String := ""
      & "This is GTKAPP, Version {0}.{1}.{2} - {3}Name: {0}CloseUsag"
      & "e: ex_gtk [ -u | -l | -h | -e ]""{0}"" - {1}Nom: {0}Fermer"
      & "";
   Pool : constant ZT.Static_Message_Pool_Type := Pool_Data_1'Access;

   Messages : constant ZTC.ZBMCompile_List (1 .. 8) := (
                 Z'(First => 56, Last => 90,
                    Facility_Index => 1, Key_Index => 4,
                    Locale_Index => 2, Source_Locale_Index => 2),
   --  ↦Usage: ex_gtk [ -u | -l | -h | -e ]
                 Z'(First => 102, Last => 109,
                    Facility_Index => 1, Key_Index => 2,
                    Locale_Index => 2, Source_Locale_Index => 2),
   --  ↦Nom: {0}
                 Z'(First => 51, Last => 55,
                    Facility_Index => 1, Key_Index => 3,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Close
                 Z'(First => 42, Last => 50,
                    Facility_Index => 1, Key_Index => 2,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦Name: {0}
                 Z'(First => 110, Last => 115,
                    Facility_Index => 1, Key_Index => 3,
                    Locale_Index => 2, Source_Locale_Index => 2),
   --  ↦Fermer
                 Z'(First => 1, Last => 41,
                    Facility_Index => 1, Key_Index => 1,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦This is GTKAPP, Version {0}.{1}.{2} - {3}
                 Z'(First => 91, Last => 101,
                    Facility_Index => 1, Key_Index => 5,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦"{0}" - {1}
                 Z'(First => 56, Last => 90,
                    Facility_Index => 1, Key_Index => 4,
                    Locale_Index => 1, Source_Locale_Index => 1));
   --  ↦Usage: ex_gtk [ -u | -l | -h | -e ]

   ---------------
   --- Facility --
   ---------------

   function Facility (Index : Positive) return Wide_String is
   begin
      return Facilities (Index).all;
   end Facility;

   ---------------------
   --- Facility_Count --
   ---------------------

   function Facility_Count return Natural is
   begin
      return Facilities'Length;
   end Facility_Count;

   ----------------
   -- Initialize --
   ----------------

   procedure Initialize (Catalog : ZTC.Catalog_Type := Standard_Catalog) is
   begin
      ZTC.Initialize (Catalog, Messages, Pool, Facilities, Keys, Locales,
                      "AppMsg",
                      Pool_Data_1'Length, 115);
   end Initialize;

   ----------
   --- Key --
   ----------

   function Key (Index : Positive) return Wide_String is
   begin
      return Keys (Index).all;
   end Key;

   ----------------
   --- Key_Count --
   ----------------

   function Key_Count return Natural is
   begin
      return Keys'Length;
   end Key_Count;

begin  --  AppMsg
   Initialize;
end AppMsg;
