#  -*- coding: utf-8 -*-
#
#  ZanyBlue, an Ada library and framework for finite element analysis.
#
#  Copyright (c) 2012, 2016, Michael Rohan <mrohan@zanyblue.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#
#    * Neither the name of ZanyBlue nor the names of its contributors may
#      be used to endorse or promote products derived from this software
#      without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

#
#  Messages used by the zbmcompile application for code generation
#

#
#  Messages to generate the specification file
#

00001=--  -*- coding: utf-8 -*-\n\
--\n\
--  Ada specification generated by ZBMCompile, V{0}.{1}.{2} - {3}.\n\
--  This is a generated file and should not be edited.\n\
--\n

00002=with ZanyBlue.Text.Catalogs;\n\
with ZanyBlue.Text.Formatting;\n

00003=package {0} is\n

00004=\   --  Since the body calls the Initialize procedure, this package need\n\
\   --  only be with''ed.  Suppress any compiler warnings about an unused\n\
\   --  with''ed package.\n\
\   pragma Warnings (Off, {0});\n

00005=\   --  Definition of access routines.

00006=\   function Standard_Catalog return ZanyBlue.Text.Catalogs.Catalog_Type\n\
\      renames ZanyBlue.Text.Formatting.Standard_Catalog;\n

00007=\   function {0} (Index :{1}Positive) return Wide_String;\n\
\   --  The name of the Index''th {0} item compiled.\n\
\   --  This routine is normally only used by generated accessor code.\n

00008=\   function {0}_Count return Natural;\n\
\   --  Numnber of {0} items compiled.\n\
\   --  This routine is normally only used by generated accessor code.\n

00009=\   procedure Initialize (\n\
\      Catalog :{0}ZanyBlue.Text.Catalogs.Catalog_Type := Standard_Catalog);\n\
\   --  The catalog initialization routine: load the compiled messages into\n\
\   --  a catalog.

00010=\   pragma Export (C, Initialize, "{0}");

00011=end {0};

#
#  Messages to generate the implementation file
#

10001=--  -*- coding: utf-8 -*-\n\
--\n\
--  Ada implementation generated by ZBMCompile, V{0}.{1}.{2} - {3}.\n\
--  This is a generated file and should not be edited.\n\
--\n

10002=package body {0} is\n

10003=\   package ZT  renames ZanyBlue.Text;\n\
\   package ZTC renames ZanyBlue.Text.Catalogs;\n\n\
\   subtype Z is ZTC.ZBMCompile_Definition;\n

10004=\   {0}_{1,*} : aliased constant Wide_String := ""

10005=\      & Wide_Character''Val ({0,0=#8X*})

10006=\      & "{0}"

10007=\      & "";

10008=\   {0} : constant ZT.Constant_String_List (1 .. {1,*}) := (

10009=\                   {1,*} => {0}_{1,*}''Access,

10010=\                   {0}_{1,*}''Access,

10011=\                   {1,*} => {0}_{1,*}''Access);

10012=\                   {0}_{1,*}''Access);

10013=\              others => <>);

10014=\   Pool : constant ZT.Static_Message_Pool_Type := Pool_Data_1''Access;\n

10015=\   Messages : constant ZTC.ZBMCompile_List (1 .. {0,*}) := (

10016=\                 {0} => Z''(First => {1,*}, Last => {2,*},

10017=\                 Z''(First => {1,*}, Last => {2,*},

10018=\                    Facility_Index => {0,*}, Key_Index => {1,*},

10019=\                    Locale_Index => {0,*}, Source_Locale_Index => {1,*}),

10020=\                    Locale_Index => {0,*}, Source_Locale_Index => {1,*}));

10021=\   --

10022=\   --  No base message

10023=\   --  \u21a6{0}{1}

10024=\   --  \u21a6{0}

10025=\   ---{3:-^{4,*}}----\n\
\   --- {0} --\n\
\   ---{3:-^{4,*}}----\n\n\
\   function {0} (Index :{1}Positive) return Wide_String is\n\
\   begin\n\
\      return {2} (Index).all;\n\
\   end {0};\n

10026=\   ---{2:-^{3,*}}----------\n\
\   --- {0}_Count --\n\
\   ---{2:-^{3,*}}----------\n\n\
\   function {0}_Count return Natural is\n\
\   begin\n\
\      return {1}''Length;\n\
\   end {0}_Count;\n

10027=\   ----------------\n\
\   -- Initialize --\n\
\   ----------------\n\n\
\   procedure Initialize (Catalog :{0}ZTC.Catalog_Type := Standard_Catalog) is\n\
\   begin\n\
\      ZTC.Initialize (Catalog, Messages, Pool, Facilities, Keys, Locales,\n\
\                      "{1}",\n\
\                      Pool_Data_1''Length, {2});\n\
\   end Initialize;\n

10028=\   ----------------\n\
\   -- Initialize --\n\
\   ----------------\n\n\
\   procedure Initialize (Catalog :{0}ZTC.Catalog_Type := Standard_Catalog) is\n\
\      pragma Unreferenced (Catalog);\n\
\   begin\n\
\      null;\n\
\   end Initialize;\n

10029=begin  --  {0}\n\
\   Initialize;

10030=end {0};
