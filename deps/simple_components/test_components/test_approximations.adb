--                                                                    --
--  procedure Test_Approximations   Copyright (c)  Dmitry A. Kazakov  --
--  Implementation                                 Luebeck            --
--                                                 Spring, 2009       --
--                                                                    --
--  This  library  is  free software; you can redistribute it and/or  --
--  modify it under the terms of the GNU General Public  License  as  --
--  published by the Free Software Foundation; either version  2  of  --
--  the License, or (at your option) any later version. This library  --
--  is distributed in the hope that it will be useful,  but  WITHOUT  --
--  ANY   WARRANTY;   without   even   the   implied   warranty   of  --
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU  --
--  General  Public  License  for  more  details.  You  should  have  --
--  received  a  copy  of  the GNU General Public License along with  --
--  this library; if not, write to  the  Free  Software  Foundation,  --
--  Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.    --
--                                                                    --
--  As a special exception, if other files instantiate generics from  --
--  this unit, or you link this unit with other files to produce  an  --
--  executable, this unit does not by  itself  cause  the  resulting  --
--  executable to be covered by the GNU General Public License. This  --
--  exception  does not however invalidate any other reasons why the  --
--  executable file might be covered by the GNU Public License.       --
--____________________________________________________________________--

with Ada.Exceptions;         use Ada.Exceptions;
with Ada.Text_IO;            use Ada.Text_IO;
with Strings_Edit.Floats;    use Strings_Edit.Floats;
with Strings_Edit.Integers;  use Strings_Edit.Integers;

with Gamma;

procedure Test_Approximations is
   type Point is record
      X : Float;
      Y : Long_Float;
   end record;
   type Table is array (Positive range <>) of Point;
   function Table_X (Data : Table) return Table is
      Result : Table := Data;
   begin
      for I in Result'Range loop
         Result (I).X := Result (I).X - 1.0;
         Result (I).Y := Result (I).Y / Long_Float (Result (I).X);
      end loop;
      return Result;
   end Table_X;
   type Func is access function (X : Long_Float) return Long_Float;
   procedure Verify
             (  Name : String;
                F    : Func;
                Data : Table;
                Eps  : Float
             )  is
      X, Y      : Long_Float;
      Error     : Float;
      Max_Error : Float := 0.0;
   begin
      for I in Data'Range loop
         X := Long_Float (Data (I).X);
         Y := F (X);
         if Y /= Data (I).Y then
            Error :=
               Float (2.0 * abs (Y - Data (I).Y) / (Y + Data (I).Y));
            Max_Error := Float'Max (Error, Max_Error);
            if Error > Eps then
               Put_Line
               (  Name
               &  " ("
               &  Image (Float (X))
               &  ") error "
               &  Image (Error)
               );
               Put_Line (Long_Float'Image (Y) & " (expected)");
               Put_Line (Long_Float'Image (Data (I).Y));
            end if;
         end if;
      end loop;
      Put_Line
      (  Name
      &  " max relative error "
      &  Image (Max_Error)
      &  " on "
      &  Image (Data (Data'First).X)
      &  ".."
      &  Image (Data (Data'Last).X)
      );
   end Verify;

   function Gamma (X : Long_Float) return Long_Float is
   begin
      return Long_Float (Gamma (Float (X)));
   end Gamma;

   Gamma_Table : constant Table := -- Interval [1, 2]
      (  (1.000, 1.00000_00000), (1.005, 0.99713_85354),
         (1.010, 0.99432_58512), (1.015, 0.99156_12888),
         (1.020, 0.98884_42033), (1.025, 0.98617_39633),
         (1.030, 0.98354_99506), (1.035, 0.98097_15606),
         (1.040, 0.97843_82009), (1.045, 0.97594_92919),
         (1.050, 0.97350_42656), (1.055, 0.97110_25663),
         (1.060, 0.96874_36495), (1.065, 0.96642_69823),
         (1.070, 0.96415_20425), (1.075, 0.96191_83189),
         (1.080, 0.95972_53107), (1.085, 0.95757_25273),
         (1.090, 0.95545_94882), (1.095, 0.95338_57227),
         (1.100, 0.95135_07699), (1.105, 0.94935_41778),
         (1.110, 0.94739_55040), (1.115, 0.94547_43149),
         (1.120, 0.94359_01856), (1.125, 0.94174_26997),
         (1.130, 0.93993_14497), (1.135, 0.93815_60356),
         (1.140, 0.93641_60657), (1.145, 0.93471_11562),
         (1.150, 0.93304_09311), (1.155, 0.93140_50217),
         (1.160, 0.92980_30666), (1.165, 0.92823_47120),
         (1.170, 0.92669_96106), (1.175, 0.92519_74225),
         (1.180, 0.92372_78143), (1.185, 0.92229_04591),
         (1.190, 0.92088_50371), (1.195, 0.91951_12341),
         (1.200, 0.91816_87424), (1.205, 0.91685_72606),
         (1.210, 0.91557_64930), (1.215, 0.91432_61500),
         (1.220, 0.91310_59475), (1.225, 0.91191_56071),
         (1.230, 0.91075_48564), (1.235, 0.90962_34274),
         (1.240, 0.90852_10583), (1.245, 0.90744_74922),
         (1.250, 0.90640_24771), (1.255, 0.90538_57663),
         (1.260, 0.90439_71178), (1.265, 0.90343_62946),
         (1.270, 0.90250_30645), (1.275, 0.90159_71994),
         (1.280, 0.90071_84765), (1.285, 0.89986_66769),
         (1.290, 0.89904_15863), (1.295, 0.89824_29947),
         (1.300, 0.89747_06963), (1.305, 0.89672_44895),
         (1.310, 0.89600_41767), (1.315, 0.89530_95644),
         (1.320, 0.89464_04630), (1.325, 0.89399_66866),
         (1.330, 0.89337_80535), (1.335, 0.89278_43850),
         (1.340, 0.89221_55072), (1.345, 0.89167_12485),
         (1.350, 0.89115_14420), (1.355, 0.89065_59235),
         (1.360, 0.89018_45324), (1.365, 0.88973_71116),
         (1.370, 0.88931_35074), (1.375, 0.88891_35692),
         (1.380, 0.88853_71494), (1.385, 0.88818_41041),
         (1.390, 0.88785_42918), (1.395, 0.88754_75748),
         (1.400, 0.88726_38175), (1.405, 0.88700_28884),
         (1.410, 0.88676_46576), (1.415, 0.88654_89993),
         (1.420, 0.88635_57896), (1.425, 0.88618_49081),
         (1.430, 0.88603_62361), (1.435, 0.88590_96587),
         (1.440, 0.88580_50635), (1.445, 0.88572_23397),
         (1.450, 0.88566_13803), (1.455, 0.88562_20800),
         (1.460, 0.88560_43364), (1.465, 0.88560_80495),
         (1.470, 0.88563_31217), (1.475, 0.88567_94575),
         (1.480, 0.88574_69646), (1.485, 0.88583_55520),
         (1.490, 0.88594_51316), (1.495, 0.88607_56174),
         (1.500, 0.88622_69255), (1.505, 0.88639_89744),
         (1.510, 0.88659_16850), (1.515, 0.88680_49797),
         (1.520, 0.88703_87833), (1.525, 0.88729_30231),
         (1.530, 0.88756_76278), (1.535, 0.88786_25287),
         (1.540, 0.88817_76586), (1.545, 0.88851_29527),
         (1.550, 0.88886_83478), (1.555, 0.88924_37830),
         (1.560, 0.88963_91990), (1.565, 0.89005_45387),
         (1.570, 0.89048_97463), (1.575, 0.89094_47686),
         (1.580, 0.89141_95537), (1.585, 0.89191_40515),
         (1.590, 0.89242_82141), (1.595, 0.89296_19949),
         (1.600, 0.89351_53493), (1.605, 0.89408_82342),
         (1.610, 0.89468_06085), (1.615, 0.89529_24327),
         (1.620, 0.89592_36685), (1.625, 0.89657_42800),
         (1.630, 0.89724_42326), (1.635, 0.89793_34930),
         (1.640, 0.89864_20302), (1.645, 0.89936_98138),
         (1.650, 0.90011_68163), (1.655, 0.90088_30104),
         (1.660, 0.90166_83712), (1.665, 0.90247_28748),
         (1.670, 0.90329_64995), (1.675, 0.90413_92243),
         (1.680, 0.90500_10302), (1.685, 0.90588_18996),
         (1.690, 0.90678_18160), (1.695, 0.90770_07650),
         (1.700, 0.90863_87329), (1.705, 0.90959_57079),
         (1.710, 0.91057_16796), (1.715, 0.91156_66390),
         (1.720, 0.91258_05779), (1.725, 0.91361_34904),
         (1.730, 0.91466_53712), (1.735, 0.91573_62171),
         (1.740, 0.91682_60252), (1.745, 0.91793_47950),
         (1.750, 0.91906_25263), (1.755, 0.92020_92224),
         (1.760, 0.92137_48846), (1.765, 0.92255_95178),
         (1.770, 0.92376_31277), (1.775, 0.92498_57211),
         (1.780, 0.92622_73062), (1.785, 0.92748_78926),
         (1.790, 0.92876_74904), (1.795, 0.93006_61123),
         (1.800, 0.93138_37710), (1.805, 0.93272_04811),
         (1.810, 0.93407_62585), (1.815, 0.93545_11198),
         (1.820, 0.93684_50832), (1.825, 0.93825_81682),
         (1.830, 0.93969_03951), (1.835, 0.94114_17859),
         (1.840, 0.94261_23634), (1.845, 0.94410_21519),
         (1.850, 0.94561_11764), (1.855, 0.94713_94637),
         (1.860, 0.94868_70417), (1.865, 0.95025_39389),
         (1.870, 0.95184_01855), (1.875, 0.95344_58127),
         (1.880, 0.95507_08530), (1.885, 0.95671_53398),
         (1.890, 0.95837_93077), (1.895, 0.96006_27927),
         (1.900, 0.96176_58319), (1.905, 0.96348_84632),
         (1.910, 0.96523_07261), (1.915, 0.96699_26608),
         (1.920, 0.96877_43090), (1.925, 0.97057_57134),
         (1.930, 0.97239_69178), (1.935, 0.97423_79672),
         (1.940, 0.97609_89075), (1.945, 0.97797_97861),
         (1.950, 0.97988_06513), (1.955, 0.98180_15524),
         (1.960, 0.98374_25404), (1.965, 0.98570_36664),
         (1.970, 0.98768_49838), (1.975, 0.98968_65462),
         (1.980, 0.99170_84087), (1.985, 0.99375_06274),
         (1.990, 0.99581_32598), (1.995, 0.99789_63643),
         (2.000, 1.00000_00000)
      );
begin
   -- Cheking Gamma function approximation against tabulated values
   Put_Line ("Float'Small " & Image (Float'Digits));
   Verify
   (  "Gamma",
      Gamma'Access,
      Table_X (Gamma_Table (Gamma_Table'First + 1..Gamma_Table'Last)),
      10.0**(Natural(-Float'Small))
   );
   Verify
   (  "Gamma",
      Gamma'Access,
      Gamma_Table,
      10.0**(Natural(-Float'Small))
   );
   Verify
   (  "Gamma",
      Gamma'Access,
      (  ( 2.0,            1.0),
         ( 3.0,            2.0),   ( 4.0,            6.0),
         ( 5.0,           24.0),   ( 6.0,          120.0),
         ( 7.0,          720.0),   ( 8.0,         5040.0),
         ( 9.0,        40320.0),   (10.0,      3_62880.0),
         (11.0,     36_28800.0),   (12.0,    399_16800.0),
         (13.0,   4790_01600.0),   (14.0,  62270_20800.0),
         (15.0, 8.71782_91200E10), (16.0, 1.30767_43680E12),
         (17.0, 2.09227_89888E13), (18.0, 3.55687_42810E14),
         (19.0, 6.40237_37057E15), (20.0, 1.21645_10041E17),
         (21.0, 2.43290_20082E18), (22.0, 5.10909_42172E19),
         (23.0, 1.12400_07278E21), (24.0, 2.58520_16739E22),
         (25.0, 6.20448_40173E23), (26.0, 1.55112_10043E25),
         (27.0, 4.03291_46113E26), (28.0, 1.08888_69450E28),
         (29.0, 3.04888_34461E29), (30.0, 8.84176_19937E30),
         (31.0, 2.65252_85981E32), (32.0, 8.22283_86542E33),
         (33.0, 2.63130_83693E35), (34.0, 8.68331_76188E36),
         (35.0, 2.95232_79904E38)
      ),
      10.0**(Natural(-Float'Small))
   );
exception
   when Error : others =>
      Put ("Error :");
      Put_Line (Exception_Information (Error));
end Test_Approximations;
