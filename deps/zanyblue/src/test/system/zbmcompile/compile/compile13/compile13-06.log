--  -*- coding: utf-8 -*-
--
--  Ada implementation generated by ZBMCompile, V.*
--  This is a generated file and should not be edited.
--

package body My_Package is

   package ZT  renames ZanyBlue.Text;
   package ZTC renames ZanyBlue.Text.Catalogs;

   subtype Z is ZTC.ZBMCompile_Definition;

   Facility_1 : aliased constant Wide_String := ""
      & "myapp1"
      & "";
   Facility_2 : aliased constant Wide_String := ""
      & "myapp2"
      & "";
   Facilities : constant ZT.Constant_String_List (1 .. 2) := (
                   Facility_1'Access,
                   Facility_2'Access);

   Key_1 : aliased constant Wide_String := ""
      & "hello"
      & "";
   Key_2 : aliased constant Wide_String := ""
      & "extra"
      & "";
   Key_3 : aliased constant Wide_String := ""
      & "goodbye"
      & "";
   Keys : constant ZT.Constant_String_List (1 .. 3) := (
                   Key_1'Access,
                   Key_2'Access,
                   Key_3'Access);

   Locale_1 : aliased constant Wide_String := ""
      & "";
   Locale_2 : aliased constant Wide_String := ""
      & "fr"
      & "";
   Locales : constant ZT.Constant_String_List (1 .. 2) := (
                   Locale_1'Access,
                   Locale_2'Access);

   Pool_Data_1 : aliased constant Wide_String := ""
      & "[myapp1] Hello, this is an example[myapp2] Hello, this is a"
      & "n example[myapp2] An extra message[myapp2] OK, goodbye[myap"
      & "p1] OK, goodbye[FR] [myapp2] Hello, this is an example[FR] "
      & "[myapp1] Hello, this is an example[FR] [myapp2] An extra me"
      & "ssage[FR] [myapp1] OK, goodbye[FR] [myapp2] OK, goodbye"
      & "";
   Pool : constant ZT.Static_Message_Pool_Type := Pool_Data_1'Access;

   Messages : constant ZTC.ZBMCompile_List (1 .. 10) := (
                 Z'(First => 267, Last => 291,
                    Facility_Index => 2, Key_Index => 3,
                    Locale_Index => 2, Source_Locale_Index => 2),
   --  ↦[FR] [myapp2] OK, goodbye
                 Z'(First => 94, Last => 113,
                    Facility_Index => 2, Key_Index => 3,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦[myapp2] OK, goodbye
                 Z'(First => 69, Last => 93,
                    Facility_Index => 2, Key_Index => 2,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦[myapp2] An extra message
                 Z'(First => 212, Last => 241,
                    Facility_Index => 2, Key_Index => 2,
                    Locale_Index => 2, Source_Locale_Index => 2),
   --  ↦[FR] [myapp2] An extra message
                 Z'(First => 35, Last => 68,
                    Facility_Index => 2, Key_Index => 1,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦[myapp2] Hello, this is an example
                 Z'(First => 114, Last => 133,
                    Facility_Index => 1, Key_Index => 3,
                    Locale_Index => 1, Source_Locale_Index => 1),
   --  ↦[myapp1] OK, goodbye
                 Z'(First => 242, Last => 266,
                    Facility_Index => 1, Key_Index => 3,
                    Locale_Index => 2, Source_Locale_Index => 2),
   --  ↦[FR] [myapp1] OK, goodbye
                 Z'(First => 173, Last => 211,
                    Facility_Index => 1, Key_Index => 1,
                    Locale_Index => 2, Source_Locale_Index => 2),
   --  ↦[FR] [myapp1] Hello, this is an example
                 Z'(First => 134, Last => 172,
                    Facility_Index => 2, Key_Index => 1,
                    Locale_Index => 2, Source_Locale_Index => 2),
   --  ↦[FR] [myapp2] Hello, this is an example
                 Z'(First => 1, Last => 34,
                    Facility_Index => 1, Key_Index => 1,
                    Locale_Index => 1, Source_Locale_Index => 1));
   --  ↦[myapp1] Hello, this is an example

   ---------------
   --- Facility --
   ---------------

   function Facility (Index : Positive) return Wide_String is
   begin
      return Facilities (Index).all;
   end Facility;

   ---------------------
   --- Facility_Count --
   ---------------------

   function Facility_Count return Natural is
   begin
      return Facilities'Length;
   end Facility_Count;

   ----------------
   -- Initialize --
   ----------------

   procedure Initialize (Catalog : ZTC.Catalog_Type := Standard_Catalog) is
   begin
      ZTC.Initialize (Catalog, Messages, Pool, Facilities, Keys, Locales,
                      "My_Package",
                      Pool_Data_1'Length, 291);
   end Initialize;

   ----------
   --- Key --
   ----------

   function Key (Index : Positive) return Wide_String is
   begin
      return Keys (Index).all;
   end Key;

   ----------------
   --- Key_Count --
   ----------------

   function Key_Count return Natural is
   begin
      return Keys'Length;
   end Key_Count;

begin  --  My_Package
   Initialize;
end My_Package;
