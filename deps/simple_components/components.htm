<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<HTML lang="en">
<HEAD>
<link REL="SHORTCUT ICON" href="http://www.dmitry-kazakov.de/favicon.ico">
<TITLE>Simple components for Ada</TITLE>
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
<META name="keywords" content="smart pointer, garbage collection, container, unbounded array, parser, table-driven parsing, infix expression, parsing tree, map, set, stack, component, reusable component, storage pool, mark and release pool, list, doubly linked list, persistency, persistent storage, lock-free, FIFO, queue, blackboard, lock-free queue, lock-free blackboard, synchronization, event, pulse event, array of events, mutex, protected object, concurrency, tasking, parallel programming, concurrent programming, race condition, dining philosophers, deadlock, memory management, Chebyshev series, Chebyshev polynomials, graph, directed graph, weighted graph, tree, B-tree, single file database, transaction, spline, cubic spline, spline interpolation, Ada, Ada 95, Ada 2005, Ada programming,SQLite, SQLite3, SQLite bindings, odbc, odbc bindings, tcp, select, socket select, connection server, state machine, http server, http client, modbus client, MQTT, MQTT broker, ELV, eQ-3, MAX!, MAX! cube">
<META name="Author" content="Dmitry Kazakov">
<META name="Description" content="Simple components for Ada">
</HEAD>
<BODY bgcolor="#FFFFFF" link="#0000FF" vlink="#800080">
<P align="center">
<BIG><BIG><BIG><b>SIMPLE COMPONENTS</b></BIG></BIG><br>
<EM>version 4.12</EM><BR>
by Dmitry A. Kazakov</BIG><BR>
(<A HREF="mailto:mailbox@dmitry-kazakov.de">mailbox@dmitry-kazakov.de</A>)<br>
<a href="http://www.dmitry-kazakov.de"><img border="0" src="home.jpg" alt="[Home]" width="40" height="40"></a></p>
<P>
This library is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later 
version. This library is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
FITNESS FOR A PARTICULAR PURPOSE. See the
<a href="http://www.gnu.org/licenses/gpl.html">GNU General Public License</a>
for more details. You should have received a copy of the GNU General Public 
License along with this library; if not, write to the Free Software Foundation, 
Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.</P>
<P>
As a special exception, if other files instantiate generics from this unit, or 
you link this unit with other files to produce an executable, this unit does not 
by itself cause the resulting executable to be covered by the GNU General Public 
License. This exception does not however invalidate any other reasons why the 
executable file might be covered by the GNU Public License.</P>
<HR>
<P align="left">
The current version provides implementations of smart pointers, directed graphs, sets, maps, 
B-trees, stacks, 
tables, string editing, unbounded arrays, expression analyzers, lock-free data 
structures, synchronization primitives (events, race condition free pulse 
events, arrays of events, reentrant mutexes, deadlock-free arrays of mutexes), pseudo-random 
non-repeating numbers, symmetric encoding and decoding, IEEE 754 representations 
support, multiple connections server/client designing tools. It grew out of needs and does not pretend to be universal.
Tables management and strings editing are described in separate documents see <a href="http://www.dmitry-kazakov.de/ada/tables.htm">Tables</a>
and <a href="http://www.dmitry-kazakov.de/ada/strings_edit.htm">Strings edit</a>.
The library is kept conform to the <a href="http://www.adaic.com/standards/95lrm/html/RM-TTL.html">Ada 95</a>,
<a href="http://www.adaic.com/standards/05rm/html/RM-TTL.html">Ada 2005</a>,
<a href="http://www.adaic.org/resources/add_content/standards/12rm/html/RM-TTL.html">Ada 2012</a>
language standards.</p>
<P align="left">
<u><b>Quick reference</b></u></p>
<blockquote>
<P align="left">
<a href="#b-tree">B-trees</a><br>
<a href="#Chebyshev_series">Chebyshev series</a><br>
<a href="#Cryptography">Cryptography</a><br>
<a href="#Generic_Doubly_Linked_Web">Doubly-linked webs and lists</a><br>
<a href="#Generic_Blackboard">Blackboards</a> (lock-free)<br>
<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client">ELV/eQ-3 
MAX! client implementation</a><br>
<a href="#Events">Events</a> (plain, pulse, array of)<br>
<a href="#GNUTLS">GNUTLS bindings</a><br>
<a href="#directed_graphs">Graphs</a> (directed, weighted, acyclic, trees)<br>
<a href="#HTTP_implementation">HTTP implementation</a><br>
<a href="#Generic_FIFO">FIFO</a> (lock-free)<br>
<a href="#IEEE_754">IEEE 754</a><br>
<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client">MODBUS client implementation</a><br>
<a href="#MQTT">MQTT client and server/broker implementation</a><br>
<a href="#multiple_GNAT.Sockets.Servers">Multiple connection TCP servers</a><br>
<a href="#Mutexes">Mutexes</a><br>
<a href="#Objects_etc">Objects and handles to</a><br>
<a href="#ODBC_Bindings">ODBC bindings</a><br>
<a href="#Parsers_etc">Parsers</a><br>
<a href="#persistent_objects">Persistent objects</a> and <a href="#persistent_object_handles">handles to</a><br>
<a href="#persistent_storage">Persistent storage</a> and <a href="#persistent_storage_handle">handles to</a><br>
<a href="#Pools_etc">Pools</a><br>
<a href="#Sets_etc">Sets and maps</a><br>
<a href="#SQLite">SQLite bindings</a><br>
<a href="#Stacks_etc">Stacks</a><br>
<a href="#Streams">Streams</a><br>
<a href="http://www.dmitry-kazakov.de/ada/strings_edit.htm">Strings editing</a><br>
<a href="http://www.dmitry-kazakov.de/ada/tables.htm">Tables</a> (maps of strings)<br>
<a href="#Unbounded_arrays_etc">Unbounded arrays</a></p>
</blockquote>
<table border="0" cellspacing="0" cellpadding="0" style="border-top-width: 0px">
	<tr>
		<td style="border-top-style: none; border-top-width: medium" colspan="3">&nbsp;</td>
		<td style="border-top-style: none; border-top-width: medium" align="right">
		&nbsp;</td>
		<td>&nbsp;</td>
		<td align="center">ARM</td>
		<td align="center" colspan="2">Intel</td>
	</tr>
	<tr>
		<td style="border-top-style: none; border-top-width: medium" colspan="3"><b>Download Simple Components for Ada</b></td>
		<td style="border-top-style: none; border-top-width: medium" align="right">
		<b>Platform:</b></td>
		<td>&nbsp;</td>
		<td align="center">v7</td>
		<td align="center">64-</td>
		<td align="center">32bit</td>
	</tr>
	<tr>
		<td style="border-top-style: solid; border-top-width: 1px">
		<a name="fedora_packages"></a>Fedora packages <img border="0" src="fedora-logo.jpg" width="16" height="16" alt="fedora"></td>
		<td style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
		<td style="border-top-style: solid; border-top-width: 1px">precompiled
		and packaged using RPM</td>
		<td style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
		<td>&nbsp;</td>
		<td align="right">
		<a href="http://www.dmitry-kazakov.de/distributions/components_fedora_armv7hl.htm"><img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
		<td align="center"><a href="http://www.dmitry-kazakov.de/distributions/components_fedora_x86_64.htm"><img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
		<td align="center"><a href="http://www.dmitry-kazakov.de/distributions/components_fedora_i686.htm"><img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
	</tr>
	<tr>
		<td style="border-top-style: solid; border-top-width: 1px; ">
		<a name="debian_packages"></a>Debian packages <img border="0" src="debian-logo.jpg" width="16" height="16" alt="debian"></td>
		<td style="border-top-style: solid; border-top-width: 1px; ">&nbsp;</td>
		<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: none; border-bottom-width: medium" colspan="2">precompiled and packaged for dpkg</td>
		<td>&nbsp;</td>
		<td align="right"><a href="http://www.dmitry-kazakov.de/distributions/components_debian_armhf.htm"><img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
		<td align="center"><a href="http://www.dmitry-kazakov.de/distributions/components_debian_x86_64.htm"><img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
		<td align="center"><a href="http://www.dmitry-kazakov.de/distributions/components_debian_i686.htm">
		<img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
	</tr>
	<tr>
		<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px">Source distribution (any platform)</td>
		<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px">&nbsp;</td>
		<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px" colspan="2">
		<a href="http://www.dmitry-kazakov.de/ada/components_4_12.tgz">components_4_12.tgz</a>
		(<b>tar</b> + <b>gzip</b>, Windows users may use WinZip)</td>
		<td>&nbsp;</td>
		<td align="center">
		&nbsp;</td>
		<td align="center">
		<a href="http://www.dmitry-kazakov.de/ada/components_4_12.tgz">
<img src="download.jpg" align=middle alt="[Download]" width="29" height="29"></a></td>
		<td align="center">
		&nbsp;</td>
	</tr>
</table>
<P align="left">
See also <a href="#changes_log">changes log</a>.</p>
<hr>
<P align="right">
<A name="1"></A><A href="#20"><IMG src="index.gif" alt="[TOC]" width="29"
    height="29"></A><A href="#1.1"><IMG src="next.gif" alt="[Next]" width="29"
    height="29"></A></p>
<H2>1. Objects and handles (smart pointers)</H2>
<p><a name="Objects_etc"></a>The objects and handles are designed to provide automatic garbage
collection. The objects are created explicitly, but never explicitly destroyed. An
application program usually should not directly access objects, using object
handles (smart pointers) instead. As long as at least one handle to an object 
exists the object will not be destroyed. When the last handle disappears the 
object is automatically destroyed. The presented implementation is oriented on 
large and rather complex objects. Usually it has little sense to have pointers 
to small objects, having no identity. For such objects by-value semantics is often safer, easier to understand and more efficient. For this
reason an object-oriented approach was chosen. The object type is
considered a descendant of a limited controlled type which can be extended as
necessary. Same handle type can be used for the whole class of descendant types.
The proxy operations can be defined on handles which implementations may
dispatch according to the actual type of the pointed object.
</p>
<p>A specialization of objects is provided to support object's <a href="#object_persistence">persistence</a>.
Such objects can be stored in an external persistent storage and then restored
from there. The persistent storage interface itself is an object. This allows
implementation of object serving as proxies of external objects permanently
resident in an external storage.
</p>
<p align="right">
  <A name="1.1"></A><A href="#1"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></A><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><A
      href="#1.2"><IMG src="next.gif" alt="[Next]" width="29" height="29"></A></p>
<H3>1.1. Objects</H3>
<p><a name="Entity"></a><a name="Object"></a>The package <a href="#Object"> Object</a> provides the
base type <a href="#Entity"> Entity</a> for all objects:
</p>
<blockquote>
<p>
<tt><font color="#0000FF">type </font>Entity<font color="#0000FF"> is new</font><br>
&nbsp;&nbsp;&nbsp;Ada.Finalization.Limited_Controlled<font color="#0000FF"> with</font><br>
<font color="#0000FF">record</font><br>
&nbsp;&nbsp;&nbsp;Use_Count : Natural := <font color="#800000">0</font>;<br>
<font color="#0000FF">end record</font>;<br>
<font color="#0000FF">type</font> Entity_Ptr <font color="#0000FF"> is access all
</font>Entity'Class;</tt></p>
</blockquote>
<p>It is a limited controlled type. The following operations are defined on it:</p>
<blockquote>
<p><tt>
<font color="#0000FF"><a name="Object.Decrement_Count"></a>procedure</font> Decrement_Count (<b>Object</b> :
<font color="#0000FF">in out</font> Entity);
</tt></p>
</blockquote>
<p>This procedure decreases object's reference count. It should never be used 
explicitly, except than in implementations of <a href="#Handle">handles to 
objects</a>.</p>
<blockquote>
<p><tt>
<font color="#0000FF"><a name="Object.Equal"></a>function</font>&nbsp;Equal<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;<b>Left</b>&nbsp;&nbsp;:&nbsp;Entity;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Right</b>&nbsp;:&nbsp;Entity'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Flag</b>&nbsp;&nbsp;:&nbsp;Boolean&nbsp;:=&nbsp;False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;&nbsp;<font color="#0000FF">return</font> Boolean;<br>
<font color="#0000FF"><a name="Object.Less"></a>function</font>&nbsp;Less<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;<b>Left</b>&nbsp;&nbsp;:&nbsp;Entity;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Right</b>&nbsp;:&nbsp;Entity'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Flag</b>&nbsp;&nbsp;:&nbsp;Boolean&nbsp;:=&nbsp;False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;&nbsp;<font color="#0000FF">return</font>&nbsp;Boolean;
</tt></p>
</blockquote>
<p>These functions are used to compare objects. The meaning of comparison is
usually defined by the nature of the objects. However the main reason why
comparison is defined, is to support ordered sets of objects, so any order is
suitable. Thus the implementations of Equal and Less use storage addresses to
get <a href="#Entity">Entity</a> objects ordered. They should be overridden if a
more meaningful order of objects exists. Note that Ada does
not fully support multiple dispatch. Therefore the operations are declared
asymmetric. The second parameter is class-wide. If the operation is overridden,
an implementation should dispatch on the second parameter to emulate true
multiple dispatch. The parameter <b>Flag</b> indicates whether the function is
called recursively. The following code fragment illustrates how to do it:</p>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#B8D3D1"><tt>
<font color="#0000FF">function</font> Less<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;Left&nbsp;&nbsp;: A_New_Object_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Right&nbsp;: Object.Entity'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Flag&nbsp;&nbsp;: Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;&nbsp;<font color="#0000FF">return</font> Boolean
<font color="#0000FF"> is</font><br>
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">if</font> (&nbsp; Flag<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000FF">or else</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Right&nbsp;<font color="#0000FF">not</font>&nbsp;<font color="#0000FF">in</font>&nbsp;A_New_Object_Type'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000FF">or else</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Right <font color="#0000FF">in</font> A_New_Object_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008000">-- Implement it here</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">else</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008000">-- Dispatch on the second parameter</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000FF">return</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000FF">not</font>&nbsp;(&nbsp;&nbsp;Less (Right, Left, True)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000FF">or else</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Equal (Right, Left, True)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">end if</font>;<br>
<font color="#0000FF">end</font> Less;</tt></TD>
  </TR>
</TABLE>
<p>The idea is that a given overriding is responsible for implementation of <a href="#Object.Less">Less</a>
if and only if <b>Left :&gt; Right</b>, i.e. when <b>Left</b> is in the class of
<b>Right</b>. The dispatching mechanism warranties that <b>Left</b> is in the
type class, so if <b>Right</b> is of the same type or else does not belong to the
type class, then <b>Left :&gt; Right</b>. Otherwise, <b>Right</b> is used to
re-dispatch and <b>Flag</b> is set to indicate that no more dispatch may happen.
Observe, that if <b>Left</b> and <b>Right</b> are siblings and therefore neither
of <b>Left :&gt; Right</b>
 and <b>Left &lt;: Right</b> is true, then <b>Flag</b> will stop the recursion.</p>
<p>If the
implementation casts <b>Right</b> down to a known type, as it usually would
do in other cases, then in the case of siblings, this would cause propagation
of Constraint_Error out of <a href="#Object.Less">Less</a> or <a href="#Object.Equal">Equal</a>.
If this behavior is undesirable, another way to deal with comparison of siblings is to find the most specific common ancestor of both.
In that case the
code of <a href="#Object.Less">Less</a> might look as follows:
  </p>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#B8D3D1"><tt>
<font color="#0000FF">function</font> Less<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;Left&nbsp;&nbsp;:
  A_New_Object_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Right&nbsp;:
  Object.Entity'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Flag&nbsp;&nbsp;: Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;&nbsp;<font color="#0000FF">return</font> Boolean
<font color="#0000FF"> is</font><br>
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">if</font>  (&nbsp; Right&nbsp;<font color="#0000FF">not</font>&nbsp;<font color="#0000FF">in</font>&nbsp;A_New_Object_Type'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000FF">or else</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Right <font color="#0000FF">in</font> A_New_Object_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008000">-- Implement it here</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">elsif</font> Flag <font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008000">-- Using Less of the most
specific common ancestor,<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- for example, the predefined Less:<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#0000FF">return</font>&nbsp;Object.Less&nbsp;(Object.Entity&nbsp;(Left),&nbsp;Right,&nbsp;True);<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">else</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008000">-- Dispatch on the second parameter</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000FF">return</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000FF">not</font>&nbsp;(&nbsp;&nbsp;Less (Right, Left, True)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000FF">or else</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Equal (Right, Left, True)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">end if</font>;<br>
<font color="#0000FF">end</font> Less;</tt></TD>
  </TR>
</TABLE>
<blockquote>
  <p><tt><font color="#0000FF">procedure</font> Finalize
  (<b>This</b> : <font color="#0000FF"> in out</font> Entity);</tt></p>
</blockquote>
<p>This procedure is called upon object finalization. It raises Program_Error if the destroyed object is still in use. Note
that any derived type shall call this procedure from its implementation of
Finalize when it overrides
Finalize.</p>
<blockquote>
<p><tt>
<font color="#0000FF"><a name="Object.Increment_Count"></a>procedure</font> Increment_Count (<b>Object</b> :
<font color="#0000FF">in out</font> Entity);
</tt></p>
</blockquote>
<p>This procedure increases object's reference count. It should never be used
explicitly, except than in implementations of <a href="#Handle">handles to
objects</a>.</p>
<blockquote>
<p><tt>
<font color="#0000FF">procedure</font> Initialize (<b>Object</b> :
<font color="#0000FF">in out</font> Entity);
</tt></p>
</blockquote>
<p>This procedure is called upon object initialization. Any derived type shall call
it from its implementation of.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Object.Release"></a>procedure</font> Release (<b>Ptr</b> :
  <font color="#0000FF">in out </font>Entity_Ptr);</tt></p>
</blockquote>
<p>The object pointed by <b>Ptr</b> is deleted if its use count in 1. Otherwise
the use count is decremented. <b>Ptr</b> becomes <font color="#0000FF">null</font> if the object it points
to is
deleted. The procedure does nothing if <b>Ptr</b> is already
<font color="#0000FF">null</font>. It can be
used for implementation of the smart pointers to Entity and its descendants.</p>
<H4><a name="1.1.1"></a>1.1.1. Tasking</H4>
<p>The package provides several implementations of <a href="#Object"> Object</a>:</p>
<ul>
	<li><i>Task-safe</i> implementation allows use of
	<a href="#Object.Decrement_Count">Decrement_Count</a>,
	<a href="#Object.Increment_Count">Increment_Count</a> and
	<a href="#Object.Release">Release</a> from concurrent tasks. This makes <a href="#Handle">handles to
objects</a> task-safe. Note that this by no means makes the objects themselves task-safe.
	It is up to the implementation of the derived type to ensure safety of its
	operations.</li>
	<li><i>Unsafe</i> implementation can be found in the subdirectory <i>
	single-task</i>. The source files there replace files with the corresponding
	names in the parent directory. The project files for GNAT Ada allow choice
	of the implementation per project scenario variable &quot;Tasking&quot;.</li>
	<li><i>Tracing</i> implementation is intended for use with GNAT Ada. The
	corresponding files
	provide run-time tracing of reference counts. The implementation is located in the subdirectory <i>gnat-debug</i>. Upon an error the source
	locations of the object creation, of the reference count changes, where the
	error was detected are dumped onto the standard
	output, supplied by the stack traceback at the location&nbsp;
	When the project is compiled manually, <tt>-bargs -E</tt> switches must be used with <tt>gnatmake</tt>.</li>
</ul>
<p align="right">
  <A name="1.2"></A><A href="#1.1"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></A><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><A
      href="#1.3"><IMG src="next.gif" alt="[Next]" width="29" height="29"></A></p>
<H3>1.2. Handles to objects</H3>
<p><a name="Handle"></a><a name="Object.Handle"></a>The generic child package <a href="#Object.Handle"> Object.Handle</a> defines the type
<a href="#Handle">Handle</a> used to access objects of a given type:</p>
<blockquote>
<p><tt><font color="#0000FF">generic</font><br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">type</font> Object_Type (&lt;&gt;)<font color="#0000FF"> is abstract new </font>Entity <font color="#0000FF">with private</font>;<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">type</font> Object_Type_Ptr <font color="#0000FF">
is access </font> Object_Type'Class;<br>
<font color="#0000FF">package</font> Object.Handle <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">type</font> Handle <font color="#0000FF">is
new </font>Ada.Finalization.Controlled<font color="#0000FF"> with private</font>;</tt></p>
</blockquote>
<p>The package
has two generic parameters:</p>
<ul>
  <li><a name="Object.Handle.Object_Type"></a>Object_Type is a type derived from <a href="#Entity">Entity</a>.</li>
  <li><a name="Object.Handle.Object_Type_Ptr"></a>Object_Type_Ptr is an access type to class-wide objects of Object_Type.</li>
</ul>
<p><a name="operations_on_Handle"></a>Handles can be assigned to copy a
reference to the object. If a handle object is not initialized it is invalid. An
invalid handle cannot be used to access objects, but it can be used in some comparisons,
it can be copied and assigned. The constant Null_Handle
defined in the package is a predefined invalid handle. The following operations
are defined on a <a href="#Handle">Handle</a>:</p>
<blockquote>
  <p><tt><font color="#0000FF">procedure</font> Finalize
  (<b>Reference</b> : <font color="#0000FF"> in out</font> Handle);</tt></p>
</blockquote>
<p>The destructor destroys the referenced object (if any) in case when the
handle was the last one pointing the object.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Object.Handle.Invalidate"></a>procedure</font> Invalidate
(<b>Reference</b> : <font color="#0000FF"> in out</font> Handle);</tt></p>
</blockquote>
<p>This procedure detaches handle from the object (if any) it points to. The
result handle cannot be used to access any object. The referenced object is
destroyed if it was the last handle.</p>
<blockquote>
<p><tt>
<font COLOR="#0000ff">function </font>Is_Valid (<b>Reference</b> : Handle) <font color="#0000FF"> return</font> Boolean;</tt></p>
</blockquote>
This function checks whether a handle points to an object.
<blockquote>
<p><tt>
<font COLOR="#0000ff"><a name="Object.Handle.Ptr"></a>function </font>Ptr (<b>Reference</b> : Handle) <font color="#0000FF"> return</font> Object_Type_Ptr;</tt></p>
</blockquote>
This function is used to get a pointer to the object the handle points to.

The pointer of to the
object shall be used no longer the handle it was get from exists. A safe way to
do it is to avoid declarations of any variables of the type Object_Type_Ptr.
<blockquote>
<p>
<tt><font COLOR="#0000ff"><a name="Object.Handle.Ref"></a>function </font> Ref (<b>Thing</b> : Object_Type_Ptr)
<font color="#0000FF"> return</font> Handle;</tt>
</p>
</blockquote>
<P>This function is used to get a handle from a pointer to an object.</p>
<blockquote>
<p>
<tt><font COLOR="#0000ff">procedure</font> Set (<b>Reference</b> :
<font COLOR="#0000ff">in out</font> Handle; <b>Thing</b> : Object_Type_Ptr);</tt></p>
</blockquote>
<P>This procedure resets the handle <b>Reference</b> to a possibly another 
object. In the course of this operation the previously pointed object may be
destroyed if <b>Reference</b> was the last handle pointing to it. It is safe 
when <b>Thing</b> is the object Reference already points to. When <b>Thing</b>
is null, this procedure is equivalent to <a href="#Object.Handle.Invalidate">
Invalidate</a>. </p>
<blockquote>
<p><tt><font color="#0000FF">function</font> "<font color="#FF0000">&lt;</font>"&nbsp;(<b>Left</b>, <b> Right</b> : Handle) <font color="#0000FF"> return</font> Boolean;<br>
<font color="#0000FF">function</font> "<font color="#FF0000">&lt;=</font>&quot;(<b>Left</b>, <b> Right</b> : Handle) <font color="#0000FF"> return</font> Boolean;<br>
<font color="#0000FF">function</font> &quot;<font color="#FF0000">&gt;=</font>&quot;(<b>Left</b>, <b> Right</b> : Handle) <font color="#0000FF"> return</font> Boolean;<br>
<font color="#0000FF">function</font> &quot;<font color="#FF0000">&gt;</font>&quot;&nbsp;(<b>Left</b>, <b> Right</b> : Handle) <font color="#0000FF"> return</font> Boolean;<br>
<font color="#0000FF">function</font> &quot;<font color="#FF0000">=</font>&quot;&nbsp;(<b>Left</b>, <b> Right</b> : Handle) <font color="#0000FF"> return</font> Boolean;<br>
<font color="#0000FF">function</font> &quot;<font color="#FF0000">=</font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;<b>Left</b>&nbsp; : Handle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Right</b> : <font color="#0000FF"> access
</font>Object_Type'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp; <font color="#0000FF">return</font> Boolean;<br>
<font color="#0000FF">function</font> &quot;<font color="#FF0000">=</font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;<b>Left </b>&nbsp;: <font color="#0000FF"> access</font> Object_Type'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Right</b> : Handle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp; <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<P>Valid handles are comparable. The result of comparison is one of the objects
they point to. Implementations of the comparisons use <a href="#Object.Less">Less</a>
and <a href="#Object.Equal">Equal</a> defined on Object_Type. If one of the 
parameters is invalid Contraint_Error is propagated for
all functions except &quot;<font color="#FF0000">=</font>&quot;. For equality
(and thus inequality) it is legal to compare with an invalid handle. The
result of such comparison is <i><font color="#800000">true</font></i> if and only if both handles are invalid. One
of parameters in equality is allowed to be a pointer to an object.</p>
<p align="right">
  <A name="1.3"></A><A href="#1.2"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></A><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><A
      href="#1.4"><IMG src="next.gif" alt="[Next]" width="29" height="29"></A></p>
<H3><a name="1.1.3"></a>1.3. An example of use</H3>
<p>The usage of objects and handles is
illustrated by the following simplified example of an implementation of dynamic
strings:&nbsp;
</p>
<a name="test_my_string.ads"></a>
File <EM>test_my_string.ads</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#0000FF">with</font> Object;<br><br>
<FONT color="#0000FF">package </font>Test_My_String <FONT color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;<FONT color="#0000FF">type</FONT> My_String (Length : Natural) <FONT color="#0000FF"> is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new</FONT> Object.Entity<FONT  color="#0000FF"> with record</FONT><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Value : String (1..Length);<br>
&nbsp;&nbsp;&nbsp;<FONT color="#0000FF">end record</FONT>;<br>
&nbsp;&nbsp;&nbsp;<FONT  color="#0000FF">type</FONT>&nbsp;My_String_Ptr&nbsp;<FONT color="#0000FF">is</FONT>&nbsp;<FONT color="#0000FF">access</FONT>&nbsp;My_String'Class;<br>
<FONT color="#0000FF">end</font>  Test_My_String;</tt></TD>
  </TR>
</TABLE>
<P>
 An instance of My_String keeps the string body. But a user should rather use
 handles to My_String, provided by the child package:</P>
<a name="test_my_string.handle.ads"></a>
File <EM>test_my_string-handle.ads</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#0000FF">with</font> Object.Handle;<br><br>
<font color="#0000FF">package</font>  Test_My_String.Handle <font color="#0000FF">is</font><br>
<font color="#008000">--<br>
-- Though an instantiation of Object.Handle provides handles to<br>
-- My_String, we would like to have some additional operations on<br>
-- handles.<br>
--</font><br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">package</font> My_String_Handle <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000FF">new</font> Object.Handle (My_String, My_String_Ptr);<br>
<font color="#008000">--<br>
-- So we immediately derive from the obtained type. Note that no<br>
-- additional components needed (with null record).&nbsp;<br>
--</font><br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">type</font> My_Safe_String <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new</font> My_String_Handle.Handle <font color="#0000FF">with null record</font>;<br>
<font color="#008000">--<br>
-- Now define useful operations on string handles:<br>
--</font><br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">function</font> Create (Value : String) <font color="#0000FF">return</font> My_Safe_String;<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">function</font> Value (Reference : My_Safe_String) <font color="#0000FF">return</font> String;<br>
<font color="#008000">--<br>
--</font>&nbsp;<font color="#008000">Note</font>&nbsp;<font color="#008000">that</font>&nbsp;<font color="#008000">Copy</font>&nbsp;<font color="#008000">takes</font>&nbsp;<font color="#008000">handle</font>&nbsp;<font color="#008000">as</font>&nbsp;<font color="#008000">an</font>&nbsp;<font color="#008000">inout-parameter.</font>&nbsp;<font color="#008000">It</font>&nbsp;<font color="#008000">does</font>&nbsp;<font color="#008000">not</font>&nbsp;<font color="#008000">touch<br>
-- the old object it just creates a new one and sets handle to point to<br>
-- it. The old object is automatically destroyed if no more referenced.&nbsp;<br>
--</font><br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">procedure</font> Copy<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;Reference : <font color="#0000FF">in out</font> My_Safe_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;New_Value : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">procedure</font> Copy<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;Reference : <font color="#0000FF">in out</font> My_Safe_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;New_Value : My_Safe_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br>
<font color="#0000FF">private</font><br>
<font color="#008000">--<br>
-- Note that Ref shall be overridden. This is a language requirement,<br>
-- which ensures that the results are covariant. We make it private<br>
-- because there is no need for a user to access it.<br>
--</font><br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">function</font> Ref (Pointer :
My_String_Ptr)&nbsp;<font color="#0000FF">return</font> My_Safe_String;<br>
<br>
<font color="#0000FF">end</font>  Test_My_String.Handle;</tt></TD>
  </TR>
</TABLE>
<P>This package defines the type My_Safe_String which can be used with less care
about memory allocation and deallocation. A handle can be copied using the standard
assignment. A new string object can be created from a string. The value it
points to can be accessed using the function Value, etc. It is a good practice
to provide Create returning a handle instead of a direct use of Ref on an
existing object, because it prevents referring stack-allocated objects which
could get out of scope before handles to them. <a href="#Object"> Object</a>.Finalize would notice
that and raise Program_Error. An implementation of My_Safe_String might
look like follows.</P>
File <EM>test_my_string-handle.adb</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">package body</font> 
  Test_My_String.Handle<font color="#0000FF"> is</font><br>
<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">function</font> Create (Value : String) <font color="#0000FF">return</font> My_Safe_String <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ptr : My_String_Ptr := <font color="#0000FF"> new</font> My_String (Value'Length);<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ptr.Value := Value;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000FF">return</font> Ref (Ptr);<br>
<font color="#0000FF">&nbsp;&nbsp;&nbsp;end</font> Create;<br>
<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">function</font> Value (Reference : My_Safe_String) <font color="#0000FF">return</font>  String <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000FF">return</font> Ptr (Reference).Value;<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">end</font> Value;<br>
<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">procedure</font> Copy<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;Reference : <font color="#0000FF">in out</font> My_Safe_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;New_Value : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;
<font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reference := Create (New_Value);<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">end</font> Copy;<br>
<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">procedure</font> Copy<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;Reference : <font color="#0000FF">in out</font>
My_Safe_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;New_Value : My_Safe_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;
<font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reference := Create (Value (New_Value));<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">end</font> Copy;<br>
<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">function</font>&nbsp;Ref&nbsp;(Pointer&nbsp;:&nbsp;My_String_Ptr)&nbsp;<font color="#0000FF">return</font>&nbsp;My_Safe_String&nbsp;<font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000FF">return</font> (My_String_Handle.Ref (Pointer) <font color="#0000FF"> with null
record</font>);<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">end</font> Ref;<br>
<br>
<font color="#0000FF">end</font>   Test_My_String.Handle;</tt></TD>
  </TR>
</TABLE>
<p align="right">
  <A name="1.4"></A><A href="#1.3"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></A><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><A
      href="#1.5"><IMG src="next.gif" alt="[Next]" width="29" height="29"></A></p>
<H3>1.4. Bounded arrays of objects</H3>
<p align="left"><a name="Bounded_Array"></a><a name="Object.Handle.Generic_Bounded_Array"></a>The package
<a href="#Object.Handle.Generic_Bounded_Array">Object.Handle.Generic_Bounded_Array</a> defines the type
<a href="#Bounded_Array">Bounded_Array</a>. An instance of
<a href="#Bounded_Array">Bounded_Array</a> is  a  fixed size array of references to
<a href="#Object">objects</a>. It is same as an array of <a href="#Handle">
handles</a> to <a href="#Object">objects</a> but more efficient.</p>
<blockquote>
  <p><tt><font color="#0000FF">generic<br>
  </font>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">type
  </font>
 Index_Type<font color="#0000FF"> is
  </font>
 (&lt;&gt;);<font color="#0000FF"><br>
&nbsp;&nbsp; type
  </font>
  Handle_Type <font color="#0000FF">is new</font> Handle <font color="#0000FF">
  with private</font>;<font color="#0000FF"><br>
  package
  </font>
  Object.Handle.Generic_Bounded_Array<font color="#0000FF"> is
  </font>
  ...</tt></p>
</blockquote>
<p>Here Index_Type is the type used to index the array elements. Handle_Type is
any descendant of Handle including itself. The type
<a href="#Bounded_Array">Bounded_Array</a> is defined in the package as:</p>
<blockquote>
<tt><font color="#0000FF">type
  </font>
 Bounded_Array (First, Last : Index_Type)<font color="#0000FF"> is<br>
&nbsp;&nbsp; new
  </font>
 Ada.Finalization.Controlled <font color="#0000FF">with private</font>;</tt>
</blockquote>
<p>The discriminants <b>First</b> and <b>Last</b> define the index range. The following operations are defined on
<a href="#Bounded_Array">Bounded_Array</a>:</p>
<blockquote>
<tt><font color="#0000FF">procedure</font>
  Adjust
  (<b>Container</b> : <font color="#0000FF"> in out </font>Bounded_Array);</tt></blockquote>
<p>The assignment makes a copy of the array.</p>
<blockquote>
<tt>
<font color="#0000FF">function</font> Append<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> : 
Bounded_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Element</b>&nbsp;&nbsp; 
: Object_Type_Ptr := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Count</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Natural&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
<font color="#800000">1</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Bounded_Array;<br>
<font color="#0000FF">function</font> Append<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> :
Bounded_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Element</b>&nbsp;&nbsp; 
: Handle_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Count</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Natural := <font color="#800000">1</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Bounded_Array;</tt>
</blockquote>
<p>These functions add <b>Element</b> <b>Count</b> times to the end of <b>
Container</b>. The result will have the lower bound <b>Container</b>.First. 
Constraint_Error is propagated when the upper bound cannot be represented in 
Index_Type.</p>
<blockquote>
<tt>
<font color="#0000FF">function</font> Delete<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> : 
Bounded_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Index_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Count</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Natural := <font color="#800000">1</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Bounded_Array;</tt></blockquote>
<p>This function deletes <b>Count</b> elements from <b>Container</b> starting 
with the element <b>From</b>. When <b>Count</b> exceeds the number of elements 
in the array, the available elements are removed. The lower bound of the result 
is <b>Container</b>.First, except the case when all elements are removed. For an 
empty result, the lower bound is Index_Type'Succ (Index_Type'First).
Constraint_Error is propagated when the result should be empty, but Index_Type 
has less than two values. It is also propagated when <b>From</b> is not in <b>
Container</b>.</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Finalize
  (<b>Container</b> : <font color="#0000FF"> in out </font>Bounded_Array);</tt></blockquote>
<p>The destructor may delete some objects referenced by the array.</p>
<blockquote>
<tt>
<font color="#0000FF">procedure</font>&nbsp;Fill<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;<b>Container</b> 
: <font color="#0000FF">in out</font> Bounded_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Index_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Index_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Element</b>&nbsp;&nbsp;
: Object_Type_Ptr := <font color="#0000FF">null</font><br>
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br>
<font color="#0000FF">procedure</font>&nbsp;Fill<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;<b>Container</b>&nbsp;:&nbsp;<font color="#0000FF">in out</font> Bounded_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>From</b>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;:&nbsp;Index_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;Index_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Element</b>&nbsp;&nbsp;&nbsp;:&nbsp;Handle_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);</tt>
</blockquote>
<p>These procedures are used to put in / replace a range of array elements. The
range <b>From</b>..<b>To</b> is filled with <b>Element</b>. Nothing happens if
<b>From</b> &gt; <b>To</b>. Otherwise Constraint_Error is propagated when <b>From</b>..<b>To
</b>is not in <b>Container</b>.First..<b>Constainer</b>.Last.</p>
<blockquote>
<tt><font color="#0000FF">function</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;<b>Container</b> : 
Bounded_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Index</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: Index_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;&nbsp;<font color="#0000FF">return</font> Object_Type_Ptr;</tt></blockquote>
<p>This function returns either a pointer to an object or <font color="#0000FF">null</font>.</p>
<blockquote>
<tt><font color="#0000FF">function</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;<b>Container</b> : 
Bounded_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
: Index_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Index_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Bounded_Array;</tt></blockquote>
<p>This function returns a slice of <b>Container</b>. The lower index of the 
slice is <b>From</b>, the upper index is <b>To</b>. Constraint_Error is
propagated when <b>From</b>..<b>To</b> is not empty and does not belong to the 
range <b>First</b>..<b>Last</b> of <b>Container</b>. </p>
<blockquote>
<tt>
<font color="#0000FF">function</font> Prepend<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> : 
Bounded_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Element</b>&nbsp;&nbsp; 
: Object_Type_Ptr := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Count</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Natural&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
<font color="#800000">1</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Bounded_Array;<br>
<font color="#0000FF">function</font> Prepend<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> : 
Bounded_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Element</b>&nbsp;&nbsp; 
: Handle_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Count</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Natural := <font color="#800000">1</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Bounded_Array;</tt>
</blockquote>
<p>These functions add <b>Element</b> <b>Count</b> times in front of <b>
Container</b>. The result will have the upper bound <b>Container</b>.Last. 
Constraint_Error is propagated when the upper bound cannot be represented in 
Index_Type.</p>
<blockquote>
<tt><font color="#0000FF">   procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;             (
&nbsp;<b>Container</b> : <font color="#0000FF"> in out </font>Bounded_Array;<br>
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;
&nbsp;<b>                Index</b>
&nbsp;&nbsp;&nbsp; : Index_Type;<br>
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;
&nbsp;<b>                Element</b>
&nbsp;   : Object_Type_Ptr<br>
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;             );<br>
  <font color="#0000FF">   procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;             (
&nbsp;<b>Container</b> : <font color="#0000FF"> in out </font>Bounded_Array;<br>
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;
&nbsp;<b>                Index</b>
&nbsp;&nbsp;&nbsp; : Index_Type;<br>
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;
&nbsp;<b>                Element</b>
&nbsp;   : Handle_Type<br>
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;             );</tt></blockquote>
<p>These procedures are used to put in / replace an array element using its index.
Constraint_Error is propagated when <b>Index</b> is illegal.</p>
<blockquote>
<tt>
  <font color="#0000FF">   procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;             (
&nbsp;<b>Container</b> : <font color="#0000FF"> in out </font>Bounded_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
: Index_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
: Index_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Elements</b>&nbsp; : Bounded_Array<br>
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;             );</tt></blockquote>
<p>This procedures replaces the slice <b>From</b>..<b>To</b> of <b>Container</b>
with <b>Elements</b>. <b>Container</b> and <b>Elements</b> can be the same
object. Else if <b>Elements</b> is shorter than the slice, the rightmost
elements of the slice are replaced with invalid handles. When <b>Elements</b> is
longer, then its rightmost elements are ignored. The operation is void when <b>
From</b>..<b>To</b> is empty. Constraint_Error is propagated when <b>From</b>..<b>To</b>
is not empty and does not belong to the range <b>First</b>..<b>Last</b> of <b>
Container</b>.</p>
<blockquote>
<tt><font color="#0000FF">function</font> Ref<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;<b>Container</b> : 
Bounded_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Index</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: Index_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;&nbsp;<font color="#0000FF">return</font>
Handle_Type;</tt></blockquote>
This function returns a valid handle to an object. Otherwise Constraint_Error
is propagated.<blockquote>
<tt><font color="#0000FF">function</font> &quot;<font color="#FF0000">&amp;</font>&quot; (<b>Left</b>,
<b>Right</b> : Bounded_Array) <font color="#0000FF">return</font> Bounded_Array;</tt></blockquote>
<p>This function returns a concatenation of two arrays. If <b>Right</b> is
empty, the result <b>Left</b>, else if <b>Left</b> is empty, the result is <b>
Right</b>. Otherwise, the lower bound of the result is Index_Type'First.</p><blockquote>
<tt>Empty : <font color="#0000FF">constant</font> Bounded_Array;</tt></blockquote>
<p>Empty array constant.</p>
<p align="right">
  <A name="1.5"></A><A href="#1.4"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></A><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#1.6"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>1.5. Unbounded arrays of objects</H3>
<p><a name="Object.Handle.Generic_Unbounded_Array"></a>The package
<a href="#Object.Handle.Generic_Unbounded_Array">Object.Handle.Generic_Unbounded_Array</a> defines the type
<a href="#Object.Handle.Generic_Unbounded_Array">Unbounded_Array</a>. An instance of
<a href="#Object.Handle.Generic_Unbounded_Array">Unbounded_Array</a> is  an unbounded array of references to 
<a href="#Object">objects</a>. The package has same functionality as an 
instance of <a href="#Generic_Unbounded_Array">Generic_Unbounded_Array</a> 
with <a href="#Handle">Handle</a> as Object_Type, but it is more efficient.</p>
<blockquote>
  <p><tt><font color="#0000FF">generic<br>
  </font>
<font COLOR="#000000">
&nbsp;&nbsp;&nbsp;</font><font color="#0000FF">type
  </font>
 Index_Type<font color="#0000FF"> is
  </font>
 (&lt;&gt;);<font color="#0000FF"><br>
  &nbsp;&nbsp; type
  </font>
  Handle_Type <font color="#0000FF">is new</font> Handle <font color="#0000FF">
  with private</font>;<br>
&nbsp;&nbsp;&nbsp;Minimal_Size&nbsp;: Positive := <font color="#800000">64</font>;<br>
&nbsp;&nbsp;&nbsp;Increment&nbsp;&nbsp;&nbsp;&nbsp;: Natural&nbsp; := <font color="#800000">50</font>;<br>
  <font color="#0000FF">package
  </font>
  Object.Handle.Generic_Unbounded_Array<font color="#0000FF"> is
  </font>
  ...</tt></p>
</blockquote>
<p>Here:
</p>
<ul>
  <li>Index_Type is the type used to index the array elements;</li>
  <li>Handle_Type is the type of handles to the elements. It is any descendant 
  of Handle or the Handle itself;</li>
  <li>Minimal_Size is the minimal number of elements by which the array vector is enlarged. When the first
    element is put into the array, this will
    be the initial vector size.</li>
  <li>Increment controls further vector enlargements. The vector is enlarged by <i>n</i>*Increment/100,
    where <i> n</i> is the current vector size. If the evaluated increment of 
  the vector size is less than Minimal_Size
    elements, then the latter is used instead.</li>
</ul>
<p>The type is declared as:</p>
<blockquote>
<p><tt><font color="#0000FF">type
  </font>
 Unbounded_Array <font color="#0000FF"> is new
  </font>
 Ada.Finalization.Controlled <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The following operations are defined on
<a href="#Object.Handle.Generic_Unbounded_Array">Unbounded_Array</a>:</p>
<blockquote>
<tt><font color="#0000FF">procedure</font>
  Adjust
  (<b>Container</b> : <font color="#0000FF"> in out </font>Unbounded_Array);</tt></blockquote>
The assignment does not make a copy of the array. It just increments an
internal use count. The array will be copied only when a destructive operation 
is applied.<blockquote>
<p>
<tt><font color="#0000FF">procedure</font> Erase
  (<b>Container</b> : <font color="#0000FF"> in out </font>Unbounded_Array);</tt></p>
</blockquote>
<p>This procedure removes all elements from <b>Container</b> making it empty. The objects referenced only 
by <b>Container </b>will be deleted.</p>
<blockquote>
<p>
<tt><font color="#0000FF">procedure</font> Finalize
  (<b>Container</b> : <font color="#0000FF"> in out </font>Unbounded_Array);</tt></p>
</blockquote>
<p>The destructor may delete some objects referenced by the array.</p>
<blockquote>
<tt><font color="#0000FF">function</font> First<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;<b>Container</b> : 
Unbounded_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;&nbsp;<font color="#0000FF">return</font> 
Index_Type;</tt></blockquote>
<p>This function returns the current lower bound of the array. Constraint_Error
is propagated when the array is empty.</p><blockquote>
<tt><font color="#0000FF">function</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;<b>Container</b> : 
Unbounded_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Index</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: Index_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;&nbsp;<font color="#0000FF">return</font> Object_Type_Ptr;</tt></blockquote>
<p>This function returns either a pointer to an object or <font color="#0000FF">null</font>.</p>
<blockquote>
<tt><font color="#0000FF">function</font> Last<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;<b>Container</b> : 
Unbounded_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;&nbsp;<font color="#0000FF">return</font> 
Index_Type;</tt></blockquote>
<p>This function returns the current upper bound of the array. Constraint_Error
is propagated when the array is empty.</p>
<blockquote>
<tt><font color="#0000FF">   procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;             (
&nbsp;<b>Container</b> : <font color="#0000FF"> in out </font>Unbounded_Array;<br>
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;
&nbsp;<b>                Index</b>
&nbsp;&nbsp;&nbsp; : Index_Type;<br>
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;
&nbsp;<b>                Element</b>
&nbsp;   : Object_Type_Ptr<br>
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;             );<br>
  <font color="#0000FF">   procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;             (
&nbsp;<b>Container</b> : <font color="#0000FF"> in out </font>Unbounded_Array;<br>
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;
&nbsp;<b>                Index</b>
&nbsp;&nbsp;&nbsp; : Index_Type;<br>
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;
&nbsp;<b>                Element</b>
&nbsp;   : Handle_Type<br>
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;             );</tt></blockquote>
<p>These procedures are used to put in / replace an array element using its index.
The array is automatically expanded as necessary. It never happens if <b>Element</b> 
is <font color="#0000FF">null</font> or an invalid handle.</p><blockquote>
<tt><font color="#0000FF">function</font> Ref<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;<b>Container</b> : 
Unbounded_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Index</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: Index_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;&nbsp;<font color="#0000FF">return</font>
Handle_Type;</tt></blockquote>
This function returns a valid handle to an object. Otherwise Constraint_Error
is propagated.<p align="right">
  <a href="#1.4" name="1.6"></a><a href="#1.5"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#1.7"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>1.6. Unbounded sets of objects</H3>
<p><a name="Object.Handle.Generic_Set"></a><a name="Object.Handle.Generic_Set.Set"></a>
The package
<a href="#Object.Handle.Generic_Set">Object.Handle.Generic_Set</a> defines the type
<a href="#Object.Handle.Generic_Set.Set">Set</a>. An instance of
<a href="#Object.Handle.Generic_Set">Generic_Set</a> is  a set of references to 
<a href="#Object">objects</a>. The package has same functionality as an 
instance of <a href="#Generic_Set">Generic_Set</a> 
with <a href="#Handle">Handle</a> as Object_Type, but it is more efficient. It 
has the following generic parameters:</p>
<blockquote>
  <p><tt><font color="#0000FF">generic<br>
  </font>
&nbsp;&nbsp;&nbsp;Minimal_Size&nbsp;: Positive := <font color="#800000">64</font>;<br>
&nbsp;&nbsp;&nbsp;Increment&nbsp;&nbsp;&nbsp;&nbsp;: Natural&nbsp; := <font color="#800000">50</font>;<br>
  <font color="#0000FF">package
  </font>
  Object.Handle.Generic_Set<font color="#0000FF"> is
  </font>
  ...</tt></p>
</blockquote>
<p>Here:
</p>
<ul>
  <li>Minimal_Size is the minimal number of elements by which set is enlarged. When the first
    element is put into the array, this will
    be the initial vector size.</li>
  <li>Increment controls further vector enlargements. The vector is enlarged by <i>n</i>*Increment/100,
    where <i> n</i> is the current vector size. If the evaluated increment of 
  the vector size is less than Minimal_Size
    elements, then the latter is used instead.</li>
</ul>
<p>The type
<a href="#Object.Handle.Generic_Set.Set">Set</a> is declared as:</p>
<blockquote>
<p><tt><font color="#0000FF">type
  </font>
 Set <font color="#0000FF"> is new
  </font>
 Ada.Finalization.Controlled <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The following operations are defined on
<a href="#Object.Handle.Generic_Set.Set">Set</a>:</p>
<blockquote>
<p>
<tt><font color="#0000FF">procedure</font> Add (<b>Container</b> :<font color="#0000FF"> in out
</font> Set; <b> Item</b>&nbsp; : Handle);<font color="#0000FF"><br>
procedure</font> Add (<b>Container</b> :<font color="#0000FF"> in out
</font> Set; <b> Item</b>&nbsp; : Object_Type_Ptr);<font color="#0000FF"><br>
procedure</font> Add (<b>Container</b> :<font color="#0000FF"> in out </font> Set;
<b> Items</b> : Set);</tt></p>
</blockquote>
<p>These procedures are used to add an object to a set or all items of one set to
another. The parameter <b>Item</b> can be either a handle or a pointer to the 
object. Nothing happens if an item is already in the set or pointer is an 
invalid handle or <font color="#0000FF">null</font>.
</p>
<blockquote>
<p>
<tt><font color="#0000FF">procedure</font>
  Adjust
  (<b>Container</b> : <font color="#0000FF"> in out </font>Set);</tt></p>
</blockquote>
<p>The assignment does not make a copy of the <b>Container</b>. It just 
increments an internal use count of the set body. A set will be physicaly copied 
only when a destructive operation is applied to it.</p>
<blockquote>
<p>
<tt><font color="#0000FF">function </font> Create<font color="#0000FF"> return
  </font>Set;</tt></p>
</blockquote>
<p>This function returns an empty set.</p>
<blockquote>
<p>
<tt><font color="#0000FF">procedure</font> Erase
  (<b>Container</b> : <font color="#0000FF"> in out </font> Set);</tt></p>
</blockquote>
<p>This procedure removes all objects from the set. The objects referenced only 
by <b>Container </b>will be deleted.</p>
<blockquote>
<p>
<tt><font color="#0000FF">procedure</font> Finalize
  (<b>Container</b> : <font color="#0000FF"> in out </font>Set);</tt></p>
</blockquote>
<p>The destructor may delete some objects referenced by <b>Container</b>.</p>
<blockquote>
<p>
<tt><font color="#0000FF">function</font> Find
(<b>Container</b> : Set; <b> Item</b> : Handle)<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">return</font> Integer;<font color="#0000FF"><br>
function</font> Find
(<b>Container</b> : Set; <b> Item</b> : Object_Type'Class)<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">return</font> Integer;<br>
<font color="#0000FF">function</font> Find
(<b>Container</b> : Set; <b> Item</b> : Object_Type_Ptr)<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">return</font> Integer;</tt></p>
</blockquote>
<p>This function is used to <b>Item</b> in the set <b>Container</b>. The result
is either a positive index of the found item or a negated index of the place
where the item should be if it were in the set. </p>
<blockquote>
<p>
<tt><font color="#0000FF">function</font> Get (<b>Container</b> : Set;
<b> Index</b> : Positive)<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">return</font> Object_Type_Ptr;</tt> </p>
</blockquote>
<p>This function is used to get an item of the set <b>Container</b> using a positive index. 
The result is a pointer to the object. It is valid as long as the object is in 
the set. See also <a href="#Object.Handle.Generic_Set.Ref">Ref</a> which 
represents a safer way of accessing the set items. Constraint_Error is propagated if <b>Index</b> is wrong.
</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Size
(<b>Container</b> : Set)<font COLOR="#000000">&nbsp;</font><font color="#0000FF">return</font>
Natural;</tt></p>
</blockquote>
<p>This function returns the number of items in the set.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Is_Empty
(<b>Container</b> : Set) <font color="#0000FF"> return</font> Boolean;</tt></p>
</blockquote>
<p>True is returned if <b>Container</b> is empty.</p>
<blockquote>
  <p><tt><font color="#0000FF">function</font> Is_In
  (<b>Container</b> : Set; <b> Item</b> : Handle)<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">return</font> Boolean;<font color="#0000FF"><br>
	function</font> Is_In
  (<b>Container</b> : Set; <b> Item</b> : Object_Type'Class)<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">return</font> Boolean;<br>
  <font color="#0000FF">function</font> Is_In
  (<b>Container</b> : Set; <b> Item</b> : Object_Type_Ptr)<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>True is returned if <b>Item</b> is in <b>Container</b>. Item can be either a 
pointer to the object, a handle to it or the object itself. The result is always <i>
<font color="#800000">false</font></i> when Item is invalid or
<font color="#0000FF">null</font>.</p>
<blockquote>
<p>
<tt><font color="#0000FF"><a name="Object.Handle.Generic_Set.Ref"></a>function</font> 
Ref (<b>Container</b> : Set;
<b> Index</b> : Positive)&nbsp;<font color="#0000FF">return</font> Handle;</tt> </p>
</blockquote>
<p>This function is used to get an item of the set <b>Container</b> using a positive index. 
The result is a handle to the object. Constraint_Error is propagated if <b>Index</b> is wrong.
</p>
<blockquote>
  <p><tt><font color="#0000FF">procedure</font> Remove
  (<b>Container</b> :<font color="#0000FF"> in out </font> Set; <b> Index</b> : Positive);<br>
  <font color="#0000FF">procedure</font> Remove (<b>Container</b> :<font color="#0000FF"> in out
  </font> Set; <b> Item</b>
&nbsp;: Handle);<font color="#0000FF"><br>
  procedure</font> Remove (<b>Container</b> :<font color="#0000FF"> in out
  </font> Set; <b> Item</b>
&nbsp;: Object_Type'Class);<br>
  <font color="#0000FF">procedure</font> Remove (<b>Container</b> :<font color="#0000FF"> in out
  </font> Set; <b> Item</b>
&nbsp;: Object_Type_Ptr);<br>
  <font color="#0000FF">procedure</font> Remove (<b>Container</b> :<font color="#0000FF"> in out
  </font> Set; <b>Items</b>     : Set);</tt></p>
</blockquote>
<p>These procedures are used to remove items from the set <b>Container</b>.&nbsp;An item can be removed either by its index, or explicitly
by a pointer, object or handle to it, or else by specifying a
set of items to be removed. If a particular item is not in the set, then nothing
happens. Also nothing happens if a handle is illegal or pointer is
<font color="#0000FF">null</font>. Constraint_Error is propagated when item index is wrong.</p>
<blockquote>
  <p><tt><font color="#0000FF">function</font>
  &quot;<font color="#FF0000">and</font>&quot; (<b>Left</b>, <b> Right</b> : Set)
  <font color="#0000FF"> return</font> Set;<br>
  <font color="#0000FF">function</font> &quot;<font color="#FF0000">or</font>&quot;
  <font COLOR="#000000">
&nbsp;</font>(<b>Left</b>, <b> Right</b> : Set) <font color="#0000FF"> return</font> Set;<br>
  <font color="#0000FF">function</font> &quot;<font color="#FF0000">xor</font>&quot;
  (<b>Left</b>, <b> Right</b> : Set) <font color="#0000FF"> return</font> Set;</tt></p>
</blockquote>
<p>These functions are conventional set operations - intersection, union,
difference. Difference is defined as a set which items are only in one of the
sets <b>Left</b> and <b>Right</b>.</p>
<blockquote>
  <p><tt><font color="#0000FF">function</font>
  &quot;<font color="#FF0000">=</font>&quot; (<b>Left</b>, <b> Right</b> : Set) <font color="#0000FF"> return</font>
  Boolean;</tt></p>
</blockquote>
<p>True is returned if both sets contain same items.</p>
<p align="right">
  <a href="#1.5" name="1.7"></a><a href="#1.5"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><a href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#2"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>1.7. Universal sets of objects</H3>
<p><a name="Object.Handle.Generic_Handle_Set"></a>
The packages <a href="#Object.Handle.Generic_Handle_Set">Object.Handle.Generic_Handle_Set</a> 
resembles
<a href="#Object.Handle.Generic_Set">Object.Handle.Generic_Set</a>, but it is 
more universal. It allows to specify a user-defined types both for the object 
handles and for the weak references to objects (usually pointers). It has the following generic parameters:</p>
<blockquote>
  <p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type
  </font>Handle_Type<font color="#0000FF"> is new
  </font>Handle<font color="#0000FF"> with private</font>;<font color="#0000FF"><br>
&nbsp;&nbsp; type
  </font>Object_Ptr_Type<font color="#0000FF"> is private</font>;<font color="#0000FF"><br>
&nbsp;&nbsp;
  </font>Null_Object_Ptr : <font color="#0000FF">Object_Ptr_Type</font>;<font color="#0000FF"><br>
&nbsp;&nbsp; with function
  </font>Ptr (Object : Handle_Type) <font color="#0000FF">return
  </font>Object_Ptr_Type<font color="#0000FF"> is</font> &lt;&gt;;<br>
	<font color="#0000FF">&nbsp;&nbsp; with function</font> Ref (Object : 
	Object_Ptr_Type) <font color="#0000FF">return
  </font>Handle_Type<font color="#0000FF"> is</font> &lt;&gt;;<br>
	<font color="#0000FF">&nbsp;&nbsp; with function</font> To_Object_Ptr 
	(Object : Object_Ptr_Type) <font color="#0000FF">return</font> 
	Object_Type_Ptr <font color="#0000FF">is</font> &lt;&gt;;<font color="#0000FF"><br>
&nbsp;&nbsp; with function</font> &quot;<font color="#FF0000">&lt;</font>&quot; (Left, Right 
	: Object_Ptr_Type) <font color="#0000FF">return
  </font>Boolean<font color="#0000FF"> is</font> &lt;&gt;;<font color="#0000FF"><br>
&nbsp;&nbsp; with function
  </font>&quot;<font color="#FF0000">=</font>&quot; (Left, Right : Object_Ptr_Type)<font color="#0000FF"> 
	return
  </font>Boolean<font color="#0000FF"> is</font> &lt;&gt;;<font color="#0000FF"><br>
  </font>&nbsp;&nbsp;&nbsp;Minimal_Size&nbsp;: Positive := <font color="#800000">64</font>;<br>
&nbsp;&nbsp;&nbsp;Increment&nbsp;&nbsp;&nbsp;&nbsp;: Natural&nbsp; := <font color="#800000">50</font>;<br>
  <font color="#0000FF">package
  </font>
  Object.Handle.Generic_Handle_Set<font color="#0000FF"> is
  </font>
  ...</tt></p>
</blockquote>
<p>Here:
</p>
<ul>
  <li>Handle_Type is a type derived from <a href="#Handle">Handle</a> to be used 
	as an object handle (strong reference);</li>
	<li>Object_Ptr_Type is a type used to reference objects (weak reference). Usually it is a 
	record type containing a pointer to <a href="#Object.Handle.Object_Type">Object_Type</a>'Class;</li>
	<li>Null_Object_Ptr is a value never be put in the set. Usually it has the 
	object pointer set to <font color="#0000FF">null</font>;</li>
	<li>
	Ptr is a function that converts a handle to the object to a
	reference. It is analogous to the function <a href="#Object.Handle.Ptr">Ptr</a> 
	of the parent package;</li>
	<li>Ref is a function that converts a reference to the object to a handle 
	to. It is similar to the function <a href="#Object.Handle.Ref">Ref</a> of 
	the parent package;</li>
	<li>
	To_Object_Ptr is a function that gets
	<a href="#Object.Handle.Object_Type_Ptr">Object_Type_Ptr</a> from an object 
	reference;</li>
	<li>
	&quot;<font color="#FF0000">&lt;</font>&quot; and &quot;<font color="#FF0000">=</font>&quot; 
	are comparisons defined on object references;</li>
	<li>Minimal_Size is the minimal number of elements by which set is enlarged. When the first
    element is put into the array, this will
    be the initial vector size.</li>
  <li>Increment controls further vector enlargements. The vector is enlarged by <i>n</i>*Increment/100,
    where <i> n</i> is the current vector size. If the evaluated increment of 
  the vector size is less than Minimal_Size
    elements, then the latter is used instead.</li>
</ul>
<p>In other aspects both packages are identical. The interface subprograms 
described below are similar in both. The <a href="#Handle">Handle</a> should be 
read Handle_Type when <a href="#Object.Handle.Generic_Handle_Set">Object.Handle.Generic_Handle_Set</a> 
is considered.</p>
<p>
<a name="Object.Handle.Generic_Handle_Set.Set"></a>The type
<a href="#Object.Handle.Generic_Handle_Set.Set">Set</a> is declared as:</p>
<blockquote>
<p><tt><font color="#0000FF">type
  </font>
 Set <font color="#0000FF"> is new
  </font>
 Ada.Finalization.Controlled <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The following operations are defined on
<a href="#Object.Handle.Generic_Set.Set">Set</a>:</p>
<blockquote>
<p>
<tt><font color="#0000FF">procedure</font> Add (<b>Container</b> :<font color="#0000FF"> in out
</font> Set; <b> Item</b>&nbsp; : Handle_Type);<font color="#0000FF"><br>
procedure</font> Add (<b>Container</b> :<font color="#0000FF"> in out
</font> Set; <b> Item</b>&nbsp; : Object_Ptr_Type);<font color="#0000FF"><br>
procedure</font> Add (<b>Container</b> :<font color="#0000FF"> in out </font> Set;
<b> Items</b> : Set);</tt></p>
</blockquote>
<p>These procedures are used to add an object to a set or all items of one set to
another. The parameter <b>Item</b> can be either a handle or a pointer to the 
object. Nothing happens if an item is already in the set or pointer is an 
invalid handle or <font color="#0000FF">null</font>.
</p>
<blockquote>
<p>
<tt><font color="#0000FF">procedure</font>
  Adjust
  (<b>Container</b> : <font color="#0000FF"> in out </font>Set);</tt></p>
</blockquote>
<p>The assignment does not make a copy of the <b>Container</b>. It just 
increments an internal use count of the set body. A set will be physicaly copied 
only when a destructive operation is applied to it.</p>
<blockquote>
<p>
<tt><font color="#0000FF">function </font> Create<font color="#0000FF"> return
  </font>Set;</tt></p>
</blockquote>
<p>This function returns an empty set.</p>
<blockquote>
<p>
<tt><font color="#0000FF">procedure</font> Erase
  (<b>Container</b> : <font color="#0000FF"> in out </font> Set);</tt></p>
</blockquote>
<p>This procedure removes all objects from the set. The objects referenced only 
by <b>Container </b>will be deleted.</p>
<blockquote>
<p>
<tt><font color="#0000FF">procedure</font> Finalize
  (<b>Container</b> : <font color="#0000FF"> in out </font>Set);</tt></p>
</blockquote>
<p>The destructor may delete some objects referenced by <b>Container</b>.</p>
<blockquote>
<p>
<tt><font color="#0000FF">function</font> Find
(<b>Container</b> : Set; <b> Item</b> : Handle_Type)<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">return</font> Integer;<br>
<font color="#0000FF">function</font> Find
(<b>Container</b> : Set; <b> Item</b> : Object_Ptr_Type)<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">return</font> Integer;</tt></p>
</blockquote>
<p>This function is used to <b>Item</b> in the set <b>Container</b>. The result
is either a positive index of the found item or a negated index of the place
where the item should be if it were in the set. </p>
<blockquote>
<p>
<tt><font color="#0000FF">function</font> Get (<b>Container</b> : Set;
<b> Index</b> : Positive)<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">return</font> Object_Ptr_Type;</tt> </p>
</blockquote>
<p>This function is used to get an item of the set <b>Container</b> using a positive index. 
The result is a pointer to the object. It is valid as long as the object is in 
the set. See also <a href="#Object.Handle.Generic_Handle_Set.Ref">Ref</a> which 
represents a safer way of accessing the set items. Constraint_Error is propagated if <b>Index</b> is wrong.
</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Size
(<b>Container</b> : Set)<font COLOR="#000000">&nbsp;</font><font color="#0000FF">return</font>
Natural;</tt></p>
</blockquote>
<p>This function returns the number of items in the set.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Is_Empty
(<b>Container</b> : Set) <font color="#0000FF"> return</font> Boolean;</tt></p>
</blockquote>
<p>True is returned if <b>Container</b> is empty.</p>
<blockquote>
  <p><tt><font color="#0000FF">function</font> Is_In
  (<b>Container</b> : Set; <b> Item</b> : Handle_Type)<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">return</font> Boolean;<br>
  <font color="#0000FF">function</font> Is_In
  (<b>Container</b> : Set; <b> Item</b> : Object_Ptr_Type)<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>True is returned if <b>Item</b> is in <b>Container</b>. Item can be either a 
pointer to an object or a handle to it. The result is always <i>
<font color="#800000">false</font></i> when Item is invalid or
<font color="#0000FF">null</font>.</p>
<blockquote>
<p>
<tt><font color="#0000FF"><a name="Object.Handle.Generic_Handle_Set.Ref"></a>function</font> 
Ref (<b>Container</b> : Set;
<b> Index</b> : Positive)&nbsp;<font color="#0000FF">return</font> Handle_Type;</tt> </p>
</blockquote>
<p>This function is used to get an item of the set <b>Container</b> using a positive index. 
The result is a handle to the object. Constraint_Error is propagated if <b>Index</b> is wrong.
</p>
<blockquote>
  <p><tt><font color="#0000FF">procedure</font> Remove
  (<b>Container</b> :<font color="#0000FF"> in out </font> Set; <b> Index</b> : Positive);<br>
  <font color="#0000FF">procedure</font> Remove (<b>Container</b> :<font color="#0000FF"> in out
  </font> Set; <b> Item</b>
&nbsp;: Handle_Type);<font color="#0000FF"><br>
  procedure</font> Remove (<b>Container</b> :<font color="#0000FF"> in out
  </font> Set; <b> Item</b>
&nbsp;: Object_Ptr_Type);<br>
  <font color="#0000FF">procedure</font> Remove (<b>Container</b> :<font color="#0000FF"> in out
  </font> Set; <b>Items</b>     : Set);</tt></p>
</blockquote>
<p>These procedures are used to remove items from the set <b>Container</b>.&nbsp;An item can be removed either by its index, or explicitly 
by a pointer or handle to it, or else by specifying a
set of items to be removed. If a particular item is not in the set, then nothing
happens. Also nothing happens if a handle is illegal or pointer is
<font color="#0000FF">null</font>. Constraint_Error is propagated when item index is wrong.</p>
<blockquote>
  <p><tt><font color="#0000FF">function</font>
  &quot;<font color="#FF0000">and</font>&quot; (<b>Left</b>, <b> Right</b> : Set)
  <font color="#0000FF"> return</font> Set;<br>
  <font color="#0000FF">function</font> &quot;<font color="#FF0000">or</font>&quot;
  <font COLOR="#000000">
&nbsp;</font>(<b>Left</b>, <b> Right</b> : Set) <font color="#0000FF"> return</font> Set;<br>
  <font color="#0000FF">function</font> &quot;<font color="#FF0000">xor</font>&quot;
  (<b>Left</b>, <b> Right</b> : Set) <font color="#0000FF"> return</font> Set;</tt></p>
</blockquote>
<p>These functions are conventional set operations - intersection, union,
difference. Difference is defined as a set which items are only in one of the
sets <b>Left</b> and <b>Right</b>.</p>
<blockquote>
  <p><tt><font color="#0000FF">function</font>
  &quot;<font color="#FF0000">=</font>&quot; (<b>Left</b>, <b> Right</b> : Set) <font color="#0000FF"> return</font>
  Boolean;</tt></p>
</blockquote>
<p>The function returns <font color="#800000"><i>true</i></font> is returned if both sets contain same items.</p>

<hr><p align="right">
  <A name="2"></A><a href="#1.7"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#2.1"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>2. Persistency</H2>
<p align="right">
  <a href="#1.5" name="2.1"></a><a href="#1.7"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><a href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#2.2"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>2.1. Persistent objects</H3>
<p><a name="persistent_objects"></a><a name="object_persistence"></a>A persistent object is one stored in an external storage, independent on the 
application, that originally created it. A persistent object can be restored
from the external storage in a fully functional state in the same or other
application. The provided 
implementation of persistent objects was designed with the following goals in 
mind:</p>
<ul>
  <li>Portability across different platforms in the sense that an object can be 
  stored on one platform and successfully restored on another;</li>
  <li>Independency on the nature of the external storage;</li>
  <li>Support for dependent objects;</li>
  <li>Garbage collection  within the application;</li>
  <li>A possibility to implement garbage collection within the external storage;</li>
  <li>Automatic synchronization with the persistent storage upon finalization.</li>
</ul>
<p>Like other objects, persistent ones are normally accessed through <a href="#persistent_object_handles">handles</a>.</p>
<H4><a name="2.1.1"></a>2.1.1. Types</H4>
<p><a name="Object.Archived"></a><a name="Deposit"></a><a name="Object.Archived.Deposit_Ptr"></a>The package
<a href="#Object.Archived">Object.Archived</a> defines the  type
<a href="#Deposit">Deposit</a> serving as the abstract base type for all persistent 
objects:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Deposit <font color="#0000FF">is 
abstract new </font>Entity<font color="#0000FF"> with private</font>;<br>
<font color="#0000FF">type</font> Deposit_Ptr <font color="#0000FF">is access</font> 
Deposit'Class;</tt></p>
</blockquote>
<span style="font-weight: 400">A type derived from <a href="#Deposit">
Deposit</a> should:</span>
<ul>
  <li>
<span style="font-weight: 400">Override the procedure  <a href="#Object.Archived.Store">Store</a> 
which will be used to get a string description of the object;</span></li>
  <li>
<span style="font-weight: 400">Define a procedure with the profile of  <a href="#Object.Archived.Restore">Restore</a> which will create 
the object from its string description;</span></li>
  <li>
<span style="font-weight: 400"><a href="#Object.Archived.Register_Class">Register</a> the restore procedure as a new class. This could be done 
once during elaboration of the package deriving the type from <a href="#Deposit">
Deposit</a>;</span></li>
  <li>
<span style="font-weight: 400">Override <a href="#Object.Archived.Get_Class">Get_Class</a> to return the object class for 
which  <a href="#Object.Archived.Restore">Restore</a> was registered;</span></li>
  <li>
<span style="font-weight: 400">Optionally, override
  <a href="#Object.Archived.Get_Referents">Get_Referents</a> if the object may depend on other objects which 
thus have to be  stored/restored together with it:</span></li>
  <li>
If it overrides Finalize, then it shall call <a href="#Object.Archived.Close">
Close</a> from there <i>before</i>
<span style="font-weight: 400">the object becomes impossible to store.</span></li>
</ul>
<p>
<span style="font-weight: 400">Objects may depend on other objects, but these
dependencies may not be circular.  <a href="#Object.Archived.Store">Store</a> 
and  <a href="#Object.Archived.Restore">Restore</a> provide forth and back string 
conversions. String was chosen instead of Stream_Element_Array to make it portable across different systems.</span></p>
<p>
<u><b>Storing an object</b></u>:</p>
<ol>
  <li>
<span style="font-weight: 400"><a href="#Object.Archived.Get_Referents">
  Get_Referents</a> is called. Each object it refers is archived first. The order of the objects in the list is important and has to be preserved;</span></li>
  <li>
<span style="font-weight: 400"><a href="#Object.Archived.Get_Class">Get_Class</a> is called and its result is archived;</span></li>
  <li>
<span style="font-weight: 400"><a href="#Object.Archived.Store">Store</a> is called and its result is finally archived.</span></li>
</ol>
<p>
<u><b>Restoring an object</b></u>:</p>
<ol>
  <li>
<span style="font-weight: 400">A list of objects the archived object depends on is built, 
the objects are restored as necessary;</span></li>
  <li>
<span style="font-weight: 400">The object's class string is obtained;</span></li>
  <li>
<span style="font-weight: 400"><a href="#Object.Archived.Restore">Restore</a> is finally called with these parameters. 
The class is used to select an appropriate <a href="#Object.Archived.Restore">Restore</a>. 
This is equivalent to dispatching according to the class. The list of available
classes and their <a href="#Object.Archived.Restore">Restore</a> procedures is 
formed by calls to <a href="#Object.Archived.Register_Class">Register</a>.</span></li>
</ol>
<p><a name="Backward_Link"></a>The type <a href="#Backward_Link">Backward_Link</a> 
is used when it is necessary to monitor deletion of an object.</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Backward_Link <font color="#0000FF">is 
abstract new</font> Entity <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Backward_Link_Ptr <font color="#0000FF">is 
access </font>Backward_Link'Class;</tt></p>
</blockquote>
<p>Reference counting is used to prevent deletion of a
<a href="#Deposit">Deposit</a> object, when it is in use. Such objects are referenced
through <a href="#Object.Archived.Handle.Handle">handles</a>. These are <i>direct links</i> 
to the object, also known as <i>strong</i> references. But sometimes it 
is necessary to break the dependency of one object from another to delete the 
latter. For this the former object may get a notification about a desire to delete 
a referent. Upon this notification it can invalidate the handle to the referent 
and so allow the 
collector to delete it. A notification object is derived from
<a href="#Backward_Link">Backward_Link</a>, which represent a <i>backward link</i> 
from a referred object to a dependent one. Each
<a href="#Deposit">Deposit</a> object maintains a list of its backward links, 
also called <i>weak</i> references. 
Typically an external storage connection object tracks all persistent objects 
which are in the memory at the moment. Usually it has an index of such memory resident
objects. A record of this index has a handle to a specialized descendant of
<a href="#Backward_Link">Backward_Link</a>. So when an object is no more in use 
and so the last handle to it disappears, the object is automatically destroyed. 
In the course of this operation the storage connection object becomes a notification via 
call to <a href="#Object.Archived.Destroyed">Destroyed</a>. At this point the 
object being destroyed can be stored and then removed from the external storage 
index of memory resident objects.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Deposit_Container"></a>type</font> 
Deposit_Container <font color="#0000FF">is abstract<br>
&nbsp;&nbsp; new </font>Ada.Finalization.Controlled<font color="#0000FF"> with 
private</font>;</tt></p>
</blockquote>
<p>The type <a href="#Deposit_Container">Deposit_Container</a> is an abstract 
specialized container for
<a href="#Deposit">Deposit</a> objects. The container operates as a container of handles. That is when an object is put into it, then the object will not be 
deleted until it is in. Physically a reference to the object is placed into the 
container. <a href="#Deposit_Container">Deposit_Container</a> objects are used 
upon object storing and restoring to keep the list of things the object depends 
on. <a href="#Deposit_Container">Deposit_Container</a> is not limited so it can 
be copied when necessary. The child packages <a href="#Object.Archived.Sets">
Object.Archived.Sets</a> and 
<a href="#Object.Archived.Lists">Object.Archived.Lists</a> provide unordered 
(set) and ordered (list) implementations of <a href="#Deposit_Container">
Deposit_Container</a>.</p>
<H4>2.1.2. Operations on objects</H4>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Object.Archived.Close"></a>procedure</font> 
  Close (<b>Object</b> : <font color="#0000FF">in out </font>Deposit'Class);</tt> </p>
</blockquote>
<p>This class-wide procedure is called before finalization of a persistent 
object. It cleans the list of backward links. So it plays the role of a 
class-wide destructor. <a href="#Object.Archived.Finalize">Finalize</a> should 
<i>always</i> call it. For example, if the derived type is a descendant of
<span style="font-weight: 400"> <a href="#Deposit">
Deposit</a> overriding</span> Finalize, then the implementation should look 
like:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Finalize (Object :
<font color="#0000FF">in out</font> Derived) <font color="#0000FF">is<br>
begin<br>
&nbsp;&nbsp; </font>Close (Object);<br>
<i>&nbsp;&nbsp; ...<font color="#008000"> -- finalization of Derived</font><br>
</i>&nbsp;&nbsp; Finalize (Deposit (Object));<br>
<font color="#0000FF">end</font> Finalize;</tt></p>
</blockquote>
<p>It is safe to call it multiple times, though it is essential to call it 
before any vital object data get finalized. So Finalization of a type derived 
from Derived may call <a href="#Object.Archived.Close">Close</a> as well. Note 
that in Ada Finalize is called prior finalization of any object's components. So 
it is safe to use them. However, keep in mind that task components (if any) are 
though not yet finalized, but completed <i>before</i> Finalize, thus neither
<span style="font-weight: 400">  <a href="#Object.Archived.Store">Store</a> nor <a href="#Object.Archived.Get_Referents">
  Get_Referents</a> may communicate with task components of the object. </span></p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Object.Archived.Create"></a>procedure </font>Create<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Source</b>&nbsp; 
  : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
  Pointer</b> : <font color="#0000FF">in out</font> Integer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
  Class</b>&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>List</b>&nbsp;&nbsp;&nbsp; 
  : Deposit_Container'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
  Object</b>&nbsp; : <font color="#0000FF">out</font> Deposit_Ptr<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure calls
<span style="font-weight: 400"><a href="#Object.Archived.Restore">Restore</a> </span>
for <b>Class</b> simulating a dispatching call. Name_Error is propagated if <b>
Class</b> is not a registered object class. The string Source contains object 
description to be restored starting from the character <b>Source</b> (<b>Pointer</b>).
<b>Pointer</b>&nbsp; is advanced to the first object following from the used 
ones. The parameter <b>Object</b> accepts a pointer to the newly created object.
</p>
<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>Data_Error</TD>
    <TD>Syntax error</TD>
  </TR>
  <TR>
    <TD>End_Error</TD>
    <TD>Nothing matched</TD>
  </TR>
  <TR>
    <TD>Layout_Error</TD>
    <TD>The value of <B>Pointer</B> is not in the range
      <B>Source</B>'First..<B>Source</B>'Last+1&nbsp;</TD>
  </TR>
  <TR>
    <TD>Name_Error</TD>
    <TD><b>Class</b> is not a registered class</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD>Insufficient dependencies list</TD>
  </TR>
</TABLE>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Object.Archived.Delete"></a>procedure</font>
  Delete (<b>Object</b> : <font color="#0000FF">in out</font> Deposit'Class);</tt></p>
</blockquote>
<p>This procedure is used when <b>Object</b> is being deleted. On each item in 
the <b>Object</b>'s obituary notices delivery list,
<a href="#Object.Archived.Delete">Delete</a> is called. This has the effect that 
some references to <b>Object</b> may disappear and so the object will be 
collected. Note that a call to <a href="#Object.Archived.Delete">Delete</a> does 
not guaranty <b>Object</b>'s deletion, because some references to it, may still 
be present. It is safe to add new backward links to the <b>Object</b>'s 
notification list from <a href="#Object.Archived.Delete">Delete</a>, because the 
items are appended at the end of the delivery list. This also means that they will receive a 
<a href="#Object.Archived.Deleted">Deleted</a> callback in 
the course of the same notification. It is also safe to remove backward links
from the list. Though <b>Object</b>'s deletion is not 
guaranteed it might happen. So to prevent undefined behavior 
a caller should hold a handle to <b>Object</b> when it calls to <a href="#Object.Archived.Delete">
Delete</a>.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Object.Archived.Finalize"></a>procedure</font> 
  Finalize (<b>Object</b> : <font color="#0000FF">in out</font> Deposit);</tt></p>
</blockquote>
<p>Upon finalization backward links list is cleaned. All interested parties 
receive a notification via call to <a href="#Object.Archived.Destroyed">
Destroyed</a>. A derived type implementation have to call <a href="#Object.Archived.Finalize">
Finalize</a> as well as <a href="#Object.Archived.Close">Close</a>.</p>
<blockquote>
  <p><tt><font color="#0000FF">procedure</font> Free (<b>Object</b> :
  <font color="#0000FF">in out</font> Deposit_Ptr);</tt></p>
</blockquote>
<p>This procedure is used to delete manually created objects. It is never called 
for existing objects, only for improperly constructed ones from an 
implementation of
<span style="font-weight: 400"><a href="#Object.Archived.Restore">Restore</a></span>.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Object.Archived.Get_Class"></a>function</font> 
  Get_Class (<b>Object</b> : Deposit) <font color="#0000FF">return</font> String<font color="#0000FF"> 
  is abstract;</font></tt></p>
</blockquote>
<p>This function returns the class of <b>Object</b>. The class is a string
uniquely describing the object's type. It is analogous to external type tag 
representation. Though, different types of objects may share same class if 
necessary.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Object.Archived.Get_Referents"></a>
  procedure</font> Get_Referents<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Object</b>&nbsp;&nbsp;&nbsp; 
  : Deposit;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
  Container</b> : <font color="#0000FF">in out</font> Deposit_Container'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure adds objects referenced from <b>Object</b> to <b>Container</b>
objects. 
Only immediately viewed objects are stored there. No deep search has to be made 
to detect all objects. Objects shall not depend recursively. The default 
implementation does nothing, which behavior corresponds to an independent 
object. An implementation may raise Use_Error on a wrong object. See also notes 
about <a href="#Object.Archived.Close">Close</a>.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Object.Archived.Is_Modified"></a>function</font> Is_Modified (<b>Object</b> : 
  Deposit)<font color="#0000FF"><br>
&nbsp;&nbsp; return </font>Boolean<font color="#0000FF"> is abstract;</font></tt></p>
</blockquote>
<p>This function is used to check if <b>Object</b>'s state was changed. 
Persistent objects serving as proxies to a persistent storage will require
synchronization if this function returns <i><font color="#800000">true</font></i>. 
An implementation of a mutable object would normally have a Boolean flag to be 
set by any destructive operation or new object creation.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Object.Archived.Reset_Modified"></a>procedure </font>Reset_Modified (<b>Object</b> :
  <font color="#0000FF">in out</font> Deposit) <font color="#0000FF">is 
  abstract;</font></tt></p>
</blockquote>
<p>This procedure is used to reset <b>Object</b>'s state modification flag. It 
is called immediately after synchronization the object with the persistent 
storage. </p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Object.Archived.Restore"></a>type </font>
  Restore<font color="#0000FF"> is access procedure<br>
&nbsp;&nbsp;&nbsp; </font>&nbsp;(&nbsp; <b>Source</b>&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Pointer</b> :
  <font color="#0000FF">in out</font> Integer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Class</b>&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>List</b>&nbsp;&nbsp;&nbsp; : 
  Deposit_Container'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Object</b>&nbsp; :
  <font color="#0000FF">out</font> Deposit_Ptr<br>
&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure creates a new object from its string 
representation. It parses <b>Source</b> starting from <b>Source</b> (<b>Pointer</b>).
<b>Pointer</b> is then advanced to the first character following the object's 
description in the string. The procedure has to be dispatching depending on the 
object's class, which is impossible in Ada. For this reason it is defined as an 
access to procedure type. Each object class has to define such a function and 
register it (see <a href="#Object.Archived.Register_Class">Register_Class</a>). The parameter <b>Class</b> contains the actual 
object class according to which dispatch to an implementation of
<span style="font-weight: 400"><a href="#Object.Archived.Restore">Restore</a> </span>
was made. The parameter <b>List</b> contains the references to the objects the 
restored object depends on. The order of the objects in the list is same as one 
returned in
<span style="font-weight: 400"><a href="#Object.Archived.Get_Referents">
Get_Referents</a></span>. The result is a newly allocated object pointed by the
<b>Object</b> parameter. An implementation may raise the following exceptions to
indicate  errors:
</p>
<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>Data_Error</TD>
    <TD>Syntax error</TD>
  </TR>
  <TR>
    <TD>End_Error</TD>
    <TD>Nothing matched</TD>
  </TR>
  <TR>
    <TD>Layout_Error</TD>
    <TD>The value of <B>Pointer</B> is not in the range
      <B>Source</B>'First..<B>Source</B>'Last+1&nbsp;</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD>Insufficient dependencies list</TD>
  </TR>
</TABLE>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Object.Archived.Store"></a>procedure
  </font>Store<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Destination</b> 
  : <font color="#0000FF">in out</font> String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
  Pointer</b>&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> 
  Integer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
  Object</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Deposit<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
  <font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>An implementation places string describing <b>Object</b> is into <b>
Destination</b> starting from the position specified by <b>Pointer</b>. <b>
Pointer</b> is then advanced to the next position following the output. 
Layout_Error is propagated when <b>Pointer</b> not in <b>Source</b>'First..<b>Source</b>'Last 
+ 1 or there is no room for output. Use_Error can be raised when <b>Object</b> is 
wrong. See also notes about <a href="#Object.Archived.Close">Close</a>.</p>

<H4>2.1.3. Operations on backward links to objects</H4>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Object.Archived.Attach"></a>procedure </font>Attach<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Link</b>&nbsp;&nbsp; 
  : Backward_Link_Ptr;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
  Object</b> : Deposit_Ptr<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure places <b>Link</b> at the end of <b>Object</b>'s delivery 
list. If it is already in another list then it is removed from there first. 
Nothing happens if <b>Object</b> is <font color="#0000FF">null</font>. </p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Object.Archived.Deleted"></a>procedure
  </font>Deleted<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Link</b>&nbsp; 
  :<font color="#0000FF"> in out </font>Backward_Link;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
  Temps</b> : <font color="#0000FF">in out</font> Deposit_Container'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;is 
  abstract</font>;</tt></p>
</blockquote>
<p>This procedure is used when an object is requested to be deleted. Normally
<a href="#Object.Archived.Deleted">Deleted</a> is called as a result of object 
deletion request via call to <a href="#Object.Archived.Delete">Delete</a>. The 
parameter <b>Temps</b> is the list of temporal objects the implementation might 
create. For example, some objects might be created to be notified within the 
course of the operation performed by the caller. Note that the caller should 
hold a handle to <b>Link</b>, to allow the callee to undertake actions which 
would otherwise lead to <b>Link</b> deletion. Note also that object's 
finalization does not cause a call to <a href="#Object.Archived.Delete">Delete</a> 
it calls <a href="#Object.Archived.Destroyed">Destroyed</a> instead.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Object.Archived.Destroyed"></a>procedure</font>
  Destroyed (<b>Link</b> : <font color="#0000FF">in out</font> Backward_Link)<font color="#0000FF"> 
  is abstract</font>;</tt></p>
</blockquote>
<p>This procedure is used when an object is finally destroyed, but 
is still fully operable. Thus an implementation of <a href="#Object.Archived.Destroyed">Destroyed</a> may safely access  the 
object referred by <b>Link</b>. It may for example synchronize the object&nbsp;with the external 
storage or remove the object from the index cache etc. The caller should hold a 
handle to <b>Link</b>. </p>
<blockquote>
  <p><tt><font color="#0000FF">procedure </font>Detach (<b>Link</b> :<font color="#0000FF"> 
  in out</font> Backward_Link);</tt></p>
</blockquote>
<p>This procedure removes <b>Link</b> from object's delivery list, if any.</p>
<blockquote>
  <p><tt><font color="#0000FF">procedure</font> Finalize (<b>Link</b> :
  <font color="#0000FF">in out</font> Backward_Link);</tt></p>
</blockquote>
<p>This procedure should be called by a derived type if overridden. <b>Link</b> 
is removed for object's delivery list if any.</p>
<blockquote>
  <p><tt><font color="#0000FF">function</font> Self (<b>Link</b> : Backward_Link)
  <font color="#0000FF">return</font> Backward_Link_Ptr;</tt></p>
</blockquote>
<p>This function returns a pointer to the link object (to <b>Link</b> itself). 
Constraint_Error is propagated when <b>Link</b> is not bound to any object.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Object.Archived.This"></a>function</font> This (<b>Link</b> : Backward_Link)
  <font color="#0000FF">return</font> Deposit_Ptr;</tt></p>
</blockquote>
<p>This function returns a pointer to the target of <b>Link</b>. 
Constraint_Error is propagated when <b>Link</b> is not bound to any object.</p>
<p><a name="Backward_Link_Handles"></a>The package Backward_Link_Handles 
provides handles to <a href="#Backward_Link">Backward_Link</a> 
objects.</p>
<p><a name="Backward_Link_Handles.Sets"></a>The child package 
Backward_Link_Handles.Sets provides sets of handles to <a href="#Backward_Link">Backward_Link</a> 
object.</p>

<H4>2.1.4. Operations on containers</H4>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Object.Archived.Add"></a>procedure </font>
  Add<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
  : <font color="#0000FF">in out </font>Deposit_Container;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
  Object</b>&nbsp;&nbsp;&nbsp; : Deposit_Ptr;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
  Backward</b>&nbsp; : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;is 
  abstract</font>;</tt></p>
</blockquote>
<p>This procedure puts a reference to <b>Object</b> into <b>Container</b>. The implementation should ensure
that <b>Object</b> will not be destroyed until it is in. The parameter <b>
Backward</b>, when <i><font color="#800000">true</font></i> indicates a backward 
link. Backward links are used when the dependent object associated with the 
container can survive deletion of <b>Object</b>. It is an optional parameter 
which may be ignored by some implementations. When it is supported, then marking 
an <b>Object</b> as a backward link should override the effect of any placing 
the same object as a direct link (with <b>Backward</b> = <i>
<font color="#800000">false</font></i>). Nothing happens if <b>Object</b> is
<font color="#0000FF">null</font>.</p>
<blockquote>
  <p><tt><font color="#0000FF">procedure </font>Erase (<b>Container</b> :
  <font color="#0000FF">in out</font> Deposit_Container) <font color="#0000FF">
  is abstract</font>;</tt></p>
</blockquote>
<p>This procedure removes all objects from <b>Container</b>.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Object.Archived.Get"></a>function </font>
  Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> : 
  Deposit_Container;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp;&nbsp;&nbsp;&nbsp; 
  : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
  return </font>Deposit_Ptr<font color="#0000FF"> is abstract</font>;</tt></p>
</blockquote>
<p>This function is used to enumerate the objects in a container <b>Objects</b>
indices start with 1. Contraint_Error is propagated when Index is wrong.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Object.Archived.Get_Size"></a>function </font>
  Get_Size (<b>Container</b> : Deposit_Container)<font color="#0000FF"><br>
&nbsp;&nbsp; return </font>Natural<font color="#0000FF"> is abstract</font>;</tt></p>
</blockquote>
<p>This function returns the number of objects in <b>Container</b>, i.e. the 
largest possible index allowed in <a href="#Object.Archived.Get">Get</a>. 0 
is returned when the container is empty. Note that the objects in a container need not to be 
all different. This depends on the container implementation.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Object.Archived.Is_Backward"></a>
  function </font>Is_Backward<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> : 
  Deposit_Container;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Object</b>&nbsp;&nbsp;&nbsp; 
  : Deposit_Ptr<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
  return </font>Boolean<font color="#0000FF"> is abstract</font>;</tt></p>
</blockquote>
<p>The result of this function is <i><font color="#800000">true</font></i> if a 
backward link is used for <b>Object</b> in <b>Container</b>. Constraint_Error is 
propagated when <b>Object</b> is not in <b>Container</b>. Use_Error is 
propagated when the container implementation does not distinguish direct and 
backward links.</p>
<blockquote>
  <p><tt><font color="#0000FF">function </font>Is_Empty (<b>Container</b> : 
  Deposit_Container'Class)<font color="#0000FF"><br>
&nbsp;&nbsp; return </font>Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>
Container</b> is empty. It is class-wide.</p>
<blockquote>
  <p><tt><font color="#0000FF">function </font>Is_In<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> : 
  Deposit_Container;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Object</b>&nbsp;&nbsp;&nbsp; 
  : Deposit_Ptr<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
  return </font>Boolean<font color="#0000FF"> is abstract</font>;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Object</b> 
is in <b>Container</b>. Note that <font color="#0000FF">null</font> cannot be in 
any container.</p>

<H4>2.1.5. Registering classes of objects</H4>
<blockquote>
  <p><tt><font color="#0000FF">function</font> Is_Registered (<b>Class</b> : 
  String) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if there is a class of objects registered under 
the name <b>Class</b>.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Object.Archived.Register_Class"></a>
  procedure </font>Register_Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Class</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
  Constructor</b> : Restore<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is used to register each new class of objects. It is analogous 
to creating a dispatching table. It is necessary to register a class to make
<span style="font-weight: 400"><a href="#Object.Archived.Restore">Restore</a> </span>
functions working. Nothing happens if the class is already registered and has
same constructor. Name_Error is propagated when class is registered with a 
different constructor.</p>

<H4>2.1.6. Sets of persistent objects</H4>

<p><a name="Object.Archived.Sets"></a><a name="Deposit_Set"></a>The package
<a href="#Object.Archived.Sets">Object.Archived.Sets</a> provides an 
implementation of <a href="#Deposit_Container">Deposit_Container</a>. The type
<a href="#Deposit_Set">Deposit_Set</a> is derived there:</p>
<blockquote>
  <p><tt><font color="#0000FF">type </font>Deposit_Set<font color="#0000FF"> is 
  new </font>Deposit_Container<font color="#0000FF"> with private</font>;</tt></p>
</blockquote>
<p>Sets do not distinguish multiple insertion of an object.  they also ignore 
the <b>Backward</b> parameter of <a href="#Object.Archived.Add">Add</a>. So
<a href="#Object.Archived.Is_Backward">Is_Backward</a> will raise Use_Error. 
Additionally to the predefined operations, <a href="#Deposit_Set">Deposit_Set</a> 
provides standard set-operations:</p>
<blockquote>
  <p><tt><font color="#0000FF">procedure </font>Remove<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
  : <font color="#0000FF">in out </font>Deposit_Set;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
  Object</b>&nbsp;&nbsp;&nbsp; : Deposit_Ptr<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure removes <b>Object</b> from <b>Container</b>. Nothing happens 
if it is <font color="#0000FF">null</font> or not in.</p>
<blockquote>
  <p><tt><font color="#0000FF">function</font>
  &quot;<font color="#FF0000">and</font>&quot; (<b>Left</b>, <b> Right</b> : 
  Deposit_Set)
  <font color="#0000FF"> return</font> Deposit_Set;<br>
  <font color="#0000FF">function</font> &quot;<font color="#FF0000">or</font>&quot;
  <font COLOR="#000000">
&nbsp;</font>(<b>Left</b>, <b> Right</b> : Deposit_Set) <font color="#0000FF"> return</font> 
  Deposit_Set;<br>
  <font color="#0000FF">function</font> &quot;<font color="#FF0000">xor</font>&quot;
  (<b>Left</b>, <b> Right</b> : Deposit_Set) <font color="#0000FF"> return</font>
  Deposit_Set;</tt></p>
</blockquote>
<p>These functions are conventional set operations - intersection, union,
difference. Difference is defined as a set which items are only in one of the
sets <b>Left</b> and <b>Right</b>.</p>
<blockquote>
  <p><tt><font color="#0000FF">function</font>
  &quot;<font color="#FF0000">=</font>&quot; (<b>Left</b>, <b> Right</b> : 
  Deposit_Set) <font color="#0000FF"> return</font>
  Boolean;</tt></p>
</blockquote>
<p><font color="#800000"><i>true</i></font> is returned if both sets contain same items.</p>

<H4>2.1.7. Lists of persistent objects</H4>

<p><a name="Object.Archived.Lists"></a><a name="Deposit_List"></a>The package
<a href="#Object.Archived.Lists">Object.Archived.Lists</a> provides an 
implementation of <a href="#Deposit_Container">Deposit_Container</a>. The type
<a href="#Deposit_List">Deposit_List</a> is derived there as:</p>
<blockquote>
  <p><tt><font color="#0000FF">type </font>Deposit_List<font color="#0000FF"> is 
  new </font>Deposit_Container<font color="#0000FF"> with private</font>;</tt></p>
</blockquote>
<p>All objects in the list are enumerated  from 1. The same object can 
occupy several places in the list. In the external storage <a href="#Deposit_List">Deposit_List</a> can 
be stored as a set of objects, where objects do not repeat, followed by
a list of values identifying the objects in the set. Additionally to the 
predefined operations, <a href="#Deposit_List">Deposit_List</a> provides:</p>
<blockquote>
  <p><tt><font color="#0000FF">function </font>Get_Total (<b>Container</b> : 
  Deposit_List)<font color="#0000FF"> return</font> Natural;</tt></p>
</blockquote>
<p>This function returns the number of distinct objects in <b>Container</b>. 
This value is less or equal to the one returned by
<a href="#Object.Archived.Get_Size">Get_Size</a>.</p>
<blockquote>
  <p><tt><font color="#0000FF">function </font>Is_First<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> : 
  Deposit_List;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp;&nbsp;&nbsp;&nbsp; 
  : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
  return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Index</b> 
is the least index of the object it specifies. I.e. the least index of the 
object returned by
<a href="#Object.Archived.Get">Get</a> (<b>Container</b>, <b>Index</b>). 
Constraint_Error is propagated if <b>Index</b> is wrong.</p>

<H4>2.1.8. Referent objects enumeration</H4>

<p><a name="Object.Archived.Iterators"></a><a name="References_Iterator"></a>The package
<a href="#Object.Archived.Iterators">Object.Archived.Iterators</a> provides an 
abstract iterator of references:</p>
<blockquote>
  <p><tt><font color="#0000FF">type </font>References_Iterator<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Referents : <font color="#0000FF">access </font>
  Deposit_Container'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;is new </font>
  Ada.Finalization.Limited_Controlled<font color="#0000FF"> with private;</font></tt></p>
</blockquote>
<p>The type <a href="#References_Iterator">References_Iterator</a> can be used 
directly or be extended. It provides the following operations:</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Object.Archived.Iterators.Enumerate">
  </a>procedure </font>Enumerate<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Iterator</b> : <font color="#0000FF">
  in out</font> References_Iterator'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
  Object</b>&nbsp;&nbsp; : Deposit'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This class-wide procedure is called to enumerate references of <b>Object</b>. This same procedure is used for both starting the 
process and continuing it for each found reference.
Enumerate calls <a href="#Object.Archived.Get_Referents">Get_Referents</a> for
<b>Object</b> and places all found objects which <b>Object</b> depends on into
<b>Iterator</b>.Referents.<font color="#0000FF">all</font>. A found object is
placed only once which is detected by looking into <b>Iterator</b>.Referents.<font color="#0000FF">all</font>. 
The object itself is not put there. After completion the caller may inspect <b>
Iterator</b>.Referents.<font color="#0000FF">all</font> for any found objects.</p>
<blockquote>
  <p><tt><font color="#0000FF">procedure </font>On_Each <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Iterator</b> :<font color="#0000FF"> 
  in out </font>References_Iterator;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
  Referent</b> : Deposit_Ptr<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure can be overridden. It is called by
<a href="#Object.Archived.Iterators.Enumerate">Enumerate</a> each time a new
object is found. It may raise an exception to stop the iteration process. This 
exception will then propagate out of
<a href="#Object.Archived.Iterators.Enumerate">Enumerate</a>.</p>
<p align="right">
  <a href="#1.5" name="2.2"></a><a href="#2.1"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><a href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#2.3"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>2.2. Handles to persistent objects</H3>
<p><a name="Object.Archived.Handle"></a><a name="Object.Archived.Handle.Handle"></a><a name="persistent_object_handles"></a>Persistent
<a href="#persistent_objects">objects</a> are subject of garbage collection. The
recommended way to access them is through handles, which prevents premature
destruction of objects in use. Handles can be aggregated into other objects to
express object dependencies. Note that circular dependencies shall be avoided.
The best way to do it is to design object in a way that would exclude any
possibility of circular dependencies. If that is not possible, then <a href="#Object.Archived.Handle.Is_Dependent">Is_Dependent</a>
should be used to check dependencies at run time. The generic package
<a href="#Object.Archived.Handle">Object.Archived.Handle</a> defines the type
<a href="#Object.Archived.Handle.Handle">Handle</a> used to
reference persistent object. It is derived from <a href="#Handle">Handle</a>
obtained by an instantiation of <a href="#Object.Handle">Object.Handle</a>:</p>
<blockquote>
<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type </font>Object_Type<font color="#0000FF"> is abstract new </font>
Deposit<font color="#0000FF"> with private</font>;<font color="#0000FF"><br>
&nbsp;&nbsp; type </font>Object_Ptr_Type<font color="#0000FF"> is access</font>
Object_Type'Class;<font color="#0000FF"><br>
package </font>Handles<font color="#0000FF"> is new </font>
Object.Handle (Deposit, Deposit_Ptr);<font color="#0000FF"><br>
&nbsp;&nbsp;
type </font>Handle<font color="#0000FF"> is new </font>Handles.Handle<font color="#0000FF"> 
with null record</font>;</tt></p>
</blockquote>
<p>The formal parameters of the package are:</p>
<ul>
  <li>Object_Type is a descendant of
<span style="font-weight: 400"> <a href="#Deposit">
Deposit</a>. It can be different from <a href="#Deposit">
Deposit</a> when it is necessary to narrow the class of persistent objects;</span></li>
  <li>Object_Ptr_Type is a class-wide pointer to Object_Type. Note that
  Object_Ptr_Type should use the same storage pool as
  <a href="#Object.Archived.Deposit_Ptr">Deposit_Ptr</a>, because the 
  implementation requires conversions between them. Unfortunately there is no 
  formal way to express this requirement in Ada. Hopefully the compiler would 
  refuse infeasible
<a href="#Object.Archived.Handle">Object.Archived.Handle</a> instantiations.</li>
</ul>
<p>There is a ready-to use instantiation of
<a href="#Object.Archived.Handle">Object.Archived.Handle</a> with
<span style="font-weight: 400"> <a href="#Deposit">
Deposit</a> and </span><a href="#Object.Archived.Deposit_Ptr">Deposit_Ptr</a> as 
the actual parameters: <a href="#Deposit_Handles">Deposit_Handles</a>.</p>
<p>The package
<a href="#Object.Archived.Handle">Object.Archived.Handle</a> defines the
following operations on <a href="#Object.Archived.Handle.Handle">
Handle</a>:</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Object.Archived.Handle.Add"></a>procedure </font>
  Add<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
  : <font color="#0000FF">in out </font>Deposit_Container;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
  Object</b>&nbsp;&nbsp;&nbsp; : Handle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
  Backward</b>&nbsp; : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;is
  abstract</font>;</tt></p>
</blockquote>
<p>This procedure puts <b>Object</b> into <b>Container</b>. The parameter <b>
Backward</b>, when <i><font color="#800000">true</font></i> indicates a backward
link. Backward links are used when the dependent object associated with the 
container can survive deletion of <b>Object</b>. Constraint_Error is propagated
when <b>Object</b> is 
an invalid handle.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Object.Archived.Handle.Delete"></a>procedure</font> Delete (<b>Object</b> : <font color="#0000FF">
  in out</font> Handle);</tt></p>
</blockquote>
<p>This procedure requests deletion of the object pointed by the handle <b>
Object</b>. As the result of the operation <b>Object</b> becomes an invalid 
handle. The object itself is deleted if possible. Nothing happens if <b>Object</b>
is not a valid handle.</p>
<blockquote>
  <p><tt><font color="#0000FF">function</font> Get_Class (<b>Object</b> :
  Handle) <font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function returns the class of <b>Object</b>. The class is a string
uniquely describing the object's type. It is analogous to an external type tag
representation. Though, different types of objects may have same class if 
necessary.</p>
<blockquote>
  <p><tt><font color="#0000FF">procedure</font> Get_References<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Object</b>&nbsp;&nbsp;&nbsp; 
  : Handle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
  Container</b> :<font color="#0000FF"> in out</font> Deposit_Container'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure adds to <b>Container</b> references to all objects the object 
specified by the handle <b>Object</b> depends on. No objects added if <b>
Object</b> is an invalid handle. </p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Object.Archived.Handle.Invalidate"></a>procedure</font> Invalidate (<b>Object</b> : <font color="#0000FF">
  in out</font> Handle);</tt></p>
</blockquote>
<p>This procedure detaches handle from the object (if any) it points to. The
result handle cannot be used to access any object. The referenced object is
destroyed if it was the last handle.</p>
<blockquote>
  <p><tt><font color="#0000FF">function </font>Is_Backward<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> : 
  Deposit_Container'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Object</b>&nbsp;&nbsp;&nbsp; 
  : Handle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
  return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if a backward 
link used for <b>Object</b> in <b>Container</b>. Contstraint_Error is propagated
when <b>Object</b> is not in <b>Container</b> or invalid handle. Use_Error does 
when <b>Container</b> does not distinguish direct and backward links.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Object.Archived.Handle.Is_Dependent"></a>function </font>Is_Dependent<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Dependant</b> : 
  Handle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Referent</b>&nbsp; 
  : Handle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
  return</font> Boolean;<font color="#0000FF"><br>
  function </font>Is_Dependent<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Dependant</b> : 
  Handle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Referents</b> 
  : Deposit_Container'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
  return</font> Boolean;</tt></p>
</blockquote>
<p>These functions check whether <b>Dependant</b> refers to <b>Referent</b> or, 
when the second parameter is a container, then whether <b>Dependant</b> refers to any 
of the objects from that container. The result is <i><font color="#800000">false</font></i> 
if <b>Dependant</b>, <b>Referent</b> is invalid or <b>Referents</b> is empty. </p>
<blockquote>
  <p><tt><font color="#0000FF">function </font>Is_In<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> : 
  Deposit_Container'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Object</b>&nbsp;&nbsp;&nbsp; 
  : Handle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
  return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Object</b> 
is in <b>Container</b>. When <b>Object</b> is an invalid handle, the result <i>
<font color="#800000">false</font></i>.</p>
<blockquote>
<p><tt>
<font COLOR="#0000ff">function </font>Is_Valid (<b>Object</b> : Handle) <font color="#0000FF"> return</font> Boolean;</tt></p>
</blockquote>
<p>This function checks whether a handle points to any object, i.e. is valid. </p>
<blockquote>
<p><tt>
<font COLOR="#0000ff">function </font>Ptr (<b>Object</b> : Handle) <font color="#0000FF"> return</font> 
Deposit_Ptr;</tt></p>
</blockquote>
<p>This function is used to get a pointer to the object the handle <b>Object</b> points to.

The pointer of to the
object shall be used no longer the handle it was get from exists. A safe way to
do it is to avoid declarations of any variables of the type Deposit_Ptr. </p>
<blockquote>
<p>
<tt><font COLOR="#0000ff">function </font> Ref (<b>Thing</b> : Object_Type_Ptr)
<font color="#0000FF"> return</font> Handle;</tt>
</p>
</blockquote>
<P>This function is used to get a handle from a pointer to an persistent object.</p>
<blockquote>
<p>
<tt><font COLOR="#0000ff">function</font> Ref<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> : 
Deposit_Container'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font COLOR="#0000ff">
return</font> Handle;</tt></p>
</blockquote>
<P>This function can be used to enumerate the objects in a container. Objects are 
enumerated from 1. The result is a valid handle to an object in <b>Container</b>. 
Contraint_Error is propagated when <b>Index</b> is wrong. Note that objects may 
repeat in containers of some types.</p>
<blockquote>
  <p><tt><font color="#0000FF">function </font>References (<b>Object</b> : 
  Handle) <font color="#0000FF">return</font> Deposit_Set;</tt></p>
</blockquote>
<p>This function is used to query all objects its argument depends on. The
result is a set of objects. It is empty if <b>Object</b> is an invalid handle.</p>
<blockquote>
<p>
<tt><font COLOR="#0000ff">procedure</font> Set (<b>Object</b> :
<font COLOR="#0000ff">in out</font> Handle; <b>Thing</b> : Object_Type_Ptr);</tt></p>
</blockquote>
<P>This procedure resets the handle <b>Object</b> to a possibly another 
object. In the course of this operation the previously pointed object may be 
destroyed if <b>Object</b> was the last handle pointing to it. It is safe 
when <b>Thing</b> is the object already pointed by the handle. When <b>Thing</b> 
is <font color="#0000FF">null</font>, this procedure is equivalent to
<a href="#Object.Archived.Handle.Invalidate">Invalidate</a>.</p>
<p><a name="Deposit_Handles"></a>The package Deposit_Handles provides an 
instantiation of
<a href="#Object.Archived.Handle">Object.Archived.Handle</a>:</p>
<blockquote>
  <p><tt><font color="#0000FF">package </font>Deposit_Handles<font color="#0000FF"> 
  is<br>
&nbsp;&nbsp; new </font>Object.Archived.Handle (Deposit, Deposit_Ptr);</tt></p>
</blockquote>
<p align="right"><a name="2.3"></a><a href="#2.2"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><a href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#2.4"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>2.3. Persistent directories</H3>
<p><a name="Persistent.Directory"></a>There is no need to have dedicated objects 
to serve as persistent directories as any object could become a directory. 
Nevertheless the package <a href="#Persistent.Directory">Persistent.Directory</a> 
provides objects which can be used as directories. They have no any
functionality except an ability to persist. The package declares:</p>
<blockquote>
  <p><tt><font color="#0000FF">procedure </font>Create<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b>&nbsp;&nbsp; 
	: <font color="#0000FF">in out</font> Storage_Handle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Directory</b> : <font color="#0000FF">out</font> Deposit_Handle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Parent</b>&nbsp;&nbsp;&nbsp; : Deposit_Handle := Root_Directory<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure creates a new directory with the name <b>Name</b> and <b>
Parent</b> as the parent directory. The result is a handle <b>Directory</b> to 
the object. The parameter <b>Storage</b> is a handle <a href="#Persistent.Handle.Storage_Handle">Storage_Handle</a> 
to the persistent storage object where the directory has to be created.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Constraint_Error</TD>
    <TD>Invalid handle <b>Storage</b>, <b>Parent</b> is not 
	persistent in <b>Storage</b></TD>
  </TR>
  <TR>
    <TD>Data_Error</TD>
    <TD> Inconsistent <b>Storage</b></TD>
  </TR>
  <TR>
    <TD>Name_Error</TD>
    <TD>Illegal name (such as empty), name conflict</TD>
  </TR>
</TABLE>
<blockquote>
  <p><tt><font color="#0000FF">function</font> Is_Directory (<b>Object</b> : 
	Deposit_Handle) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns true if <b>Object</b> is a valid handle to a directory 
object.</p>
<blockquote>
  <p><tt>Directory_Class : <font color="#0000FF">constant</font> String := &quot;<font color="#FF0000">Directory</font>&quot;;</tt></p>
</blockquote>
<p>Is the class name of the directory objects.</p>
<p align="right"><a name="2.4"></a><a href="#2.3"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><a href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#2.5"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>2.4. Persistent storage implementation example</H3>
<p>This paragraph describes a simplified example of persistent storage. It provides an 
implementation of a persistent storage based on direct access file. As an 
example of persistent objects serve nodes of binary trees.</p>

<H4><a name="2.4.1"></a>2.4.1. Persistent storage implementation</H4>

<p><a name="test_persistent_file_storage"></a>The implementation uses a direct access file to store objects. Each object is 
stored in one file record. The record number serves as the object key. 
Observe that the implementation is independent from any implementation of 
concrete persistent object types (derived from <a href="#Deposit">Deposit</a>).
This example serves illustrative purpose. For abstract persistent storage
interface see <a href="#Persistent">Persistent</a>, <a href="#Persistent.Handle">Persistent.Handle</a>.
For persistent storage implementations see <a href="#Persistent.Handle.Factory">Persistent.Handle.Factory</a>.</p>

File <EM>test_persistent_file_storage.ads</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#0000FF">with</font> Ada.Direct_IO;<br>
<font color="#0000FF">with</font> Ada.Finalization;<br>
<font color="#0000FF">with</font> Generic_Map;<br>
<font color="#0000FF">with</font> Object.Handle;<br>
<br>
<font color="#0000FF">with</font> Object.Archived; <font color="#0000FF">&nbsp;use</font> 
Object.Archived;<br>
<font color="#0000FF">with</font> Deposit_Handles; <font color="#0000FF">&nbsp;use</font> 
Deposit_Handles;<br>
<br>
<font color="#0000FF">package</font> Test_Persistent_File_Storage
<font color="#0000FF">is</font><br>
<font color="#008000">&nbsp;&nbsp;&nbsp;--<br>
&nbsp;&nbsp;&nbsp;--&nbsp;File_Storage&nbsp;--&nbsp;Direct&nbsp;I/O&nbsp;based&nbsp;storage&nbsp;for&nbsp;persistent&nbsp;objects<br>
&nbsp;&nbsp; --</font><br>
&nbsp;&nbsp; <font color="#0000FF">type</font> File_Storage
<font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new</font> Ada.Finalization.Limited_Controlled
<font color="#0000FF">with 
private</font>;<br>
<font color="#008000">&nbsp;&nbsp; --<br>
&nbsp;&nbsp; -- Key -- To reference stored objects = record number 1..<br>
&nbsp;&nbsp; --<br>
</font>&nbsp;&nbsp; <font color="#0000FF">type</font> Key <font color="#0000FF">is new Integer</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">subtype</font> Deposit_Handle
<font color="#0000FF">is</font> Deposit_Handles.Handle;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Initialize (Storage : 
<font color="#0000FF">in out</font> File_Storage);<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Finalize (Storage :
<font color="#0000FF">in out</font> File_Storage);<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Clean_Up;<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Store<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Storage :
<font color="#0000FF">access</font> File_Storage;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object : Deposit_Handle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> Key;<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Restore<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; (&nbsp; Storage : <font color="#0000FF">access</font> File_Storage;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Key<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> Deposit_Handle;</tt></TD>
  </TR>
</TABLE>

<p>Here we declare the type File_Storage as a limited controlled type. The 
procedures Initialize / Finalize are overridden to provide construction / 
destruction. Upon construction the file is opened. Upon destruction it is 
closed. The procedure Clean_Up is provided to delete the file. The function Store 
will be used to store an object. It returns the object key, which identifies the 
object there. The key has the type Key also declared in this package. It is the
number of the record reserved for the object in the file. When the object is 
already persistent in the file, its key is returned, so it is safe to call Store 
multiple times. The function Restore 
is the operation opposite to Store. It takes the object key and returns a handle 
to the object. Restore is also safe to call multiple times. So when the object 
referenced by a key, is already memory resident, a handle to it is returned 
instead of creating a new memory resident copy. The type <a href="#Object.Archived.Handle.Handle">Handle</a> from 
the package <a href="#Deposit_Handles">Deposit_Handles</a> is used to reference 
persistent objects. <a href="#Deposit_Handles">Deposit_Handles</a>.<a href="#Object.Archived.Handle.Handle">Handle</a> 
is &quot;renamed&quot; to Deposit_Handle for convenience. The objects themselves are never 
referenced directly but through handles only.</p>

File <EM>test_persistent_file_storage.ads</EM> (continued, the private part):
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#0000FF">private</font><br>
<font color="#008000">&nbsp;&nbsp;
--<br>
&nbsp;&nbsp;
-- Index_Record -- One per bound object<br>
&nbsp;&nbsp;
--<br>
&nbsp;&nbsp; </font><font color="#0000FF">type</font> Index_Record (Storage : 
<font color="#0000FF">access</font> File_Storage) <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new</font> Backward_Link <font color="#0000FF">with<br>
&nbsp;&nbsp;
record</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;
ID : Key;<font color="#008000"> -- Object identifier</font><br>
&nbsp;&nbsp; <font color="#0000FF">end record</font>;<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">type</font>&nbsp;Index_Record_Ptr&nbsp;<font color="#0000FF">is&nbsp;access&nbsp;all</font>&nbsp;Index_Record'Class;<br>
<font color="#008000">&nbsp;&nbsp;
--<br>
&nbsp;&nbsp;
-- Implementation of Backward_Link's operation<br>
&nbsp;&nbsp;
--<br>
&nbsp;&nbsp; </font><font color="#0000FF">procedure</font> Deleted<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Link&nbsp; : <font color="#0000FF">in out </font>Index_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Temps : <font color="#0000FF">in out</font> Deposit_Container'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
); <br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Destroyed (Link : 
<font color="#0000FF">in out</font> Index_Record);</tt></TD>
  </TR>
</TABLE>

<p>A File_Storage object encapsulates the file and an index of all  memory resident objects from that file. The index consists of Index_Records. One 
record is allocated per memory resident object. Index_Record is derived from
<a href="#Backward_Link">Backward_Link</a> to monitor what happens with the 
object. It also contains the object's key in the file. Two operations of
<a href="#Backward_Link">Backward_Link</a> need to be implemented:
<a href="#Object.Archived.Deleted">Deleted</a> and
<a href="#Object.Archived.Destroyed">Destroyed</a>. The implementation of
<a href="#Object.Archived.Deleted">Deleted</a> is called upon a request of 
object deletion. It does nothing in our case.
<a href="#Object.Archived.Destroyed">Destroyed</a> is called when the object is
about to be finalized. In our case we store that object into the file. A more 
advanced implementation would check if the object was modified. It could also 
check if the object was requested for deletion and is no more referenced from 
other objects, in which case it can be removed from the persistent storage as 
well. But 
that would be too complex for a small illustrative example.</p>

File <EM>test_persistent_file_storage.ads</EM> (continued, the private part):
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#008000">&nbsp;&nbsp;
--<br>
&nbsp;&nbsp;
-- Record_Handles -- Handles to index records<br>
&nbsp;&nbsp;
--<br>
</font>&nbsp;&nbsp; <font color="#0000FF">package</font> Record_Handles
<font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new</font> Object.Handle (Index_Record, Index_Record_Ptr);<br>
&nbsp;&nbsp; <font color="#0000FF">use</font> Record_Handles;<br>
&nbsp;&nbsp; <font color="#0000FF">subtype</font> Record_Handle
<font color="#0000FF">is</font> Record_Handles.Handle;<br>
&nbsp;<font color="#008000">&nbsp; --<br>
&nbsp;&nbsp; -- Map : object pointer -&gt; record handle<br>
&nbsp;&nbsp; --<br>
</font>&nbsp;&nbsp;&nbsp;<font color="#0000FF">function</font>&nbsp;&quot;<font color="#FF0000">&lt;</font>&quot;&nbsp;(Left,&nbsp;Right&nbsp;:&nbsp;Deposit_Ptr)&nbsp;<font color="#0000FF">return</font>&nbsp;Boolean;<br>
&nbsp;&nbsp; <font color="#0000FF">package</font> Object_Maps<font color="#0000FF"> 
is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new</font> Generic_Map<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Key_Type&nbsp;&nbsp;&nbsp; 
=&gt; Deposit_Ptr,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Object_Type =&gt; Record_Handle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp; <font color="#0000FF">use</font> Object_Maps;<br>
&nbsp;&nbsp; <font color="#0000FF">subtype</font> Object_Map
<font color="#0000FF">is</font> Object_Maps.Map;<br>
<font color="#008000">&nbsp;&nbsp; --<br>
&nbsp;&nbsp; -- Map : object key -&gt; record handle<br>
&nbsp;&nbsp; --<br>
</font>&nbsp;&nbsp; <font color="#0000FF">package</font> Key_Maps
<font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new </font>Generic_Map<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Key_Type&nbsp;&nbsp;&nbsp; 
=&gt; Key,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Object_Type =&gt; Record_Handle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp; <font color="#0000FF">use</font> Key_Maps;<br>
&nbsp;&nbsp; <font color="#0000FF">subtype</font> Key_Map <font color="#0000FF">
is</font> Key_Maps.Map;</tt></TD>
  </TR>
</TABLE>

<p>To reference Index_Record we will use handles provided by  Record_Handles, an instantiation of <a href="#Object.Handle">Object.Handle</a>. A handle to 
Index_Record is &quot;renamed&quot; to Record_Handle. Then we declare two maps: 
one to map objects 
to index records, another to map keys to the records. For this the package
<a href="#Generic_Map">Generic_Map</a> is instantiated once as Object_Maps and 
once as Key_Maps. Both use Record_Handle to reference Index_Record. So when the 
index record is deleted it is enough to remove it from the both maps and the 
object Index_Record will be automatically collected. Note also that Object_Map
uses <a href="#Object.Archived.Deposit_Ptr">Deposit_Ptr</a>, a pointer to the 
persistent object rather than a handle to it. It is important to allow object 
deletion. Otherwise an object would be never deleted as long as Index_Record 
referring it exists, i.e. up to File_Storage finalization. It would a thinkable, 
but too crude implementation.
<a href="#Generic_Map">Generic_Map</a> requires map keys be comparable, so the 
implementation declares &quot;<font color="#FF0000">&lt;</font>&quot; on <a href="#Object.Archived.Deposit_Ptr">Deposit_Ptr</a>.</p>

File <EM>test_persistent_file_storage.ads</EM> (continued, the private part):
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#008000">&nbsp;&nbsp; --<br>
&nbsp;&nbsp; -- File record<br>
&nbsp;&nbsp; --<br>
</font>&nbsp;&nbsp;&nbsp;<font color="#0000FF">type</font>&nbsp;Reference_List<font color="#0000FF">&nbsp;is&nbsp;array</font>&nbsp;(Integer&nbsp;<font color="#0000FF">range</font>&nbsp;<font color="#800000">1</font>..<font color="#800000">256</font>)&nbsp;<font color="#0000FF">of</font>&nbsp;Key;<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> File_Record <font color="#0000FF">
is record</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Length&nbsp;&nbsp;&nbsp;&nbsp; : Natural :=
<font color="#800000">0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Count&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Natural :=
<font color="#800000">0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; References : Reference_List;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Descriptor : String (<font color="#800000">1</font>..<font color="#800000">1024</font>);<br>
&nbsp;&nbsp; <font color="#0000FF">end record</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">package</font> Record_Files
<font color="#0000FF">is new </font>Ada.Direct_IO (File_Record);<br>
&nbsp;&nbsp; <font color="#0000FF">use</font> Record_Files;<br>
<font color="#008000">&nbsp;&nbsp; --<br>
&nbsp;&nbsp; -- File_Storage -- Implementation<br>
&nbsp;&nbsp; --<br>
</font>&nbsp;&nbsp; <font color="#0000FF">type</font> File_Storage
<font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new</font> Ada.Finalization.Limited_Controlled
<font color="#0000FF">with<br>
&nbsp;&nbsp; record</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; File&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: File_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object_To_Record : Object_Map;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Key_To_Record&nbsp;&nbsp;&nbsp; : Key_Map;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Last_ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Key := <font color="#800000">0</font>;<font color="#008000"> -- Last used 
object key</font><br>
&nbsp;&nbsp; <font color="#0000FF">end record</font>;<br>
<br>
<font color="#0000FF">end</font> Test_Persistent_File_Storage;</tt></TD>
  </TR>
</TABLE>

<p>The type File_Record describes one record in the file. The field References 
is the list of the keys of all the objects referred by the object. Count is the 
length of the list. The field Descriptor is a string describing the object. The 
length of the string is the field Length.</p>

File <EM>test_persistent_file_storage.adb</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">with</font> 
Object.Archived.Lists; <font color="#0000FF">&nbsp;use</font> 
Object.Archived.Lists;<br>
<font color="#0000FF">with</font> Strings_Edit;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Strings_Edit;<br>
<br>
<font color="#0000FF">package body </font>Test_Persistent_File_Storage
<font color="#0000FF">is</font><br>
<br>
<font color="#0000FF">&nbsp;&nbsp;&nbsp;function</font>&nbsp;&quot;<font color="#FF0000">&lt;</font>&quot;&nbsp;(Left,&nbsp;Right&nbsp;:&nbsp;Deposit_Ptr)&nbsp;<font color="#0000FF">return</font>&nbsp;Boolean&nbsp;<font color="#0000FF">is</font><br>
&nbsp;&nbsp; <font color="#0000FF">begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if</font> Right = <font color="#0000FF">null then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return</font> False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">elsif</font> Left =
<font color="#0000FF">null then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return </font>True;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return </font>Less (Left.<font color="#0000FF">all</font>, 
Right.<font color="#0000FF">all</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> &quot;<font color="#FF0000">&lt;</font>&quot;;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Clean_Up
<font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
File : File_Type;<br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Create (File, Out_File, &quot;<font color="#FF0000">test.dat</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Close (File);<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Clean_Up;</tt></TD>
  </TR>
</TABLE>

<p>The implementation of &quot;<font color="#FF0000">&lt;</font>&quot; uses
<a href="#Object.Less">Less</a> defined on objects to order them. Clean_Up opens 
the file in Out_File mode and immediately closes it. This erases the file.</p>

File <EM>test_persistent_file_storage.adb</EM> (continued):
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; <font color="#0000FF">procedure</font> Write<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Storage : <font color="#0000FF">in out</font> File_Storage;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Object&nbsp; : Deposit'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Key<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
References&nbsp; : Deposit_List;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Data_Record : File_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Pointer&nbsp;&nbsp;&nbsp;&nbsp; : Integer := Data_Record.Descriptor'First;<br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Get_Referents (Object, References);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Data_Record.Count := Get_Size (References);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">for</font> Item 
<font color="#0000FF">in</font> <font color="#800000">1</font>..Data_Record.Count
<font color="#0000FF">loop</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Data_Record.References (Item) :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Store (Storage'<font color="#0000FF">Access</font>, Ref (References, Item));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end loop</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Put&nbsp;(Data_Record.Descriptor,&nbsp;Pointer,&nbsp;Get_Class&nbsp;(Object));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Put (Data_Record.Descriptor, Pointer, &quot;<font color="#FF0000">:</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Store (Data_Record.Descriptor, Pointer, Object);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Data_Record.Length := Pointer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Write (Storage.File, Data_Record, Count (ID));<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Write;</tt></TD>
  </TR>
</TABLE>

<p>The procedure Write is defined to store an object under the specified key. It 
calls to <a href="#Object.Archived.Get_Referents">Get_Referents</a> to obtain 
the list of the objects the stored object needs. Then for each such object it 
calls Store to ensure the object persistency in the file. The keys returned by 
Store are placed into the References array. After that Write starts to form the 
field Description. It places the object class there (<a href="#Object.Archived.Get_Class">Get_Class</a>) 
followed by a colon. Then object's <a href="#Object.Archived.Store">Store</a> is 
called to query the object description and to add it to Description. The 
completed object record is then written into the file.</p>

File <EM>test_persistent_file_storage.adb</EM> (continued):
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; <font color="#0000FF">procedure</font> Initialize (Storage : 
<font color="#0000FF">in out </font>File_Storage) <font color="#0000FF">is<br>
&nbsp;&nbsp;
begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Open (Storage.File, Inout_File, &quot;<font color="#FF0000">test.dat</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Storage.Last_ID := Key (Size (Storage.File));<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Initialize;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Finalize (Storage : 
<font color="#0000FF">in out</font> File_Storage) <font color="#0000FF">is<br>
&nbsp;&nbsp;
begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
while not </font>Is_Empty (Storage.Key_To_Record) <font color="#0000FF">loop<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
declare</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Index_Item : Index_Record <font color="#0000FF">renames</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ptr&nbsp;(Get&nbsp;(Storage.Key_To_Record,&nbsp;Integer'(<font color="#800000">1</font>))).<font color="#0000FF">all</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Write&nbsp;(Storage,&nbsp;This&nbsp;(Index_Item).<font color="#0000FF">all</font>,&nbsp;Index_Item.ID);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Remove (Storage.Key_To_Record, 
Integer'(<font color="#800000">1</font>));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Remove (Storage.Object_To_Record,
<font color="#800000">1</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end loop</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Close (Storage.File);<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Finalize;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Bind<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Storage : <font color="#0000FF">access</font> File_Storage;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Object&nbsp; : Deposit_Handle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Key<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Link_Ptr&nbsp;&nbsp; : Backward_Link_Ptr := <font color="#0000FF">new</font> Index_Record (Storage);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Index_Item&nbsp;:&nbsp;Index_Record&nbsp;<font color="#0000FF">renames</font>&nbsp;Index_Record (Link_Ptr.<font color="#0000FF">all</font>);<br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Index_Item.ID := ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Attach (Link_Ptr, Ptr (Object));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Add<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Storage.Object_To_Record,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Ptr (Object),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Ref (Index_Item'Unchecked_Access)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Add<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Storage.Key_To_Record, <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ID,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Ref (Index_Item'Unchecked_Access)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Bind;</tt></TD>
  </TR>
</TABLE>

<p>The implementation of Initialize just opens the file for input / output and 
initializes the field Last_ID. Finalize goes through the index of memory 
resident objects (the key to object map). For each record of the index it 
calls Write to store the corresponding object and then removes the references to 
the index record from both maps. This in turn deletes the record itself. Note 
how <a href="#Object.Archived.This">This</a> is used to get the object. The 
procedure Bind is defined to create an index record. It calls to
<a href="#Object.Archived.Attach">Attach</a> to bind Index_Record with the
object and places handles to Index_Record in each of the maps.
<a href="#Object.Handle.Ref">Ref</a> is used to obtain them</p>

File <EM>test_persistent_file_storage.adb</EM> (continued):
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">&nbsp;&nbsp;
function</font> Store<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Storage : access File_Storage;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Object&nbsp; : Deposit_Handle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">return</font> Key <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
This : Deposit_Ptr := Ptr (Object);<br>
&nbsp;&nbsp; <font color="#0000FF">begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;</font>This&nbsp;=&nbsp;<font color="#0000FF">null&nbsp;or&nbsp;else&nbsp;not</font>&nbsp;Is_In&nbsp;(Storage.Object_To_Record,&nbsp;This)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Storage.Last_ID := Storage.Last_ID + <font color="#800000">1</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Bind (Storage, Object, Storage.Last_ID);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Storage.Last_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return</font> Ptr (Get (Storage.Object_To_Record, This)).ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Store;</tt></TD>
  </TR>
</TABLE>

<p>The implementation of Store first looks into the index 
to check if it is already there. If yes it returns the key of the object. 
Otherwise it generates a new key by incrementing the field Last_ID and calls 
Bind to create a new index record.</p>

File <EM>test_persistent_file_storage.adb</EM> (continued):
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; <font color="#0000FF">function</font> Restore (Storage : 
<font color="#0000FF">access</font> File_Storage; ID : Key)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Deposit_Handle i<font color="#0000FF">s<br>
&nbsp;&nbsp;
begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">if</font> Is_In (Storage.Key_To_Record, ID) 
<font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000FF">return</font>&nbsp;Ref&nbsp;(This&nbsp;(Ptr&nbsp;(Get&nbsp;(Storage.Key_To_Record,&nbsp;ID)).<font color="#0000FF">all</font>));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">else</font><br>
<font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
--<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- Read the object from the file<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
--</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">declare</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Data&nbsp;&nbsp;&nbsp; : File_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
List&nbsp;&nbsp;&nbsp; : Deposit_List;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Object&nbsp; : Deposit_Ptr;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Result&nbsp; : Deposit_Handle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Pointer : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Read (Storage.File, Data, Count (ID));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">for</font> No <font color="#0000FF">in</font>
<font color="#800000">1</font>..Data.Count <font color="#0000FF">loop</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Add (List, Restore (Storage, Data.References (No)));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">end loop</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Pointer := Data.Descriptor'First;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">while</font> Data.Descriptor (Pointer) /= '<font color="#FF0000">:</font>' 
<font color="#0000FF">loop</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Pointer := Pointer + <font color="#800000">1</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">end loop</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Pointer := Pointer + <font color="#800000">1</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Create<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Data.Descriptor,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Pointer,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Data.Descriptor (Data.Descriptor'First..Pointer - <font color="#800000">2</font>),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
List,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Object<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Result := Ref (Object);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Bind (Storage, Result, ID);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">return</font> Result;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Restore;</tt></TD>
  </TR>
</TABLE>

<p>The procedure Restore checks the index if an object with 
the specified key was already created. If yes it returns a handle to the object.
<a href="#Object.Archived.This">This</a> is used to get an object pointer from 
Index_Record. When the key identifies an unknown object, Restore reads its 
record from the file. The key is the record number. Restore goes through the array 
References and for each key calls itself to ensure this object to be 
restored too. The returned handle to that object is placed in a
<a href="#Deposit_List">Deposit_List</a> container. The container together with 
Descriptor's prefix (up to the first colon) as object's class name and the rest 
of it as the object's description, are passed to
<a href="#Object.Archived.Create">Create</a>. That creates the object. A handle 
to it is then returned after Bind is called to place the object into the storage
index.</p>

File <EM>test_persistent_file_storage.adb</EM> (continued):
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; <font color="#0000FF">procedure</font> Deleted<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Link&nbsp; : <font color="#0000FF">in out </font>Index_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Temps : <font color="#0000FF">in out </font>Deposit_Container'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">is<br>
&nbsp;&nbsp;
begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
null</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Deleted;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Destroyed (Link : 
<font color="#0000FF">in out</font> Index_Record) <font color="#0000FF">is<br>
&nbsp;&nbsp;
begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Write (Link.Storage.all, This (Link).<font color="#0000FF">all</font>, Link.ID);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Remove&nbsp;(Link.Storage.Object_To_Record,&nbsp;This (Link));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Remove (Link.Storage.Key_To_Record, Link.ID);<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Destroyed;<br>
<br>
<font color="#0000FF">end</font> Test_Persistent_File_Storage;</tt></TD>
  </TR>
</TABLE>

<p>The implementation of <a href="#Object.Archived.Deleted">Deleted</a> does 
nothing. <a href="#Object.Archived.Destroyed">Destroyed</a> writes the object 
into the file and then removes it from the index.</p>

<H4><a name="2.4.2"></a>2.4.2. Persistent objects implementation</H4>

<p>Let's take binary tree node as an example of persistent object. A node may 
have up to two successors or none. Predecessor - successor relation is naturally 
mapped to dependant - referent.</p>

<a name="test_persistent_tree"></a>

File <EM>test_persistent_tree.ads</EM>:<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#0000FF">with</font> Object.Archived; 
<font color="#0000FF">&nbsp;use</font> 
Object.Archived;<br>
<font color="#0000FF">with</font> Deposit_Handles; <font color="#0000FF">&nbsp;use</font> Deposit_Handles;<br>
<br>
<font color="#0000FF">package</font> Test_Persistent_Tree <font color="#0000FF">is</font><br>
&nbsp;<font color="#008000">&nbsp;
--<br>
&nbsp;&nbsp;
-- Nothing -- No node handle<br>
&nbsp;&nbsp;
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Nothing <font color="#0000FF">return</font> Handle;<br>
<font color="#008000">&nbsp;&nbsp;
--<br>
&nbsp;&nbsp;
-- Create_Node -- This function creates a new node<br>
&nbsp;&nbsp;
--<br>
&nbsp;&nbsp;
-- Field - Identifies the node<br>
&nbsp;&nbsp;
-- Left&nbsp; - Successor on the left (a handle to)<br>
&nbsp;&nbsp;
-- Right - Successor on the right (a handle to)<br>
&nbsp;&nbsp;
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Create_Node<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Field : Integer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Left&nbsp; : Handle := Nothing;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Right : Handle := Nothing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">return</font> Handle;<br>
<font color="#008000">&nbsp;&nbsp;
-- <br>
&nbsp;&nbsp;
-- Print -- Prints the tree rooted in a node<br>
&nbsp;&nbsp;
--<br>
&nbsp;&nbsp;
--&nbsp;&nbsp;&nbsp; Root - The root node (a handle to)<br>
&nbsp;&nbsp;
--<br>
</font>&nbsp;&nbsp;&nbsp;<font color="#0000FF">procedure</font>&nbsp;Print&nbsp;(Root&nbsp;:&nbsp;Handle;&nbsp;Indentation&nbsp;:&nbsp;String&nbsp;:=&nbsp;&quot;&quot;);<br>
<br>
<font color="#0000FF">private</font><br>
<font color="#008000">&nbsp;&nbsp;
--<br>
&nbsp;&nbsp;
-- Node -- Binary tree node type<br>
&nbsp;&nbsp;
--<br>
</font>&nbsp;&nbsp; <font color="#0000FF">type</font> Node<font color="#0000FF"> is new</font> Deposit 
<font color="#0000FF">with record</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Field : Integer; <font color="#008000">-- Node identifier</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Left&nbsp; : Handle;&nbsp; <font color="#008000">-- Left successor, a handle to</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Right : Handle;&nbsp; <font color="#008000">-- Right successor, a handle to</font><br>
&nbsp;&nbsp; <font color="#0000FF">end record</font>;<br>
<font color="#008000">&nbsp;&nbsp;
--<br>
&nbsp;&nbsp;
-- Implementation of Deposit's operations<br>
&nbsp;&nbsp;
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Get_Class (Object : Node) 
<font color="#0000FF">return</font> String;<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Get_Referents<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Object&nbsp;&nbsp;&nbsp; : Node;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Container : <font color="#0000FF">in out</font> Deposit_Container'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Is_Modified (Object : Node) 
<font color="#0000FF">return</font> Boolean;<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Reset_Modified (Object : 
<font color="#0000FF">in out </font>Node);<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Restore<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Source&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Pointer : <font color="#0000FF">in out </font>Integer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Class&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
List&nbsp;&nbsp;&nbsp; : Deposit_Container'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Object&nbsp; : <font color="#0000FF">out</font> Deposit_Ptr<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Store<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Destination : <font color="#0000FF">in out </font>String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Pointer&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out </font>Integer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Object&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Node<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
<font color="#0000FF">end</font> Test_Persistent_Tree;</tt></TD>
  </TR>
</TABLE>

<p>The public part of the package declares the function Create_Node and the 
procedure Print. Create_Node creates a new node and returns a handle to it. All 
nodes are referenced using <a href="#Object.Archived.Handle.Handle">Handle</a> 
of <a href="#Deposit_Handles">Deposit_Handles</a>. Each node is identified by an 
integer number. The next two parameters of Create_Node are the handles to the 
left and right successors. They are defaulted to an invalid handle for which the 
function Nothing is also declared. It plays role of a constant invalid handle. The 
procedure Print is used for control.&nbsp; It prints the tree rooted in the node specified 
by the parameter Root.</p>

<p>The private part is straightforward. It declares the type Node as a 
descendant of <a href="#Deposit">Deposit</a>. The operations
<a href="#Object.Archived.Get_Class">Get_Class</a>,
<a href="#Object.Archived.Get_Referents">Get_Referents</a>,
<a href="#Object.Archived.Is_Modified">Is_Modified</a>,
<a href="#Object.Archived.Reset_Modified">Reset_Modified</a>,
<a href="#Object.Archived.Restore">Restore</a> and
<a href="#Object.Archived.Store">Store</a> are overridden to provide  implementations.</p>

File <EM>test_persistent_tree.adb</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">with</font> Ada.Text_IO;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Ada.Text_IO;<br>
<font color="#0000FF">with</font> Strings_Edit;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Strings_Edit;<br>
<font color="#0000FF">with</font> Strings_Edit.Integers;&nbsp;
<font color="#0000FF">use</font> Strings_Edit.Integers;<br>
<br>
<font color="#0000FF">package body </font>Test_Persistent_Tree
<font color="#0000FF">is</font><br>
&nbsp;&nbsp; Class : <font color="#0000FF">constant</font> String := &quot;<font color="#FF0000">Node</font>&quot;;<font color="#008000"> 
-- The class of </font><br>
<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Nothing <font color="#0000FF">
return</font> Handle <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; None : Handle;<br>
&nbsp;&nbsp; <font color="#0000FF">begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return</font> None;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Nothing;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Create_Node<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Field 
: Integer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Left&nbsp; : Handle := Nothing;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Right : Handle := Nothing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; 
return Handle is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Node_Ptr : Deposit_Ptr := <font color="#0000FF">
new</font> Node;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object&nbsp;&nbsp; : Node <font color="#0000FF">
renames</font> Node (Node_Ptr.<font color="#0000FF">all</font>);<br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object.Field := Field;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object.Left&nbsp; := Left;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object.Right := Right;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Ref (Node_Ptr);<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Create_Node;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Get_Class (Object : Node)
<font color="#0000FF">return</font> String <font color="#0000FF">is<br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return</font> Class;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Get_Class;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Get_Referents<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Object&nbsp;&nbsp;&nbsp; : Node;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Container : <font color="#0000FF">in out</font> Deposit_Container'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; 
is<br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">if</font> Is_Valid (Object.Left)
<font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Add (Container, Object.Left);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">if</font> Is_Valid (Object.Right)
<font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Add (Container, Object.Right);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Get_Referents;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Is_Modified (Object : Node)
<font color="#0000FF">return</font> Boolean i<font color="#0000FF">s<br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</font>True;<font color="#008000">&nbsp;--&nbsp;Save&nbsp;it&nbsp;always,&nbsp;do&nbsp;not&nbsp;care&nbsp;about&nbsp;performance</font><br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Is_Modified;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Reset_Modified (Object :
<font color="#0000FF">in out</font> Node) <font color="#0000FF">is<br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; null</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Reset_Modified;</tt></TD>
  </TR>
</TABLE>

<p>The implementation of
<a href="#Object.Archived.Get_Referents">Get_Referents</a> places handles to the 
node successors into a <a href="#Deposit_Container">Deposit_Container</a>. The 
left successor is placed first.
<a href="#Object.Archived.Is_Modified">Is_Modified</a> and
<a href="#Object.Archived.Reset_Modified">Reset_Modified</a> are void for sake 
of simplicity. So a node is always written into the persistent storage even if 
it is not changed.</p>

File <EM>test_persistent_tree.adb</EM> (continued):
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; <font color="#0000FF">procedure</font> Restore<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Source&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Pointer : <font color="#0000FF">in out </font>Integer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Class&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;Deposit_Container'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Object&nbsp; : <font color="#0000FF">out</font> Deposit_Ptr<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; 
is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Field : Integer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Left&nbsp; : Handle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Right : Handle;<br>
&nbsp;&nbsp; <font color="#0000FF">begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if </font>Source (Pointer) = '<font color="#FF0000">&lt;</font>' 
<font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Left := Ref (List, 
<font color="#800000">1</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">if</font> Source (Pointer +
<font color="#800000">1</font>) = '<font color="#FF0000">&gt;</font>' 
<font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Right := Ref 
(List, <font color="#800000">2</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">elsif</font> Source (Pointer +
<font color="#800000">1</font>) = '<font color="#FF0000">&gt;</font>' 
<font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Right := Ref (List, 
<font color="#800000">1</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pointer := Pointer + <font color="#800000">2</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Get (Source, Pointer, Field);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object := <font color="#0000FF">new</font> Node;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">declare</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Item : Node 
<font color="#0000FF">renames</font> Node (Object.<font color="#0000FF">all</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Item.Field := Field;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Item.Left&nbsp; := Left;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Item.Right := Right;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">exception<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when others </font>=&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">raise</font> Data_Error;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Restore;</tt></TD>
  </TR>
</TABLE>

<p>The implementation of <a href="#Object.Archived.Restore">Restore</a> first 
gets  description of node dependencies from the source string. It is two 
characters. The first one is either '&lt;' if there is a left successor or '-' 
otherwise. The second is '&gt;' if there is a right successor or else '-'. After 
that it gets the node identifier (plain integer number). Then a new node object
is allocated. Note that the target access type should be
<a href="#Object.Archived.Deposit_Ptr">Deposit_Ptr</a> to ensure right storage 
pool selection.</p>

File <EM>test_persistent_tree.adb</EM> (continued):
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; <font color="#0000FF">procedure</font> Store<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Destination : <font color="#0000FF">in out</font> String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Pointer&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> Integer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Object&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Node<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; 
<font color="#0000FF">is<br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if </font>Is_Valid (Object.Left)
<font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put (Destination, Pointer, 
&quot;<font color="#FF0000">&lt;</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">else</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put (Destination, Pointer, 
&quot;<font color="#FF0000">-</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">if</font> Is_Valid (Object.Right) 
<font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put (Destination, Pointer,
&quot;<font color="#FF0000">&gt;</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">else</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put (Destination, Pointer, 
&quot;<font color="#FF0000">-</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put (Destination, Pointer, Object.Field);<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Store;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Print (Root : Handle; Indentation : String := &quot;&quot;)<font color="#0000FF"> is<br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if </font>Is_Valid (Root) <font color="#0000FF">then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; declare</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The_Node : 
Node <font color="#0000FF">renames</font> Node (Ptr (Root).<font color="#0000FF">all</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put_Line 
(Indentation &amp; &quot;<font color="#FF0000">\_</font>&quot; &amp; Image (The_Node.Field));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Print (The_Node.Left, 
Indentation &amp; &quot;<font color="#FF0000"> |</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Print (The_Node.Right, 
Indentation &amp; &quot; &quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">else</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put_Line (Indentation &amp; &quot;<font color="#FF0000">\_*</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Print;<br>
<br>
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp; Register_Class (Class, Restore'<font color="#0000FF">Access</font>);<br>
<font color="#0000FF">end</font> Test_Persistent_Tree;</tt></TD>
  </TR>
</TABLE>

<p>The procedure <a href="#Object.Archived.Store">Store</a> is reverse to
<a href="#Object.Archived.Restore">Restore</a>. Also the package defines a new class of persistent objects named <i>Node</i>. 
For this it calls Register_Class once upon elaboration with the class name and a 
pointer to <a href="#Object.Archived.Restore">Restore</a> as parameters. </p>

<H4><a name="2.4.3"></a>2.4.3. Test program</H4>
<p>The test program is shown below. It consists of two sessions. In the first 
session an object is stored. In the second one it is restored.</p>
<a name="test_persistent_storage"></a>
File <EM>test_persistent_storage.adb</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">with</font> Ada.Text_IO;
<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
use</font> Ada.Text_IO;<br>
<font color="#0000FF">with</font>&nbsp;Test_Persistent_File_Storage;<font color="#0000FF">&nbsp;&nbsp;use</font>&nbsp;Test_Persistent_File_Storage;<br>
<font color="#0000FF">with</font> Test_Persistent_Tree; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
use</font> Test_Persistent_Tree;<br>
<font color="#0000FF">with</font> Deposit_Handles; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
use</font> Deposit_Handles;<br>
<br>
<font color="#0000FF">procedure</font> Test_Persistent_Storage
<font color="#0000FF">is</font><br>
&nbsp;&nbsp; Root_Key : Key;<br>
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp; Clean_Up;<br>
&nbsp;&nbsp; Put_Line (&quot;<font color="#FF0000">Session 1</font>&quot;);<br>
&nbsp;&nbsp; <font color="#0000FF">declare</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DB&nbsp;&nbsp; : <font color="#0000FF">aliased</font> 
File_Storage;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Root : Handle;<br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Root :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Create_Node<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <font color="#800000">1</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Create_Node (<font color="#800000">2</font>),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Create_Node<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp;
<font color="#800000">3</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Create_Node<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
(&nbsp; <font color="#800000">4</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Create_Node (<font color="#800000">5</font>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Create_Node (<font color="#800000">6</font>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; );<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Print (Root);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Root_Key := Store (DB'<font color="#0000FF">Access</font>, 
Root);<br>
&nbsp;&nbsp; <font color="#0000FF">end</font>;<br>
&nbsp;&nbsp; Put_Line (&quot;<font color="#FF0000">Session 2</font>&quot;);<br>
&nbsp;&nbsp; <font color="#0000FF">declare</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DB&nbsp;&nbsp; : <font color="#0000FF">aliased</font> 
File_Storage;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Root : Handle;<br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Root := Restore (DB'<font color="#0000FF">Access</font>, 
Root_Key);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Print (Root);<br>
&nbsp;&nbsp; <font color="#0000FF">end</font>;<br>
<font color="#0000FF">end</font> Test_Persistent_Storage;</tt></TD>
  </TR>
</TABLE>
<p>The test program first calls Clean_Up to delete any existing storage file. 
Then it declares DB, a File_Storage object. After that a tree is created and Root 
becomes a handle to the tree root node. The tree is printed and then its root 
node is stored into DB. There result of the operation is the external key of the 
root node. This key can be used to restore the object. Note that the whole tree 
is stored because the any node depends on its child nodes. What Store does 
depends on the implementation. In our case physical file writing happens either 
upon finalization of the storage object (DB) or upon finalization of the 
persistent object (Root). Both objects are go out of scope at
<font color="#0000FF">end</font> closing the first session. The second session 
uses Restore and the external key to bring the root node back from the storage. 
Again, all the objects it depends on are restored as well. Finally, the restored
tree is printed.</p>

<H4><a name="2.4.4"></a>2.4.4. Predefined persistent storage test</H4>
<p>The test program that uses an ODBC data base as a persistent storage is shown
below:</p>
<a name="test_ODBC_persistence"></a>
File <EM>test_ODBC_persistence.adb</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">with</font> Ada.Text_IO;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  <font color="#0000FF">use</font> Ada.Text_IO;<br>
  <font color="#0000FF">with</font> Deposit_Handles;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  <font color="#0000FF">use</font> Deposit_Handles;&nbsp;<br>
  <font color="#0000FF">with</font> Persistent.Handle;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">use</font>
  Persistent.Handle;<br>
  <font color="#0000FF">with</font>&nbsp;Test_Persistent_Tree;&nbsp;&nbsp;<font color="#0000FF">use</font>&nbsp;Test_Persistent_Tree;<br>
  <font color="#0000FF">with</font> Test_ODBC_Session;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">use</font>
  Test_ODBC_Session;<br>
  <br>
  <font color="#0000FF">procedure</font> Test_ODBC_Persistence <font color="#0000FF"> is</font><br>
  &nbsp;&nbsp; Name : <font color="#0000FF">constant</font> String := &quot;<font color="#FF0000">The
  tree</font>&quot;;<br>
  <font color="#0000FF">begin</font><br>
  &nbsp;&nbsp; Put_Line (&quot;<font color="#FF0000">Session 1</font>&quot;);<br>
  &nbsp;&nbsp; <font color="#0000FF">declare</font><br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DB&nbsp;&nbsp; : Storage_Handle := Open;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Root : Handle;<br>
  &nbsp;&nbsp; <font color="#0000FF">begin</font><br>
  </tt><tt>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Root :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Create_Node<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <font color="#800000">1</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Create_Node (<font color="#800000">2</font>),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Create_Node<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp;
<font color="#800000">3</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Create_Node<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
(&nbsp; <font color="#800000">4</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Create_Node (<font color="#800000">5</font>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Create_Node (<font color="#800000">6</font>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; );<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Print (Root);<br>
  </tt><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put (DB, Root, Name);<br>
  &nbsp;&nbsp; <font color="#0000FF">end</font>;<br>
  &nbsp;&nbsp; Put_Line (&quot;<font color="#FF0000">Session 2</font>&quot;);<br>
  &nbsp;&nbsp; <font color="#0000FF">declare</font><br>
  &nbsp;&nbsp;&nbsp;&nbsp; DB&nbsp;&nbsp; : Storage_Handle := Open;<br>
  &nbsp;&nbsp;&nbsp;&nbsp; Root : Handle;<br>
  &nbsp;&nbsp; <font color="#0000FF">begin</font><br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Root := Get (DB, Name);<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Print (Root);<br>
  &nbsp;&nbsp; <font color="#0000FF">end</font>;<br>
  <font color="#0000FF">end</font> Test_APQ_Persistence;</tt></TD>
  </TR>
</TABLE>
<p> 
Then it declares DB, a <a href="#Persistent.Handle.Storage_Handle">Storage_Handle</a>.
The handle is initialized using the function Open defined in <i>Test_ODBC_Session.adb</i>.
It prompts for connection parameters and then calls <a href="#Persistent.ODBC.Create">Persistent.ODBC.Create</a>.
After that a tree is created and Root 
becomes a handle to the tree root node. The tree is printed and then its root 
node is stored into DB as &quot;<i>The three</i>&quot;. For this it calls <a href="#Persistent.Handle.Put">Put</a>.
Note that the whole tree 
is stored because the any node depends on its child nodes. The second session
uses <a href="#Persistent.Handle.Get">Get</a> and the name &quot;<i>The three</i>&quot;
to bring the root node back from the storage. 
Again, all the objects it depends on are restored as well. Finally, the restored 
tree is printed. Carefully observe that the package Test_Persistent_Tree needed
no modifications to be able to work with a different type of storage.</p>
<p>This test program modified for APQ and SQLite are in the files <EM>test_APQ_persistence.adb</EM> and <EM>test_APQ_persistence.adb</EM> 
correspondingly.</p>

<p align="right">
  <a href="#1.5" name="2.5"></a><a href="#2.4"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><a href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#2.6"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>2.5. Abstract persistent storage</H3>
<p><a name="Persistent"></a><a name="Storage_Object"></a><a name="persistent_storage"></a>The package <a href="#Persistent"> Persistent</a> provides an
abstract persistent storage communication object. The corresponding persistent
storage can be implemented on the basis of a plain file, data base etc. Objects in the storage are identified by their names. Additionally anonymous  objects  can be created and deleted as required by the named  ones.
If an  object depends on some other objects,  then  when  stored  into  the  storage,  the  referred  objects  are  stored as well.
If they do not  already persist there, these objects will be anonymous.  Anonymous persistent objects are subject of garbage collection.  The  way of collection is determined by the implementation.</p>
<p>The objects can be named. The object names are UTF-8 encoded strings. An&nbsp; 
implementation can internally provide other encoding when the persistent storage 
natively supports Unicode different to UTF-8. Named objects  are  deleted only on 
explicit request or when they loose names becoming anonymous. Named objects 
build a hierarchy, where one named object can be a descendant of another. This 
hierarchy is a forest. The parent objects serve as folders for their children. 
It is not specified which nature parent objects should have. Objects of any kind 
can serve as parents. Also the parent-child relation does not impose any
additional dependency between the objects. It is a relation solely between the 
names of.</p>
<p>The procedure <a href="#Object.Archived.Handle.Delete">Delete</a> can be  applied to 
a handle to the object in order to request its deletion. If  the  object  cannot  be  deleted
immediately it becomes anonymous for later  collection.  Persistent  storage  interfaces  are itself objects and are a subject of garbage  collection  as  well. 
When a named parent object becomes anonymous all its descendants do as well.</p>

<p>The package defines the abstract type <a href="#Storage_Object"> Storage_Object</a>
which describes the interface of a persistent storage communication object. It
is derived from <a href="#Entity">Entity</a>, so persistent storage interface
objects are subject of garbage collection:</p>

<blockquote>
  <p><tt><font color="#0000FF">   type </font> Storage_Object<font color="#0000FF"> is abstract new
  </font> Object.Entity<font color="#0000FF"> with private</font>;<font color="#0000FF"><br>
   type </font> Storage_Object_Ptr<font color="#0000FF"> is access </font> Storage_Object'Class;<font color="#0000FF"><br>
   for </font> Storage_Object_Ptr'Storage_Pool<font color="#0000FF"><br>
  &nbsp;&nbsp; use </font> Object.Entity_Ptr'Storage_Pool;</tt></p>

</blockquote>
<p>It is strongly recommended not to directly use derivatives of <a href="#Storage_Object"> Storage_Object</a>.
For this purpose serve <a href="#Persistent.Handle">handles to the objects</a>.</p>

<p><a name="Persistent.Deposit_Handle"></a>The subtype <a href="#Persistent.Deposit_Handle">Deposit_Handle</a>
is provided for convenience in referring persistent objects. It
&quot;renames&quot; the handle type of the package <a href="#Deposit_Handles">Deposit_Handles</a>:</p>

<blockquote>
  <p><tt><font color="#0000FF">subtype </font> Deposit_Handle <font color="#0000FF"> is</font> 
  Deposit_Handles.Handle;</tt></p>

</blockquote>

<p>The root-level objects have no parent. When a subprogram requires a parent 
specification the constant Root_Directory is used:</p>

<blockquote>
  <p><tt>Root_Directory : <font color="#0000FF">constant</font> Deposit_Handle;</tt></p>

</blockquote>
<p><a name="Persistent.Catalogue"></a>The package instantiates <a href="#Generic_Set">Generic_Set</a>
to obtain sets of object names.</p>

<blockquote>
  <p><tt><font color="#0000FF">package </font> Catalogue<font color="#0000FF"> is<br>
  &nbsp;&nbsp;      new </font> Generic_Set<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;          (&nbsp; Object_Type&nbsp;  =&gt;
  Unbounded_String,<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Null_Element =&gt; Null_Unbounded_String<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;          );</tt></p>

</blockquote>
<p>The following operations are defined on <a href="#Storage_Object"> Storage_Object</a>:</p>

<blockquote>
  <p><tt><font color="#0000FF">function</font> Get<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> : <font color="#0000FF"> access</font> 
  Storage_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;
  : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Parent</b>&nbsp; 
	: Deposit_Handle := Root_Directory<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return
  </font> Deposit_Handle<font color="#0000FF"> is abstract</font>;</tt></p>

</blockquote>
<p>This function returns a <a href="#Persistent.Deposit_Handle">  handle</a>  to  a  persistent  object
by its name and a <a href="#Persistent.Deposit_Handle">  handle</a>  to the 
parent object. The root-level objects have no parents, in which case <b>Parent</b> 
is an invalid handle. An implementation should first check if  the  the persistent  object  already  has   a   memory-resident   counterpart.
Otherwise it should create one from the persistent storage.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I></CAPTION>
  <TR>
    <TD valign="top">Constraint_Error</TD>
    <TD> The object specified by <b>Parent</b> is not persistent in <b>Storage</b></TD>
  </TR>
  <TR>
    <TD valign="top">Data_Error</TD>
    <TD> Inconsistent <b>Storage</b></TD>
  </TR>
  <tr>
    <TD valign="top">End_Error</TD>
    <TD> No such object</TD>
  </tr>
  <TR>
    <TD valign="top">Use_Error</TD>
    <TD> The class of the object is unknown. This error means that there is no 
	known Ada type yet registered to handle the objects from the persistent 
	storage. Normally Ada types register their classes upon corresponding 
	package elaboration. If the package is not used by the application, its 
	persistent objects cannot be restored.</TD>
  </TR>
</TABLE>

<blockquote>
  <p><tt><font color="#0000FF">function</font> Get_Class<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> : <font color="#0000FF"> access</font> 
  Storage_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;
  : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Parent</b>&nbsp; 
	: Deposit_Handle := Root_Directory<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return
  </font>String<font color="#0000FF"> is abstract</font>;</tt></p>

</blockquote>
<p>This function returns the class of  a  persistent  object
by its name and a <a href="#Persistent.Deposit_Handle">  handle</a> to the 
parent object.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <tr>
    <TD>Constraint_Error</TD>
    <TD> The object specified by <b>Parent</b> is not persistent in <b>Storage</b></TD>
  </tr>
  <TR>
    <TD>Data_Error</TD>
    <TD> Inconsistent <b>Storage</b></TD>
  </TR>
  <TR>
    <TD>End_Error</TD>
    <TD> No such object</TD>
  </TR>
</TABLE>

<blockquote>
  <p><tt><font color="#0000FF">function</font> Get_Creation_Time<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> : <font color="#0000FF"> access</font> 
  Storage_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;
  : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Parent</b>&nbsp; 
	: Deposit_Handle := Root_Directory<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return
  </font>Time<font color="#0000FF"> is abstract</font>;</tt></p>

</blockquote>
<p>This function returns the creation time of  a  persistent  object
by its name and a <a href="#Persistent.Deposit_Handle">  handle</a> to the 
parent object.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <tr>
    <TD>Constraint_Error</TD>
    <TD> The object specified by <b>Parent</b> is not persistent in <b>Storage</b></TD>
  </tr>
  <TR>
    <TD>Data_Error</TD>
    <TD> Inconsistent <b>Storage</b></TD>
  </TR>
  <TR>
    <TD>End_Error</TD>
    <TD> No such object</TD>
  </TR>
</TABLE>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Get_List"></a>function </font> Get_List<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b>&nbsp;&nbsp;&nbsp;&nbsp;
  : <font color="#0000FF"> access </font> Storage_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Prefix</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  : String&nbsp;:= "";<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Suffix</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  : String&nbsp;:= "";<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Equivalence</b> : Unicode_Mapping_Function := <font color="#0000FF">null</font>;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Parent</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Deposit_Handle := Root_Directory<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> Catalogue.Set<font color="#0000FF"> is
  abstract</font>;</tt></p>

</blockquote>
<p>This function returns a complete list of all named objects persistent in <b>Storage</b> 
which have parent object specified by the parameter <b>Parent</b>. The list does not include anonymous  persistent  objects,
which have neither parents nor names. Only names starting with
<b> Prefix</b> and ending with <b> Suffix</b> are returned. When names are 
compared two characters are considered same if their corresponding values 
returned by
<b> Equivalence</b> are same. When Equivalence is null, it is assumed an 
identity mapping. For case insensitive mappings see
<a href="http://www.dmitry-kazakov.de/ada/strings_edit.htm#Strings_Edit.UTF8.Mapping">Strings_Edit.UTF8.Mapping</a>.To_Lowercase.
<b> Prefix</b> and <b> Suffix</b> may not overlap when matched.
The list is a <a href="#Persistent.Catalogue">set of object names</a>.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <tr>
    <TD>Constraint_Error</TD>
    <TD> The object specified by <b>Parent</b> is not persistent in <b>Storage</b></TD>
  </tr>
  <TR>
    <TD>Data_Error</TD>
    <TD> Inconsistent <b>Storage</b></TD>
  </TR>
  </TABLE>

<blockquote>
  <p><tt><font color="#0000FF">function </font> Get_Name<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> : <font color="#0000FF"> access
  </font>Storage_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Object</b>&nbsp;
  : Deposit_Handle<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return
  </font> String<font color="#0000FF"> is abstract</font>;</tt></p>

</blockquote>
<p>This function returns the object's name in <b>Storage</b>. The object is
specified by its <a href="#Persistent.Deposit_Handle">  handle</a>. Note that 
object names are relative to their parents, so only a pair name - parent does 
identify the object.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Constraint_Error</TD>
    <TD>Invalid handle or <b>Object</b> does not persist in <b>Storage</b></TD>
  </TR>
  <TR>
    <TD>Data_Error</TD>
    <TD> Inconsistent <b>Storage</b></TD>
  </TR>
  <TR>
    <TD>Name_Error</TD>
    <TD><b>Object</b> is anonymous</TD>
  </TR>
</TABLE>

<blockquote>
  <p><tt><font color="#0000FF">function </font> Get_Parent<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> : <font color="#0000FF"> access
  </font>Storage_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Object</b>&nbsp;
  : Deposit_Handle<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return
  </font>Deposit_Handle <font color="#0000FF">is abstract</font>;</tt></p>

</blockquote>
<p>This function returns the object's parent in <b>Storage</b>. The object is
specified by its <a href="#Persistent.Deposit_Handle">  handle</a>.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Constraint_Error</TD>
    <TD>Invalid handle or <b>Object</b> does not persist in <b>Storage</b></TD>
  </TR>
  <TR>
    <TD>Data_Error</TD>
    <TD> Inconsistent <b>Storage</b></TD>
  </TR>
  <TR>
    <TD>Name_Error</TD>
    <TD><b>Object</b> is anonymous</TD>
  </TR>
</TABLE>

<blockquote>
  <p><tt><font color="#0000FF">function </font>Is_Descendant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> : <font color="#0000FF">
	access </font>Storage_Object;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Object</b>&nbsp; 
	: Deposit_Handle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Parent</b>&nbsp; 
	: Deposit_Handle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return </font>Boolean<font color="#0000FF"> is abstract</font>;</tt></p>

</blockquote>
<p>This function checks if <b>Object</b> is a direct or indirect descendant of
<b>Parent</b>. The result is <i><font color="#800000">false</font></i> if <b>
Object</b> is invalid, or else specifies an anonymous or non-persisting in <b>
Storage</b> object. Otherwise the result is <i><font color="#800000">true</font></i> 
when <b>Parent</b> is invalid (i.e. identifies root-level objects) and <i>
<font color="#800000">false</font></i> when <b>Parent</b> does not persist in <b>
Storage</b>. Data_Error is propagated on error in <b>Storage</b>.</p>
<blockquote>
  <p><tt><font color="#0000FF">function </font> Is_In<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> : <font color="#0000FF"> access
  </font> Storage_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;
  : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Parent</b>&nbsp; 
	: Deposit_Handle := Root_Directory<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return
  </font> Boolean<font color="#0000FF"> is abstract</font>;<font color="#0000FF"><br>
  function </font> Is_In<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> : <font color="#0000FF"> access</font> 
  Storage_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Object</b>&nbsp;
  : Deposit_Handle<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return
  </font> Boolean<font color="#0000FF"> is abstract</font>;</tt></p>

</blockquote>
<p>These functions check whether  an  object  persists  in <b>Storage</b>.  The object can be identified either by its name 
and parent or
by a <a href="#Persistent.Deposit_Handle">  handle</a> to  it.  When <b> Object</b> is not a valid handle the result is <i>
<font color="#800000">false</font></i>.
</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <tr>
    <TD>Constraint_Error</TD>
    <TD> The object specified by <b>Parent</b> is not persistent in <b>Storage</b></TD>
  </tr>
  <TR>
    <TD>Data_Error</TD>
    <TD> Inconsistent <b>Storage</b></TD>
  </TR>
  </TABLE>
<blockquote>
  <p><tt><font color="#0000FF">function </font> Is_Named<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> : <font color="#0000FF"> access</font> 
  Storage_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Object</b>&nbsp;
  : Deposit_Handle<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return
  </font> Boolean<font color="#0000FF"> is abstract</font>;</tt></p>

</blockquote>
<p>These functions check whether  <b>Object</b>  persists and named  in <b>Storage</b>. 
When <b> Object</b> is not a valid handle the result is <i>
<font color="#800000">false</font></i>.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>Data_Error</TD>
    <TD> Inconsistent <b>Storage</b></TD>
  </TR>
  </TABLE>
<blockquote>
  <p><tt><font color="#0000FF">   procedure</font> On_Error<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> : 
  Storage_Object;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Text</b>&nbsp;&nbsp;&nbsp; 
	: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Error</b>&nbsp;&nbsp; : Exception_Occurrence<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>

</blockquote>
<p>This procedure is called on exceptions which cannot be handled, e.g. in 
Finalize. The default implementation does nothing. It can be overridden in order 
to write a trace log.</p>
<blockquote>
  <p><tt><font color="#0000FF">procedure </font> Put<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> :
  <font color="#0000FF"> in out </font> Storage_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Object</b>&nbsp;
  : <font color="#0000FF"> in out</font>  Deposit_Handle;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp; 
	: String;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Parent</b>&nbsp; : Deposit_Handle := Root_Directory<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is
  abstract</font>;<font color="#0000FF"><br>
   procedure </font> Put<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> :
  <font color="#0000FF"> in out</font>  Storage_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Object</b>&nbsp;
  : <font color="#0000FF"> in out</font> Deposit_Handle<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is
  abstract</font>;</tt></p>

</blockquote>
<p>These procedures are used to store <b> Object</b> in <b>Storage</b>. The parameters
<b> Name</b> and <b>Parent</b> specify the object's name and parent in <b>
Storage</b>. When omitted the object is  stored as  anonymous.  Anonymous  persistent  objects are collected when not used,  but  not before 
their memory-resident counterpart vanishes. When
<b> Object</b>  already persists in <b> Storage</b> and <b> Name</b> and <b>
Parent</b> are specified, then they are checked  to  be  same.  If  this  check  fails, 
or
<b>  Name</b>  is empty or illegal, or else conflicts with the name of another object Name_Error  is  propagated. When name is not specified, no check is made.&nbsp;</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Constraint_Error</TD>
    <TD>Invalid handle, Parent does not persist in <b>Storage</b></TD>
  </TR>
  <TR>
    <TD>Data_Error</TD>
    <TD> Inconsistent <b>Storage</b></TD>
  </TR>
  <TR>
    <TD>Name_Error</TD>
    <TD>Illegal name (such as empty) or name conflict</TD>
  </TR>
</TABLE>
<blockquote>
  <p><tt><font color="#0000FF">procedure </font> Rename<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b>&nbsp;&nbsp;&nbsp;
  : <font color="#0000FF"> in out </font> Storage_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Old_Name&nbsp; </b> &nbsp;:
  String;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Old_Parent</b> : Deposit_Handle := Root_Directory<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>New_Name&nbsp; </b> &nbsp;: String;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	New_Parent</b> : Deposit_Handle := Root_Directory<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is
  abstract</font>;<font color="#0000FF"><br>
   procedure </font> Rename<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF"> in out </font> Storage_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Object</b>&nbsp;&nbsp;&nbsp;&nbsp; :<font color="#0000FF"> in out </font> Deposit_Handle;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>New_Name</b>&nbsp;&nbsp; : String;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	New_Parent</b> : Deposit_Handle := Root_Directory<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is
  abstract</font>;</tt></p>

</blockquote>
<p>These procedures change the name of the object specified by either its old name
and parent (the parameters <b>Old_Name</b>, <b>Old_Parent</b>) or by a <a href="#Persistent.Deposit_Handle">  handle</a>
to it (the parameter <b>Object</b>). When renamed object was anonymous  before renaming it becomes a named one. When
<b> Object</b> is an invalid handle  or does   not   refer  to a  persistent  object  then Constraint_Error  is propagated.  End_Error is propagated when
<b> Old_Name</b> does not refer any persistent object. No object can become a 
parent of itself, so a check shall be made whether <b>New_Parent</b> specifies 
the object or any of its descendant. If yes, Name_Error is propagated.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Constraint_Error</TD>
    <TD><b>Object</b> is invalid handle or does not refer to any object in <b>Storage</b>.
	<b>New_Parent</b> does not persist in <b>Storage</b>.</TD>
  </TR>
  <TR>
    <TD>Data_Error</TD>
    <TD> Inconsistent <b>Storage</b></TD>
  </TR>
  <TR>
    <TD>End_Error</TD>
    <TD><b>Old_Name</b> indicates no object</TD>
  </TR>
  <TR>
    <TD>Name_Error</TD>
    <TD>Illegal name (such as empty) or name conflict. The object is an ancestor
	of its new parent.</TD>
  </TR>
</TABLE>
<blockquote>
  <p><tt><font color="#0000FF">procedure </font> Unname<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> :
  <font color="#0000FF"> in out</font>  Storage_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Name&nbsp; </b>&nbsp;
  : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Parent</b>&nbsp; : Deposit_Handle := Root_Directory<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is
  abstract</font>;<font color="#0000FF"><br>
   procedure </font> Unname<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> :
  <font color="#0000FF"> in out</font>  Storage_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Object</b>&nbsp;
  : <font color="#0000FF"> in out </font> Deposit_Handle<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">  is
  abstract</font>;</tt></p>

</blockquote>
<p>These procedures make  object  anonymous. The object can be specified either
by its name and parent or by a <a href="#Persistent.Deposit_Handle">  handle</a> to it. Unnamed  objects  are automatically  deleted  when  no  more in use. Nothing happens if the object is already unnamed. Nothing also happens if
<b> Object</b> is an invalid <a href="#Persistent.Deposit_Handle">  handle</a>, not a handle to a persistent object or  does  not  exist.  Note  that anonymous  objects  are  not  deleted  as  long  as  they have memory-resident  counterparts.
Observe the difference  between Unname and <a href="#Object.Archived.Handle.Delete">Delete</a>
(<a href="#Object.Archived.Handle.Delete">Object.Archived.Delete</a>) called on an object handle.
<a href="#Object.Archived.Handle.Delete">Delete</a> requests object deletion from both memory  and persistent storage. Unname does it for persistent storage only.  Both  may  have  no immediate effect if the object is still in use.
Note that when a parent object becomes anonymous so all its descendants do.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <tr>
    <TD>Constraint_Error</TD>
    <TD> The object specified by <b>Parent</b> is not persistent in <b>Storage</b></TD>
  </tr>
  <TR>
    <TD>Data_Error</TD>
    <TD> Inconsistent <b>Storage</b></TD>
  </TR>
  </TABLE>

<p align="right">
  <a href="#1.5" name="2.6"></a><a href="#2.5"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><a href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#2.7"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>2.6. Handles to persistent storage</H3>
<p><a name="Persistent.Handle"></a><a name="Persistent.Handle.Storage_Handle"></a><a name="persistent_storage_handle"></a>A
persistent storage interface is itself an
object, which can be referenced by another object. Usually it is a persistent
object which memory-resident counterpart of is a proxy to the data in the 
persistent storage.
For example, for a large data structure it might be very inefficient to load it
all into the memory. In this case in the memory one would create a small proxy
object, which will query the persistent storage for parts of the object's data as
necessary. Such proxy object will require a reference to its persistent storage.
This also would prevent the persistent storage interface object from premature
destruction. This is why it is strongly recommended to use handles to persistent
storage interface objects.</p>

<p>The package <a href="#Persistent.Handle"> Persistent.Handle</a> provides
the type <a href="#Persistent.Handle.Storage_Handle">Storage_Handle</a>, which
serves as a handle to an abstract persistent storage interface object. It is
guarantied that a persistent storage interface object will not be destroyed as
long at least one handle refers to it.</p>

<blockquote>
  <p><tt><font color="#0000FF">type </font> Storage_Handle<font color="#0000FF"> is
  private</font>;</tt></p>

</blockquote>
<p>The following operations are defined on <a href="#Persistent.Handle.Storage_Handle">Storage_Handle</a>:</p>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Handle.Get"></a>function</font> Get<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> :
  Storage_Handle;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;
  : String / Wide_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Parent</b>&nbsp; 
	: Deposit_Handle := Root_Directory<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return
  </font> Deposit_Handle;</tt></p>

</blockquote>
<p>This function searches for the specified object by its name and parent.  The name is an 
UTF-8 encoded string or else a wide string. If  the object  is already available a <a href="#Persistent.Deposit_Handle">  handle</a>
to it is returned. Otherwise it first is restored from the persistent storage.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>Constraint_Error</TD>
    <TD> Invalid handle <b>Storage</b>, <b>Parent</b> is not persistent in <b>
	Storage</b></TD>
  </TR>
  <TR>
    <TD>Data_Error</TD>
    <TD> Inconsistent <b>Storage</b></TD>
  </TR>
  <tr>
    <TD>End_Error</TD>
    <TD> No such object</TD>
  </tr>
	<tr>
    <TD valign="top">Use_Error</TD>
    <TD> The class of the object is unknown. This error means that there is no 
	known Ada type yet registered to handle the objects from the persistent 
	storage. Normally Ada types register their classes upon corresponding 
	package elaboration. If the package is not used by the application, its 
	persistent objects cannot be restored.</TD>
  </tr>
</TABLE>

<blockquote>
  <p><tt><font color="#0000FF">function</font> Get_Class<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> : <font color="#0000FF"> access</font> 
  Storage_Handle;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;
  : String / Wide_String;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Parent</b>&nbsp; 
	: Deposit_Handle := Root_Directory<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return
  </font>String;</tt></p>

</blockquote>
<p>These functions return the class of  a  persistent  object
by its name and parent. The 
name can be specified either an UTF-8 encoded string or as a wide string.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <tr>
    <TD>Constraint_Error</TD>
    <TD> Invalid handle <b>Storage</b>, <b>Parent</b> is not persistent in <b>
	Storage</b></TD>
  </tr>
  <TR>
    <TD>Data_Error</TD>
    <TD> Inconsistent <b>Storage</b></TD>
  </TR>
  <TR>
    <TD>End_Error</TD>
    <TD> No such object</TD>
  </TR>
</TABLE>

<blockquote>
  <p><tt><font color="#0000FF">function</font> Get_Creation_Time<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> : <font color="#0000FF"> access</font> 
  Storage_Handle;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;
  : String / Wide_String;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Parent</b>&nbsp; 
	: Deposit_Handle := Root_Directory<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return
  </font>Time;</tt></p>

</blockquote>
<p>These functions return the creation time of  a  persistent  object
by its name and parent. The 
name can be specified either an UTF-8 encoded string or as a wide string.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <tr>
    <TD>Constraint_Error</TD>
    <TD> Invalid handle <b>Storage</b>, <b>Parent</b> is not persistent in <b>
	Storage</b></TD>
  </tr>
  <TR>
    <TD>Data_Error</TD>
    <TD> Inconsistent <b>Storage</b></TD>
  </TR>
  <TR>
    <TD>End_Error</TD>
    <TD> No such object</TD>
  </TR>
</TABLE>
<blockquote>
  <p><tt><font color="#0000FF">function </font> Get_List<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b>&nbsp;&nbsp;&nbsp;&nbsp;
  : Storage_Handle;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Prefix</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  : String&nbsp;:= "";<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Suffix</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  : String&nbsp;:= "";<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Equivalence</b> : Unicode_Mapping_Function := <font color="#0000FF">null</font>;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Parent</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Deposit_Handle := Root_Directory<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> 
  Catalogue.Set;<br>
	<font color="#0000FF">function </font> Get_List<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b>&nbsp;&nbsp;&nbsp;&nbsp;
  : Storage_Handle;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Prefix</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  : Wide_String;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Suffix</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  : Wide_String;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Equivalence</b> : Unicode_Mapping_Function := <font color="#0000FF">null</font>;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Parent</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Deposit_Handle := Root_Directory<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> 
  Catalogue.Set;</tt></p>

</blockquote>
<p>These functions return a list of all immediate children of <b>Parent</b> persistent in <b>Storage</b>. Only names starting with <b> Prefix</b> and ending with <b> Suffix</b> 
are eligible. When names are compared two characters are considered same if 
their corresponding values according to <b> Equivalence</b> are same. When 
Equivalence is null, it is assumed an identity mapping. For case insensitive 
mappings see
<a href="http://www.dmitry-kazakov.de/ada/strings_edit.htm#Strings_Edit.UTF8.Mapping">Strings_Edit.UTF8.Mapping</a>.To_Lowercase.
Observe that <b> Prefix</b> may not overlap <b> Suffix</b> when matched.  So  if
<b>Prefix</b>=&quot;AB&quot; and <b>Suffix</b>=&quot;BC&quot;, then "ABC" does not fit,
but &quot;ABBC&quot; does. The result of the function is a <a href="#Persistent.Catalogue">set of object names</a>. 
<b>Prefix</b> and <b>Suffix</b> are either UTF-8 encoded or wide strings.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Constraint_Error</TD>
    <TD>Invalid handle <b>Storage</b>, <b>Parent</b> is not persistent in <b>
	Storage</b></TD>
  </TR>
  <TR>
    <TD>Data_Error</TD>
    <TD> Inconsistent <b>Storage</b></TD>
  </TR>
</TABLE>

<blockquote>
  <p><tt><font color="#0000FF">function </font> Get_Name<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> :
  Storage_Handle;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Object</b>&nbsp;
  : Deposit_Handle<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return
  </font> String;</tt></p>

</blockquote>
<p>This function returns the object's name in <b>Storage</b>. The object is
specified by its <a href="#Persistent.Deposit_Handle">  handle</a>. The result is an UTF-8 encoded string. 
Note that the object names are relative to the object's parent.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Constraint_Error</TD>
    <TD>Invalid handle or <b>Object</b>  does not persists in <b>Storage</b></TD>
  </TR>
  <TR>
    <TD>Data_Error</TD>
    <TD> Inconsistent <b>Storage</b></TD>
  </TR>
  <TR>
    <TD>Name_Error</TD>
    <TD><b>Object</b> is anonymous</TD>
  </TR>
</TABLE>

<blockquote>
  <p><tt><font color="#0000FF">function </font> Get_Parent<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> :
  Storage_Handle;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Object</b>&nbsp;
  : Deposit_Handle<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return
  </font>Deposit_Handle;</tt></p>

</blockquote>
<p>This function returns the object's parent in <b>Storage</b>. The object is
specified by its <a href="#Persistent.Deposit_Handle">  handle</a>.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Constraint_Error</TD>
    <TD>Invalid handle or <b>Object</b>  does not persists in <b>Storage</b></TD>
  </TR>
  <TR>
    <TD>Data_Error</TD>
    <TD> Inconsistent <b>Storage</b></TD>
  </TR>
  <TR>
    <TD>Name_Error</TD>
    <TD><b>Object</b> is anonymous</TD>
  </TR>
</TABLE>
<blockquote>
<p><tt><font color="#0000FF"><a name="Persistent.Handle.Invalidate"></a>procedure</font> Invalidate
(<b>Storage</b> : <font color="#0000FF"> in out</font>  Storage_Handle);</tt></p>
</blockquote>
<p>This procedure makes handle pointing to nothing. If it was  the  last reference to the
persistent storage interface object, the latter is destroyed.</p>

<blockquote>
  <p><tt><font color="#0000FF">function </font>Is_Descendant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> : Storage_Handle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Object</b>&nbsp; 
	: Deposit_Handle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Parent</b>&nbsp; 
	: Deposit_Handle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return </font>Boolean;</tt></p>

</blockquote>
<p>This function checks if <b>Object</b> is a direct or indirect descendant of
<b>Parent</b>. The result is <i><font color="#800000">false</font></i> if <b>
Object</b> is invalid, or else specifies an anonymous or non-persisting in <b>
Storage</b> object. Otherwise the result is <i><font color="#800000">true</font></i> 
when <b>Parent</b> is invalid (i.e. identifies root-level objects) and <i>
<font color="#800000">false</font></i> when <b>Parent</b> does not persist in <b>
Storage</b>. Data_Error is propagated on error in <b>Storage</b>.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Constraint_Error</TD>
    <TD>Invalid handle <b>Storage</b></TD>
  </TR>
  <TR>
    <TD>Data_Error</TD>
    <TD> Inconsistent <b>Storage</b></TD>
  </TR>
</TABLE>

<blockquote>
  <p><tt><font color="#0000FF">function </font> Is_In<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> :
  Storage_Handle;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;
  : String / Wide_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Parent</b>&nbsp; 
	: Deposit_Handle := Root_Directory<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return
  </font> Boolean;<font color="#0000FF"><br>
  function </font>Is_In<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> :
  Storage_Handle;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Object</b>&nbsp;
  : Deposit_Handle<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return
  </font> Boolean;</tt></p>

</blockquote>
<p>These functions check whether  an  object  persists  in <b>Storage</b>.  The object can be identified either by its name 
and parent or
by a <a href="#Persistent.Deposit_Handle">  handle</a> to  it.  When <b> Object</b> is not a valid handle the result is <i>
<font color="#800000">false</font></i>. 
The name can be specified either an UTF-8 encoded string or as a wide string.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Constraint_Error</TD>
    <TD>Invalid handle (<b>Storage</b>), <b>Parent</b> does not persists in <b>
	Storage</b></TD>
  </TR>
  <TR>
    <TD>Data_Error</TD>
    <TD> Inconsistent <b>Storage</b></TD>
  </TR>
</TABLE>
<blockquote>
  <p><tt><font color="#0000FF">function </font> Is_Named<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> : Storage_Handle;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Object</b>&nbsp;
  : Deposit_Handle<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return
  </font> Boolean;</tt></p>

</blockquote>
<p>These functions check whether  <b>Object</b>  persists and named  in <b>Storage</b>. 
When <b> Object</b> is not a valid handle the result is <i>
<font color="#800000">false</font></i>.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <tr>
    <TD>  Constraint_Error</TD>
    <TD>Invalid handle (<b>Storage</b>)</TD>
  </tr>
  <TR>
    <TD>Data_Error</TD>
    <TD> Inconsistent <b>Storage</b></TD>
  </TR>
  </TABLE>
<blockquote>
<p><tt>
<font COLOR="#0000ff">function </font>Is_Valid (<b>Storage</b> : Storage_ Handle) <font color="#0000FF"> return</font> Boolean;</tt></p>
</blockquote>
This function checks whether a handle points to a persistent storage interface object.
<blockquote>
<p><tt><font COLOR="#0000ff">function </font>Ptr (<b>Storage</b> : Storage_ Handle) <font color="#0000FF"> return</font> 
 Storage_Object_Ptr;</tt></p>
</blockquote>
This function is used to get a pointer to the object the handle <b>Storage</b> points to.

The pointer of to the
object shall be used no longer the handle it was get from exists.
<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Handle.Put"></a>procedure </font> Put<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> :
  <font color="#0000FF">in out</font>  Storage_Handle;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Object</b>&nbsp;
  : <font color="#0000FF"> in out</font>  Deposit_Handle;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;
  : String;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Parent</b>&nbsp; : Deposit_Handle := Root_Directory<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	procedure </font> Put<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> :
  <font color="#0000FF">in out</font>  Storage_Handle;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Object</b>&nbsp;
  : <font color="#0000FF"> in out</font>  Deposit_Handle;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;
  : Wide_String;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Parent</b>&nbsp; : Deposit_Handle := Root_Directory<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
   procedure </font> Put<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> :
  Storage_Handle;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Object</b>&nbsp;
  : <font color="#0000FF"> in out</font> Deposit_Handle<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>

</blockquote>
<p>These procedures are used to store <b> Object</b> in <b>Storage</b>. The parameters
<b> Name</b> and <b>Parent</b> specify the object name there. It can be 
specified either an UTF-8 encoded string or as a wide string. When the name is 
omitted the object is stored anonymous. Anonymous persistent objects are 
collected when no more used. It is safe to put an anonymous object
into <b>Storage</b> and then reference it in another persistent object. When <b> Object</b> already persists in
<b> Storage</b> and <b> Name</b> is  specified, then  it  is  checked  that  it is same. If this check fails,
<b> Name</b> is empty, illegal,  or  conflicts with the name of another object Name_Error is propagated.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Constraint_Error</TD>
    <TD>Invalid handle (<b>Storage</b> or <b>Object</b>), <b>Parent</b> is not 
	persistent in <b>Storage</b></TD>
  </TR>
  <TR>
    <TD>Data_Error</TD>
    <TD> Inconsistent <b>Storage</b></TD>
  </TR>
  <TR>
    <TD>Name_Error</TD>
    <TD>Illegal name (such as empty), name conflict, a renaming attempt</TD>
  </TR>
</TABLE>
<blockquote>
<p>
<tt><font COLOR="#0000ff">function </font> Ref (<b>Storage</b> :
Storage_Object_Ptr)
<font color="#0000FF"> return</font>   Storage_Handle;</tt>
</p>
</blockquote>

<p>This function obtains a handle to the persistent storage interface
object. Having a handle to the object prevents object's premature destruction.</p>

<blockquote>
  <p><tt><font color="#0000FF">procedure </font> Rename<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out </font>Storage_Handle;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Old_Name</b>&nbsp;&nbsp; :
  String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Old_Parent</b> : Deposit_Handle := Root_Directory;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>New_Name</b>&nbsp;&nbsp; : String;<b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	New_Parent</b> : Deposit_Handle := Root_Directory<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
   procedure </font> Rename<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out </font>Storage_Handle;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Object</b>&nbsp;&nbsp;&nbsp;&nbsp; :<font color="#0000FF"> in out </font> Deposit_Handle;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>New_Name</b>&nbsp;&nbsp; : String;<b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	New_Parent</b> : Deposit_Handle := Root_Directory;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	procedure </font> Rename<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out </font>Storage_Handle;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Old_Name</b>&nbsp;&nbsp; :
  Wide_String;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Old_Parent</b> : Deposit_Handle := Root_Directory;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>New_Name</b>&nbsp;&nbsp; : Wide_String;<br>
  <b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	New_Parent</b> : Deposit_Handle := Root_Directory<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
   procedure </font> Rename<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out </font>Storage_Handle;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Object</b>&nbsp;&nbsp;&nbsp;&nbsp; :<font color="#0000FF"> in out </font> Deposit_Handle;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>New_Name</b>&nbsp;&nbsp; : Wide_String;<br>
  <b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	New_Parent</b> : Deposit_Handle := Root_Directory<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>

</blockquote>
<p>These procedures change the name of the object specified either by its old name 
and parent
(the parameter <b>Old_Name</b>, <b>Old_Parent</b>) or by a <a href="#Persistent.Deposit_Handle">  handle</a>
to it. The names can be specified either an UTF-8 encoded string or as a wide 
string. When the renamed object was anonymous  before renaming it becomes a named one.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Constraint_Error</TD>
    <TD>Invalid handle or <b>Object</b> is not persistent in <b>Storage</b>, <b>
	New_Parent</b> does not persists in <b>Storage</b></TD>
  </TR>
  <TR>
    <TD>Data_Error</TD>
    <TD> Inconsistent <b>Storage</b></TD>
  </TR>
  <TR>
    <TD>End_Error</TD>
    <TD><b>Old_Name</b> indicates no object</TD>
  </TR>
  <TR>
    <TD>Name_Error</TD>
    <TD>Illegal name (such as empty) or name conflict. <b>New_Parent</b> is 
	anonymous or a descendant of the renamed object</TD>
  </TR>
</TABLE>
<blockquote>
<p>
<tt><font COLOR="#0000ff">procedure</font> Set (<b>Storage</b> :
<font COLOR="#0000ff">in out</font> Storage_Handle; <b>Object</b> : 
Storage_Object_Ptr);</tt></p>
</blockquote>
<P>This procedure resets the handle <b>Storage</b> to a possibly another 
object. In the course of this operation the previously pointed object may be 
destroyed if <b>Storage</b> was the last handle pointing to it. It is safe 
when <b>Object</b> is the object already pointed by the handle. When <b>Object</b> 
is <font color="#0000FF">null</font>, this procedure is equivalent to
<a href="#Persistent.Handle.Invalidate">Invalidate</a>.</p>
<blockquote>
  <p><tt><font color="#0000FF">procedure </font> Unname<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> :
  <font color="#0000FF">in out </font>Storage_Handle;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Name&nbsp; </b>&nbsp;
  : String / Wide_String;<b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Parent
	</b>&nbsp;: Deposit_Handle := Root_Directory<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
   procedure </font>Unname<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> :
  <font color="#0000FF">in out </font>Storage_Handle;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Object</b>&nbsp;
  : <font color="#0000FF"> in out </font> Deposit_Handle<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>

</blockquote>
<p>These procedures make an object  anonymous. The object can be specified either
by its name and parent object or by a <a href="#Persistent.Deposit_Handle">  handle</a> to it. The 
name is either an UTF-8 encoded string or a wide string. Unnamed  objects  are automatically  deleted  when  no  more in use. Nothing happens if the object is already unnamed. Nothing also happens if
<b> Object</b> is an invalid <a href="#Persistent.Deposit_Handle">  handle</a>, not a handle to a persistent object or  does  not  exist.  Note  that anonymous  objects  are  not  deleted
before objects pointed by either <b>Object</b> or <b>Storage</b> destroyed.
There is a difference  between  Unname and <a href="#Object.Archived.Handle.Delete">Delete</a>
called on an object handle. <a href="#Object.Archived.Handle.Delete">Delete</a> requests object deletion from both memory  and persistent storage. Unname does it for persistent storage only.  Both  may  have  no immediate effect if the object is still in use. 
When an object becomes anonymous so do all its descendants.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Constraint_Error</TD>
    <TD><b>Storage</b> is ot a valid handle, <b>Parent</b> does persists in <b>
	Storage</b> </TD>
  </TR>
  <TR>
    <TD>Data_Error</TD>
    <TD> Inconsistent <b>Storage</b></TD>
  </TR>
</TABLE>

<p align="right">
  <a href="#2.6" name="2.7"></a><a href="#2.6"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><a href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#2.8"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>2.7. Persistent storage factory</H3>
<p><a name="Persistent.Handle.Factory"></a>The package <a href="#Persistent.Handle.Factory">Persistent.Handle.Factory</a>
provides a factory of persistent storage objects.</p>

<blockquote>
<P><tt><font color="#0000FF">function</font>  Create_APQ<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Server_Type</b>&nbsp;&nbsp;&nbsp;
: Database_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data_Base_Name</b> : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>User_Name</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Password</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Host_Name</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
: String&nbsp; := &quot;<font color="#FF0000">localhost</font>&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Port_Number</b>&nbsp;&nbsp;&nbsp;
: Natural := <font color="#800000">0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Erase</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
: Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font>
 Storage_Handle;</tt></blockquote>
<P> This  function creates an APQ persistent storage interface object and returns  a  handle  to  it. The object is responsible for interacting
with a data base via APQ bindings. A connection is established to the server   specified   by   the   parameter
<b>Host_Name</b>.  The  parameter <b> Server_Type</b>  identifies   the   data   base   engine.
It   can   be Engine_PostgreSQL, Engine_MySQL etc, one  of  the  supported  by  APQ
engines. The enumeration type Database_Type is defined in the package APQ
delivered with the APQ distribution. <b>User_Name</b>  and <b>  Password</b>  identify  the  data  base   user.
<b> Data_Base_Name</b>  is  the  name  of  a data base managed by the server. <b> Port_Number</b>  specifies  the  TCP/IP port listened by the server. When specified  as  0,  a  reasonable default is used. The parameter Erase when
<font color="#800000"><i>true</i></font>  erases  the data base contents by dropping all the tables used for storing persistent objects. If the data  base  contains  any additional tables, they remain untouched.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>Data_Error</TD>
    <TD> Data base error</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD> Connection problem. Either of the parameters identifying server, data
      base or user
      might be wrong</TD>
  </TR>
</TABLE>

<blockquote>
<P><tt><font color="#0000FF">function</font>  Create_ODBC<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Server_Name</b> :
String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>User_Name</b>&nbsp;&nbsp;
: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Password</b>&nbsp;&nbsp;&nbsp;
: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Erase</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
: Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> 
 Storage_Handle;<br>
<font color="#0000FF">function</font>  Create_ODBC<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Server_Name</b> :
Wide_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>User_Name</b>&nbsp;&nbsp;
: Wide_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Password</b>&nbsp;&nbsp;&nbsp;
: Wide_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Erase</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
: Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> 
 Storage_Handle;</tt></blockquote>
<P>This function creates a connection to an ODBC data base, i.e. any data base 
that has an ODBC driver and returns a valid handle to the persistent storage
interface object to communicate the data base. The parameter <b>Server_Name</b>
specifies the data server name. It denotes both the data base and the server
(driver). The parameters <b>User_Name</b> and <b>Password</b> specify the user and the
password to access the data base. All names here are UTF-8 encoded or wide 
strings.When the parameter <b>Erase</b> is set to <i><font color="#800000">true</font></i>,
all used tables are erased upon establishing the connection. One can use it if
there is a possibility that the data base contains some corrupted or undesired
data. So the data base would initially contain no persistent objects.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>Data_Error</TD>
    <TD> Data base error</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD> Connection problem. Either of the parameters <b>Server_Name</b>, <b>User_Name</b>, <b>Password</b>
      might be wrong</TD>
  </TR>
</TABLE>

<p align="right">
  <a href="#1.5" name="2.8"></a><a href="#2.7"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><a href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#2.9"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>2.8. Persistent storage implementations</H3>
<p>Simple components provide ready-to-use persistent storage implementations.
The package <a href="#Persistent.Handle.Factory">Persistent.Handle.Factory</a>
 supports run-time selection of the most suitable implementation. That might be
undesirable, because the implementations rely on third party products such as <a href="http://gnade.sourceforge.net/">GNADE</a>
and APQ. So <a href="#Persistent.Handle.Factory">Persistent.Handle.Factory</a>
needs all of them installed. Alternatively, if it is known that only a
particular implementation will be actually used, one can do it directly without
the factory. This will remove any dependency on other implementations. This
section describes presently available implementations.</p>
<H4><a name="2.8.1"></a>2.8.1. ODBC databases</H4>
<p><a name="Persistent.Native_ODBC"></a>The package 
<a href="#Persistent.Native_ODBC">Persistent.Native_ODBC</a>
provides an implementation of abstract persistent storage based on <b>O</b>pen <b>D</b>ata<b>b</b>ase <b>C</b>onnectivity
(ODBC) interface to data bases. ODBC is provided for a great variety of
platforms and data bases. The package declares the following subroutines:</p>
<blockquote>
<P><tt><font color="#0000FF"><a name="Persistent.Native_ODBC.Create"></a>function</font>  Create<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Server_Name</b> :
String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>User_Name</b>&nbsp;&nbsp;&nbsp;:&nbsp;String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Password</b>&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Erase</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> 
 Storage_Handle;</tt></blockquote>
<P>This function creates a connection to an ODBC data base, i.e. any data base 
that has an ODBC driver and returns a valid handle to the persistent storage
interface object to communicate the data base. The parameter <b>Server_Name</b>
specifies the data server name. It denotes both the data base and the server
(driver). The parameters <b>User_Name</b> and <b>Password</b> specify the user and the
password to access the data base. All these parameters are UTF-8 encoded 
strings. When the parameter <b>Erase</b> is set to <i><font color="#800000">true</font></i>,
all used tables are erased upon establishing the connection. One can use it if
there is a possibility that the data base contains some corrupted or undesired
data. So the data base would initially contain no persistent objects.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>Data_Error</TD>
    <TD> Data base error</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD> Connection problem. Either of the parameters <b>Server_Name</b>, <b>User_Name</b>, <b>Password</b>
      might be wrong</TD>
  </TR>
</TABLE>

<blockquote>
<P><tt><font color="#0000FF">procedure</font> Disable_Tracing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> : <font color="#0000FF"> in out</font> Storage_Handle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<P>This procedure disables tracing of SQL requests. Constraint_Error is
propagated when <b>Storage</b> is not a handle to ODBC persistent storage.

<blockquote>
<P><tt><font color="#0000FF">procedure</font> Enable_Tracing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>  Storage</b> :
<font color="#0000FF"> in out</font>  Storage_Handle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;
: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;             );</tt></blockquote>
<P>This procedure starts tracing SQL requests using trace file <b>Name</b>.
Constraint_Error is propagated when <b>Storage</b> is not a handle to ODBC
persistent storage. Data_Error is propagated on any other error.<blockquote>
<P><tt><font color="#0000FF">function</font> Get_Server_Name (<b>Storage</b> :
Storage_Handle) <font color="#0000FF">return</font> String;</tt></blockquote>
<P>This function returns the server name. Constraint_Error is propagated when <b>Storage</b> is not a handle to ODBC
persistent storage.

<blockquote>
<P><tt><font color="#0000FF">function</font> Is_ODBC (<b>Storage</b> :
Storage_Handle)
<font color="#0000FF"> return</font> Boolean;</tt></blockquote>
<P>This function returns <font color="#800000"><i>true</i></font> if <b>Storage</b>
is a valid handle to an ODBC persistent storage interface object.

<blockquote>
<P><tt><font color="#0000FF">   function</font> Serializable (<b>Storage</b> :
Storage_Handle) <font color="#0000FF"> return</font> Boolean;</tt></blockquote>
<P>This function returns <font color="#800000"><i>true</i></font> if the ODBC
driver communicated through <b>Storage</b> supports serializable transactions.
Constraint_Error is propagated when <b>Storage</b> is not a valid handle to an
ODBC persistent storage interface object.

<blockquote>
<P><tt><font color="#0000FF">   function</font> Unicode (<b>Storage</b> :
Storage_Handle) <font color="#0000FF"> return</font> Boolean;</tt></blockquote>
<P>This function returns <font color="#800000"><i>true</i></font> if the ODBC
driver communicated through <b>Storage</b> natively supports Unicode.
Constraint_Error is propagated when <b>Storage</b> is not a valid handle to an
ODBC persistent storage interface object.
  <P><u><b>Implementation notes</b></u>. The implementation uses a minimal set of SQL
  features to support a greater number of data bases. Therefore almost
  everything, from generating unique keys to ON DELETE CASCADE is implemented
  without the data base engine. The most suitable types are selected according 
  to the results of SQLGetTypeInfo. As the result the performance might be not 
  optimal.<P>The minimal requirements for an ODBC driver:<TABLE border="5" cellpadding="3" cellspacing="0">
  <TR>
    <TD>32-bit integers</TD>
    <TD>SQL_INTEGER. When 64-bit integers (SQL_BIGINT) are supported, they are 
    used for object unique keys. Otherwise, it is (signed) 32-bit ones</TD>
  </TR>
  <TR>
    <TD>Time stamping</TD>
    <TD>SQL_TIMESTAMP.</TD>
  </TR>
  <tr>
    <TD>Variable character strings</TD>
    <TD>SQL_LONGVARCHAR</TD>
  </tr>
  <tr>
    <TD>PRIMARY KEY</TD>
    <TD>Object primary keys are integers.</TD>
  </tr>
  <tr>
    <TD>MAX()</TD>
    <TD>In SELECT</TD>
  </tr>
  <tr>
    <TD>DISTINCT</TD>
    <TD>In SELECT</TD>
  </tr>
  <tr>
    <TD>NOW()</TD>
    <TD>In INSERT as a value for SQL_TIMESTAMP</TD>
  </tr>
  <tr>
    <TD>NULL</TD>
    <TD>In INSERT as a value for string</TD>
  </tr>
</TABLE>
  <p>The implementation tries to serialize data base transactions if the ODBC 
  driver support it. In any case the manual-commit mode is used to provide 
  atomic data base changes. The data base structure consists of three tables:</p>
<P>Table <i>objects</i>:<TABLE border="5" cellpadding="3" cellspacing="0">
  <TR>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Column</b></font></TD>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Type</b></font></TD>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Description</b></font></TD>
  </TR>
  <TR>
    <TD>object_id</TD>
    <TD>64- or 32-bit integer, primary key, unique</TD>
    <TD>Object key</TD>
  </TR>
  <tr>
    <TD>catalogue_name</TD>
    <TD>UTF-8 string</TD>
    <TD>Object name. Unset if object is anonymous</TD>
  </tr>
  <tr>
    <TD>class_name</TD>
    <TD>UTF-8 string</TD>
    <TD>Object's class</TD>
  </tr>
  <tr>
    <TD>object_data</TD>
    <TD>UTF-8 string</TD>
    <TD>Object data</TD>
  </tr>
  <tr>
    <TD>parameters_list</TD>
    <TD>UTF-8 string</TD>
    <TD>The dependency list</TD>
  </tr>
  <tr>
    <TD>created_at</TD>
    <TD>Time stamp</TD>
    <TD>Object creation time</TD>
  </tr>
  <tr>
    <TD>parent_id</TD>
    <TD>64- or 32-bit integer</TD>
    <TD>The key of the object's parent object</TD>
  </tr>
</TABLE>
<P>Tables <i>backward_links</i> and <i>direct_links</i>:<TABLE border="5" cellpadding="3" cellspacing="0">
  <TR>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Column</b></font></TD>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Type</b></font></TD>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Description</b></font></TD>
  </TR>
  <TR>
    <TD>dependant</TD>
    <TD>64- or 32-bit integer</TD>
    <TD>Object key</TD>
  </TR>
  <tr>
    <TD>referent</TD>
    <TD>64- or 32-bit integer</TD>
    <TD>Object key, the object&nbsp;</TD>
  </tr>
</TABLE>
  <H4><a name="2.8.2"></a>2.8.2. GNADE ODBC databases</H4>
<p><a name="Persistent.ODBC"></a>The package <a href="#Persistent.ODBC">Persistent.ODBC</a>
provides an implementation of abstract persistent storage based on <b>O</b>pen <b>D</b>ata<b>b</b>ase <b>C</b>onnectivity
(ODBC) interface to data bases. ODBC is provided for a great variety of
platforms and data bases. The package declares the following subroutines:</p>
<blockquote>
<P><tt><font color="#0000FF"><a name="Persistent.ODBC.Create"></a>function</font>  Create<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Server_Name</b> :
String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>User_Name</b>&nbsp;&nbsp;&nbsp;:&nbsp;String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Password</b>&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Erase</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> 
 Storage_Handle;</tt></blockquote>
<P>This function creates a connection to an ODBC data base, i.e. any data base 
that has an ODBC driver and returns a valid handle to the persistent storage
interface object to communicate the data base. The parameter <b>Server_Name</b>
specifies the data server name. It denotes both the data base and the server
(driver). The parameters <b>User_Name</b> and <b>Password</b> specify the user and the
password to access the data base. All these parameters are UTF-8 encoded 
strings. When the parameter <b>Erase</b> is set to <i><font color="#800000">true</font></i>,
all used tables are erased upon establishing the connection. One can use it if
there is a possibility that the data base contains some corrupted or undesired
data. So the data base would initially contain no persistent objects.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>Data_Error</TD>
    <TD> Data base error</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD> Connection problem. Either of the parameters <b>Server_Name</b>, <b>User_Name</b>, <b>Password</b>
      might be wrong</TD>
  </TR>
</TABLE>

<blockquote>
<P><tt><font color="#0000FF">procedure</font> Disable_Tracing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> : <font color="#0000FF"> in out</font> Storage_Handle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<P>This procedure disables tracing of SQL requests. Constraint_Error is
propagated when <b>Storage</b> is not a handle to ODBC persistent storage.

<blockquote>
<P><tt><font color="#0000FF">procedure</font> Enable_Tracing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>  Storage</b> :
<font color="#0000FF"> in out</font>  Storage_Handle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;
: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;             );</tt></blockquote>
<P>This procedure starts tracing SQL requests using trace file <b>Name</b>.
Constraint_Error is propagated when <b>Storage</b> is not a handle to ODBC
persistent storage. Data_Error is propagated on any other error.<blockquote>
<P><tt><font color="#0000FF">function</font> Get_Server_Name (<b>Storage</b> :
Storage_Handle) <font color="#0000FF">return</font> String;</tt></blockquote>
<P>This function returns the server name. Constraint_Error is propagated when <b>Storage</b> is not a handle to ODBC
persistent storage.

<blockquote>
<P><tt><font color="#0000FF">function</font> Is_ODBC (<b>Storage</b> :
Storage_Handle)
<font color="#0000FF"> return</font> Boolean;</tt></blockquote>
<P>This function returns <font color="#800000"><i>true</i></font> if <b>Storage</b>
is a valid handle to an ODBC persistent storage interface object.

<blockquote>
<P><tt><font color="#0000FF">   function</font> Serializable (<b>Storage</b> :
Storage_Handle) <font color="#0000FF"> return</font> Boolean;</tt></blockquote>
<P>This function returns <font color="#800000"><i>true</i></font> if the ODBC
driver communicated through <b>Storage</b> supports serializable transactions.
Constraint_Error is propagated when <b>Storage</b> is not a valid handle to an
ODBC persistent storage interface object.

<blockquote>
<P><tt><font color="#0000FF">   function</font> Unicode (<b>Storage</b> :
Storage_Handle) <font color="#0000FF"> return</font> Boolean;</tt></blockquote>
<P>This function returns <font color="#800000"><i>true</i></font> if the ODBC
driver communicated through <b>Storage</b> natively supports Unicode.
Constraint_Error is propagated when <b>Storage</b> is not a valid handle to an
ODBC persistent storage interface object.
  <P><u><b>Implementation notes</b></u>. The implementation uses a minimal set of SQL
  features to support a greater number of data bases. Therefore almost
  everything, from generating unique keys to ON DELETE CASCADE is implemented
  without the data base engine. The most suitable types are selected according 
  to the results of SQLGetTypeInfo. As the result the performance might be not 
  optimal.<P>The minimal requirements for an ODBC driver:<TABLE border="5" cellpadding="3" cellspacing="0">
  <TR>
    <TD>32-bit integers</TD>
    <TD>SQL_INTEGER. When 64-bit integers (SQL_BIGINT) are supported, they are 
    used for object unique keys. Otherwise, it is (signed) 32-bit ones</TD>
  </TR>
  <TR>
    <TD>Time stamping</TD>
    <TD>SQL_TIMESTAMP.</TD>
  </TR>
  <tr>
    <TD>Variable character strings</TD>
    <TD>SQL_LONGVARCHAR. Also when Unicode is supported (SQL_WLONGVARCHAR) it is 
    used to keep object names. When not supported, object names are stored in 
    plain strings.</TD>
  </tr>
  <tr>
    <TD>PRIMARY KEY</TD>
    <TD>Object primary keys are integers.</TD>
  </tr>
  <tr>
    <TD>MAX()</TD>
    <TD>In SELECT</TD>
  </tr>
  <tr>
    <TD>DISTINCT</TD>
    <TD>In SELECT</TD>
  </tr>
  <tr>
    <TD>NOW()</TD>
    <TD>In INSERT as a value for SQL_TIMESTAMP</TD>
  </tr>
  <tr>
    <TD>NULL</TD>
    <TD>In INSERT as a value for string</TD>
  </tr>
</TABLE>
  <p>The implementation tries to serialize data base transactions if the ODBC 
  driver support it. In any case the manual-commit mode is used to provide 
  atomic data base changes. The data base structure consists of three tables:</p>
<P>Table <i>objects</i>:<TABLE border="5" cellpadding="3" cellspacing="0">
  <TR>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Column</b></font></TD>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Type</b></font></TD>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Description</b></font></TD>
  </TR>
  <TR>
    <TD>object_id</TD>
    <TD>64- or 32-bit integer, primary key, unique</TD>
    <TD>Object key</TD>
  </TR>
  <tr>
    <TD>catalogue_name</TD>
    <TD>UTF-8 string</TD>
    <TD>Object name. Unset if object is anonymous</TD>
  </tr>
  <tr>
    <TD>class_name</TD>
    <TD>UTF-8 string</TD>
    <TD>Object's class</TD>
  </tr>
  <tr>
    <TD>object_data</TD>
    <TD>UTF-8 string</TD>
    <TD>Object data</TD>
  </tr>
  <tr>
    <TD>parameters_list</TD>
    <TD>UTF-8 string</TD>
    <TD>The dependency list</TD>
  </tr>
  <tr>
    <TD>created_at</TD>
    <TD>Time stamp</TD>
    <TD>Object creation time</TD>
  </tr>
  <tr>
    <TD>parent_id</TD>
    <TD>64- or 32-bit integer</TD>
    <TD>The key of the object's parent object</TD>
  </tr>
</TABLE>
<P>Tables <i>backward_links</i> and <i>direct_links</i>:<TABLE border="5" cellpadding="3" cellspacing="0">
  <TR>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Column</b></font></TD>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Type</b></font></TD>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Description</b></font></TD>
  </TR>
  <TR>
    <TD>dependant</TD>
    <TD>64- or 32-bit integer</TD>
    <TD>Object key</TD>
  </TR>
  <tr>
    <TD>referent</TD>
    <TD>64- or 32-bit integer</TD>
    <TD>Object key, the object&nbsp;</TD>
  </tr>
</TABLE>
  <p>The
  software was tested with:</p>
<ul>
  <li>MS Access (Office 2000 edition);</li>
  <li>MySQL 4.1 (see <a href="http://www.mysql.com/">MySQL
  home page</a>);</li>
  <li>PostgreSQL 8.2 (see <a href="http://www.postgresql.org/">PostgreSQL home
    page</a>)</li>
</ul>
<p>Some words of warning:</p>
<ul>
  <li>The ODBC driver provided for MS Excel does not fulfill the
requirements above and therefore cannot be used with <a href="#Persistent.ODBC">Persistent.ODBC</a>;</li>
  <li>MyODBC 3.51 for Linux seems to be corrupt (at least SQLGetData). Windows
    version works well;</li>
  <li>There should be something wrong with Unicode support in many ODBC drivers
    under Linux. The issue requires further investigation;</li>
	<li>GNADE ODBC presently does not support 64-bit architectures.</li>
</ul>
  <P><u><b>Installation notes</b></u>. The implementation is based on
  GNADE 1.5.3a (<b>GN</b>at <b>A</b>da <b>D</b>atabase <b>E</b>nvironment). The <a href="http://gnade.sourceforge.net/">GNADE
  project</a> is distributed under modified GNU Public License. To
  compile the package <a href="#Persistent.Handle.Factory">Persistent.Handle.Factory</a>
  you will need a GNADE distribution, at least its part related to ODBC 
  bindings. If you do not use <a href="#Persistent.Handle.Factory">Persistent.Handle.Factory</a>,
  you  need not compile it. For ODBC driver installation refer your
  data base documentation.
<H4><a name="2.8.3"></a>2.8.3. APQ-interfaced databases</H4>
<p><a name="Persistent.APQ"></a>The package <a href="#Persistent.APQ">Persistent.APQ</a>
provides an implementation of abstract persistent storage based on Ada95 Database Binding to
PostgreSQL/MySQL by Warren W. Gay VE3WWG (APQ). APQ supports a number of data
bases accessed via a unified interface. The package <a href="#Persistent.APQ">Persistent.APQ</a>
provides the following subroutines:</p>
<blockquote>
<P><tt><font color="#0000FF">function</font>  Create<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Server_Type</b>&nbsp;&nbsp;&nbsp;
: Database_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data_Base_Name</b> : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>User_Name</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Password</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Host_Name</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
: String&nbsp; := &quot;<font color="#FF0000">localhost</font>&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Port_Number</b>&nbsp;&nbsp;&nbsp;
: Natural := <font color="#800000">0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Erase</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
: Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font>
 Storage_Handle;</tt></blockquote>
<P> This  function creates an APQ persistent storage interface object and returns  a  handle  to  it. The object is responsible for interacting
with a data base via APQ bindings. A connection is established to the server   specified   by   the   parameter
<b>Host_Name</b>.  The  parameter <b> Server_Type</b>  identifies   the   data   base   engine.
It   can   be Engine_PostgreSQL, Engine_MySQL etc, one  of  the  supported  by  APQ
engines. The enumeration type Database_Type is defined in the package APQ
delivered with the APQ distribution. <b>User_Name</b>  and <b>  Password</b>  identify  the  data  base   user.
<b> Data_Base_Name</b>  is  the  name  of  a data base managed by the server. <b> Port_Number</b>  specifies  the  TCP/IP port listened by the server. When specified  as  0,  a  reasonable default is used. The parameter 
<b>Erase</b> when
<font color="#800000"><i>true</i></font>  erases  the data base contents by dropping all the tables used for storing persistent objects. If the data  base  contains  any additional tables, they remain untouched.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>Data_Error</TD>
    <TD> Data base error</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD> Connection problem. Either of the parameters identifying server, data
      base or user
      might be wrong</TD>
  </TR>
</TABLE>

<blockquote>
<P><tt><font color="#0000FF">procedure</font> Disable_Tracing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>  Storage</b> :
<font color="#0000FF"> in out</font> Storage_Handle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;             );</tt></blockquote>
<P>This procedure disables tracing of SQL requests. Constraint_Error is
propagated when <b>Storage</b> is not a handle to APQ persistent storage.

<blockquote>
<P><tt><font color="#0000FF">procedure</font> Enable_Tracing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;             (&nbsp; <b>  Storage</b> :
<font color="#0000FF"> in out</font>  Storage_Handle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;    : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;             );</tt></blockquote>
<P>This procedure starts tracing SQL requests using trace file <b>Name</b>.
Constraint_Error is propagated when <b>Storage</b> is not a handle to APQ
persistent storage. Data_Error is propagated on any other error.

<blockquote>
<P><tt><font color="#0000FF">   function</font> Is_APQ (<b>Storage</b> :
Storage_Handle) <font color="#0000FF"> return</font> Boolean;</tt></blockquote>
<P>This function returns <font color="#800000"><i>true</i></font> if <b>Storage</b>
is a valid handle to an APQ persistent storage interface object.
  <P><u><b>Implementation notes</b></u>. The data base structure consists of
  three tables:<P>Table <i>objects</i>:<TABLE border="5" cellpadding="3" cellspacing="0">
  <TR>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Column</b></font></TD>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Type</b></font></TD>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Description</b></font></TD>
  </TR>
  <TR>
    <TD>object_id</TD>
    <TD>64- or 32-bit integer, primary key, unique, auto-incremented</TD>
    <TD>Object key</TD>
  </TR>
  <tr>
    <TD>catalogue_name</TD>
    <TD>UTF-8 string</TD>
    <TD>Object name. Unset if object is anonymous</TD>
  </tr>
  <tr>
    <TD>class_name</TD>
    <TD>UTF-8 string</TD>
    <TD>Object's class</TD>
  </tr>
  <tr>
    <TD>object_data</TD>
    <TD>UTF-8 string</TD>
    <TD>Object data</TD>
  </tr>
  <tr>
    <TD>parameters_list</TD>
    <TD>UTF-8 string</TD>
    <TD>The dependency list</TD>
  </tr>
  <tr>
    <TD>created_at</TD>
    <TD>Time stamp</TD>
    <TD>Object creation time</TD>
  </tr>
	<tr>
    <TD>parent_id</TD>
    <TD>64- or 32-bit integer</TD>
    <TD>Parent object key</TD>
  </tr>
</TABLE>
<P>Tables <i>backward_links</i> and <i>direct_links</i>:<TABLE border="5" cellpadding="3" cellspacing="0">
  <TR>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Column</b></font></TD>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Type</b></font></TD>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Description</b></font></TD>
  </TR>
  <TR>
    <TD>dependant</TD>
    <TD>64- or 32-bit integer</TD>
    <TD>Object key</TD>
  </TR>
  <tr>
    <TD>referent</TD>
    <TD>64- or 32-bit integer</TD>
    <TD>Object key, the object&nbsp;</TD>
  </tr>
</TABLE>
  <p>The
  software was tested with:</p>
<ul>
  <li> MySQL 4.1 (see <a href="http://www.mysql.com/">MySQL
  home page</a>);</li>
  <li>PostgreSQL 8.2 (see <a href="http://www.postgresql.org/">PostgreSQL home
    page</a>)</li>
</ul>
<p>It was not tested under Linux because APQ 2.1 was targeted to 3.x versions of
MySQL.</p>
<P><u><b>Installation notes</b></u>. The implementation is based on APQ 2.1. It
can be found <a href="http://home.cogeco.ca/~ve3wwg/software.html">here</a>. The <a href="http://gnade.sourceforge.net/">APQ
  project</a> is distributed under modified GNU Public License 2 and Ada
Community Licenses. To
  compile the package <a href="#Persistent.Handle.Factory">Persistent.Handle.Factory</a>
  you will need an APQ distribution. If you do not use <a href="#Persistent.Handle.Factory">Persistent.Handle.Factory</a>,
  you  need not to compile it.

You might need to modify the sources in order to be able to work with the recent 
versions of GNAT compiler, PostgreSQL or MySQL.<H4><a name="2.8.4"></a>2.8.4. SQLite3 databases</H4>
<p><a name="Persistent.SQLite"></a>The package <a href="#Persistent.SQLite">Persistent.SQLite</a>
provides an implementation of abstract persistent storage backed by
<a href="http://www.sqlite.org/index.html">SQLite</a> databases.
<a href="http://www.sqlite.org/index.html">SQLite</a> is a data base engine that 
can be integrated into an application. It does not require a server application. 
The clients access the data base directly.
<a href="http://www.sqlite.org/index.html">SQLite</a> is quite useful for 
lightweight persistence since <a href="http://www.sqlite.org/index.html">SQLite</a> 
requires no installation.</p>
<p>Note that <a href="http://www.sqlite.org/index.html">SQLite</a> is also 
accessible through <a href="#Persistent.ODBC">Persistent.ODBC</a>
since <a href="http://www.sqlite.org/index.html">SQLite</a> has an ODBC 
interface. This would rather eliminate the core advantages of
<a href="http://www.sqlite.org/index.html">SQLite</a>. Unlikely to <a href="#Persistent.ODBC">Persistent.ODBC</a>, 
the implementation provided by <a href="#Persistent.SQLite">Persistent.SQLite</a> 
is based on the native bindings with the
<a href="http://www.sqlite.org/index.html">SQLite</a> database engine statically 
linked.</p>
<p>The package <a href="#Persistent.SQLite">Persistent.SQLite</a>
provides the following subroutines:</p>
<blockquote>
<P><tt><font color="#0000FF">function</font>  Create<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>File_Name</b> : 
String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Erase</b>&nbsp;&nbsp;&nbsp;&nbsp;
: Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font>
 Storage_Handle;</tt></blockquote>
<P> This  function creates an <a href="http://www.sqlite.org/index.html">SQLite</a> persistent storage interface object and returns  a  handle  to  it. The 
parameter <b>File_Name</b> is the data base file name (UTF-8 encoded). When the 
file does not exist, it is created new. The parameter <b>Erase</b> when
<font color="#800000"><i>true</i></font>  erases  the data base contents by dropping all the tables used for storing persistent objects. If the data  base  contained  any additional tables, they remain untouched.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>Data_Error</TD>
    <TD> Data base error</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD> File open or creation problem</TD>
  </TR>
</TABLE>

<blockquote>
<P><tt><font color="#0000FF">function</font> Get_File_Name (<b>Storage</b> : 
Storage_Handle) <font color="#0000FF">return</font> String;</tt></blockquote>
<P>This function returns the name of the database backing <b>Storage</b>. Constraint_Error is
propagated when <b>Storage</b> is not a handle to 
<a href="http://www.sqlite.org/index.html">SQLite</a> persistent storage.

<blockquote>
<P><tt><font color="#0000FF">   function</font> Is_SQLite (<b>Storage</b> :
Storage_Handle) <font color="#0000FF"> return</font> Boolean;</tt></blockquote>
<P>This function returns <font color="#800000"><i>true</i></font> if <b>Storage</b>
is a valid handle to an <a href="http://www.sqlite.org/index.html">SQLite</a> persistent storage interface object.
  <P><u><b>Implementation notes</b></u>. The data base structure consists of
  three tables:<P>Table <i>objects</i>:<TABLE border="5" cellpadding="3" cellspacing="0">
  <TR>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Column</b></font></TD>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Type</b></font></TD>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Description</b></font></TD>
  </TR>
  <TR>
    <TD>object_id</TD>
    <TD>64-bit integer, primary key</TD>
    <TD>Object key</TD>
  </TR>
  <tr>
    <TD>catalogue_name</TD>
    <TD>UTF-8 string</TD>
    <TD>Object name. Unset if object is anonymous</TD>
  </tr>
  <tr>
    <TD>class_name</TD>
    <TD>UTF-8 string</TD>
    <TD>Object's class</TD>
  </tr>
  <tr>
    <TD>object_data</TD>
    <TD>UTF-8 string</TD>
    <TD>Object data</TD>
  </tr>
  <tr>
    <TD>parameters_list</TD>
    <TD>UTF-8 string</TD>
    <TD>The dependency list</TD>
  </tr>
  <tr>
    <TD>created_at</TD>
    <TD>UTF-8 string</TD>
    <TD>Object creation time YYYY-MM-DD hh::mm:ss.ssss</TD>
  </tr>
	<tr>
    <TD>parent_id</TD>
    <TD>64-bit integer</TD>
    <TD>Parent object key</TD>
  </tr>
</TABLE>
<P>Tables <i>backward_links</i> and <i>direct_links</i>:<TABLE border="5" cellpadding="3" cellspacing="0">
  <TR>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Column</b></font></TD>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Type</b></font></TD>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Description</b></font></TD>
  </TR>
  <TR>
    <TD>dependant</TD>
    <TD>64-bit integer</TD>
    <TD>Object key</TD>
  </TR>
  <tr>
    <TD>referent</TD>
    <TD>64-bit integer</TD>
    <TD>Object key, the object&nbsp;</TD>
  </tr>
</TABLE>
  <H4><a name="2.8.5"></a>2.8.5. Single file implementation</H4>
<p><a name="Persistent.Single_File"></a>The package 
<a href="#Persistent.Single_File">Persistent.Single_File</a>
provides an implementation of abstract persistent storage backed by
<a href="#Persistent.Blocking_Files.Transactional">persistent transactional 
files</a>. The package <a href="#Persistent.SQLite">Persistent.SQLite</a>
provides the following subroutines:</p>
<blockquote>
<P><tt><font color="#0000FF">function</font>  Create<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>File_Name</b> : 
String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Erase</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Boolean&nbsp; := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Hash_Size</b> 
: Positive := <font color="#800000">256</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Map_Size</b>&nbsp; 
: Positive := <font color="#800000">100</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font>
 Storage_Handle;</tt></blockquote>
<P> This function creates a persistent storage interface object and returns  a  handle  to  it. The 
parameter <b>File_Name</b> is the data base file name. When the 
file does not exist, it is created new. The parameter <b>Erase</b> when
<font color="#800000"><i>true</i></font>  erases  the data base contents by dropping all the tables used for storing persistent objects.
<b>Hash_Size</b> is the number of file blocks kept in the memory. Map_Size is 
the number of virtual block map stored in the memory.<br>
&nbsp;</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>Data_Error</TD>
    <TD> Data base error</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD> File open or creation problem</TD>
  </TR>
</TABLE>

<blockquote>
<P><tt><font color="#0000FF">function</font> Get_File_Name (<b>Storage</b> : 
Storage_Handle) <font color="#0000FF">return</font> String;</tt></blockquote>
<P>This function returns the name of the database backing <b>Storage</b>. Constraint_Error is
propagated when <b>Storage</b> is not a handle to 
single file persistent storage.

<blockquote>
<P><tt><font color="#0000FF">   function</font> Is_Single_File (<b>Storage</b> :
Storage_Handle) <font color="#0000FF"> return</font> Boolean;</tt></blockquote>
<P>This function returns <font color="#800000"><i>true</i></font> if <b>Storage</b>
is a valid handle to a single file persistent storage interface object.<p align="right">
  <a href="#2.9" name="2.9"></a><a href="#2.8"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#2.10"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>2.9. Implementation of a new persistent storage</H3>
<p>This chapter describes the internal packages used to ease implementation of a
persistent storage backed by a data base.</p>

<H4><a name="2.9.1"></a>2.9.1. Databases</H4>
<p>Usually persistent storage is implemented on the basis of an external data base engine. In
that data base persistent objects are represented by records or other data
structures identified by keys. The packages <a href="#Persistent.Data_Bank">Persistent.Data_Bank</a>,
<a href="#Persistent.Data_Bank.Index">Persistent.Data_Bank.Index</a> and <a href="#Persistent.Data_Bank.Indexed">Persistent.Data_Bank.Indexed</a>
are provided for interfacing such data bases. The
package <a href="#Persistent.Data_Bank">Persistent.Data_Bank</a> is the parent
package providing basic types. The package <a href="#Persistent.Data_Bank.Index">Persistent.Data_Bank.Index</a> 
defines a storage index object to be used at run-time by the storage object. The
package <a href="#Persistent.Data_Bank.Indexed">Persistent.Data_Bank.Indexed</a>
 provides a specialized abstract storage which implements the abstract storage
operation used the interface defined in <a href="#Persistent.Data_Bank">Persistent.Data_Bank</a>.
That is used to derive a concrete implementation of persistent storage object,
that will override the remaining abstract operations.</p>

<H4><a name="2.9.2"></a>2.9.2. Storages with keys</H4>

<p><a name="Persistent.Data_Bank"></a><a name="Persistent.Data_Bank.Data_Bank_Object"></a>The
package <a href="#Persistent.Data_Bank">Persistent.Data_Bank</a> defines
abstract interface of the storage objects which identify stored objects using a
key. It derives the abstract base type <a href="#Persistent.Data_Bank.Data_Bank_Object">Data_Bank_Object</a>
from <a href="#Storage_Object">Storage_Object</a>:</p>

<blockquote>
  <p><tt><font color="#0000FF">type </font> Data_Bank_Object<font color="#0000FF"> is abstract<br>
  &nbsp;&nbsp; new </font> Storage_Object<font color="#0000FF"> with private</font>;</tt></p>

</blockquote>
<p><a name="Persistent.Data_Bank.Persistent_Key"></a>The keys are provided by
implementations by deriving from the abstract base type <a href="#Persistent.Data_Bank.Persistent_Key">Persistent_Key</a>:</p>

<blockquote>
  <p><tt><font color="#0000FF">type</font> Persistent_Key <font color="#0000FF"> is abstract<br>
  &nbsp;&nbsp; new</font> Ada.Finalization.Controlled <font color="#0000FF"> with null
  record</font>;<br>
  <font color="#0000FF">   type</font> Persistent_Key_Ptr <font color="#0000FF"> is access</font>
  Persistent_Key'Class;</tt></p>

</blockquote>
<p><a name="Persistent.Data_Bank.Persistent_Key_Array"></a>The arrays of keys are to 
be implemented by deriving from the abstract base type
<a href="#Persistent.Data_Bank.Persistent_Key_Array">Persistent_Key_Array</a>:</p>

<blockquote>
  <p><tt><font color="#0000FF">type</font> Persistent_Key_Array
	<font color="#0000FF">is abstract<br>
&nbsp;&nbsp; new</font> Ada.Finalization.Limited_Controlled
	<font color="#0000FF">with null record</font>;</tt></p>

</blockquote>
<p><a name="Persistent.Data_Bank.Access_Mutex"></a>In order to support data base
transactions a special access policy is imposed on <a href="#Storage_Object">Storage_Object</a>s.
The type <a href="#Persistent.Data_Bank.Access_Mutex">Access_Mutex</a> is used
to represent transactions:</p>

<blockquote>
  <p><tt><font color="#0000FF">type </font> Access_Mutex (Storage : <font color="#0000FF"> access</font>
  Data_Bank_Object'Class)<font color="#0000FF"> is<br>
  &nbsp;&nbsp; abstract new </font> Ada.Finalization.Limited_Controlled<font color="#0000FF"> with
  private</font>;</tt></p>

</blockquote>
<p>This type is used as the  base  for  storage  specific  objects  that represent  atomic actions on storage, such as data base transactions.
Two concrete types are  derived  from  it.  Read_Mutex  is  used  for
viewing storage content without modification. Write_Mutex is used for full access.</p>

<blockquote>
  <p><tt><font color="#0000FF">   type </font>Read_Mutex <font color="#0000FF"> is new
  </font> Access_Mutex <font color="#0000FF"> with private</font>;<br>
  <font color="#0000FF">   type </font>Write_Mutex <font color="#0000FF"> is new</font> Access_Mutex
  <font color="#0000FF"> with private</font>;</tt></p>

</blockquote>
<p>An operation that requires access to <a href="#Storage_Object">Storage_Object</a>
that might require data base communication should do it as follows:</p>

<blockquote>
  <p><tt><font color="#0000FF">declare<br>
  &nbsp;&nbsp; </font>Transaction : Write_Mutex (DB'<font color="#0000FF">Access</font>);<font color="#0000FF"><br>
  begin<br>
  &nbsp;</font><i><font color="#008000">&nbsp; -- Do something with DB</font></i><font color="#0000FF"><br>
  &nbsp;&nbsp; </font>Commit (Transaction);<font color="#0000FF"><br>
  end</font>;</tt></p>

</blockquote>
<p>When <a href="#Persistent.Data_Bank.Commit_mutex"> Commit</a> is not called on
Transaction, because of exception  propagation for instance, then <a href="#Persistent.Data_Bank.Roll_Back"> Roll_Back</a>
will be in the course of Transaction finalization.</p>

<blockquote>
  <p><tt><font color="#0000FF">   type </font>Sharing_Type<font color="#0000FF"> 
	is</font> (Fully, Read_Only, Read_Write);</tt></p>

</blockquote>
<p>
<u><b>Operations defined on mutexes</b></u>:</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Data_Bank.Commit_mutex"></a>procedure</font> Commit
  (<b>Mutex</b> : <font color="#0000FF"> in out</font>  Access_Mutex);</tt></p>

</blockquote>
<p>This procedure is basically one call:</p>

<blockquote>
<p><tt><a href="#Persistent.Data_Bank.Commit_storage"></a>Commit
(<b>Mutex</b>.Storage.<font color="#0000FF">all</font>);</tt> </p>

</blockquote>
<p> <a href="#Persistent.Data_Bank.Commit_mutex"> Commit</a>
can be called only once. Multiple commits cause Use_Error propagation. Any other
exception indicates a data base error.</p>

<blockquote>
  <p><tt><font color="#0000FF">procedure</font> Finalize (<b>Mutex</b> : <font color="#0000FF"> in out</font>
  Access_Mutex);</tt></p>

</blockquote>
<p>The destructor calls <a href="#Persistent.Data_Bank.Roll_Back"> Roll_Back</a>
if no <a href="#Persistent.Data_Bank.Commit_mutex"> Commit</a> was called before.
This ensures data base consistency upon transaction errors.</p>

<p>
<u>
<b>Operations defined on keys</b></u>. Normally an implementation of a
persistent storage would provide a derived key type. That should override the
following abstract operations:</p>

<blockquote>
  <p><tt><font color="#0000FF">function</font> Image<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> :
  Data_Bank_Object'Class;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;
  : Persistent_Key<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> String
  <font color="#0000FF"> is abstract</font>;</tt></p>

</blockquote>
<p>This function returns a string unambiguously identifying <b>Key</b> in <b>Storage</b>.
Constraint_Error is propagated when <b>Key</b> cannot be used for <b>Storage</b>.</p>

<blockquote>
  <p><tt>
	<font color="#0000FF"><a name="Persistent.Data_Bank.Null_Key"></a>function</font> Null_Key <font color="#0000FF"> return</font> Persistent_Key
  <font color="#0000FF"> is abstract</font>;</tt></p>

</blockquote>
<p>This function returns a value that serves as an illegal key which can never
indicate an object.</p>

<blockquote>
  <p><tt><font color="#0000FF">function</font> Value<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> :
  Data_Bank_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;
  : String<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> Persistent_Key'Class
  <font color="#0000FF">is abstract</font>;</tt></p>

</blockquote>
<p>This function converts string to a key. Data_Error is propagated when <b>Key</b>
does not identify a valid key for <b>Storage</b>. The implementation should not
check for any objects existing under the key.</p>

<blockquote>
  <p><tt><font color="#0000FF">function</font> "<font color="#FF0000">&lt;</font>"
  (<b>Left</b>, <b> Right</b> : Persistent_Key)<br>
  &nbsp;&nbsp; <font color="#0000FF">return</font> Boolean <font color="#0000FF"> is
  abstract</font>;<br>
  <font color="#0000FF">   function</font> &quot;<font color="#FF0000">=</font>&quot;
  (<b>Left</b>, <b> Right</b> : Persistent_Key)<br>
  &nbsp;&nbsp; <font color="#0000FF">return</font> Boolean <font color="#0000FF"> is
  abstract</font>;</tt></p>

</blockquote>
<p>Persistent keys are comparable to provide ordered containers.</p>

<p>
<u>
<b>Operations defined on arrays of keys</b></u>. The following abstract operations 
shall be overridden by an implementation:</p>

<blockquote>
  <p><tt><font color="#0000FF">function</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Container</b> : 
	Persistent_Key_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Integer<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
	Persistent_Key'Class <font color="#0000FF">is abstract</font>;</tt></p>

</blockquote>
<p>This function returns a key by its index. Contraint_Error is propagated when 
index is wrong.</p>

<blockquote>
  <p><tt><font color="#0000FF">procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
	: <font color="#0000FF">in out</font> Persistent_Key_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Index</b>&nbsp;&nbsp;&nbsp;&nbsp; : Integer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Persistent_Key'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
	<font color="#0000FF">is abstract</font>;</tt></p>

</blockquote>
<p>This procedure places <b>Key</b> at the position in the array <b>Container</b> 
specified by <b>Index</b>. The array is expanded as necessary. When an 
implementation chooses a dense representation of the array it is allowed to fill 
unspecified array elements with <a href="#Persistent.Data_Bank.Null_Key">Null_Key</a>, 
which can be returned by Get without raising Constraint_Error.</p>

<p><u>
<b>Operations defined to handle transactions</b></u>. <a href="#Persistent.Data_Bank.Data_Bank_Object">Data_Bank_Object</a>
declares abstract operations on persistent storage supporting transaction
framework:</p>

<blockquote>
  <p><tt><font color="#0000FF">function</font> Get_Access_Mode (<b>Storage</b> : 
	Data_Bank_Object)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Sharing_Type
	<font color="#0000FF"> is abstract</font>;</tt></p>

</blockquote>
<p>This function returns present sharing mode to <b>Storage</b>.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Data_Bank.Commit_storage"></a>procedure
  </font> Commit (<b>Storage</b> : <font color="#0000FF"> in out</font>
  Data_Bank_Object) <font color="#0000FF"> is abstract</font>;</tt></p>

</blockquote>
<p>This  abstract procedure is called at the end of each transaction: an atomic modification of the persistent storage.  There  should  be  no difference between
<a href="#Persistent.Data_Bank.Roll_Back"> Roll_Back</a>  and
<a href="#Persistent.Data_Bank.Commit_storage">  Commit</a>  if  the  transaction  was initiated  by
Seize_Read. Normally,
<a href="#Persistent.Data_Bank.Commit_storage">  Commit</a> is never called directly, but only through
<a href="#Persistent.Data_Bank.Commit_mutex"> Commit</a> of a mutex object.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Data_Error</TD>
    <TD>Data base error</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD> No transaction active</TD>
  </TR>
</TABLE>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Data_Bank.Roll_Back"></a>procedure
  </font> Roll_Back (<b>Storage</b> : <font color="#0000FF"> in out </font> Data_Bank_Object)
  <font color="#0000FF"> is abstract</font>;</tt></p>

</blockquote>
<p> This procedure  is  called  when  a  transaction  fails,  due  to  an exception.  It  is  always  called  from  an  exception handler which
re-raises  the exception. For this reason it is not recommended to raise any
exceptions in <a href="#Persistent.Data_Bank.Roll_Back"> Roll_Back</a>. There is no difference between <a href="#Persistent.Data_Bank.Roll_Back"> Roll_Back</a> and
<a href="#Persistent.Data_Bank.Commit_storage">  Commit</a> if the transaction was initiated by
<a href="#Persistent.Data_Bank.Seize_Read"> Seize_Read</a>. For&nbsp;a
transaction initiated by <a href="#Persistent.Data_Bank.Seize_Write">Seize_Write</a>
an implementation should discard any changes made.</p>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Data_Bank.Seize_Read"></a>procedure
  </font> Seize_Read<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp;  Storage : <font color="#0000FF"> in out
  </font> Data_Bank_Object<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;             )&nbsp; <font color="#0000FF">  is
  abstract</font>;</tt></p>

</blockquote>
<p>This procedure is called  to  initiate  a read-only transaction with <b>Storage</b>. Only one transaction can be active at a time.
The  transaction   is finished by either a call to <a href="#Persistent.Data_Bank.Commit_storage">  Commit</a>
or to <a href="#Persistent.Data_Bank.Roll_Back"> Roll_Back</a>. For a read-only
transaction there should be no sufficient difference between <a href="#Persistent.Data_Bank.Commit_storage">  Commit</a>
and <a href="#Persistent.Data_Bank.Roll_Back"> Roll_Back</a>.&nbsp;</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Data_Error</TD>
    <TD>Data base error</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD> A transaction is already active (optional)</TD>
  </TR>
</TABLE>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Data_Bank.Seize_Write"></a>procedure
  </font> Seize_Write<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;             (&nbsp;  Storage :
  <font color="#0000FF"> in out </font> Data_Bank_Object<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;             )&nbsp; <font color="#0000FF">  is
  abstract</font>;</tt></p>

</blockquote>
<p>This procedure is  called  to  initiate  a read/write  transaction with <b>Storage</b>. Only one transaction can be active at a time.  The  transaction   is finished by either a call to
<a href="#Persistent.Data_Bank.Commit_storage">  Commit</a> or to <a href="#Persistent.Data_Bank.Roll_Back"> Roll_Back</a>.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Data_Error</TD>
    <TD>Data base error</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD> A transaction is already active (optional)</TD>
  </TR>
</TABLE>

<p><u>
<b>Operations defined in terms of keys</b></u>. It is recommended to check
active transaction in implementations of abstract operations and to raise
Use_Error. Though it is not mandatory. Carefully observe that object key is a
class-wide parameter. An implementation would usually check if the key's
specific type is one supported by the data base. If it is not then End_Error
should be used to indicate an absent object, except when otherwise is explicitly
specified.</p>
<p>The following operations should be implemented:</p>

<blockquote>
  <p><tt><font color="#0000FF">   <a name="Persistent.Data_Bank.Delete"></a>procedure</font> Delete<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>  Storage</b> :
  <font color="#0000FF"> in out</font>  Data_Bank_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>                Key</b>&nbsp;&nbsp;&nbsp;&nbsp;     : Persistent_Key'Class<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;             )&nbsp; <font color="#0000FF">  is
  abstract</font>;</tt></p>

</blockquote>
<p>This procedure deletes an object by its key. An  implementation may proceed from the assumption that all dependent objects  are already deleted and no object refers to the deleted one.
It can
be  called  only  within  a  transaction  following  a  call <a href="#Persistent.Data_Bank.Seize_Write">Seize_Write</a>.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Data_Error</TD>
    <TD>Data base error</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD> No write transaction active (optional)</TD>
  </TR>
</TABLE>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Data_Bank.Find"></a>function </font> Find<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> : <font color="#0000FF"> access
  </font> Data_Bank_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;
  : Wide_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Parent</b>&nbsp; 
	: Persistent_Key'Class<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> Persistent_Key'Class
  <font color="#0000FF"> is abstract</font>;</tt></p>

</blockquote>
<p>This procedure is used to determine  the  object's  key  by  the object's name 
and the key of its immediate parent.  It  is  allowed  only within a transaction initiated either by
<a href="#Persistent.Data_Bank.Seize_Read"> Seize_Read</a> or <a href="#Persistent.Data_Bank.Seize_Write">Seize_Write</a>.&nbsp;The 
result is <a href="#Persistent.Data_Bank.Null_Key">Null_Key</a> when the object 
does not exist.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Data_Error</TD>
    <TD>Data base error</TD>
  </TR>
  <TR>
    <TD>  End_Error</TD>
    <TD>No such table (optional)</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD> No transaction active (optional)</TD>
  </TR>
</TABLE>

<blockquote>
  <p><tt><font color="#0000FF">function </font> Get<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> : <font color="#0000FF"> access</font>
  Data_Bank_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;
  : Persistent_Key'Class<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> Deposit_Handle
  <font color="#0000FF"> is abstract</font>;</tt></p>

</blockquote>
<p>This   procedure   restores  a  persistent  object  by  its  key.  An implementation  shall  check  if  the object for the specified key is already memory-resident.
It is  allowed  to  call  only  within  a transaction  initiated  either  by <a href="#Persistent.Data_Bank.Seize_Read"> Seize_Read</a> or
<a href="#Persistent.Data_Bank.Seize_Write">Seize_Write</a>.&nbsp;</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Data_Error</TD>
    <TD>Data base error</TD>
  </TR>
  <TR>
    <TD>  End_Error</TD>
    <TD>No such object</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD> No transaction active (optional)</TD>
  </TR>
</TABLE>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Data_Bank.Get_Children"></a>procedure</font> 
	Get_Children<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b>&nbsp; 
	: <font color="#0000FF">in out</font> Data_Bank_Object;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Persistent_Key'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Children</b> : <font color="#0000FF">in out</font> 
	Persistent_Key_Array'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Pointer</b>&nbsp; : <font color="#0000FF">in out</font> Integer<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is
  abstract</font>;</tt></p>

</blockquote>
<p>Implementation adds the keys of the immediate children of the object 
specified by <b>Key</b> into the array <b>Children</b>. The first item is placed 
at <b>Pointer</b>. Then <b>Pointer</b> is advanced.
<a href="#Persistent.Data_Bank.Get_Children">Get_Children</a> is allowed to call 
only within a transaction initiated either by <a href="#Persistent.Data_Bank.Seize_Read">Seize_Read</a> 
or
<a href="#Persistent.Data_Bank.Seize_Write">Seize_Write</a>. An implementation 
need not to check that, but if it does then Use_Error should indicate failed 
check.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Data_Error</TD>
    <TD>Data base error</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD> No transaction active (optional)</TD>
  </TR>
</TABLE>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Data_Bank.Get_Class"></a>
	function</font> Get_Class<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b>&nbsp;&nbsp;&nbsp;
  : <font color="#0000FF"> in out</font>  Data_Bank_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  : Persistent_Key'Class;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return </font>String <font color="#0000FF">is
  abstract</font>;</tt></p>

</blockquote>
<p>Implementation returns the object's  class. The function is allowed only within a  transaction  initiated  either  by <a href="#Persistent.Data_Bank.Seize_Read">Seize_Read</a> or
<a href="#Persistent.Data_Bank.Seize_Write">Seize_Write</a>.&nbsp;</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Data_Error</TD>
    <TD>Data base error</TD>
  </TR>
  <TR>
    <TD>  End_Error</TD>
    <TD>No such object</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD> No transaction active (optional)</TD>
  </TR>
</TABLE>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Data_Bank.Get_Creation_Time"></a>
	function</font> Get_Creation_Time<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b>&nbsp;&nbsp;&nbsp;
  : <font color="#0000FF"> in out</font>  Data_Bank_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  : Persistent_Key'Class;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return </font>Time <font color="#0000FF">is
  abstract</font>;</tt></p>

</blockquote>
<p>Implementation returns the object's  creation time. The function is allowed only within a  transaction  initiated  either  by <a href="#Persistent.Data_Bank.Seize_Read">Seize_Read</a> or
<a href="#Persistent.Data_Bank.Seize_Write">Seize_Write</a>.&nbsp;</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Data_Error</TD>
    <TD>Data base error</TD>
  </TR>
  <TR>
    <TD>  End_Error</TD>
    <TD>No such object</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD> No transaction active (optional)</TD>
  </TR>
</TABLE>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Data_Bank.Get_Data"></a>procedure</font> Get_Data<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b>&nbsp;&nbsp;&nbsp;
  : <font color="#0000FF"> in out</font>  Data_Bank_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  : Persistent_Key'Class;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Class</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  : <font color="#0000FF"> out</font>  Unbounded_String;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  : <font color="#0000FF"> out</font>  Unbounded_String;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Parameters</b> :
  <font color="#0000FF"> out</font> Unbounded_String<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is
  abstract</font>;</tt></p>

</blockquote>
<p>Implementation returns the object's  description  stored  in <b>  Storage</b> under
<b> Key</b>. The description is used to restore the object. The  output  parameters  are the object's class and data as they were
generated by <a href="#Object.Archived.Store"> Object.Archived.Store</a> and  internally  used
<b>Parameters</b>, which  describe  the  dependency  list  of the object being restored.
The procedure is allowed only within a  transaction  initiated  either  by <a href="#Persistent.Data_Bank.Seize_Read">Seize_Read</a> or
<a href="#Persistent.Data_Bank.Seize_Write">Seize_Write</a>.&nbsp;</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Data_Error</TD>
    <TD>Data base error</TD>
  </TR>
  <TR>
    <TD>  End_Error</TD>
    <TD>No such object</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD> No transaction active (optional)</TD>
  </TR>
</TABLE>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Data_Bank.Get_Dependant"></a>function</font> Get_Dependant<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> : <font color="#0000FF"> access</font> 
  Data_Bank_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;
  : Persistent_Key'Class;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>No</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  : Positive<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> Persistent_Key'Class
  <font color="#0000FF"> is abstract</font>;</tt></p>

</blockquote>
<p>This  function  is used to enumerate objects having backward links to the  object  specified  by
<b>Key</b>. That are ones which have specified the object in the list of backward links (the parameter Backward_Links of
<a href="#Persistent.Data_Bank.Store"> Store</a> and <a href="#Persistent.Data_Bank.Update">Update</a>). All dependants are
enumerated starting from 1. The parameter <b>  No</b>  specifies  the  number  of  a  dependant  to  get.  An implementation  is  allowed  to use a cache, so the caller should not undertake any actions which may lead to updating the dependency  list of the object.
The function is allowed only within a  transaction  initiated  either  by <a href="#Persistent.Data_Bank.Seize_Read">Seize_Read</a> or
<a href="#Persistent.Data_Bank.Seize_Write">Seize_Write</a>.&nbsp;</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Data_Error</TD>
    <TD>Data base error</TD>
  </TR>
  <TR>
    <TD>  End_Error</TD>
    <TD>No dependant found, end of list, no such object</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD> No transaction active (optional)</TD>
  </TR>
</TABLE>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Data_Bank.Get_Name"></a>function</font> Get_Name<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> : <font color="#0000FF"> access</font> 
  Data_Bank_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;
  : Persistent_Key'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Parent</b>&nbsp; 
	: <font color="#0000FF">access</font> Persistent_Key'Class<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> String
  <font color="#0000FF">is abstract</font>;</tt></p>

</blockquote>
<p>Implementation returns the object's name stored in <b> Storage</b> under <b>Key</b>.
The result is UTF-8 encoded. When the object has a parent, then the 
implementation sets <b>Parent</b> to the key of. Otherwise it sets <a href="#Persistent.Data_Bank.Null_Key">Null_Key</a> 
there. The function is allowed only within a  transaction  initiated  either  by  either  by <a href="#Persistent.Data_Bank.Seize_Read"> Seize_Read</a> or
<a href="#Persistent.Data_Bank.Seize_Write">Seize_Write</a>.&nbsp;</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Constraint_Error</TD>
    <TD>The type of <b>Parent</b> does not match one of the object's parent</TD>
  </TR>
  <TR>
    <TD>  Data_Error</TD>
    <TD>Data base error</TD>
  </TR>
  <TR>
    <TD>  End_Error</TD>
    <TD>No such object</TD>
  </TR>
  <TR>
    <TD>  Name_Error</TD>
    <TD>Anonymous object</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD> No transaction active (optional)</TD>
  </TR>
</TABLE>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Data_Bank.Get_References"></a>procedure</font> 
	Get_References<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b>&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">in out</font> Data_Bank_Object;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 
	: Persistent_Key'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	References</b> : <font color="#0000FF">in out</font> 
	Persistent_Key_Array'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Pointer</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> Integer<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is
  abstract</font>;</tt></p>

</blockquote>
<p>Implementation adds the keys of the immediate the objects referenced by the 
object 
specified by <b>Key</b> into the array <b>References</b>. The first item is placed 
at <b>Pointer</b>. Then <b>Pointer</b> is advanced.
An implementation need not to go after the references of the references. The 
procedure <a href="#Persistent.Data_Bank.Get_References">Get_References</a> is allowed to call 
only within a transaction initiated either by <a href="#Persistent.Data_Bank.Seize_Read">Seize_Read</a> 
or
<a href="#Persistent.Data_Bank.Seize_Write">Seize_Write</a>. An implementation 
need not to check that, but if it does then Use_Error should indicate failed 
check.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Data_Error</TD>
    <TD>Data base error</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD> No transaction active (optional)</TD>
  </TR>
</TABLE>

<blockquote>
  <p><tt><font color="#0000FF">   <a name="Persistent.Data_Bank.Has_Dependants"></a>function</font> Has_Dependants<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b>&nbsp;&nbsp; : <font color="#0000FF"> access</font> 
  Data_Bank_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Persistent_Key'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>All_Links</b> 
	: Boolean<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> Boolean
  <font color="#0000FF"> is abstract</font>;</tt></p>

</blockquote>
<p> An  anonymous  object  that has no dependants can be deleted, but not before its
memory-resident counterpart disappears. It counts only direct links to the 
object when <b>All_Links</b> is <font color="#800000"><i>false</i></font>. 
Otherwise it counts all links, direct and backward. When key does not specify  any  object,  the result is
<font color="#800000"><i>false</i></font>. This function is allowed only within a  transaction  initiated  either  by  either  by
<a href="#Persistent.Data_Bank.Seize_Read"> Seize_Read</a> or <a href="#Persistent.Data_Bank.Seize_Write">Seize_Write</a>.&nbsp;</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Data_Error</TD>
    <TD>Data base error</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD> No transaction active (optional)</TD>
  </TR>
</TABLE>

<blockquote>
  <p><tt><font color="#0000FF">   <a name="Persistent.Data_Bank.Is_In"></a>function</font> Is_In<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> : <font color="#0000FF"> access</font> 
  Data_Bank_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;
  : Persistent_Key'Class<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> Boolean
  <font color="#0000FF"> is abstract</font>;</tt></p>

</blockquote>
<p>This  function  checks  whether <b>  Key</b>  specify an object persistent in
<b>Storage</b>. It is allowed only within a  transaction  initiated  either  by  either  by
<a href="#Persistent.Data_Bank.Seize_Read"> Seize_Read</a> or <a href="#Persistent.Data_Bank.Seize_Write">Seize_Write</a>.&nbsp;</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Data_Error</TD>
    <TD>Data base error</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD> No transaction active (optional)</TD>
  </TR>
</TABLE>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Data_Bank.Put"></a>procedure</font> Put<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> :
  <font color="#0000FF"> in out</font>  Data_Bank_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;
  : Persistent_Key'Class;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Object</b>&nbsp;
  : Deposit'Class<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is
  abstract</font>;</tt></p>

</blockquote>
<p>This  procedure  updates  a  persistent object by its key. Usually it calls <a href="#Persistent.Data_Bank.Update">Update</a>
for  this  purpose.  It  is within a  transaction  initiated by <a href="#Persistent.Data_Bank.Seize_Write">Seize_Write</a>.&nbsp;</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Data_Error</TD>
    <TD>Data base error</TD>
  </TR>
  <TR>
    <TD>  End_Error</TD>
    <TD><b>Key</b> does not identify an object</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD> No write transaction active (optional)</TD>
  </TR>
</TABLE>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Data_Bank.Rename"></a>procedure</font> Rename<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> :
  <font color="#0000FF"> in out</font>  Data_Bank_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;
  : Persistent_Key'Class;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;
  : Wide_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Parent</b>&nbsp; : Persistent_Key'Class <br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is
  abstract</font>;</tt></p>

</blockquote>
<p> This procedure changes the name of the object  specified  by <b>  Key</b>  to
<b>Name</b>. The object's parent is specified by the parameter <b>Parent</b>. It 
is specified as <a href="#Persistent.Data_Bank.Null_Key">Null_Key</a> for a 
root-level object. When the renamed object was anonymous before renaming it becomes  a named  one.  I.e.  it  will  not  deleted  when  no  more  in use. An
implementation  can  proceed  from the assumption that the caller has already  checked for illegal and conflicting names.
This procedure is allowed only within a transaction initiated  by <a href="#Persistent.Data_Bank.Seize_Write">Seize_Write</a>.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Data_Error</TD>
    <TD>Data base error</TD>
  </TR>
  <TR>
    <TD>  End_Error</TD>
    <TD><b>Key</b> does not identify an object (optional)</TD>
  </TR>
  <TR>
    <TD>  Name_Error</TD>
    <TD>Name conflict, there is another object named so (optional)</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD> No write transaction active (optional)</TD>
  </TR>
</TABLE>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Data_Bank.Store"></a>function</font>
  Store<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  : <font color="#0000FF"> access</font>  Data_Bank_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Parent</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Persistent_Key'Class;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Class</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  : String;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  : String;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Parameters</b>&nbsp;&nbsp;&nbsp;&nbsp;
  : String;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Direct_Links</b>&nbsp;&nbsp;
  : Deposit_Set;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Backward_Links</b> : Deposit_Set<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> Persistent_Key'Class
  <font color="#0000FF"> is abstract</font>;<br>
  <font color="#0000FF">   function</font> Store<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  : <font color="#0000FF"> access</font>  Data_Bank_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Class</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  : String;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  : String;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Parameters</b>&nbsp;&nbsp;&nbsp;&nbsp;
  : String;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Direct_Links</b>&nbsp;&nbsp;
  : Deposit_Set;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Backward_Links</b> : Deposit_Set<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> Persistent_Key'Class
  <font color="#0000FF"> is abstract</font>;</tt></p>

</blockquote>
<p>These functions are used to write a persistent object. They are called internally. The parameters
<b> Name</b> and <b>Parent</b> specify the name of  the  object  in the storage 
and its parent. The name should be an unique UTF-8 encoded name. When not  specified,  the object  is  anonymous.  The  parameter
<b>  Data</b> contains   a   string unambiguously describing the object of the  class  specified  by  the parameter
<b>Class</b>. It is normally obtained using <a href="#Object.Archived.Store">Object.Archived.Store</a>.
<b>Parameters</b>   is  used  to  store  additional information   about   links.   The   parameters
<b>   Direct_Links</b>    and <b> Backward_Links</b>  define  the <a href="#Object.Archived.Sets">  set  of  objects</a>  in
<b>  Storage</b> the object depends on. Objects mentioned in the  set <b>  Backward_Links</b>  are  those which can be deleted without deletion of the object itself. The union of
<b>  Direct_Links</b>  and <b>  Backward_Links</b> specifies only directly visible dependencies, it is nCocsure. An implementation  usually  stores
<b> Class</b> and <b>  Data</b>  under  the  name <b>  Name</b>  and  corrects  a  persistent dependency table according to
<b>Direct_Links</b> and <b> Backward_Links</b>. Note that initially written object is not referenced.
<a href="#Persistent.Data_Bank.Store"> Store</a> is allowed only within a  transaction
by <a href="#Persistent.Data_Bank.Seize_Write">Seize_Write</a>.&nbsp;</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Data_Error</TD>
    <TD>Data base error</TD>
  </TR>
  <TR>
    <TD>  End_Error</TD>
    <TD>No such object</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD> No write transaction active (optional)</TD>
  </TR>
</TABLE>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Data_Bank.Unname"></a>procedure</font> Unname<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> :
  <font color="#0000FF"> in out</font>  Data_Bank_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;
  : Persistent_Key'Class<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is
  abstract</font>;</tt></p>

</blockquote>
<p>This procedure makes the  object  specified  by <b>  Key</b>  anonymous.  The object object should be automatically deleted when no  more  in  use, but  not  before  it   has   a
memory-resident   counterpart.   An implementation can  proceed  from  the  assumption  that  the  caller already checked for object existence.
The procedure is allowed only within a  transaction  by <a href="#Persistent.Data_Bank.Seize_Write">Seize_Write</a>.&nbsp;</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Data_Error</TD>
    <TD>Data base error</TD>
  </TR>
  <TR>
    <TD>  End_Error</TD>
    <TD>No such object (optional)</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD> No write transaction active (optional)</TD>
  </TR>
</TABLE>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Data_Bank.Update"></a>procedure</font> Update<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  : <font color="#0000FF"> in out</font>  Data_Bank_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  : Persistent_Key'Class;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Class</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  : String;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  : String;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Parameters</b>&nbsp;&nbsp;&nbsp;&nbsp;
  : String;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Direct_Links</b>&nbsp;&nbsp;
  : Deposit_Set;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Backward_Links</b> : Deposit_Set<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is
  abstract</font>;</tt></p>

</blockquote>
<p>This  procedure is used to update a modified persistent object. It is called   internally.   The   parameter
<b>   Data</b> contains   a  string unambiguously describing the object of the  class  specified  by  the
parameter <b>Class</b>. <b> Parameters</b> is used internally  to  store  additional information about links. It is normally obtained using
<a href="#Object.Archived.Store">Object.Archived.Store</a>.  The  parameters <b>  Direct_Links</b>  and
<b> Backward_Links</b> are  same  as  in <a href="#Persistent.Data_Bank.Store"> Store</a>.
An  implementation would normally update <b> Class</b> and <b> Data</b> in the
object's record and correct  persistent  dependency  table. <a href="#Persistent.Data_Bank.Update">Update</a>
is allowed only within a  transaction  by <a href="#Persistent.Data_Bank.Seize_Write">Seize_Write</a>.&nbsp;</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Data_Error</TD>
    <TD>Data base error</TD>
  </TR>
  <TR>
    <TD>  End_Error</TD>
    <TD>No such object (optional)</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD> No write transaction active (optional)</TD>
  </TR>
</TABLE>

<H4><a name="2.9.3"></a>2.9.3. Storage index</H4>

<p><a name="Persistent.Data_Bank.Index"></a>The child generic package <a href="#Persistent.Data_Bank.Index">Persistent.Data_Bank.Index</a>
implements an index of persistent objects:</p>

<blockquote>
  <p><tt><font color="#0000FF">generic</font><br>
  &nbsp;&nbsp; <font color="#0000FF">type</font> Data_Bank <font color="#0000FF"> is abstract new
  </font> Data_Bank_Object
  <font color="#0000FF"> with private</font>;<br>
  &nbsp;&nbsp; <font color="#0000FF">type</font> Key <font color="#0000FF"> is new</font> Persistent_Key
  <font color="#0000FF"> with private</font>;<br>
  <font color="#0000FF">package</font> Persistent.Data_Bank.Index i<font color="#0000FF">s<br>
  &nbsp;&nbsp; type </font> Catalogue (Storage : <font color="#0000FF"> access</font> 
  Data_Bank'Class)
  <font color="#0000FF"> is<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new </font> Ada.Finalization.Limited_Controlled
  <font color="#0000FF"> with private</font>;<br>
  &nbsp;&nbsp; <font color="#0000FF">type</font> Catalogue_Ptr <font color="#0000FF"> is access all</font> Catalogue;<br>
  &nbsp;&nbsp; ...</tt></p>

</blockquote>

<p>Persistent objects having memory-resident counterparts are said to be bound.
For each bound object the storage index of the Catalogue type contains a record.
When an object is requested from the persistent storage it is first searched in
the index. The index also contains information about object's keys and names.
Additionally the index registers a notification object to catch bound objects
destruction. Upon destruction of a bound object index checks if the object was
anonymous and no more referenced in the persistent storage, if so the object is
deleted from the storage. If the memory-resident object was modified it is
synchronized with the storage.</p>

<p>The package has two generic parameters:</p>

<ul>
  <li>Data_Bank is a descendant of <a href="#Persistent.Data_Bank.Data_Bank_Object">Data_Bank_Object</a>
    for which index should be used;</li>
  <li>Key is a descendant of <a href="#Persistent.Data_Bank.Persistent_Key">Persistent_Key</a>,
    a concrete type of keys used with <a href="#Persistent.Data_Bank.Data_Bank_Object">Data_Bank_Object</a>.</li>
</ul>

<H4><a name="2.9.4"></a>2.9.4. Indexed storage</H4>

<p><a name="Persistent.Data_Bank.Indexed"></a>The child generic
package <a href="#Persistent.Data_Bank.Indexed">Persistent.Data_Bank.Indexed</a>
implements persistent storage  interface  using  the  operations  defined in <a href="#Persistent.Data_Bank">Persistent.Data_Bank</a>:</p>

<blockquote>
  <p><tt><font color="#0000FF">generic</font><br>
  &nbsp;&nbsp; <font color="#0000FF">type</font> Data_Bank <font color="#0000FF"> is abstract new</font> Data_Bank_Object
  <font color="#0000FF"> with private</font>;<br>
  &nbsp;&nbsp; <font color="#0000FF">type</font> Key <font color="#0000FF"> is new</font> Persistent_Key
  <font color="#0000FF"> with private</font>;<br>
  <font color="#0000FF">package</font> Persistent.Data_Bank.Indexed <font color="#0000FF"> is</font>
  ...</tt></p>

</blockquote>

<p>The generic parameters:</p>

<ul>
  <li>Data_Bank is a descendant of <a href="#Persistent.Data_Bank.Data_Bank_Object">Data_Bank_Object</a>.
    It can be <a href="#Persistent.Data_Bank.Data_Bank_Object">Data_Bank_Object</a>
    itself;</li>
  <li>Key is a descendant of <a href="#Persistent.Data_Bank.Persistent_Key">Persistent_Key</a>,
    a concrete type of keys used with <a href="#Persistent.Data_Bank.Data_Bank_Object">Data_Bank_Object</a>.</li>
</ul>

<p><a name="Persistent.Data_Bank.Indexed.Indexed_Storage_Object"></a>The package
provides the abstract type <a href="#Persistent.Data_Bank.Indexed.Indexed_Storage_Object">  Indexed_Storage_Object</a>
which can  be used as the base type for a concrete  implementation  of  a  data  base
interface:</p>

<blockquote>
  <p><tt><font color="#0000FF">type</font> Indexed_Storage_Object <font color="#0000FF"> is abstract new</font> Data_Bank
  <font color="#0000FF"> with private</font>;</tt></p>

</blockquote>

<p>The derived type shall  implement the following remaining operations:</p>

<ul>
  <li><a href="#Persistent.Data_Bank.Commit_storage">Commit</a> to confirm a
    transaction with data base;</li>
  <li><a href="#Persistent.Data_Bank.Delete">Delete</a> to delete an object by key;</li>
  <li><a href="#Persistent.Data_Bank.Find">Find</a> to find an object by name;</li>
	<li><a href="#Persistent.Data_Bank.Get_Children">Get_Children</a> to get 
	object's immediate children;</li>
	<li><a href="#Persistent.Data_Bank.Get_Class">Get_Class</a> to get the 
	object's class;</li>
	<li><a href="#Persistent.Data_Bank.Get_Creation_Time">Get_Creation_Time</a> to get the 
	object's creation time;</li>
  <li><a href="#Persistent.Data_Bank.Get_Data">Get_Data</a> to get object's description string;</li>
  <li><a href="#Persistent.Data_Bank.Get_Dependant">Get_Dependant</a> to enumerate dependants with backward links;</li>
  <li><a href="#Persistent.Get_List">Get_List</a> to get the list of all persistent objects;</li>
	<li><a href="#Persistent.Data_Bank.Get_Name">Get_Name</a> to get the object's name and parent;</li>
	<li><a href="#Persistent.Data_Bank.Get_References">Get_References</a> to get 
	the objects immediately referenced by an object;</li>
  <li><a href="#Persistent.Data_Bank.Has_Dependants">Has_Dependants</a> to check if an object can be deleted;</li>
  <li><a href="#Persistent.Data_Bank.Is_In">Is_In</a> to check if the object in the storage, by key;</li>
	<li><a href="#Persistent.Data_Bank.Put">Put</a> to store an object by key;</li>
  <li><a href="#Persistent.Data_Bank.Rename">Rename</a> to set or change the object name;</li>
  <li><a href="#Persistent.Data_Bank.Roll_Back">Roll_Back</a> to discard changes
    made by a transaction;</li>
  <li><a href="#Persistent.Data_Bank.Seize_Read">Seize_Read</a> to initiate a
    read-only transaction;</li>
  <li><a href="#Persistent.Data_Bank.Seize_Write">Seize_Write</a> to initiate a
    read/write transaction;</li>
  <li><a href="#Persistent.Data_Bank.Store">Store</a> to create a new persistent object;</li>
  <li><a href="#Persistent.Data_Bank.Unname">Unname</a> to remove object's name;</li>
  <li><a href="#Persistent.Data_Bank.Update">Update</a> to modify a persistent object.</li>
</ul>

<p><u>
<b>Tasking</b></u>. The implementation provided by default is task-safe. The 
operations on&nbsp; <a href="#Persistent.Data_Bank.Indexed.Indexed_Storage_Object">  Indexed_Storage_Object</a>
can be called from concurrent tasks. An unsafe implementation is provided in the 
subdirectory <i>single-task</i>. The implementation choice in GNAT Ada projects 
is controlled by the variable &quot;Tasking.&quot; When compiled manually or with a 
compiler other than GNAT, the corresponding implementation must be chosen 
manually.</p>

<H4><a name="2.9.5"></a>2.9.5. Proxy objects</H4>

<p><a name="Persistent.Data_Bank.Reference"></a><a name="Persistent.Data_Bank.Self_Reference"></a>Persistent  objects  that  are  not  fully represented by
their memory-resident counterparts require a reference to the storage they persist in.
This  is  necessary  at least to prevent persistent storage interface object from  being  prematurely
destroyed.  Further  the  operation <a href="#Object.Archived.Restore">  Object.Archived.Restore</a> does not contain a parameter referencing the  storage. Special objects of the type
<a href="#Persistent.Data_Bank.Self_Reference"> Self_Reference</a> defined in
the child package <a href="#Persistent.Data_Bank.Reference">Persistent.Data_Bank.Reference</a>
serve this purpose. An object may put a <a href="#Persistent.Data_Bank.Self_Reference"> Self_Reference</a> in its  dependency  list (see
<a href="#Object.Archived.Get_Referents">Object.Archived.Get_Referents</a>) by  calling  the  procedure
Add from  this  package. If it does so then in its <a href="#Object.Archived.Restore"> Restore</a> it will  find a
<a href="#Persistent.Data_Bank.Self_Reference"> Self_Reference</a> again. The
fields of that object denote  the persistent storage and the object's key there.</p>

<blockquote>
  <p><tt><font color="#0000FF">type</font> Self_Reference <font color="#0000FF"> is new
  </font> Deposit<font color="#0000FF"> with record</font><br>
  &nbsp;&nbsp; Storage : Storage_Handle;<br>
  &nbsp;&nbsp; Key&nbsp;&nbsp;&nbsp;&nbsp; : Persistent_Key_Ptr;<br>
  <font color="#0000FF">   end record</font>;</tt></p>

</blockquote>

<p>The following operations are defined on <a href="#Persistent.Data_Bank.Self_Reference"> Self_Reference</a>:</p>

<blockquote>
  <p><tt><font color="#0000FF">procedure</font> Add<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>List</b>&nbsp;&nbsp;&nbsp;
  : <font color="#0000FF"> in out</font>  Deposit_Container'Class;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Storage</b> :
  Storage_Handle;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;
  : Persistent_Key'Class<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>

</blockquote>

<p>This procedure adds to <b> List</b> a reference to <b>Storage</b>. <b>  Key</b>  is the
<b>Storage</b> key of the object that requires a reference to <b>Storage</b>. The reference is placed at the list end.
Other operations are implementations of the interface defined in <a href="#Object.Archived">Object.Archived</a>.</p>

<p>The following sample code illustrates using <a href="#Persistent.Data_Bank.Self_Reference"> Self_Reference</a>
objects. A user-defined persistent object is Proxy_Object. It contains a handle
to the storage where it persists and implements some of its operations through
communication to the storage. For example, it can be a large array of data
stored there. When a piece of data is requested Proxy_Object routes the request
to the storage and returns the result. Additionally Proxy_Object contains its
key in the storage. Proxy_Object should call Add from its Get_Referents to add
reference to the storage in its dependency list. Then upon restore it will find
a <a href="#Persistent.Data_Bank.Self_Reference"> Self_Reference</a> object in
the list passed to its Restore:</p>

<blockquote>
  <p><tt><font color="#0000FF">type</font> Proxy_Object <font color="#0000FF">is
  new</font> </tt><tt> Deposit<font color="#0000FF"> with record</font><br>
  &nbsp;&nbsp; Storage : Storage_Handle;<font color="#008000"> -- The storage
  used</font><br>
  &nbsp;&nbsp; Key&nbsp;&nbsp;&nbsp;&nbsp; : Storage_Key;&nbsp;&nbsp;&nbsp;<font color="#008000">
  -- The storage key of the object</font><br>
  <i>&nbsp;&nbsp; ...&nbsp;<br>
  </i><font color="#0000FF">end record</font>;<font color="#0000FF"><br>
  <br>
  procedure</font> Get_Referents<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Object :
  Proxy_Object;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List&nbsp;&nbsp;
  : <font color="#0000FF"> in out</font> Deposit_Container'Class<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is<br>
   begin</font><br>
  &nbsp;&nbsp; Add<br>
  &nbsp;&nbsp; (&nbsp; List,<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object.Storage,<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object.Key<br>
  &nbsp;&nbsp; );<br>
  <font color="#008000"><i>&nbsp;&nbsp; </i></font><i>... </i><font color="#008000"><i>--
  adding other dependencies if any<br>
  </i></font><font color="#0000FF">   end</font>  Get_Referents;<br>
  <br>
  <font color="#0000FF">   procedure</font> Restore<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Source&nbsp; : String;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pointer :
  <font color="#0000FF"> in out</font> Integer;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Class&nbsp;&nbsp;
  : String;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List&nbsp;&nbsp;&nbsp;
  : Deposit_Container'Class;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Object&nbsp; : <font color="#0000FF"> out</font> Deposit_Ptr<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is</font><br>
  &nbsp;&nbsp; Object&nbsp;&nbsp;&nbsp; : Deposit_Ptr := <font color="#0000FF">new</font>
  Proxy_Object;<br>
  &nbsp;&nbsp; Proxy&nbsp;&nbsp;&nbsp;&nbsp; : Proxy_Object <font color="#0000FF">renames</font>
  Proxy_Object (Result.<font color="#0000FF">all</font>);<br>
  &nbsp;&nbsp; Reference : Self_Reference'Class <font color="#0000FF"> renames</font><br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Self_Reference'Class (Get (List, 1).<font color="#0000FF">all</font>);<br>
  <font color="#0000FF">   begin</font><br>
  &nbsp;&nbsp; Proxy.Storage := Reference.Storage;<br>
  &nbsp;&nbsp; Proxy.Key&nbsp;&nbsp;&nbsp;&nbsp; := Storage_Key (Reference.Key.<font color="#0000FF">all</font>);<br>
  <font color="#008000"><i>&nbsp;&nbsp; </i></font><i>... </i><font color="#008000"><i>--
  restoring the rest of Proxy_Object as necessary</i></font><br>
  <font color="#0000FF">   end</font> Restore;</tt></p>

</blockquote>

<p align="right">
  <a href="#2.9" name="2.10"></a><a href="#2.9"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#2.11"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>2.10. Visual browsing of a persistent storage</H3>
<p>The package
<a href="http://www.dmitry-kazakov.de/ada/gtkada_contributions.htm#Gtk.Persistent_Storage_Browser">
Gtk.Persistent_Storage_Browser</a> provides 
<a href="http://www.gtk.org">GTK+</a> 
widgets for visual browsing of persistent storages. It is a part of the
<a href="http://www.dmitry-kazakov.de/ada/gtkada_contributions.htm">GtkAda 
contribution</a> software.</p>

<p align="right">
  <a href="#2.9" name="2.11"></a><a href="#2.10"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#2.12"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>2.11. Blocking files</H3>
<p><a name="Persistent.Blocking_Files"></a>The package
<a href="#Persistent.Blocking_Files">Persistent.Blocking_Files</a> provides 
blocking access file based on the package Direct_IO from the standard library. The file consists of fixed-size 
blocks which can be mapped onto the memory cache and accessed there. The size of 
the cache can be specified upon file opening. When a file block is read it is 
stored in the cache. On a next read attempt the block is accessed from the cache 
if the block is still there. Updates of a block in the cache does not cause 
physical output until the file is closed or else the cache is flushed.</p>
<p>The package defines the following constants and types:</p>

<blockquote>
  <p><tt>Byte_Offset_Bits : <font color="#0000FF">constant</font> := <i>
	implementation defined</i>;</tt></p>

</blockquote>

<p>The number of bits used for the byte offset within the block.</p>

<blockquote>
  <p><tt>Block_Byte_Size : <font color="#0000FF">constant</font> := 
	<font color="#800000">2</font> ** Byte_Offset_Bits;</tt></p>

</blockquote>

<p>The size of a block in bytes.</p>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Blocking_Files.Byte_Index">
	</a>type </font>Byte_Index <font color="#0000FF">is 
	mod</font> <font color="#800000">2</font> ** <font color="#800000">64</font>;</tt></p>

</blockquote>

<p>The index type used to point to bytes of the file. The first file byte has 
the index 0.</p>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Blocking_Files.Block_Offset">
	</a>type </font>Block_Offset <font color="#0000FF">is 
	mod</font> Block_Byte_Size;</tt></p>

</blockquote>

<p>This is the index type used within the block.</p>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Blocking_Files.Block_Count">
	</a>type </font>Block_Count <font color="#0000FF">is 
	</font><i>implementation defined</i>;<br>
	<font color="#0000FF"><a name="Persistent.Blocking_Files.Block_Index"></a>
	subtype</font> Block_Index <font color="#0000FF">is</font> Block_Count
	<font color="#0000FF">range</font> <font color="#800000">1</font>..Block_Count'Last;</tt></p>

</blockquote>

<p>The type <a href="#Persistent.Blocking_Files.Block_Count">Block_Count</a> is 
to count file blocks. The type <a href="#Persistent.Blocking_Files.Block_Index">
Block_Index</a> is used to enumerate blocks of a file. The first block has the 
index 1.</p>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Blocking_Files.Block_Type">
	</a>type </font>Block_Type <font color="#0000FF">is 
	array</font> (Block_Offset) <font color="#0000FF">of</font> Unsigned_8;<br>
	<font color="#0000FF"><a name="Persistent.Blocking_Files.Block_Type_Ptr">
	</a>type</font> Block_Type_Ptr <font color="#0000FF">is 
	access all</font> Block_Type;<br>
	<font color="#0000FF"><a name="Persistent.Blocking_Files.Block_Type_Ref">
	</a>type</font> Block_Type_Ref <font color="#0000FF">is 
	access constant</font> Block_Type;</tt></p>

</blockquote>

<p>This is the type of the block.</p>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Blocking_Files.Access_Mode">
	</a>type </font>Access_Mode<font color="#0000FF"> is
	</font>(Read_Mode, Read_Write_Mode, Create_Mode);</tt></p>

</blockquote>

<p>The modes of access to the file:</p>
<ul>
	<li><i>Read_Mode</i> is used to immutable file access;</li>
	<li><i>Read_Write_Mode</i> is for reading and writing a existing file;</li>
	<li><i>Create_Mode</i> is for reading, writing and creating the file.</li>
</ul>

<blockquote>
  <p><tt><font color="#0000FF">
	<a name="Persistent.Blocking_Files.Persistent_Array"></a>type </font>
	Persistent_Array <font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> Ada.Finalization.Limited_Controlled
	<font color="#0000FF">with private</font>;</tt></p>

</blockquote>

<p>This type is used to access a blocking file.</p>
<table border="1" cellpadding="5" cellspacing="0">
	<tr>
		<td>Note that the implementation of
		<a href="#Persistent.Blocking_Files.Persistent_Array">Persistent_Array</a> 
		is not task-safe. If an object of this type is to be used from 
		concurrent tasks its operations must be called mutually exclusively.
		</td>
	</tr>
</table>
<p>&nbsp;The following operations are 
defined on the type.</p>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Blocking_Files.Close"></a>
	procedure </font>Close (<b>Container</b> :<font color="#0000FF"> in out
	</font>Persistent_Array);</tt></p>

</blockquote>

<p>This procedure is used to close file previously opened with
<a href="#Persistent.Blocking_Files.Open">Open</a>. All updated cached blocks 
are written back to the file before it is physically closed. I/O exceptions are 
propagated on errors.</p>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Blocking_Files.Compose"></a>function</font> 
	Compose<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Index</b>&nbsp; : Block_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Offset</b> 
	: Block_Offset<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return </font>Byte_Index;</tt></p>

</blockquote>

<p>This function byte index corresponding to the block <b>Index</b> and the 
offset <b>Offset</b> within the block. See also
<a href="#Persistent.Blocking_Files.Get_Index">Get_Index</a> and
<a href="#Persistent.Blocking_Files.Get_Offset">Get_Offset</a>.</p>

<blockquote>
  <p><tt><font color="#0000FF">procedure </font>Finalize (<b>Container</b> :<font color="#0000FF"> 
	in out </font>Persistent_Array);</tt></p>

</blockquote>

<p>This procedure is called upon object finalization. The implementation calls
<a href="#Persistent.Blocking_Files.Close">Close</a>. When overridden by a 
derived type, it must be called from the derived type implementation.</p>

<blockquote>
  <p><tt><font color="#0000FF">procedure </font>Flush (<b>Container</b> :<font color="#0000FF"> 
	in out </font>Persistent_Array);</tt></p>

</blockquote>

<p>This procedure writes all updated blocks from the cache back to the file. I/O exceptions are 
propagated on errors.</p>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Blocking_Files.Get"></a>
	function </font>Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> :
	<font color="#0000FF">access</font> Persistent_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return </font>Block_Type_Ptr;</tt></p>

</blockquote>

<p>This function returns a pointer to the block corresponding to <b>Index</b>. 
The index is zero based byte offset it can point anywhere in the block. The 
block is read into the memory as necessary. When the file already contains the block corresponding 
to <b>Index</b> in the file the function is equivalent to
<a href="#Persistent.Blocking_Files.Update">Update</a>. Otherwise the procedure allocates a 
new block. The block is marked as updated. It is written back to the file once 
removed from the memory. Use_Error is propagated when no file is open or else 
when the file is opened in read-only mode. I/O exceptions are propagated on 
other errors. See also <a href="#Persistent.Blocking_Files.Load">Load</a>,
<a href="#Persistent.Blocking_Files.Update">Update</a>.</p>
<blockquote>
  <p><tt><font color="#0000FF">function</font> 
	Get_Block_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Pool</b> : Persistent_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">
	&nbsp;return</font> Byte_Count;</tt></p>
</blockquote>
<p>This function returns file size in blocks. Use_Error is propagated when no 
file open.</p>
<blockquote>
  <p><tt><font color="#0000FF">
	<a name="Persistent.Blocking_Files.Get_Index"></a>function </font>Get_Index (<b>Index</b> : 
	Byte_Index) <font color="#0000FF">return </font>Block_Index;</tt></p>

</blockquote>

<p>This function returns the file block number corresponding to <b>Index</b>. 
See also <a href="#Persistent.Blocking_Files.Compose">Compose</a>.</p>

<blockquote>
  <p><tt><font color="#0000FF">function </font>Get_First (<b>Index</b> : 
	Byte_Index) <font color="#0000FF">return </font>Byte_Index;</tt></p>

</blockquote>

<p>This function returns the offset to the first byte of the block corresponding to <b>Index</b>.</p>

<blockquote>
  <p><tt><font color="#0000FF">function </font>Get_Name (<b>Container</b> : 
	Persistent_Array) <font color="#0000FF">return </font>String;</tt></p>

</blockquote>

<p>This function returns name of the file when the file is open. Otherwise 
Use_Error is propagated.</p>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Blocking_Files.Get_Offset">
	</a>function </font>Get_Offset (<b>Index</b> : 
	Byte_Index) <font color="#0000FF">return </font>Block_Offset;</tt></p>

</blockquote>

<p>This function returns the offset corresponding to <b>Index</b> when the block 
is loaded in the memory. See also <a href="#Persistent.Blocking_Files.Compose">
Compose</a>.</p>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Blocking_Files.Get_Size">
	</a>function </font>Get_Size (<b>Container</b> : 
	Persistent_Array) <font color="#0000FF">return </font>Byte_Index;</tt></p>

</blockquote>

<p>This function returns the file size in bytes. Use_Error is propagated when no 
file open.</p>

<blockquote>
  <p><tt><font color="#0000FF">function </font>Is_Open (<b>Container</b> : 
	Persistent_Array) <font color="#0000FF">
	return </font>Boolean;</tt></p>

</blockquote>

<p>This function returns <i><font color="#800000">true</font></i> if the file 
was open with <a href="#Persistent.Blocking_Files.Open">Open</a>.</p>

<blockquote>
  <p><tt><font color="#0000FF">function </font>Is_Resident<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> : 
	Persistent_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return </font>Boolean;<font color="#0000FF"><br>
	function </font>Is_Resident<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> : 
	Persistent_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Block_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return </font>Boolean;</tt></p>

</blockquote>

<p>This function returns <i><font color="#800000">true</font></i> if the block 
corresponding to <b>Index</b> is memory-resident.</p>

<blockquote>
  <p><tt><font color="#0000FF">function </font>Is_Writable (<b>Container</b> : 
	Persistent_Array) <font color="#0000FF">
	return </font>Boolean;</tt></p>

</blockquote>

<p>This function returns <i><font color="#800000">true</font></i> if the file 
was open with <a href="#Persistent.Blocking_Files.Open">Open</a> for writing.</p>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Blocking_Files.Load"></a>
	function </font>Load<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> :
	<font color="#0000FF">access</font> Persistent_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return </font>Block_Type_Ref;</tt></p>

</blockquote>

<p>This function returns a pointer to the block corresponding to <b>Index</b>. 
The index is zero based byte offset it can point anywhere in the block. The 
block is read into the memory as necessary. 
The result is an immutable pointer, so the function can be used for read-only files. 
If the file does not have a block corresponding to <b>Index</b>, the 
result is <font color="#0000FF">null</font>. Use_Error is propagated when no 
file is open. I/O exceptions are propagated on other errors. See also
<a href="#Persistent.Blocking_Files.Get">Get</a>,
<a href="#Persistent.Blocking_Files.Update">Update</a>.</p>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Blocking_Files.Open"></a>
	procedure </font>Open<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
	: <font color="#0000FF">in out</font> Persistent_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Mode</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Access_Mode := Read_Mode;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Hash_Size</b> : Positive&nbsp;&nbsp;&nbsp; :=<font color="#800000"> 256</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Form</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := &quot;&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>

</blockquote>

<p>This procedure opens a file specified by <b>Name</b>. <b>Hash_Size</b> 
specifies the number of blocks kept resident in the memory. <b>Mode</b> is the 
access mode. <b>Form</b> is the OS-specific parameters to use when opening the 
file. I/O exceptions are propagated on errors.</p>

<blockquote>
  <p><tt><font color="#0000FF">procedure </font>Open<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
	: <font color="#0000FF">in out</font> Persistent_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Hash_Size</b> : Positive :=<font color="#800000"> 256</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Form</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: String&nbsp;&nbsp; := &quot;&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>

</blockquote>

<p>This variant of <a href="#Persistent.Blocking_Files.Open">Open</a> is used to 
create a temp file.</p>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Blocking_Files.Read"></a>
	procedure </font>Read<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> :
	<font color="#0000FF">in out</font> Persistent_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Block</b>&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">out</font> 
	Block_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>

</blockquote>

<p>This procedure is used to explicitly read a block corresponding to <b>Index</b> 
working around the memory cache. The index is zero based byte offset it can 
point anywhere in the block. The block is read into <b>Block</b>. If the block 
was memory-resident, it is taken from there and then removed from the cache in 
order to prevent duplicity. End_Error is propagated if the file does not have a block containing
<b>Index</b>. Use_Error is 
propagated when no file is open. I/O exceptions 
are propagated on other errors. See also
<a href="#Persistent.Blocking_Files.Write">Write</a>.</p>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Blocking_Files.Update"></a>
	function </font>Update<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> :
	<font color="#0000FF">access</font> Persistent_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return </font>Block_Type_Ptr;</tt></p>

</blockquote>

<p>This function returns a pointer to the block corresponding to <b>Index</b>. 
The index is zero based byte offset it can point anywhere in the block. 
The result is a mutable pointer, so the function can be used only for files 
opened for writing. The block is read into the memory as necessary and marked as updated. It is written back to the 
file once removed from the memory. If the file does not have a block containing
<b>Index</b>, the result is <font color="#0000FF">null</font>. Use_Error is 
propagated when no file is open or when file is open read-only. I/O exceptions 
are propagated on other errors. See also
<a href="#Persistent.Blocking_Files.Get">Get</a>,
<a href="#Persistent.Blocking_Files.Load">Load</a>.</p>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Blocking_Files.Write"></a>
	procedure </font>Write<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
	: <font color="#0000FF">in out</font> Persistent_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Index</b>&nbsp;&nbsp;&nbsp;&nbsp; : Byte_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Block</b>&nbsp;&nbsp;&nbsp;&nbsp; : Block_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>

</blockquote>

<p>This procedure is used to explicitly write a block corresponding to <b>Index</b> 
working around the memory cache. The index is zero based byte offset it can 
point anywhere in the block. The block is rewritten with the contents of <b>
Block</b>. If the block was memory-resident, it is removed from there any 
changes made are discarded. If the file does not have a block containing
<b>Index</b>, it is padded with blocks which contents is set to the one of <b>
Block</b>. Use_Error is 
propagated when no file is open or when file is open read-only. I/O exceptions 
are propagated on other errors. See also
<a href="#Persistent.Blocking_Files.Read">Read</a>.</p>

<h4><a name="2.11.1"></a>2.11.1. Text I/O</h4>
<p><a name="Persistent.Blocking_Files.Text_IO"></a>The package
<a href="#Persistent.Blocking_Files">Persistent.Blocking_Files</a><a href="#Persistent.Blocking_Files.Text_IO">.Text_IO</a> 
provides output operations for byte index and byte offset.</p>
<BLOCKQUOTE>
  <tt><font color="#0000FF">procedure</FONT> Get<BR>
  &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;( &nbsp;<b>Source</b>
  &nbsp;: <font color="#0000FF">in</FONT> String;<BR>
  &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
  &nbsp;<b>Pointer</b> : <font color="#0000FF">in
  out</FONT> Integer;<BR>
  &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
  &nbsp;<b>Value</b> &nbsp;&nbsp;: <font color="#0000FF">out</FONT> Byte_Index<BR>
  &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;);</tt></BLOCKQUOTE>
<P>
This procedure gets byte index from the string
<b>Source</b>. The process starts from <b>Source
(Pointer)</b>. The parameter <b>Base</b> indicates the base
of the expected number. The exception Constraint_Error is propagated if block 
number or byte offset is out of range.
Data_Error indicates a syntax error in the number. End_Error is raised when
no number was detected. Layout_Error is propagated when
<b>Pointer</b> is not in the range <b>Source</b>'First
.. <b>Source</b>'Last + 1. </p>
<blockquote>
  <p><tt><font color="#0000FF">function</font> Image<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Value</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Byte_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Put_Offset</b> 
	: Boolean := True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )
	<font color="#0000FF">&nbsp;return</font> String;</tt></p>
</blockquote>
<p>This function returns textual representation of <b>Value</b>. When <b>
Put_Offset</b> is <font color="#800000"><i>true</i></font> both the block number 
and the hexadecimal offset within the block are output. Otherwise, it is only 
the block number.</p>
<blockquote>
  <p><tt><font color="#0000FF">function</font> Image (<b>Value</b> : 
	Block_Offset) <font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function returns textual representation byte offset <b>Value</b> in a 
block.</p>
<blockquote>
  <p><tt><font color="#0000FF">function</font> Image (<b>Value</b> : 
	Block_Count) <font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function returns textual representation block number <b>Value</b>.</p>
<blockquote>
  <p><tt><font color="#0000FF">procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Destination</b> 
	: <font color="#0000FF">in out</font> String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Pointer</b>&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> 
	Integer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Value</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Byte_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Put_Offset</b>&nbsp; : Boolean&nbsp;&nbsp; := True;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Field</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Natural&nbsp;&nbsp; :=
	<font color="#800000">0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Justify</b>&nbsp;&nbsp;&nbsp;&nbsp; : Alignment := Left;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Fill</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Character := ' '<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure outputs <b>Value</b> starting from <b>Destination</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced after the output. <b>Field</b>, <b>Justify</b> and <b>
Fill</b> control output. Layout_Error is propagated when there is no room for 
output or <b>Pointer</b> is invalid. When <b>Put_Offset</b> is
<font color="#800000"><i>true</i></font> both the block number and the 
hexadecimal offset within the block are output. Otherwise, it is only the block 
number.</p>
<blockquote>
  <p><tt><font color="#0000FF">procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Destination</b> 
	: <font color="#0000FF">in out</font> String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Pointer</b>&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> 
	Integer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Value</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Byte_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Field</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Natural&nbsp;&nbsp; :=
	<font color="#800000">0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Justify</b>&nbsp;&nbsp;&nbsp;&nbsp; : Alignment := Left;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Fill</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Character := ' '<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure outputs <b>Value</b> starting from <b>Destination</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced after the output. <b>Field</b>, <b>Justify</b> and <b>
Fill</b> control output. Layout_Error is propagated when there is no room for 
output or <b>Pointer</b> is invalid.</p>

<blockquote>
  <p><tt><font color="#0000FF">procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Destination</b> 
	: <font color="#0000FF">in out</font> String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Pointer</b>&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> 
	Integer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Value</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Block_Count;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Field</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Natural&nbsp;&nbsp; :=
	<font color="#800000">0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Justify</b>&nbsp;&nbsp;&nbsp;&nbsp; : Alignment := Left;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Fill</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Character := ' '<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure outputs <b>Value</b> starting from <b>Destination</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced after the output. <b>Field</b>, <b>Justify</b> and <b>
Fill</b> control output. Layout_Error is propagated when there is no room for 
output or <b>Pointer</b> is invalid.</p>

<BLOCKQUOTE>
  <tt><font color="#0000FF">function</FONT> Value&nbsp;(<b>Source</b> : String) <font color="#0000FF">return</FONT>  
	Byte_Index;</tt></BLOCKQUOTE>
<P>
This function gets byte index from the string <b>Source</b>.
The index can be surrounded by spaces and tabs. The whole string
<b>Source</b> should be matched. Otherwise the exception Data_Error
is propagated. Also Data_Error indicates a syntax error in the block number or 
byte offset. The
exception Constraint_Error is propagated if the number is not in the range
<b>First</b>..<b>Last</b>. End_Error is raised when no
number was detected.</p>

<p align="right">
  <a href="#2.9" name="2.12"></a><a href="#2.11"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#3"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>2.12. Transactional blocking files</H3>
<p><a name="Persistent.Blocking_Files.Transactional"></a>The package
<a href="#Persistent.Blocking_Files.Transactional">Persistent.Blocking_Files.Transactional</a> provides 
<a href="#Persistent.Blocking_Files.Transactional.Persistent_Transactional_Array">
Persistent_Transactional_Array</a>, a variant of
		<a href="#Persistent.Blocking_Files.Persistent_Array">Persistent_Array</a>, 
supporting transactions. A transaction is an atomic file update. Database 
transactions must be <i>atomic</i>, <i>consistent</i>, <i>isolated</i> and <i>
durable</i>. Transactions on 
<a href="#Persistent.Blocking_Files.Transactional.Persistent_Transactional_Array">
Persistent_Transactional_Array</a> have similar properties: </p>
<ul>
	<li><i>Atomicity</i>. All changes within a transaction are either rolled 
	back or committed when the transaction is finished. If the application or 
	the whole system crashes during a transaction, the effect will be of rolling 
	the transaction back;</li>
	<li><i>Consistency</i>. A successfully committed transaction leaves the file 
	in a consistent state;</li>
	<li><i>Isolation</i>. There is only one transaction allowed on the file, 
	which thus does not require isolation against other transactions;</li>
	<li><i>Durability</i>. A committed transaction persists when the application 
	or the system fails, provided that the file system does not corrupt written 
	and flushed file blocks.</li>
</ul>
<p>The implementation maps <i>virtual</i> file blocks as seen by the 
application onto <i>physical</i> file blocks. When a virtual block is updated its 
physical counterpart is not changed on the disk. Instead of that an unused physical block is allocated 
and the virtual block is remapped to it. 
This new physical block is kept overwritten until closing the transaction. The 
old physical block is said <i>disposed</i>. A disposed block is not changed 
until an end of the transaction. When the transaction is committed the disposed physical block becomes free to use. When 
the transaction is rolled back the new block is discarded and becomes free and 
the disposed block takes its place. Since the physical 
blocks are not changed during the transaction a system crash before committing it 
rolls the file, as viewed by the application, 
back.</p>
<p>The virtual to physical block mapping is 
stored in the file's physical blocks in the form of segments. Each segment fits 
one physical block. Changes to the mapping are a part of the 
transaction.</p>
<p>When the whole map does not fit into a single segment it is 
split into several segments referenced from the segment of the next level. 
The depth of this segment tree does not necessarily means that the tree should 
be actually traversed in order to obtain the physical block. If the segment of 
the lowest level is already in the memory it is used directly to resolve the 
virtual block number. Only when the segment is not in the memory the segment of 
the next level is referenced in order to get the physical block containing the 
missing segment. Thus the tree is fully traversed only when none of the segments 
along the path is in the memory. The root segment is always in the memory.</p>
<p>The package defines the file type:</p>

<blockquote>
  <p><tt><font color="#0000FF">
	<a name="Persistent.Blocking_Files.Transactional.Persistent_Transactional_Array">
	</a>type </font>
	Persistent_Transactional_Array<font color="#0000FF">
	is<br>
&nbsp;&nbsp; new </font>
	Persistent_Array<font color="#0000FF">
	with private</font>;</tt></p>

</blockquote>

<p>This type is used to access a blocking file.</p>
<table border="1" cellpadding="5" cellspacing="0">
	<tr>
		<td>Note that the implementation of
		<a href="#Persistent.Blocking_Files.Transactional.Persistent_Transactional_Array">
		Persistent_Transactional_Array</a> 
		is not task-safe. If an object of this type is to be used from 
		concurrent tasks its operations must be called mutually exclusively.
		</td>
	</tr>
</table>
<p>&nbsp;The following operations are 
defined on the type.</p>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Blocking_Files.Transactional.Close"></a>
	procedure </font>Close (<b>Container</b> :<font color="#0000FF"> in out
	</font>Persistent_Transactional_Array);</tt></p>

</blockquote>

<p>This procedure is used to close file previously opened with
<a href="#Persistent.Blocking_Files.Open">Open</a>. The pending transaction is 
rolled back. I/O exceptions are propagated on errors.</p>

<blockquote>
  <p><tt><font color="#0000FF">
	<a name="Persistent.Blocking_Files.Transactional.Commit"></a>
	procedure </font>Commit (<b>Container</b> :<font color="#0000FF"> in out
	</font>Persistent_Transactional_Array);</tt></p>

</blockquote>

<p>This procedure commits current transaction and opens a new one.</p>

<blockquote>
  <p><tt><font color="#0000FF">procedure </font>Finalize (<b>Container</b> :<font color="#0000FF"> 
	in out </font>Persistent_Transactional_Array);</tt></p>

</blockquote>

<p>This procedure is called upon object finalization. The implementation calls
<a href="#Persistent.Blocking_Files.Close">Close</a>. When overridden by a 
derived type, it must be called from the derived type implementation.</p>

<blockquote>
  <p><tt><font color="#0000FF">procedure </font>Flush (<b>Container</b> :<font color="#0000FF"> 
	in out </font>Persistent_Transactional_Array);</tt></p>

</blockquote>

<p>This procedure writes all updated blocks from the cache back to the file. It 
is equivalent to <a href="#Persistent.Blocking_Files.Transactional.Commit">
Commit</a>. I/O exceptions are 
propagated on errors.</p>

<blockquote>
  <p><tt><font color="#0000FF">
	<a name="Persistent.Blocking_Files.Transactional.Get_Allocated_Size"></a>function </font>
	Get_Allocated_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> : 
	Persistent_Transactional_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Byte_Index;</tt></p>

</blockquote>

<p>This function returns the total physical size of the file in bytes. The 
function <a href="#Persistent.Blocking_Files.Get_Size">Get_Size</a> returns the total virtual size of the file. Use_Error is propagated when no 
file open. I/O exceptions are propagated on errors.</p>

<blockquote>
  <p><tt><font color="#0000FF">
	<a name="Persistent.Blocking_Files.Transactional.Get_Disposed_Blocks"></a>function </font>
	Get_Disposed_Blocks<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> : 
	Persistent_Transactional_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Block_Count;</tt></p>

</blockquote>

<p>This function returns the number of disposed physical blocks. Disposed blocks 
cannot be reused during current transaction. They become available when the 
transaction is committed. When the transaction is rolled back the disposed 
blocks become used again. Use_Error is propagated when no 
file open. I/O exceptions are propagated on errors.</p>

<blockquote>
  <p><tt><font color="#0000FF">
	<a name="Persistent.Blocking_Files.Transactional.Get_Free_Blocks"></a>function </font>
	Get_Free_Blocks<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> : 
	Persistent_Transactional_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Block_Count;</tt></p>

</blockquote>

<p>This function returns the number of free physical blocks. When there is no 
free blocks new blocks are acquired by expanding the file. Use_Error is propagated when no 
file open. I/O exceptions are propagated on errors.</p>

<blockquote>
  <p><tt><font color="#0000FF">
	<a name="Persistent.Blocking_Files.Transactional.Get_Map_Depth"></a>function </font>
	Get_Map_Depth (<b>Size</b> : Byte_Index) <font color="#0000FF">
	return</font> Natural;</tt></p>

</blockquote>

<p>This function returns depth of the virtual to physical mapping. The mapping 
is organized in segments fitting a file block. When the map does not fit into 
single segment it is split into several segments all reverenced from the segment 
of the next level. The depth is the number of levels in this tree including the 
root segment.</p>

<blockquote>
  <p><tt><font color="#0000FF">
	<a name="Persistent.Blocking_Files.Transactional.Get_Map_Size"></a>function </font>
	Get_Map_Size (<b>Size</b> : Byte_Index) <font color="#0000FF">
	return</font> Natural;</tt></p>

</blockquote>

<p>This function returns the size of virtual to physical map needed for 1..<b>Size</b> 
bytes. The result -1 can be used as the Map_Size parameter of
<a href="#Persistent.Blocking_Files.Transactional.Open">Open</a>.</p>

<blockquote>
  <p><tt><font color="#0000FF">
	<a name="Persistent.Blocking_Files.Transactional.Get_Physical"></a>function </font>
	Get_Physical<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> : 
	Persistent_Transactional_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Virtual</b>&nbsp;&nbsp; 
	: Block_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font>
	Block_Count;</tt></p>

</blockquote>

<p>This function returns the physical block corresponding to <b>Virtual</b>. 
When the block is not mapped the result is 0. Use_Error is propagated when no 
file open. I/O exceptions are propagated on errors.</p>

<blockquote>
  <p><tt><font color="#0000FF">
	function </font>
	Get_Sequence_No<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> : 
	Persistent_Transactional_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font>
	Unsigned_64;</tt></p>

</blockquote>

<p>This function returns current transaction number. Each transaction has an 
unique sequence number. Use_Error is propagated when no 
file open.</p>

<blockquote>
  <p><tt><font color="#0000FF">
	<a name="Persistent.Blocking_Files.Transactional.Get_Used_Size"></a>function </font>
	Get_Used_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> : 
	Persistent_Transactional_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Byte_Index;</tt></p>

</blockquote>

<p>This function returns the total number of used file bytes. It can be less 
than the total file size returned by
<a href="#Persistent.Blocking_Files.Transactional.Get_Allocated_Size">
Get_Allocated_Size</a>. It is greater than the virtual file size returned by <a href="#Persistent.Blocking_Files.Get_Size">Get_Size</a>. Use_Error is propagated when no 
file open. I/O exceptions are propagated on errors.</p>

<blockquote>
  <p><tt><font color="#0000FF">
	<a name="Persistent.Blocking_Files.Transactional.Is_Updated"></a>function </font>
	Is_Updated<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> : 
	Persistent_Transactional_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Virtual</b>&nbsp;&nbsp; 
	: Block_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return </font>Boolean;</tt></p>

</blockquote>

<p>This function returns <i><font color="#800000">true</font></i> if the file 
block <b>Virtual</b> was updated. All updated blocks are committed or rolled 
back upon transaction completion. Use_Error is propagated when no 
file open. I/O exceptions are propagated on errors.</p>

<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Blocking_Files.Transactional.Open"></a>
	procedure </font>Open<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
	: <font color="#0000FF">in out</font> Persistent_Transactional_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Mode</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Access_Mode := Read_Mode;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Hash_Size</b> : Positive&nbsp;&nbsp;&nbsp; :=<font color="#800000"> 256</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Map_Size</b>&nbsp; 
	: Positive; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Form</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := &quot;&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>

</blockquote>

<p>This procedure opens a file specified by <b>Name</b>. <b>Mode</b> is the 
file access mode. <b>Hash_Size</b> 
specifies the number of virtual blocks kept resident in the memory. <b>Map_Size</b> 
specifies how many segments of the virtual-to-physical mapping are kept cached 
in the memory. The root segment is always cached. It is recommended that the 
whole mapping were memory-resident, but for very large files this might be 
impossible. <a href="#Persistent.Blocking_Files.Transactional.Get_Map_Size">
Get_Map_Size</a> can be used to estimate the required space. <b>Form</b> is the OS-specific parameters to use when opening the 
file. I/O exceptions are propagated on errors.</p>

<blockquote>
  <p><tt><font color="#0000FF">procedure </font>Open<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
	: <font color="#0000FF">in out</font> Persistent_Transactional_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Hash_Size</b> : Positive :=<font color="#800000"> 256</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Map_Size</b>&nbsp; 
	: Positive; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Form</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: String&nbsp;&nbsp; := &quot;&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>

</blockquote>

<p>This variant of <a href="#Persistent.Blocking_Files.Open">Open</a> is used to 
create a temp file.</p>

<blockquote>
  <p><tt><font color="#0000FF">
	<a name="Persistent.Blocking_Files.Transactional.Rollback"></a>procedure </font>
	Rollback (<b>Container</b> :
	<font color="#0000FF">in out</font> Persistent_Transactional_Array);</tt></p>

</blockquote>

<p>This procedure rolls back current transaction. I/O exceptions are propagated 
on errors.</p>

<h4><a name="2.12.1"></a>2.12.1. Textual output of internal structures</h4>
<p><a name="Persistent.Blocking_Files.Transactional.Dump"></a>The package
<a href="#Persistent.Blocking_Files.Transactional.Dump">
Persistent.Blocking_Files.Transactional.Dump</a> 
provides procedures to output internal structures of a transactional file. The 
flags controls the output:</p>
<blockquote>
  <p><tt><font color="#0000FF">type </font>Dump_Flags<font color="#0000FF"> is 
	mod </font><font color="#800000">2</font>**<font color="#800000">5</font>;<br>
	Dump_General_Information&nbsp; : <font color="#0000FF">constant</font> 
	Dump_Flags := <font color="#800000">2</font>**<font color="#800000">0</font>;<br>
	Dump_Virtual_Block_Map&nbsp;&nbsp;&nbsp; : <font color="#0000FF">constant</font> 
	Dump_Flags := <font color="#800000">2</font>**<font color="#800000">1</font>;<br>
	Dump_Block_Map_Segments&nbsp;&nbsp; : <font color="#0000FF">constant</font> 
	Dump_Flags := <font color="#800000">2</font>**<font color="#800000">2</font>;<br>
	Dump_Free_Blocks_List&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">
	constant</font> Dump_Flags := <font color="#800000">2</font>**<font color="#800000">3</font>;<br>
	Dump_Disposed_Blocks_List : <font color="#0000FF">constant </font>Dump_Flags 
	:= <font color="#800000">2</font>**<font color="#800000">4</font>;<br>
	Dump_All&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">constant </font>Dump_Flags := Dump_Flags'Last;</tt></p>
</blockquote>
<p>The procedures defined in the package are:</p>
<blockquote>
  <p><tt><font color="#0000FF">procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>File</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: File_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Container</b> : Persistent_Transactional_Array'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Flags</b>&nbsp;&nbsp;&nbsp;&nbsp; : Dump_Flags := Dump_All<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
	<font color="#0000FF">procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
	: Persistent_Transactional_Array'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Flags</b>&nbsp;&nbsp;&nbsp;&nbsp; : Dump_Flags := Dump_All<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The parameter <b>File</b> is the file to output into. If omitted the standard 
output is used. <b>Container</b> is the object to output. <b>Flags</b> controls 
the output.</p>

<hr><p align="right">
  <A name="3"></A><a href="#2.12"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><A
      href="#3.1"><IMG src="next.gif" alt="[Next]" width="29" height="29"></A></p>
<H2>3. Sets and Maps</H2>
<a name="Sets_etc"></a>The packages <a href="#Generic_Set"> Generic_Set</a> and <a href="#Generic_Map">
Generic_Map</a> provide sets and associative arrays of private types. Objects in 
a set are directly comparable which makes them distinguishable and so allows to 
decide whether an object is in a set or not. Objects in a map are 
indistinguishable and so an additional object called key is associated with each 
object in the map. In other words a map represents a mapping key to object. Both 
sets and maps are implemented using reference counting which allows a relatively 
efficient assigning of sets and maps.
<p>Note that only objects of non-limited type can be used in sets and maps. To
have sets of limited objects use pointers or <a href="#Handle">handles</a> as
elements. For sets of handles also see
<a href="#Object.Handle.Generic_Set">Object.Handle.Generic_Set</a>. For maps of
strings see
<a href="http://www.dmitry-kazakov.de/ada/tables.htm">Tables</a>.</p>
<p align="right">
  <A name="3.1"></A><A href="#3"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></A><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><A
      href="#3.2"><IMG src="next.gif" alt="[Next]" width="29" height="29"></A></p>
<H3>3.1. Sets</H3>
<p><a name="Generic_Set"></a><a name="Set"></a>The package <a href="#Generic_Set"> Generic_Set</a> defines the type
Set.
An instance of the type is a set of items. One can add to and remove from items
of the  set.
Items of the  set can be accessed using the positive index. They are ordered, so the set implementation may use binary search.  There  is  a  null
item, which is never included into the set and is  used  to  mark free memory slots. The package is
generic and has  the  following
generic parameters:
</p>
<blockquote>
<p><tt><font color="#0000FF">generic</font><br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">type</font> Object_Type <font color="#0000FF">is private</font>;<br>
&nbsp;&nbsp;&nbsp;Null_Element : Object_Type;<br>
&nbsp;&nbsp;&nbsp;Minimal_Size&nbsp;: Positive := <font color="#800000">64</font>;<br>
&nbsp;&nbsp;&nbsp;Increment&nbsp;&nbsp;&nbsp;&nbsp;: Natural&nbsp; := <font color="#800000">50</font>;<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">with function</font> "<font color="#FF0000">&lt;</font>" (<b>Left</b>, <b> Right</b> :
Object_Type) <font color="#0000FF">return</font> Boolean <font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">with function</font> &quot;<font color="#FF0000">=</font>&quot; (<b>Left</b>, <b> Right</b> :
Object_Type) <font color="#0000FF">return</font> Boolean <font color="#0000FF">is</font> &lt;&gt;;<br>
<font color="#0000FF">package</font> Generic_Set <font color="#0000FF">is<br>
&nbsp;&nbsp; type </font>Set<font color="#0000FF"> is new </font>
Ada.Finalization.Controlled <font color="#0000FF">with private</font>;<br>
&nbsp;&nbsp; ...</tt></p>
</blockquote>
<p>Here:</p>
<ul>
  <li>Object_Type is the type of set items;</li>
  <li>Null_Element is a value of Object_Type used as a null item;</li>
  <li>Minimal_Size is the minimal number of items by which the internal buffer
    of the set is enlarged. When the first item is put into the set, this will
    be the initial buffer size.</li>
  <li>Increment controls further buffer enlargements. The buffer is enlarged by <i>n</i>*Increment/100,
    where <i> n</i> is the current buffer size. If the evaluated increment of 
  the buffer is less than Minimal_Size
    items, then the
    later is used instead. For instance, if the set size should grow linearly by <i>m</i>
    items per increment, then Minimal_Size=<i>m</i>, Increment=0. If the set
    should grow exponentially, for instance, by doubling its size per increment, then Increment
    should be 100, while Minimal_Size could be the initial non-empty set size.</li>
  <li>&quot;<font color="#FF0000">&lt;</font>&quot; and &quot;<font color="#FF0000">=</font>&quot;
    are used to order items in the set.</li>
</ul>
<p>Sets can be assigned. Assignment makes no deep copy, which is delayed until the
time moment when the original and a copy become different. Items in the set are ordered so that lesser items have
lesser indices, when indexed. The first item in the set has index 1.</p>
<table border="1" cellspacing="0" cellpadding="5">
	<tr>
		<td><i>Note that Generic_Set cannot be instantiated with Object_Type set 
		to Integer or any its subtype. This feature is per design for safety 
		reasons. The elements in the set are enumerated by Integer, so if sets 
		of Integer are required then the Object_Type must be made different from 
		Integer. For example as.</i><blockquote><i><tt><font color="#0000FF">
			type</font> Integer_Object <font color="#0000FF">is new</font> 
			Integer;<br>
			<font color="#0000FF">package</font> Integer_Sets
			<font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> Generic_Set (Object_Type =&gt; Integer_Object, ...);</tt></i></blockquote>
		</td>
	</tr>
</table>
<p>The
following operations are defined on Set:</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Add (<b>Container</b> :<font color="#0000FF"> in out
</font> Set; <b> Item</b>&nbsp; : Object_Type);<font color="#0000FF"><br>
procedure</font> Add (<b>Container</b> :<font color="#0000FF"> in out </font> Set;
<b> Items</b> : Set);</tt></blockquote>
<p>These procedures are used to add an item to a set or all items of one set to
another. Nothing happens if the item is already in the set or is a Null_Element.
Note that items are compared using the provided operations &quot;<font color="#FF0000">&lt;</font>&quot; and &quot;<font color="#FF0000">=</font>&quot;.
It is possible that these operations treat different items as same. Only one
item from such equivalence class may be in a set. To control which one will be
inserted use <a href="#Generic_Set.Insert">Insert</a> and <a href="#Generic_Set.Replace">Replace</a>.</p>
<blockquote>
<tt><font color="#0000FF">function </font> Create<font color="#0000FF"> return
  </font>Set;</tt></blockquote>
<p>This function returns an empty set.</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Erase
  (<b>Container</b> : <font color="#0000FF"> in out </font> Set);</tt></blockquote>
<p>This procedure removes all items from the set.</p>
<blockquote>
<tt><font color="#0000FF">function</font> Find
(<b>Container</b> : Set; <b> Item</b> : Object_Type)<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">return</font> Integer;</tt></blockquote>
<p>This function is used to find an item in the set <b>Container</b>. The result
is either a positive index of the found item or a negated index of the place
where the item should be if it were in the set.</p>
<blockquote>
<tt><font color="#0000FF">function</font> Get (<b>Container</b> : Set;
<b> Index</b> : Positive)<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">return</font>   Object_Type;</tt>
</blockquote>
This function is used to get an item of the set <b>Container</b> using a positive index. Constraint_Error is propagated if <b>Index</b> is wrong.
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Size
(<b>Container</b> : Set)<font COLOR="#000000">&nbsp;</font><font color="#0000FF">return</font>
Natural;</tt></p>
</blockquote>
<p>This function returns the number of items in the set.</p>
<blockquote>
<tt><font color="#0000FF"><a name="Generic_Set.Insert"></a>procedure</font>   Insert (<b>Container</b>  :<font color="#0000FF"> in out
</font> Set; <b> Item</b>&nbsp;: <font color="#0000FF">in out</font>
Object_Type);</tt></blockquote>
<p>This procedure inserts an item into a set. Nothing happens if the item is
Null_Element. When <b>Container</b> already has an element equivalent to <b>Item</b>,
then <b>Item</b> will not replace it. Instead of that the element from <b>Container</b>
will be returned through <b>Item</b>. So upon completion <b>Item</b> always has
the value of the element in <b>Container</b>.</p>
<blockquote>
<tt><font color="#0000FF">procedure</font>   Insert (<b>Container</b>  :<font color="#0000FF"> in out
</font> Set; <b> Item</b>&nbsp;:
Object_Type; <b>Inserted</b> : <font color="#0000FF">out</font> Boolean);</tt></blockquote>
<p>This procedure inserts an item into a set. <b>Item</b> is inserted only if it 
is not Null_Element and is not already in <b>Container</b>. When inserted <b>
Inserted</b> is set to <i><font color="#800000">true</font></i>. Otherwise it is 
to <font color="#800000"><i>false</i></font>..</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Is_Empty
(<b>Container</b> : Set) <font color="#0000FF"> return</font> Boolean;</tt></p>
</blockquote>
<p>True is returned if <b>Container</b> is empty.</p>
<blockquote>
  <p><tt><font color="#0000FF">function</font> Is_In
  (<b>Container</b> : Set; <b> Item</b> : Object_Type)<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>True is returned if <b>Item</b> is in <b>Container</b>.</p>
<blockquote>
  <p><tt>
  <font color="#0000FF"><a name="Generic_Set.Remove"></a>procedure</font> Remove (<b>Container</b> :<font color="#0000FF"> in out
  </font> Set; <b> Item</b>
&nbsp;: Object_Type);<br>
  <font color="#0000FF">procedure</font> Remove (<b>Container</b> :<font color="#0000FF"> in out
  </font> Set; <b>Items</b>     : Set);</tt></p>
</blockquote>
<p>These procedures are used to remove items from the set <b>Container</b>.&nbsp;An item can be removed either explicitly, or by specifying a
set of items to be removed. If a particular item is not in the set, then nothing
happens.</p>
<blockquote>
  <p><tt>
  <font color="#0000FF">procedure</font> Remove<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Container</b> :<font color="#0000FF"> in out
  </font> Set;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b> Item</b>&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;: Object_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Removed</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Boolean);</tt></p>
</blockquote>
<p>This procedure is a variant of the procedure <a href="#Generic_Set.Remove">
Remove</a> with the third parameter set to <font color="#800000"><i>true</i></font> 
when Item was in the set before its removal. Otherwise it is set to <i>
<font color="#800000">false</font></i>.</p>
<blockquote>
  <p><tt><font color="#0000FF">procedure</font> Remove
  (<b>Container</b> :<font color="#0000FF"> in out </font> Set; <b> Index</b> : Positive);</tt></p>
</blockquote>
<p>This procedures removes an item from the set <b>Container</b> by its positive 
index. Constraint_Error is propagated when item index is wrong.</p>
<blockquote>
<tt><font color="#0000FF"><a name="Generic_Set.Replace"></a>procedure</font> Replace (<b>Container</b> :<font color="#0000FF"> in out
</font> Set; <b> Item</b> : Object_Type);<font color="#0000FF"><br>
procedure</font> Replace (<b>Container</b> :<font color="#0000FF"> in out </font> Set;
<b> Items</b> : Set);</tt></blockquote>
These procedures are used to add to / replace in an item or all items of a set. 
Nothing  is done when <b>Item</b> is Null_Element. 
Any duplicated items are replaced by new ones. This operation has sense only if 
the equality operation defined on Object_Type does not distinguish some objects.<blockquote>
<tt><font color="#0000FF">type </font> Exchange_Condition<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; access function </font> (<b>New_Element</b>, <b>Old_Element</b> : 
Object_Type)<font color="#0000FF"><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return </font> Boolean;<font color="#0000FF"><br>
procedure</font> Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> Set;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Item</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Object_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Condition</b> : Exchange_Condition;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Updated</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
This procedure replaces element is the function <b>Condition</b> returns
<font color="#800000"><i>true</i></font>. For a new element to insert the second parameter 
passed is Null_Element. The parameter <b>Updated</b> is returned true if the set 
was modified, e.g. element inserted or replaced.<blockquote>
  <p><tt><font color="#0000FF">function</font>
  &quot;<font color="#FF0000">and</font>&quot; (<b>Left</b>, <b> Right</b> : Set)
  <font color="#0000FF"> return</font> Set;<br>
  <font color="#0000FF">function</font> &quot;<font color="#FF0000">or</font>&quot;
  <font COLOR="#000000">
&nbsp;</font>(<b>Left</b>, <b> Right</b> : Set) <font color="#0000FF"> return</font> Set;<br>
  <font color="#0000FF">function</font> &quot;<font color="#FF0000">xor</font>&quot;
  (<b>Left</b>, <b> Right</b> : Set) <font color="#0000FF"> return</font> Set;</tt></p>
</blockquote>
<p>These functions are conventional set operations - intersection, union,
difference. Difference is defined as a set which items are only in one of the
sets <b>Left</b> and <b>Right</b>.</p>
<blockquote>
  <p><tt>
  <font color="#0000FF">function</font> &quot;<font color="#FF0000">-</font>&quot;
  (<b>Left</b>, <b> Right</b> : Set) <font color="#0000FF"> return</font> Set;</tt></p>
</blockquote>
<p>This function returns a set containing all elements of <b>Left</b> not 
present in <b>Right</b>.</p>
<blockquote>
  <p><tt><font color="#0000FF">function</font>
  &quot;<font color="#FF0000">=</font>&quot; (<b>Left</b>, <b> Right</b> : Set) <font color="#0000FF"> return</font>
  Boolean;</tt></p>
</blockquote>
<p><font color="#800000">True</font> is returned if both sets contain same items.</p>
<h4><a name="3.1.1"></a>3.1.1. Sets of indefinite elements</h4>
<p><a name="Generic_Indefinite_Set"></a>The package 
<a href="#Generic_Indefinite_Set">Generic_Indefinite_Set</a> is similar to the 
package Generic_Set, but allows instantiation with an indefinite type:
</p>
<blockquote>
<p><tt><font color="#0000FF">generic</font><br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">type</font> Object_Type (&lt;&gt;) <font color="#0000FF">is private</font>;<br>
&nbsp;&nbsp;&nbsp;Minimal_Size&nbsp;: Positive := <font color="#800000">64</font>;<br>
&nbsp;&nbsp;&nbsp;Increment&nbsp;&nbsp;&nbsp;&nbsp;: Natural&nbsp; := <font color="#800000">50</font>;<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">with function</font> "<font color="#FF0000">&lt;</font>" (<b>Left</b>, <b> Right</b> :
Object_Type) <font color="#0000FF">return</font> Boolean <font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">with function</font> &quot;<font color="#FF0000">=</font>&quot; (<b>Left</b>, <b> Right</b> :
Object_Type) <font color="#0000FF">return</font> Boolean <font color="#0000FF">is</font> &lt;&gt;;<br>
<font color="#0000FF">package</font> Generic_Set <font color="#0000FF">is<br>
&nbsp;&nbsp; <a name="Generic_Indefinite_Set.Set"></a>type </font>Set<font color="#0000FF"> is new </font>
Ada.Finalization.Controlled <font color="#0000FF">with private</font>;<br>
&nbsp;&nbsp; ...</tt></p>
</blockquote>
<p>Note that there is no formal parameter Null_Element. The Replace procedure is 
different:</p>
<blockquote>
<tt><font color="#0000FF">type</font> Exchange_Condition <font color="#0000FF">
is<br>
&nbsp;&nbsp; access function </font>(<b>New_Element</b>, <b>Old_Element</b> : 
Object_Type)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Boolean;<br>
<font color="#0000FF">type</font> Insert_Condition <font color="#0000FF">is<br>
&nbsp;&nbsp; access function</font> (<b>New_Element</b> : Object_Type)
<font color="#0000FF">return</font> Boolean;<br>
<font color="#0000FF">procedure</font> Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> Set;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Item</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Object_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Exchange</b>&nbsp; : Exchange_Condition;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Insert</b>&nbsp;&nbsp;&nbsp; : Insert_Condition;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Updated</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
This procedure replaces element is the function <b>Exchange</b> returns
<font color="#800000"><i>true</i></font>. A new element is inserted if <b>Insert</b> 
returns <i><font color="#800000">true</font></i>. The parameter <b>Updated</b> 
is returned true if the set was modified, e.g. element inserted or replaced.<h4><a name="3.1.2"></a>3.1.2 Sets of discrete elements</h4>
<p><a name="Generic_Discrete_Set"></a>The package 
<a href="#Generic_Indefinite_Set">Generic_Discrete_Set</a> is similar to the 
package <a href="#Generic_Set">Generic_Set</a> provided specifically for discrete types allowing large sets 
of elements as well as their complement sets:
</p>
<blockquote>
<p><tt><font color="#0000FF">generic</font><br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">type</font> Object_Type
<font color="#0000FF">is </font>(&lt;&gt;);<br>
&nbsp;&nbsp;&nbsp;Minimal_Size&nbsp;: Positive := <font color="#800000">64</font>;<br>
&nbsp;&nbsp;&nbsp;Increment&nbsp;&nbsp;&nbsp;&nbsp;: Natural&nbsp; := <font color="#800000">50</font>;<br>
<font color="#0000FF">package</font> Generic_Discrete_Set <font color="#0000FF">is<br>
&nbsp;&nbsp; <a name="Generic_Discrete_Set.Set"></a>type </font>Set<font color="#0000FF"> is new </font>
Ada.Finalization.Controlled <font color="#0000FF">with private</font>;<br>
&nbsp;&nbsp; ...</tt></p>
</blockquote>
<p>The set supports adding and removing whole ranges of elements. The set 
cardinality is not limited, but the number of non-intersecting ranges must be no 
greater than Integer'Last. differently to the package <a href="#Generic_Set">Generic_Set</a> 
the elements of the set are enumerated through the ranges 1..<a href="#Generic_Discrete_Set.Get_Size">Get_Size</a>. The
following operations are defined on <a href="#Generic_Discrete_Set.Set">Set</a>:</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Add (<b>Container</b> :<font color="#0000FF"> in out
</font> Set; <b> Item</b>&nbsp;&nbsp;&nbsp;&nbsp; : Object_Type);<font color="#0000FF"><br>
procedure</font> Add (<b>Container</b> :<font color="#0000FF"> in out
</font> Set; <b> From</b>, <b> To</b> : Object_Type);<font color="#0000FF"><br>
procedure</font> Add (<b>Container</b> :<font color="#0000FF"> in out </font> Set;
<b> Items</b>&nbsp;&nbsp;&nbsp; : Set);</tt></blockquote>
<p>These procedures are used to add an item, a range of items, all items of one 
set to another. Nothing happens if an item is already in the set or when <b>From</b>..<b>To</b> 
is an empty range. Constraint_Error is propagated when <b>From</b> &gt; <b>To</b> 
such that Object_Type'Pred (<b>From</b>) /= <b>To</b>.</p>
<blockquote>
<tt><font color="#0000FF">function </font> Create<font color="#0000FF"> return
  </font>Set;</tt></blockquote>
<p>This function returns an empty set.</p>
<blockquote>
<tt><font color="#0000FF">function </font> Create (<b>Item</b>&nbsp;&nbsp;&nbsp;&nbsp; : Object_Type)<font color="#0000FF"> return
  </font>Set;<br>
<font color="#0000FF">function</font> Create (<b>From</b>, <b>To</b> : 
Object_Type) <font color="#0000FF">return</font> Set;</tt></blockquote>
<p>These functions return a singleton set containing <b>Item</b> or a set 
consisting of the range <b>From</b>..<b>To</b>. Constraint_Error is propagated 
when <b>From</b> &gt; <b>To </b>such that Object_Type'Pred (<b>From</b>) /= <b>
To</b>.</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Erase
  (<b>Container</b> : <font color="#0000FF"> in out </font> Set);</tt></blockquote>
<p>This procedure removes all items from the set.</p>
<blockquote>
<tt><font color="#0000FF">function</font> Find
(<b>Container</b> : Set; <b> Item</b>&nbsp;&nbsp;&nbsp;&nbsp; : Object_Type) <font color="#0000FF">return</font> Integer;<br>
<font color="#0000FF">function</font> Find (<b>Container</b> : Set; <b>From</b>,
<b>To</b> : Object_Type) <font color="#0000FF">return</font> Integer;</tt></blockquote>
<p>This function is used to find an item or a range of items in the set <b>Container</b>. The result
is either a positive index of an range containing <b>Item</b> or whole range <b>
From</b>..<b>To</b> or a negated index of the place
where the item should be if it were in the set. Ranges in the set are ordered 
according to their lower bounds. Intersecting ranges are considered equal. 
Constraint_Error is propagated when <b>From</b> &gt; <b>To</b>.</p>
<blockquote>
<tt><font color="#0000FF">function</font> From (<b>Container</b> : Set;
<font color="#0000FF">Index</font> : Positive) <font color="#0000FF">return</font> 
Object_Type;</tt>
</blockquote>
This function returns the lower bound of a range from the set <b>Container</b> using 
its positive index. Constraint_Error is propagated if <b>Index</b> is wrong.
<blockquote>
<tt><font color="#0000FF">procedure</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: Set;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Index</b>&nbsp;&nbsp;&nbsp;&nbsp; : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Object_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Object_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt>
</blockquote>
This function is used to get a range from the set <b>Container</b> using a positive index. 
The ranges of elements are enumerated by integers from 1..<a href="#Generic_Discrete_Set.Get_Size">Get_Size</a>. Constraint_Error is propagated if <b>Index</b> is wrong.<blockquote>
<p><tt><font color="#0000FF"><a name="Generic_Discrete_Set.Get_Size"></a>function</font> Get_Size
(<b>Container</b> : Set)<font COLOR="#000000">&nbsp;</font><font color="#0000FF">return</font>
Natural;</tt></p>
</blockquote>
<p>This function returns the number of ranges in the set. Elements of a set can 
be enumerated by enumerating elements from the ranges 1..<a href="#Generic_Discrete_Set.Get_Size">Get_Size</a> (<b>Container</b>)</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Is_Empty
(<b>Container</b> : Set) <font color="#0000FF"> return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Container</b> is empty.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Generic_Discrete_Set.Is_In"></a>function</font> Is_In
  (<b>Container</b> : Set; <b> Item</b>&nbsp;&nbsp;&nbsp;&nbsp; : Object_Type)&nbsp;<font color="#0000FF">return</font> Boolean;<font color="#0000FF"><br>
	function</font> Is_In
  (<b>Container</b> : Set; <b>From</b>, <b>To</b> : Object_Type)&nbsp;<font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Item</b> 
or whole <b>From</b>..<b>To</b> is in <b>Container</b>.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Generic_Discrete_Set.Is_Not_In"></a>function</font> Is_Not_In
  (<b>Container</b> : Set; <b>From</b>, <b>To</b> : Object_Type)&nbsp;<font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if none of the 
items from <b>From</b>..<b>To</b> is in <b>Container</b>. Both
<a href="#Generic_Discrete_Set.Is_In">Is_In</a> and
<a href="#Generic_Discrete_Set.Is_Not_In">Is_Not_In</a> are <i>
<font color="#800000">false</font></i> when some elements from <b>From</b>..<b>To</b> 
belong to the set and some do not.</p>
<blockquote>
  <p><tt>
  <font color="#0000FF">procedure</font> Range_Remove (<b>Container</b> :<font color="#0000FF"> in out
  </font> Set; <b>Index</b>     : Positive);</tt></p>
</blockquote>
<p>This procedure removes a range of elements by its index. Constraint_Error is propagated 
when <b>Index</b> does not specify any range. The number of elements ranges is 
obtaining using the function <a href="#Generic_Discrete_Set.Get_Size">Get_Size</a>.</p>
<blockquote>
  <p><tt>
  <font color="#0000FF">procedure</font> Remove (<b>Container</b> :<font color="#0000FF"> in out
  </font> Set; <b> Item</b>&nbsp;&nbsp;&nbsp;&nbsp;
: Object_Type);<font color="#0000FF"><br>
	procedure</font> Remove (<b>Container</b> :<font color="#0000FF"> in out
  </font> Set; <b>From</b>, <b>To </b>: Object_Type);<br>
  <font color="#0000FF">procedure</font> Remove (<b>Container</b> :<font color="#0000FF"> in out
  </font> Set; <b>Items&nbsp;&nbsp; </b>     &nbsp;: Set);</tt></p>
</blockquote>
<p>These procedures are used to remove items from the set <b>Container</b>.&nbsp;An item can be removed either explicitly, or by specifying a
set of items to be removed. If a particular item is not in the set, then nothing
happens. When <b>From</b>..<b>To</b> is an illegal or empty range, the operation 
does nothing.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> To (<b>Container</b> : Set;
<font color="#0000FF">Index</font> : Positive) <font color="#0000FF">return</font> 
Object_Type;</tt>
</p>
</blockquote>
This function returns the upper bound of a range from the set <b>Container</b> using 
its positive index. Constraint_Error is propagated if <b>Index</b> is wrong.
<blockquote>
  <p><tt><font color="#0000FF">function</font>
  &quot;<font color="#FF0000">and</font>&quot; (<b>Left</b>, <b> Right</b> : Set)
  <font color="#0000FF"> return</font> Set;<br>
  <font color="#0000FF">function</font> &quot;<font color="#FF0000">or</font>&quot;
  <font COLOR="#000000">
&nbsp;</font>(<b>Left</b>, <b> Right</b> : Set) <font color="#0000FF"> return</font> Set;<br>
  <font color="#0000FF">function</font> &quot;<font color="#FF0000">xor</font>&quot;
  (<b>Left</b>, <b> Right</b> : Set) <font color="#0000FF"> return</font> Set;</tt></p>
</blockquote>
<p>These functions are conventional set operations - intersection, union,
difference. Difference is defined as a set which items are only in one of the
sets <b>Left</b> and <b>Right</b>.</p>
<blockquote>
  <p><tt>
  <font color="#0000FF">function</font> &quot;<font color="#FF0000">-</font>&quot;
  (<b>Left</b>, <b> Right</b> : Set) <font color="#0000FF"> return</font> Set;</tt></p>
</blockquote>
<p>This function returns a set containing all elements of <b>Left</b> not 
present in <b>Right</b>.</p>
<blockquote>
  <p><tt><font color="#0000FF">function</font>
  &quot;<font color="#FF0000">=</font>&quot; (<b>Left</b>, <b> Right</b> : Set) <font color="#0000FF"> return</font>
  Boolean;</tt></p>
</blockquote>
<p>This function returns<font color="#800000"> <i>true</i></font> is if both sets contain same items.</p>
<p align="right">
  <a name="3.2"></a><a href="#3.1"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#3.3"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>3.2. Maps</H3>
<p><a name="Generic_Map"></a><a name="Map"></a>The package
<a href="#Generic_Map">Generic_Map</a> defines the type
Map which represents an associative array.
One can add to and remove from items
of the  map. Each item has an unique key associated with it. In other word a map 
is a function which for a given key yields an item. Items of the map can be also accessed using the positive index. 
Items in the map are ordered according to their keys, so the map implementation may use binary search.  
Reference counting is used for the objects of the type Map, which means that 
assigning Map objects is relatively cheap. The package is
generic and has  the  following
generic parameters:
</p>
<blockquote>
<tt><font color="#0000FF">generic</font><br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">type</font> Key_Type<font color="#0000FF"> 
is private</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Object_Type <font color="#0000FF">is private</font>;<br>
&nbsp;&nbsp;&nbsp;Minimal_Size&nbsp;: Positive := <font color="#800000">64</font>;<br>
&nbsp;&nbsp;&nbsp;Increment&nbsp;&nbsp;&nbsp;&nbsp;: Natural&nbsp; := <font color="#800000">50</font>;<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">with function</font> "<font color="#FF0000">&lt;</font>" (<b>Left</b>, <b> Right</b> :
Key_Type) <font color="#0000FF">return</font> Boolean <font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">with function</font> &quot;<font color="#FF0000">=</font>&quot; (<b>Left</b>, <b> Right</b> :
Key_Type) <font color="#0000FF">return</font> Boolean <font color="#0000FF">is</font> &lt;&gt;;<br>
<font color="#0000FF">package</font> Generic_Map <font color="#0000FF">is<br>
&nbsp;&nbsp; type</font> Map <font color="#0000FF">is new</font> 
Ada.Finalization.Controlled <font color="#0000FF">with private</font>;<br>
&nbsp;&nbsp; ...</tt>
</blockquote>
<p>Here:</p>
<ul>
  <li>Key_Type is the type of the association keys;</li>
  <li>Object_Type is the type of map items;</li>
  <li>Minimal_Size is the minimal number of items by which the internal buffer
    of the map is enlarged. When the first item is put into the map, this will
    be the initial buffer size.</li>
  <li>Increment controls further buffer enlargements. The buffer is enlarged by <i>n</i>*Increment/100,
    where <i> n</i> is the current buffer size. If the evaluated increment of 
  the buffer is less than Minimal_Size
    items, then the
    later is used instead.</li>
  <li>&quot;<font color="#FF0000">&lt;</font>&quot; and &quot;<font color="#FF0000">=</font>&quot;
    are used to order keys of the items in the map.</li>
</ul>
<p>Both Key_Type and Object_Type can be controlled. The implementation warranties 
that when an item or key is no more used in the map it is erased by assigning it a 
value created by the default constructor (if any). This behavior ensures that items 
and keys removed from the map will be always finalized upon the operation. For 
example, when Object_Type is controlled, then Finalize will be called upon an 
item of Object_Type even if the item is not replaced but removed from a map. 
This happens through assigning some other object of Object_Type to the removed 
item. So when item is a <a href="#Handle">Handle</a>, then the reference count 
of an object it refers will be decreased as expected. On assignment no deep copy of a map is made. Deep copy is 
postponed till the
time moment when the original and a copy become different. Items in the map are ordered 
according to their keys, so that items with lesser keys have lesser indices, 
when indexed. The first item in the map has index 1.</p>
<table border="1" cellspacing="0" cellpadding="5">
	<tr>
		<td><i>Note that <a href="#Generic_Map">Generic_Map</a> cannot be instantiated with Integer or any 
		its subtype as Key_Type. This feature is per design for safety reasons. 
		The objects in the map are enumerated by Integer, so if maps indexed by 
		Integer are required then <a href="#Generic_Discrete_Map">
		Generic_Discrete_Map</a> should be used instead or else the Key_Type must be made different from 
		Integer. For example as:</i><blockquote><i><tt><font color="#0000FF">
			type</font> Integer_Key <font color="#0000FF">is new</font> Integer;<br>
			<font color="#0000FF">package</font> Integer_Maps
			<font color="#0000FF">is<br>
&nbsp;&nbsp; new </font>Generic_Map (Key_Type =&gt; Integer_Key, ...);</tt></i></blockquote>
		</td>
	</tr>
</table>
<p>The
following operations are defined on the type Map:</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Add<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Container</b> :<font color="#0000FF"> in out
</font> Map;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</b>&nbsp;: Key_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b> Item</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Object_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This procedure adds a new item (<b>Item</b>) to the map <b>Container</b>. 
Constraint_Error propagates if <b>Container</b> already contains an item with 
the key equal to <b>Key</b>.</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Add (<b>Container</b> :<font color="#0000FF"> in out </font> 
Map;
<b> Items</b> : Map);</tt>
</blockquote>
<p>This procedure adds all items of <b>Items</b> to <b>Container</b>. If <b>
Container</b> already has an item with the key equal to an item from <b>Items</b>, 
then that item from <b>Items</b> is ignored.</p>
<blockquote>
<tt><font color="#0000FF">function </font> Create<font color="#0000FF"> return
  </font>Map;</tt></blockquote>
<p>This function returns an empty map.</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Erase
  (<b>Container</b> : <font color="#0000FF"> in out </font> Map);</tt></blockquote>
<p>This procedure removes all items from <b>Container</b>.</p>
<blockquote>
<tt><font color="#0000FF">function</font> Find
(<b>Container</b> : Map; <b> Key</b> : Key_Type)&nbsp;<font color="#0000FF">return</font> Integer;</tt></blockquote>
<p>This function is used to find an item in the map <b>Container</b>. The result
is either a positive index of the found item or a negated index of the place
where the item should be if it were in the map.</p>
<blockquote>
<tt><font color="#0000FF">function</font> Get (<b>Container</b> : Map; <b>Key</b>
: Key_Type)&nbsp;<font color="#0000FF">return</font>   Object_Type;</tt></blockquote>
<p>This returns an item of the map <b>Container</b> by its key. Constraint_Error 
is propagated if there is no item with the key equal to <b>Key</b>.</p>
<blockquote>
<tt><font color="#0000FF">function</font> Get (<b>Container</b> : Map;
<b> Index</b> : Positive)&nbsp;<font color="#0000FF">return</font>   Object_Type;</tt></blockquote>
<p>This function is used to get an item of the map <b>Container</b> using
positive index. Constraint_Error is propagated if <b>Index</b> 
is wrong. Note that item 
index may change when items are added or removed.</p><blockquote>
<tt><font color="#0000FF">function</font> Get_Key (<b>Container</b> : Map;
<b> Index</b> : Positive)&nbsp;<font color="#0000FF">return</font>   Key_Type;</tt>
</blockquote>
This functions returns the key of an item in <b>Container</b>. Constraint_Error is propagated if <b>Index</b> is wrong.<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Size
(<b>Container</b> : Map)<font COLOR="#000000">&nbsp;</font><font color="#0000FF">return</font>
Natural;</tt></p>
</blockquote>
<p>This function returns the number of items in the map.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Is_Empty
(<b>Container</b> : Map) <font color="#0000FF"> return</font> Boolean;</tt></p>
</blockquote>
<p>True is returned if <b>Container</b> is empty.</p>
<blockquote>
  <p><tt><font color="#0000FF">function</font> Is_In
  (<b>Container</b> : Map; <b>Key</b> : Key_Type)<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>True is returned if <b>Container</b> has an item for <b>Key</b>.</p>
<blockquote>
  <p><tt><font color="#0000FF">procedure</font> Remove (<b>Container</b> :<font color="#0000FF"> in out
  </font> Map; <b> Item</b>
&nbsp;: Key_Type);<br>
  <font color="#0000FF">procedure</font> Remove (<b>Container</b> :<font color="#0000FF"> in out
  </font> Map; <b>Items</b>     : Set);</tt></p>
</blockquote>
<p>These procedures are used to remove items from the map <b>Container</b>.&nbsp;An item can be removed either by its key, or by specifying a
map of items to be removed. If a particular item is not in the map, then nothing
happens.</p>
<blockquote>
  <p><tt><font color="#0000FF">procedure</font> Remove
  (<b>Container</b> :<font color="#0000FF"> in out </font> Map; <b> Index</b> : Positive);</tt></p>
</blockquote>
<p>This procedures removes an items from the map <b>Container</b> by its 
positive index.&nbsp;Constraint_Error is propagated when item index is wrong.</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Container</b> :<font color="#0000FF"> in out
</font> Map;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b> Item</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Object_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Container</b> :<font color="#0000FF"> in out </font> 
Map;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<b> Items&nbsp;&nbsp;&nbsp; </b>&nbsp;: Map<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
These procedures are used to add or replace items. An can be either added or replaced by its key. That is when Container 
does contain an item with the key equal to <b>Key</b>, then it is replaced by <b>
Item</b>, otherwise <b>Item</b> is added under <b>Key</b>. The second&nbsp; variant 
adds or replaces all items from the map <b>Items</b>.<blockquote>
<tt><font color="#0000FF">procedure</font> Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Container</b> :<font color="#0000FF"> in out
</font> Map;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Index</b>&nbsp;&nbsp;&nbsp;&nbsp; : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b> Item</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Object_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
This procedure replaces an items by its positive index. Contraint_Error is propagated 
when <b>Index</b> is wrong.<blockquote>
  <p><tt><font color="#0000FF">function</font>
  &quot;<font color="#FF0000">=</font>&quot; (<b>Left</b>, <b> Right</b> : Map) <font color="#0000FF"> return</font>
  Boolean;</tt></p>
</blockquote>
<p>This function returns<font color="#800000"> <i>true</i></font> is if both 
parameters map same keys to same items.</p>
<h4><a name="3.2.1"></a>3.2.1. Maps of indefinite keys and objects</h4>
<p><a name="Generic_Indefinite_Map"></a>The package
<a href="#Generic_Map">Generic_Indefinite_Map</a> is exactly as the package
<a href="#Generic_Map">Generic_Map</a>, but also allows keys and objects of 
indefinite types:</p>
<blockquote>
<tt><font color="#0000FF">generic</font><br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">type</font> Key_Type (&lt;&gt;)<font color="#0000FF"> 
is private</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Object_Type (&lt;&gt;) <font color="#0000FF">is private</font>;<br>
&nbsp;&nbsp;&nbsp;Minimal_Size&nbsp;: Positive := <font color="#800000">64</font>;<br>
&nbsp;&nbsp;&nbsp;Increment&nbsp;&nbsp;&nbsp;&nbsp;: Natural&nbsp; := <font color="#800000">50</font>;<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">with function</font> "<font color="#FF0000">&lt;</font>" (<b>Left</b>, <b> Right</b> :
Key_Type) <font color="#0000FF">return</font> Boolean <font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">with function</font> &quot;<font color="#FF0000">=</font>&quot; (<b>Left</b>, <b> Right</b> :
Key_Type) <font color="#0000FF">return</font> Boolean <font color="#0000FF">is</font> &lt;&gt;;<br>
<font color="#0000FF">package</font> Generic_Map <font color="#0000FF">is<br>
&nbsp;&nbsp; type</font> Map <font color="#0000FF">is new</font> 
Ada.Finalization.Controlled <font color="#0000FF">with private</font>;<br>
&nbsp;&nbsp; ...</tt></blockquote>
<h4><a name="3.2.2"></a>3.2.2. Maps of discrete keys</h4>
<p><a name="Generic_Discrete_Map"></a>The package
<a href="#Generic_Discrete_Map">Generic_Discrete_Map</a> is designed to provide 
maps of discrete keys. The implementation takes advantage of using ranges of 
keys allowing very large maps. Differently to <a href="#Generic_Map">Generic_Map</a> 
it maps ranges of keys to object. The ranges are split and merged transparently 
when individual (<i>key</i>, <i>object</i>) pairs added. The package is
generic and has  the  following
generic parameters:
</p>
<blockquote>
<tt><font color="#0000FF">generic</font><br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">type</font> Key_Type<font color="#0000FF"> 
is</font> (&lt;&gt;);<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Object_Type <font color="#0000FF">is private</font>;<br>
&nbsp;&nbsp;&nbsp;Minimal_Size&nbsp;: Positive := <font color="#800000">64</font>;<br>
&nbsp;&nbsp;&nbsp;Increment&nbsp;&nbsp;&nbsp;&nbsp;: Natural&nbsp; := <font color="#800000">50</font>;<br>
<font color="#0000FF">package</font> Generic_Discrete_Map <font color="#0000FF">is<br>
&nbsp;&nbsp; <a name="Generic_Discrete_Map.Map"></a>type</font> Map <font color="#0000FF">is new</font> 
Ada.Finalization.Controlled <font color="#0000FF">with private</font>;<br>
&nbsp;&nbsp; ...</tt>
</blockquote>
<p>Here:</p>
<ul>
  <li>Key_Type is the type of the association keys;</li>
  <li>Object_Type is the type of map items;</li>
  <li>Minimal_Size is the minimal number of items by which the internal buffer
    of the map is enlarged. When the first item is put into the map, this will
    be the initial buffer size.</li>
  <li>Increment controls further buffer enlargements. The buffer is enlarged by <i>n</i>*Increment/100,
    where <i> n</i> is the current buffer size. If the evaluated increment of 
  the buffer is less than Minimal_Size
    items, then the
    later is used instead.</li>
</ul>
<p>The
following operations are defined on the type Map:</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Add<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Container</b> :<font color="#0000FF"> in out
</font> Map;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key
</b>&nbsp;&nbsp;&nbsp; &nbsp; : Key_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b> Item&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </b>: Object_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">procedure</font> Add<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Container</b> : <font color="#0000FF">in out</font> Map;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
From</b>, <b>To</b>&nbsp; : Key_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Item</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Object_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This procedure adds to <b>Container</b> a key or a range of keys mapped to the <b>Item</b>. Constraint_Error propagates if <b>Container</b> already 
maps another item to any of the required keys. It is also propagated when <b>
From</b> &gt; <b>To</b> such that Key_Type'Pred (<b>From</b>) /= <b>To</b>.</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Add (<b>Container</b> :<font color="#0000FF"> 
in out </font> 
Map;
<b> Items</b> : Map);</tt>
</blockquote>
<p>This procedure adds all items of <b>Items</b> to <b>Container</b>. If <b>
Container</b> already has an item with the key equal to an item from <b>Items</b>, 
then that item from <b>Items</b> is ignored.</p>
<blockquote>
<tt><font color="#0000FF">function </font> Create<font color="#0000FF"> return
  </font>Map;</tt></blockquote>
<p>This function returns an empty map.</p>
<blockquote>
<tt><font color="#0000FF">function </font> Create (<b>Keym</b>&nbsp;&nbsp;&nbsp;&nbsp; : 
Key_Type; Item : Object_Type)<font color="#0000FF"> return
  </font>Map;<br>
<font color="#0000FF">function</font> Create (<b>From</b>, <b>To</b> : 
Key_Type; Item : Object_Type) <font color="#0000FF">return</font> Set;</tt></blockquote>
<p>These functions return a mapping of the specified keys to <b>Item</b>. Constraint_Error is propagated 
when <b>From</b> &gt; <b>To </b>such that Object_Type'Pred (<b>From</b>) /= <b>
To</b>.</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Erase
  (<b>Container</b> : <font color="#0000FF"> in out </font> Map);</tt></blockquote>
<p>This procedure removes all items from <b>Container</b>.</p>
<blockquote>
<tt><font color="#0000FF">function</font> Find
(<b>Container</b> : Map; <b>Key </b>&nbsp;&nbsp;&nbsp;&nbsp; : Key_Type) <font color="#0000FF">return</font> Integer;<br>
<font color="#0000FF">function</font> Find (<b>Container</b> : Map; <b>From</b>,
<b>To</b> : Key_Type) <font color="#0000FF">return</font> Integer;</tt></blockquote>
<p>This function is used to find an item mapping by a key or a range keys. The result
is either a positive index of an range containing all keys or a negated index of 
the place where the item should be if it were in the set. Ranges in the map are ordered 
according to their lower bounds. Intersecting ranges are considered equal. 
Constraint_Error is propagated when <b>From</b> &gt; <b>To</b>.</p>
<blockquote>
<tt><font color="#0000FF">function</font> From (<b>Container</b> : Map;
<font color="#0000FF">Index</font> : Positive) <font color="#0000FF">return</font> 
Key_Type;</tt>
</blockquote>
This function returns the lower bound of a range of keys the map <b>Container</b> using 
its positive index. Constraint_Error is propagated if <b>Index</b> is wrong.<blockquote>
<tt><font color="#0000FF">function</font> Get (<b>Container</b> 
: Map; <b>Key</b> : Key_Type) <font color="#0000FF">return</font> Object_Type;</tt>
</blockquote>
This function returns the item corresponding to the specified key. Constraint_Error is propagated if 
there is no such item.<blockquote>
<tt><font color="#0000FF"><a name="Generic_Discrete_Map.Get_Size"></a>procedure</font> Get_Key<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: Map;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Index</b>&nbsp;&nbsp;&nbsp;&nbsp; : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Key_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Key_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt>
</blockquote>
This function is used to get a range of keys from the map <b>Container</b> using a positive index. Constraint_Error is propagated if <b>Index</b> is wrong.
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Size
(<b>Container</b> : Map)<font COLOR="#000000">&nbsp;</font><font color="#0000FF">return</font>
Natural;</tt></p>
</blockquote>
<p>This function returns the number of key ranges in the map.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Is_Empty
(<b>Container</b> : Set) <font color="#0000FF"> return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Container</b> is empty.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Generic_Discrete_Map.Is_In"></a>function</font> Is_In
  (<b>Container</b> : Map; <b> Item</b>&nbsp;&nbsp;&nbsp;&nbsp; : Key_Type)&nbsp;<font color="#0000FF">return</font> Boolean;<font color="#0000FF"><br>
	function</font> Is_In
  (<b>Container</b> : Map; <b>From</b>, <b>To</b> : Key_Type)&nbsp;<font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Item</b> 
or whole <b>From</b>..<b>To</b> is in <b>Container</b>.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Generic_Discrete_Map.Is_Not_In"></a>function</font> Is_Not_In
  (<b>Container</b> : Map; <b>From</b>, <b>To</b> : Object_Type)&nbsp;<font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if none of the 
keys from <b>From</b>..<b>To</b> is in <b>Container</b>. Note that it both
<a href="#Generic_Discrete_Map.Is_In">Is_In</a> and
<a href="#Generic_Discrete_Map.Is_Not_In">Is_Not_In</a> are <i>
<font color="#800000">false</font></i> when <b>From</b>..<b>To</b> contains keys 
from the map and keys outside it.</p>
<blockquote>
<tt><font color="#0000FF">function</font> Range_Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: Map;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Index</b>&nbsp;&nbsp;&nbsp;&nbsp; : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Object_Type;</tt>
</blockquote>
This function returns an item corresponding to the range of keys specified by 
its index. The ranges are enumerated using indices from 1..<a href="#Generic_Discrete_Map.Get_Size">Get_Size</a>. Constraint_Error is propagated if <b>Index</b> is wrong.<blockquote>
  <p><tt>
  <font color="#0000FF">procedure</font> Range_Remove (<b>Container</b> :<font color="#0000FF"> in out
  </font>Map; <b>Index</b>     : Positive);</tt></p>
</blockquote>
<p>This procedure removes a range of keys by its index. Constraint_Error is propagated 
when <b>Index</b> does not specify any range.</p>
<blockquote>
  <p><tt>
  <font color="#0000FF">procedure</font> Range_Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
	: <font color="#0000FF">in out</font> Map;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Index</b>&nbsp;&nbsp;&nbsp;&nbsp; : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Item</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Object_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure replaces a range of keys specified by its index. Constraint_Error is propagated 
when <b>Index</b> does not specify any range.</p>
<blockquote>
  <p><tt>
  <font color="#0000FF">procedure</font> Remove (<b>Container</b> :<font color="#0000FF"> in out
  </font>Map; <b> Item</b>&nbsp;&nbsp;&nbsp;&nbsp;
: Key_Type);<font color="#0000FF"><br>
	procedure</font> Remove (<b>Container</b> :<font color="#0000FF"> in out
  </font>Map; <b>From</b>, <b>To </b>: Key_Type);<br>
  <font color="#0000FF">procedure</font> Remove (<b>Container</b> :<font color="#0000FF"> in out
  </font>Map; <b>Items&nbsp;&nbsp; </b>     &nbsp;: Map);</tt></p>
</blockquote>
<p>These procedures are used to remove mappings from the set <b>Container</b>.&nbsp;An item can be removed either explicitly, or by specifying a
set of items to be removed. If a particular item is not in the set, then nothing
happens. When <b>From</b>..<b>To</b> is an illegal or empty range, the operation 
does nothing.</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Container</b> :<font color="#0000FF"> in out
</font> Map;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key
</b>&nbsp; &nbsp;&nbsp;&nbsp; : Key_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b> &nbsp;Item&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </b>: Object_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">procedure</font> Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Container</b> : <font color="#0000FF">in out</font> Map;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
From</b>, <b>To</b>&nbsp; : Key_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Item</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Object_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This procedure replaces or adds to <b>Container</b> a key or a range of keys 
mapped to the <b>Item</b>. Constraint_Error is propagated when <b>
From</b> &gt; <b>To</b>.</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Replace (<b>Container</b> :<font color="#0000FF"> in out </font> 
Map;
<b> Items</b> : Map);</tt>
</blockquote>
<p>This procedure replaces or adds all items from <b>Items</b> in <b>Container</b>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> To (<b>Container</b> : Map;
<font color="#0000FF">Index</font> : Positive) <font color="#0000FF">return</font> 
Key_Type;</tt>
</p>
</blockquote>
This function returns the upper bound of a range of keys from the set <b>Container</b> using 
its positive index. Constraint_Error is propagated if <b>Index</b> is wrong.
<blockquote>
  <p><tt><font color="#0000FF">function</font>
  &quot;<font color="#FF0000">=</font>&quot; (<b>Left</b>, <b> Right</b> : Map) <font color="#0000FF"> return</font>
  Boolean;</tt></p>
</blockquote>
<p>This function returns<font color="#800000"> <i>true</i></font> is if both 
parameters map same keys to same items.</p>
<h4><a name="3.2.3"></a>3.2.3. Maps of discrete keys to indefinite objects</h4>
<p><a name="Generic_Discrete_Indefinite_Map"></a>The package
<a href="#Generic_Discrete_Indefinite_Map">Generic_Discrete_Indefinite_Map</a> is 
exactly like
<a href="#Generic_Discrete_Map">Generic_Discrete_Map</a> but allows mapping to 
the objects of indefinite types (e.g. String):
</p>
<blockquote>
<tt><font color="#0000FF">generic</font><br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">type</font> Key_Type<font color="#0000FF"> 
is</font> (&lt;&gt;);<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Object_Type (&lt;&gt;) <font color="#0000FF">is private</font>;<br>
&nbsp;&nbsp;&nbsp;Minimal_Size&nbsp;: Positive := <font color="#800000">64</font>;<br>
&nbsp;&nbsp;&nbsp;Increment&nbsp;&nbsp;&nbsp;&nbsp;: Natural&nbsp; := <font color="#800000">50</font>;<br>
<font color="#0000FF">package</font> Generic_Discrete_Indefinite_Map <font color="#0000FF">is<br>
&nbsp;&nbsp; type</font> Map <font color="#0000FF">is new</font> 
Ada.Finalization.Controlled <font color="#0000FF">with private</font>;<br>
&nbsp;&nbsp; ...</tt></blockquote>
<p>The implementation tries to reuse allocated objects where possible using a 
reference counting scheme. Thus the same object can be referenced by several 
ranges of keys. If this behaviour is undesirable,
<a href="#Generic_Indefinite_Map">Generic_Indefinite_Map</a> should be used 
instead. The latter has a separate object for each key.</p>
<p align="right">
  <a name="3.3"></a><a href="#3.2"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#4"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>3.3. B-trees</H3>
<p><a name="b-tree"></a>A B-tree is a map effective for large sets of keys 
allocated in a storage supporting random access to fixed blocks of memory. 
B-trees are used for implementation of file systems and databases. A B-tree is 
balanced. A node of the tree has up to fixed number of keys. Each nodes has a 
bucket with sorted keys and values. Binary search is used to within the bucket. 
Keys in the non-leaf nodes have to children. Keys of branch nodes may have up to 
two children on the left and on the right. The left child and its children 
contains keys lesser than the key itself. The right one contains greater keys. 
Adjacent keys in the bucket share the child which is the right child of the 
first key and the left child of the second key. The keys of subtree rooted in the child are 
greater than the first key and lesser than the second key. Each child bucked 
keeps an upward link to its parent. The keys of the tree can be effectively 
traversed in ascending and descending order.</p>
<h4><a name="3.3.1"></a>3.3.1. B-trees of definite keys and objects</h4>
<p><a name="Generic_B_Tree"></a>The generic package
<a href="#Generic_B_Tree">Generic_B_Tree</a> provides an implementation of 
B-trees with definite keys and values. The package 
formal parameters are:
</p>
<blockquote>
<tt><font color="#0000FF">generic</font><br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Key_Type <font color="#0000FF">is 
private</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Object_Type <font color="#0000FF">
is private</font>;<br>
&nbsp;&nbsp; Width : Positive := <font color="#800000">256</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">with function</font> &quot;<font color="#FF0000">&lt;</font>&quot; 
(Left, Right : Key_Type) <font color="#0000FF">return</font> Boolean
<font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with function</font> &quot;<font color="#FF0000">=</font>&quot; 
(Left, Right : Key_Type) <font color="#0000FF">return</font> Boolean
<font color="#0000FF">is</font> &lt;&gt;;<br>
<font color="#0000FF">package</font> Generic_B_Tree <font color="#0000FF">is </font>
...</tt></blockquote>
<p>The generic formal parameters are:</p>
<ul>
	<li><i>Key_Type</i> is the type of key used to search in the tree;</li>
	<li><i>Object_Type</i> is the type of the value attached to the key;</li>
	<li><i>Width</i> is the size of the bucket of key-value pairs allocated per 
	tree node;</li>
	<li><i>&quot;&lt;&quot;</i> is the operation used to order the keys;</li>
	<li><i>&quot;=&quot;</i> is the operation used to compare keys for equivalence.</li>
</ul>
<p>The type of the B-tree is declared as</p>
<blockquote>
<tt><font color="#0000FF">type</font> B_Tree <font color="#0000FF">is new </font>
Ada.Finalization.Limited_Controlled <font color="#0000FF">with private</font>;</tt></blockquote>
<p>The following operations are defined on the type:</p>
<blockquote>
<tt><font color="#0000FF"><a name="Generic_B_Tree.Add"></a>procedure</font> Add<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> B_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp;&nbsp;&nbsp; : Object_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This procedure adds new key-value pair to the tree. Constraint_Error is 
propagated when <b>Key</b> is already present in the tree.</p>
<blockquote>
<tt><font color="#0000FF"><a name="Generic_B_Tree.Erase"></a>procedure</font> 
Erase (<b>Container</b> : <font color="#0000FF">in out</font> B_Tree);</tt></blockquote>
<p>This procedure removes all pairs from the tree.</p>
<blockquote>
<tt><font color="#0000FF"><a name="Generic_B_Tree.Finalize"></a>procedure</font> 
Finalize (<b>Container</b> : <font color="#0000FF">in out</font> B_Tree);</tt></blockquote>
<p>This procedure, when overridden in the child type must be called from the new 
implementation.</p>
<blockquote>
<tt><font color="#0000FF"><a name="Generic_B_Tree.Find"></a>function</font> Find 
(<b>Container</b> : B_Tree; <b>Key</b> : Key_Type) <font color="#0000FF">return</font> 
Item_Ptr;</tt></blockquote>
<p>This function is used to search the tree for given key. The result is a
<a href="#Generic_B_Tree.Item_Ptr">pointer</a> to the found <i>key-value</i> 
pair or <a href="#Generic_B_Tree.No_Item">No_Item</a> if the key is not in the 
tree.</p>
<blockquote>
<tt><font color="#0000FF"><a name="Generic_B_Tree.Get"></a>function</font> Get (<b>Container</b> 
: B_Tree; <b>Key</b> : Key_Type) <font color="#0000FF">return</font> Object_Type;</tt></blockquote>
<p>This function is returns the value associated with the key. Constraint_Error 
is propagated when the key is not in the tree.</p>
<blockquote>
<tt><font color="#0000FF"><a name="Generic_B_Tree.Get_First"></a>function</font> 
Get_First (<b>Container</b> : B_Tree) <font color="#0000FF">return</font> 
Item_Ptr;</tt></blockquote>
<p>This function returns a <a href="#Generic_B_Tree.Item_Ptr">pointer</a> to the
<i>key-value</i> pair with the least key. The result is
<a href="#Generic_B_Tree.No_Item">No_Item</a> if the tree is empty.</p>
<blockquote>
<tt><font color="#0000FF"><a name="Generic_B_Tree.Get_Last"></a>function</font> 
Get_Last (<b>Container</b> : B_Tree) <font color="#0000FF">return</font> 
Item_Ptr;</tt></blockquote>
<p>This function returns a <a href="#Generic_B_Tree.Item_Ptr">pointer</a> to the
<i>key-value</i> pair with the greatest key. The result is
<a href="#Generic_B_Tree.No_Item">No_Item</a> if the tree is empty.</p>
<blockquote>
<tt><font color="#0000FF"><a name="Generic_B_Tree.Inf"></a>function</font> Inf (<b>Container</b> 
: B_Tree; <b>Key</b> : Key_Type) <font color="#0000FF">return</font> Item_Ptr;</tt></blockquote>
<p>This function returns a <a href="#Generic_B_Tree.Item_Ptr">pointer</a> to the
<i>key-value</i> pair with the key less than or equal to <b>Key</b>. The result 
is <a href="#Generic_B_Tree.No_Item">No_Item</a> if the tree is empty.</p>
<blockquote>
<tt><font color="#0000FF"><a name="Generic_B_Tree.Is_Empty"></a>function</font> 
Is_Empty (<b>Container</b> : B_Tree) <font color="#0000FF">return</font> 
Boolean;</tt></blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if the tree is 
empty.</p>
<blockquote>
<tt><font color="#0000FF"><a name="Generic_B_Tree.Is_In"></a>function</font> 
Is_In (<b>Container</b> : B_Tree; <b>Key</b> : Key_Type) <font color="#0000FF">
return</font> Boolean;</tt></blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if <b>Key</b> 
is in the tree.</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Remove<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> B_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This procedure removes a <i>key-value</i> pair by the key. Nothing happens if 
the key is not in the tree.</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> B_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp;&nbsp;&nbsp; : Object_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This procedure adds new <i>key-value</i> pair if <b>Key</b> is not in the 
tree or else replaces the value in the pair if the <b>Key</b> is already in the 
tree.</p>
<blockquote>
<tt><font color="#0000FF"><a name="Generic_B_Tree.Sup"></a>function</font> Sup (<b>Container</b> 
: B_Tree; <b>Key</b> : Key_Type) <font color="#0000FF">return</font> Item_Ptr;</tt></blockquote>
<p>This function returns a <a href="#Generic_B_Tree.Item_Ptr">pointer</a> to the
<i>key-value</i> pair with the key greater than or equal to <b>Key</b>. The 
result is <a href="#Generic_B_Tree.No_Item">No_Item</a> if the tree is empty.</p>
<blockquote>
<tt><font color="#0000FF">function</font> &quot;<font color="#FF0000">=</font>&quot; (<b>Left</b>,
<b>Right</b> : B_Tree) <font color="#0000FF">return</font> Boolean;</tt></blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if both trees 
contains same sets of <i>key-value </i>pairs.</p>
<p><b><u>Pointers to the key-value pairs</u></b>. The type <a href="#Generic_B_Tree.Item_Ptr">Item_Ptr</a> is used to point a
<i>key-value</i> pair in the tree:</p>
<blockquote>
<tt><font color="#0000FF"><a name="Generic_B_Tree.Item_Ptr"></a>type</font> 
Item_Ptr<font color="#0000FF"> is private</font>;<br>
<a name="Generic_B_Tree.No_Item"></a>No_Item : <font color="#0000FF">constant</font> 
Item_Ptr;</tt></blockquote>
<p>The value <a href="#Generic_B_Tree.No_Item">No_Item</a> is used to indicate 
no item. Note that <i>key-value</i> pointers are volatile, any tree update 
operation can potentially invalidate any pointer. The following operations are 
defined on pointers:</p>
<blockquote>
<tt><font color="#0000FF"><a name="Generic_B_Tree.Get_Bucket_Address"></a>
function</font> Get_Bucket_Address (<b>Item</b> : Item_Ptr)
<font color="#0000FF">return</font> System.Address;</tt></blockquote>
<p>This function returns the address of the bucket pointed by <b>Item</b>. The 
result is Null_Address when <b>Item</b> is <a href="#Generic_B_Tree.No_Item">
No_Item</a>.</p>
<blockquote>
<tt><font color="#0000FF"><a name="Generic_B_Tree.Get_Bucket_Size"></a>function</font> 
Get_Bucket_Size (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> 
Natural;</tt></blockquote>
<p>This function returns the number of used slots in the bucket. The result is 0 
when <b>Item</b> is <a href="#Generic_B_Tree.No_Item">No_Item</a>.</p>
<blockquote>
<tt><font color="#0000FF"><a name="Generic_B_Tree.Get_Index"></a>function</font> 
Get_Index (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> Positive;</tt></blockquote>
<p>This function returns the position in the bucket of the <i>key-value</i> pair 
pointed by <b>Item</b>. The result is in the range 1..Get_Size (<b>Item</b>). 
Constraint_Error is propagated when <b>Item</b> is
<a href="#Generic_B_Tree.No_Item">No_Item</a>.</p>
<blockquote>
<tt><font color="#0000FF"><a name="Generic_B_Tree.Get_Key"></a>function</font> 
Get_Key (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> Key_Type;</tt></blockquote>
<p>This function returns the key in the <i>key-value</i> pair pointed by <b>Item</b>. 
Constraint_Error is propagated when <b>Item</b> is
<a href="#Generic_B_Tree.No_Item">No_Item</a>.</p>
<blockquote>
<tt><font color="#0000FF"><a name="Generic_B_Tree.Get_Next"></a>function</font> 
Get_Next (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> Item_Ptr;</tt></blockquote>
<p>This function returns the pointer to the next <i>key-value</i> pair. The 
result <a href="#Generic_B_Tree.No_Item">No_Item</a> when there is no such pair.</p>
<blockquote>
<tt><font color="#0000FF"><a name="Generic_B_Tree.Get_Previous"></a>function</font> 
Get_Previous (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> 
Item_Ptr;</tt></blockquote>
<p>This function returns the pointer to the previous <i>key-value</i> pair. The 
result <a href="#Generic_B_Tree.No_Item">No_Item</a> when there is no such pair.</p>
<blockquote>
<tt><font color="#0000FF"><a name="Generic_B_Tree.Get_Root"></a>function</font> 
Get_Root (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> Item_Ptr;</tt></blockquote>
<p>This function returns the pointer to the first <i>key-value</i> pair in the 
root bucket. The result <a href="#Generic_B_Tree.No_Item">No_Item</a> when there 
is no such pair.</p>
<blockquote>
<tt><font color="#0000FF"><a name="Generic_B_Tree.Get_Value"></a>function</font> 
Get_Value (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> 
Object_Type;</tt></blockquote>
<p>This function returns the value in the <i>key-value</i> pair pointed by <b>
Item</b>. Constraint_Error is propagated when <b>Item</b> is
<a href="#Generic_B_Tree.No_Item">No_Item</a>.</p>
<blockquote>
<tt><font color="#0000FF"><a name="Generic_B_Tree.Remove"></a>procedure</font> 
Remove (<b>Item</b> : <font color="#0000FF">in out</font> Item_Ptr);</tt></blockquote>
<p>This procedure removes the <i>key-value</i> pair pointed by <b>Item</b>. 
Constraint_Error is propagated when <b>Item</b> is
<a href="#Generic_B_Tree.No_Item">No_Item</a>. After removal <b>Item</b> is set 
to <a href="#Generic_B_Tree.No_Item">No_Item</a>.</p>
<blockquote>
<tt><font color="#0000FF"><a name="Generic_B_Tree.Replace"></a>procedure</font> 
Replace (<b>Item</b> : <font color="#0000FF">in out</font> Item_Ptr; <b>Value</b> 
: Object_Type);</tt></blockquote>
<p>This procedure changes the value in the <i>key-value</i> pair pointed by <b>
Item</b>. Constraint_Error is propagated when <b>Item</b> is
<a href="#Generic_B_Tree.No_Item">No_Item</a>.</p>
<h4><a name="3.3.2"></a>3.3.2. B-trees of indefinite keys and objects</h4>
<p><a name="Generic_Indefinite_B_Tree"></a>The package
<a href="#Generic_Indefinite_B_Tree">Generic_Indefinite_B_Tree</a> is exactly as
<a href="#Generic_B_Tree">Generic_B_Tree</a> except that it allows indefinite 
key and object types used in an instantiation:</p>
<blockquote>
<tt><font color="#0000FF">generic</font><br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Key_Type (&lt;&gt;) <font color="#0000FF">is 
private</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Object_Type (&lt;&gt;) <font color="#0000FF">
is private</font>;<br>
&nbsp;&nbsp; Width : Positive := <font color="#800000">256</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">with function</font> &quot;<font color="#FF0000">&lt;</font>&quot; 
(Left, Right : Key_Type) <font color="#0000FF">return</font> Boolean
<font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with function</font> &quot;<font color="#FF0000">=</font>&quot; 
(Left, Right : Key_Type) <font color="#0000FF">return</font> Boolean
<font color="#0000FF">is</font> &lt;&gt;;<br>
<font color="#0000FF">package</font> Generic_B_Tree <font color="#0000FF">is </font>
...</tt></blockquote>
<p>The generic formal parameters are:</p>
<ul>
	<li><i>Key_Type</i> is the type of key used to search in the tree;</li>
	<li><i>Object_Type</i> is the type of the value attached to the key;</li>
	<li><i>Width</i> is the size of the bucket of key-value pairs allocated per 
	tree node;</li>
	<li><i>&quot;&lt;&quot;</i> is the operation used to order the keys;</li>
	<li><i>&quot;=&quot;</i> is the operation used to compare keys for equivalence.</li>
</ul>
<h4><a name="3.3.3"></a>3.3.3 Persistent B-trees</h4>
<p><a name="Persistent.Memory_Pools.Streams.Generic_External_B_Tree"></a>The generic child package 
<a href="#Persistent.Memory_Pools">Persistent.Memory_Pools.</a><a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree">Streams.Generic_External_B_Tree</a> provides B-trees 
resident in a persistent memory pool. When the tree is updated the changes are 
kept in the storage. The tree object can then be finalized and the storage file 
closed. When the storage is re-opened the tree object can created new and bound 
to the stored content (see 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Set_Root_Address">
Set_Root_Address</a> and
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Get_Root_Address">
Get_Root_Address</a>).</p>
<table border="1" cellspacing="0" cellpadding="5">
	<tr>
		<td>The implementation of the package is task-safe, the B-tree object 
		can be concurrently accessed from several tasks.</td>
	</tr>
</table>
<p>The package formal parameters are:
</p>
<blockquote>
<tt><font color="#0000FF">generic</font><br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Key_Type (&lt;&gt;) <font color="#0000FF">is 
private</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Object_Type (&lt;&gt;) <font color="#0000FF">
is private</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">with function</font> Input_Key<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
(&nbsp; Stream : <font color="#0000FF">access</font> Root_Stream_Type'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
)&nbsp; <font color="#0000FF">return</font> Key_Type <font color="#0000FF">is</font> 
&lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with function</font> Input_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
(&nbsp; Stream : <font color="#0000FF">access</font> Root_Stream_Type'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
)&nbsp; <font color="#0000FF">return</font> Object_Type <font color="#0000FF">is</font> 
&lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with procedure</font> Output_Key<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
(&nbsp; Stream : <font color="#0000FF">access</font> Root_Stream_Type'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Key&nbsp;&nbsp;&nbsp; : Key_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
)&nbsp; <font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with procedure</font> Output_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
(&nbsp; Stream : <font color="#0000FF">access</font> Root_Stream_Type'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Value&nbsp; : Object_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
)&nbsp; <font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with function</font> &quot;<font color="#FF0000">&lt;</font>&quot; 
(Left, Right : Key_Type) <font color="#0000FF">return</font> Boolean
<font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with function</font> &quot;<font color="#FF0000">=</font>&quot; 
(Left, Right : Key_Type) <font color="#0000FF">return</font> Boolean
<font color="#0000FF">is</font> &lt;&gt;;<br>
<font color="#0000FF">package</font> Persistent.Memory_Pools.Stream.Generic_External_B_Tree <font color="#0000FF">is</font> 
...</tt></blockquote>
<p>The generic formal parameters are:</p>
<ul>
	<li><i>Key_Type</i> is the type of key used to search in the tree;</li>
	<li><i>Object_Type</i> is the type of the value attached to the key;</li>
	<li><i>Input_Key</i> is the function used to get a key from the stream. The 
	stream is used to access the memory allocated for the key in the storage 
	(see <a href="#Persistent.Memory_Pools.Streams.Input_Stream">Input_Stream</a>). 
	The implementation should be portable if the file is moved between different 
	architectures;</li>
	<li><i>Input_Value</i> is the function used to get a value from the stream. 
	As for the keys the stream is used to access the memory allocated for the 
	value in the storage (see <a href="#Persistent.Memory_Pools.Streams.Input_Stream">Input_Stream</a>). 
	The implementation should be portable if the file is moved between different 
	architectures. Alternatively a user-defined type defined operation
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Get_Streamed">Get</a> 
	can be used with a custom type derived from
	<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Abstract_Value_Access">
	Abstract_Value_Access</a> in order to access values. When both methods are 
	used, the should be compatible with each other;</li>
	<li><i>Output_Key</i> is the function used to put a key from the stream. The 
	stream is used to store the key (see
	<a href="#Persistent.Memory_Pools.Streams.Output_Stream">Output_Stream</a>);</li>
	<li><i>Output_Value</i> is the function used to put a value from the stream. 
	The stream is used to store the key (see
	<a href="#Persistent.Memory_Pools.Streams.Output_Stream">Output_Stream</a>). 
	An alternative method is provided by the operation
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Put">Put</a> 
	with&nbsp; custom type derived from
	<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Abstract_Value_Access">
	Abstract_Value_Access</a>;</li>
	<li><i>&quot;&lt;&quot;</i> is the operation used to order the keys;</li>
	<li><i>&quot;=&quot;</i> is the operation used to compare keys for equivalence.</li>
</ul>
<p>The type of the B-tree is declared as:</p>
<blockquote>
<tt><font color="#0000FF">type</font> B_Tree<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Pool : <font color="#0000FF">access</font> 
Persistent_Pool'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is new </font>
Ada.Finalization.Limited_Controlled <font color="#0000FF">with private</font>;</tt></blockquote>
<p>Here Pool is the persistent memory to allocate the tree in. The following operations are defined on the type:</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Add"></a>procedure</font> Add<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> B_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp;&nbsp;&nbsp; : Object_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This procedure adds new <i>key-value</i> pair to the tree. Constraint_Error is 
propagated when <b>Key</b> is already present in the tree.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Add_Stream">
</a>procedure</font> Add<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> B_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Producer</b>&nbsp; : <font color="#0000FF">in out </font>
Abstract_Value_Access'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This variant of the procedure uses <b>Producer</b> object's operation
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Put">Put</a> 
to store the value for the added key.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Erase"></a>procedure</font> 
Erase (<b>Container</b> : <font color="#0000FF">in out</font> B_Tree);</tt></blockquote>
<p>This procedure removes all <i>key-value</i> pairs from the tree.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Finalize"></a>procedure</font> 
Finalize (<b>Container</b> : <font color="#0000FF">in out</font> B_Tree);</tt></blockquote>
<p>This procedure, when overridden in the child type must be called from the new 
implementation.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Find"></a>function</font> Find 
(<b>Container</b> : B_Tree; <b>Key</b> : Key_Type) <font color="#0000FF">return</font> 
Item_Ptr;</tt></blockquote>
<p>This function is used to search the tree for given key. The result is a
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Item_Ptr">pointer</a> to the found <i>key-value</i> 
pair or 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.No_Item">No_Item</a> if the key is not in the 
tree.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Get"></a>function</font> Get (<b>Container</b> 
: B_Tree; <b>Key</b> : Key_Type) <font color="#0000FF">return</font> Object_Type;</tt></blockquote>
<p>This function is returns the value associated with the key. Constraint_Error 
is propagated when the key is not in the tree.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Get_Stream"></a>
procedure</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> B_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Consumer</b>&nbsp; : <font color="#0000FF">in out</font> 
Abstract_Value_Access'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This variant uses <b>Consumer</b> object's operation
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Get_Streamed">Get</a> to obtain the value corresponding to <b>Key</b>.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Get_First"></a>function</font> 
Get_First (<b>Container</b> : B_Tree) <font color="#0000FF">return</font> 
Item_Ptr;</tt></blockquote>
<p>This function returns a 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Item_Ptr">pointer</a> to the
<i>key-value</i> pair with the least key. The result is
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.No_Item">No_Item</a> if the tree is empty.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Get_Last"></a>function</font> 
Get_Last (<b>Container</b> : B_Tree) <font color="#0000FF">return</font> 
Item_Ptr;</tt></blockquote>
<p>This function returns a 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Item_Ptr">pointer</a> to the
<i>key-value</i> pair with the greatest key. The result is
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.No_Item">No_Item</a> if the tree is empty.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Get_Root_Address"></a>function</font> 
Get_Root_Address (<b>Container</b> : B_Tree) <font color="#0000FF">return</font> 
Byte_Index;</tt></blockquote>
<p>The result of this function is the byte index of the root bucket of the tree. 
Note that the index may change as the tree gets updated. The tree root is set 
using 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Set_Root_Address">Set_Root_Address</a> when the tree object has to be restored from the 
persistent storage. Typically before object finalization its actual root is 
obtained and stored somewhere in the persistent storage. When the storage is 
re-opened the root index is read from the storage, a tree object is created and 
then initialized using 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Set_Root_Address">Set_Root_Address</a>.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Inf"></a>function</font> Inf (<b>Container</b> 
: B_Tree; <b>Key</b> : Key_Type) <font color="#0000FF">return</font> Item_Ptr;</tt></blockquote>
<p>This function returns a 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Item_Ptr">pointer</a> to the
<i>key-value</i> pair with the key less than or equal to <b>Key</b>. The result 
is <a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.No_Item">No_Item</a> if there 
is no such pair.</p>
<blockquote>
<tt><font color="#0000FF">
procedure</font> 
Initialize (<b>Container</b> : <font color="#0000FF">in out</font> B_Tree);</tt></blockquote>
<p>This procedure, when overridden in the child type must be called from the new 
implementation.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Is_Empty"></a>function</font> 
Is_Empty (<b>Container</b> : B_Tree) <font color="#0000FF">return</font> 
Boolean;</tt></blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if the tree is 
empty.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Is_In"></a>function</font> 
Is_In (<b>Container</b> : B_Tree; <b>Key</b> : Key_Type) <font color="#0000FF">
return</font> Boolean;</tt></blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if <b>Key</b> 
is in the tree.</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Remove<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> B_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This procedure removes a <i>key-value</i> pair by the key. Nothing happens if 
the key is not in the tree.</p>
<blockquote>
<tt><font color="#0000FF">
procedure</font> Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> B_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp;&nbsp;&nbsp; : Object_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This procedure adds new <i>key-value</i> pair if <b>Key</b> is not in the 
tree or else replaces the value in the pair if the <b>Key</b> is already in the 
tree.</p>
<blockquote>
<tt><font color="#0000FF">
procedure</font> Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> B_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Producer</b>&nbsp; : <font color="#0000FF">in out</font> 
Abstract_Value_Access'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This variant of the procedure uses <b>Producer</b> object's operation
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Put">Put</a> 
to update or store the value for the added or existing key.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Set_Root_Address"></a>
procedure</font> Set_Root_Address<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> B_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Root</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This procedure sets the byte index of the tree root. Typically it is the 
value obtained using
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Get_Root_Address">
Get_Root_Address</a> before finalization of the object in the previous session. 
The value must be kept between the sessions for instance in a memory pool root index 
(See <a href="#Persistent.Memory_Pools.Get_Root_Index">Get_Root_Index</a> and
<a href="#Persistent.Memory_Pools.Set_Root_Index">Set_Root_Index</a>). When new 
session begins the and an instance of B_Tree is created,
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Set_Root_Address">
Set_Root_Address</a> must be called before any other operation.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Sup"></a>function</font> Sup (<b>Container</b> 
: B_Tree; <b>Key</b> : Key_Type) <font color="#0000FF">return</font> Item_Ptr;</tt></blockquote>
<p>This function returns a 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Item_Ptr">pointer</a> to the
<i>key-value</i> pair with the key greater than or equal to <b>Key</b>. The 
result is 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.No_Item">No_Item</a> if there 
is no such pair.</p>
<p><u><b>Pointers to the key-value pairs</b></u>. The type <a href="#Generic_B_Tree.Item_Ptr">Item_Ptr</a> is used to point a
<i>key-value</i> pair in the tree:</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Item_Ptr"></a>type</font> 
Item_Ptr<font color="#0000FF"> is private</font>;<br>
<a name="Persistent.Memory_Pools.Streams.Generic_External_B_Tree.No_Item"></a>No_Item : <font color="#0000FF">constant</font> 
Item_Ptr;</tt></blockquote>
<p>The value 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.No_Item">No_Item</a> is used to indicate 
no item. Note that <i>key-value</i> pointers are volatile, any tree update 
operation can potentially invalidate any pointer. The following operations are 
defined on the <i>key-value</i> pointer:</p>
<blockquote>
<tt><font color="#0000FF">function</font> Get_Bucket_Address (<b>Item</b> : Item_Ptr)
<font color="#0000FF">return</font> Byte_Index;</tt></blockquote>
<p>This function returns the address of the bucket pointed by <b>Item</b>. The 
result is 0 when <b>Item</b> is 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.No_Item">No_Item</a>.</p>
<blockquote>
<tt><font color="#0000FF">function</font> 
Get_Bucket_Size (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> 
Natural;</tt></blockquote>
<p>This function returns the number of used slots in the bucket. The result is 0 
when <b>Item</b> is 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.No_Item">No_Item</a>.</p>
<blockquote>
<tt><font color="#0000FF">function</font> 
Get_Index (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> Positive;</tt></blockquote>
<p>This function returns the position in the bucket of the <i>key-value</i> pair 
pointed by <b>Item</b>. The result is in the range 1..Get_Size (<b>Item</b>). 
Constraint_Error is propagated when <b>Item</b> is
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.No_Item">No_Item</a>.</p>
<blockquote>
<tt><font color="#0000FF">function</font> 
Get_Key (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> Key_Type;</tt></blockquote>
<p>This function returns the key in the <i>key-value</i> pair pointed by <b>Item</b>. 
Constraint_Error is propagated when <b>Item</b> is
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.No_Item">No_Item</a>.</p>
<blockquote>
<tt><font color="#0000FF">function</font> 
Get_Key_Address (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> 
Byte_Index;</tt></blockquote>
<p>This function returns the address of the key in the <i>key-value</i> pair pointed by <b>Item</b>. 
Constraint_Error is propagated when <b>Item</b> is
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.No_Item">No_Item</a>.</p>
<blockquote>
<tt><font color="#0000FF">function</font> 
Get_Next (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> Item_Ptr;</tt></blockquote>
<p>This function returns the pointer to the next <i>key-value</i> pair. The 
result 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.No_Item">No_Item</a> when there is no such pair.</p>
<blockquote>
<tt><font color="#0000FF">function</font> 
Get_Previous (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> 
Item_Ptr;</tt></blockquote>
<p>This function returns the pointer to the previous <i>key-value</i> pair. The 
result 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.No_Item">No_Item</a> when there is no such pair.</p>
<blockquote>
<tt><font color="#0000FF">function</font> 
Get_Root (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> Item_Ptr;</tt></blockquote>
<p>This function returns the pointer to the first <i>key-value</i> pair in the 
root bucket. The result 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.No_Item">No_Item</a> when there 
is no such pair.</p>
<blockquote>
<tt><font color="#0000FF">function</font> 
Get_Value (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> 
Object_Type;</tt></blockquote>
<p>This function returns the value in the <i>key-value</i> pair pointed by <b>
Item</b>. Constraint_Error is propagated when <b>Item</b> is
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.No_Item">No_Item</a>.</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Get_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Item</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Item_Ptr;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Consumer</b> : <font color="#0000FF">in out</font> Abstract_Value_Access'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This variant uses <b>Consumer</b> object's operation
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Get_Streamed">Get</a> to obtain the value 
of the <i>key-value</i> pair. Constraint_Error is propagated when <b>Item</b> is
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.No_Item">No_Item</a>.</p>
<blockquote>
<tt><font color="#0000FF">function</font> 
Get_Value_Address (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> 
Byte_Index;</tt></blockquote>
<p>This function returns the address of the value in the <i>key-value</i> pair pointed by <b>Item</b>. 
Constraint_Error is propagated when <b>Item</b> is
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.No_Item">No_Item</a>.</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> 
Remove (<b>Item</b> : <font color="#0000FF">in out</font> Item_Ptr);</tt></blockquote>
<p>This procedure removes the <i>key-value</i> pair pointed by <b>Item</b>. 
Constraint_Error is propagated when <b>Item</b> is
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.No_Item">No_Item</a>. After removal <b>Item</b> is set 
to <a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.No_Item">No_Item</a>.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Replace"></a>procedure</font>  
Replace (<b>Item</b> : <font color="#0000FF">in out</font> Item_Ptr; <b>Value</b> 
: Object_Type);</tt></blockquote>
<p>This procedure changes the value in the <i>key-value</i> pair pointed by <b>
Item</b>. Constraint_Error is propagated when <b>Item</b> is
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.No_Item">No_Item</a>.</p>
<blockquote>
<tt><font color="#0000FF">
procedure</font>  
Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Item</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Item_Ptr;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Producer</b> : <font color="#0000FF">in out</font> Abstract_Value_Access'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This variant of the procedure uses <b>Producer</b> object's operation
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Put">Put</a> 
to update or store the value for the added or existing key.</p>
<p><u><b>Stream access to values</b></u>. The type:</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Abstract_Value_Access">
</a>type</font> 
Abstract_Value_Access <font color="#0000FF">is abstract<br>
&nbsp;&nbsp; new </font>Ada.Finalization.Limited_Controlled
<font color="#0000FF">with null record</font>;</tt></blockquote>
<p>is used to access values of the <i>key-value</i> pair in the tree using a 
stream object. The type declares two abstract primitive operations to implement:</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Get_Streamed">
</a>procedure</font> 
Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Consumer</b> :
<font color="#0000FF">in out</font> Abstract_Value_Access;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stream</b>&nbsp;&nbsp; : <font color="#0000FF">in out</font> 
Root_Stream_Type'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></blockquote>
<p>This procedure is called when the value of the <i>key-value</i> pair has to 
be read from the B-tree. The parameter <b>Consumer</b> is the user-defined 
object passed to the tree operation getting the value. <b>Stream</b> is the 
stream to read the value from, e.g. using Object_Type'Input attribute (provided 
Object_Type'Output was used to store the value). Note that Input_Value and 
Output_Value generic formal parameters of the package are used to access the 
value in other cases. The method chosen in
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Get_Streamed">Get</a> must be compatible with those.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Put"></a>procedure</font> 
Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Producer</b> :
<font color="#0000FF">in out</font> Abstract_Value_Access;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stream</b>&nbsp;&nbsp; : <font color="#0000FF">in out</font> 
Root_Stream_Type'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></blockquote>
<p>This procedure is called when the value of the <i>key-value</i> pair has to 
be written into the B-tree. The parameter <b>Producer</b> is the user-defined 
object passed to the tree operation getting the value. <b>Stream</b> is the 
stream to write the value into, e.g. using Object_Type'Output attribute Note 
that Input_Value and Output_Value generic formal parameters of the package are 
used to access the value in other cases. The method chosen in
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.Put">Put</a> 
must be compatible with those.</p>
<h4><a name="3.3.4"></a>3.3.4 Persistent pointer-valued B-trees</h4>
<p><a name="Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree"></a>The generic child package 
<a href="#Persistent.Memory_Pools">Persistent.Memory_Pools.</a><a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree">Streams.Generic_External_Ptr_B_Tree</a> provides 
a variant of the persistent B-tree with pointers as values. Instead of a custom 
value type as in
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree">Generic_External_B_Tree</a> 
this tree maps key to plain persistent pointers of the
<a href="#Persistent.Blocking_Files.Byte_Index">Byte_Index</a> type.</p>
<table border="1" cellspacing="0" cellpadding="5">
	<tr>
		<td>The implementation of the package is task-safe, the B-tree object 
		can be concurrently accessed from several tasks.</td>
	</tr>
</table>
<p>The package formal parameters are:
</p>
<blockquote>
<tt><font color="#0000FF">generic</font><br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Key_Type (&lt;&gt;) <font color="#0000FF">is 
private</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">with function</font> Input_Key<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
(&nbsp; Stream : <font color="#0000FF">access</font> Root_Stream_Type'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
)&nbsp; <font color="#0000FF">return</font> Key_Type <font color="#0000FF">is</font> 
&lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with procedure</font> Output_Key<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
(&nbsp; Stream : <font color="#0000FF">access</font> Root_Stream_Type'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Key&nbsp;&nbsp;&nbsp; : Key_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
)&nbsp; <font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with function</font> &quot;<font color="#FF0000">&lt;</font>&quot; 
(Left, Right : Key_Type) <font color="#0000FF">return</font> Boolean
<font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with function</font> &quot;<font color="#FF0000">=</font>&quot; 
(Left, Right : Key_Type) <font color="#0000FF">return</font> Boolean
<font color="#0000FF">is</font> &lt;&gt;;<br>
<font color="#0000FF">package</font> Persistent.Memory_Pools.Stream.Generic_External_B_Tree <font color="#0000FF">is</font> 
...</tt></blockquote>
<p>The generic formal parameters are:</p>
<ul>
	<li><i>Key_Type</i> is the type of key used to search in the tree;</li>
	<li><i>Input_Key</i> is the function used to get a key from the stream. The 
	stream is used to access the memory allocated for the key in the storage 
	(see <a href="#Persistent.Memory_Pools.Streams.Input_Stream">Input_Stream</a>). 
	The implementation should be portable if the file is moved between different 
	architectures;</li>
	<li><i>Output_Key</i> is the function used to put a key from the stream. The 
	stream is used to store the key (see
	<a href="#Persistent.Memory_Pools.Streams.Output_Stream">Output_Stream</a>);</li>
	<li><i>&quot;&lt;&quot;</i> is the operation used to order the keys;</li>
	<li><i>&quot;=&quot;</i> is the operation used to compare keys for equivalence.</li>
</ul>
<p>The type of the B-tree is declared as:</p>
<blockquote>
<tt><font color="#0000FF">type</font> B_Tree<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Pool : <font color="#0000FF">access</font> 
Persistent_Pool'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is new </font>
Ada.Finalization.Limited_Controlled <font color="#0000FF">with private</font>;</tt></blockquote>
<p>Here Pool is the persistent memory to allocate the tree in. The following operations are defined on the type:</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.Add"></a>procedure</font> Add<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> B_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b>&nbsp;&nbsp; : Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This procedure adds new <i>key-pointer</i> pair to the tree. Constraint_Error is 
propagated when <b>Key</b> is already present in the tree.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.Erase"></a>procedure</font> 
Erase (<b>Container</b> : <font color="#0000FF">in out</font> B_Tree);</tt></blockquote>
<p>This procedure removes all <i>key-pointer</i> pairs from the tree.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.Finalize"></a>procedure</font> 
Finalize (<b>Container</b> : <font color="#0000FF">in out</font> B_Tree);</tt></blockquote>
<p>This procedure, when overridden in the child type must be called from the new 
implementation.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.Find"></a>function</font> Find 
(<b>Container</b> : B_Tree; <b>Key</b> : Key_Type) <font color="#0000FF">return</font> 
Item_Ptr;</tt></blockquote>
<p>This function is used to search the tree for given key. The result is a
<a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.Item_Ptr">pointer</a> to the found <i>key-value</i> 
pair or 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.No_Item">No_Item</a> if the key is not in the 
tree.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.Get"></a>function</font> Get (<b>Container</b> 
: B_Tree; <b>Key</b> : Key_Type) <font color="#0000FF">return</font> Byte_Index;</tt></blockquote>
<p>This function is returns the pointer associated with the key. Constraint_Error 
is propagated when the key is not in the tree.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.Get_First"></a>function</font> 
Get_First (<b>Container</b> : B_Tree) <font color="#0000FF">return</font> 
Item_Ptr;</tt></blockquote>
<p>This function returns a 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.Item_Ptr">pointer</a> to the
<i>key-pointer</i> pair with the least key. The result is
<a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.No_Item">No_Item</a> if the tree is empty.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.Get_Last"></a>function</font> 
Get_Last (<b>Container</b> : B_Tree) <font color="#0000FF">return</font> 
Item_Ptr;</tt></blockquote>
<p>This function returns a 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.Item_Ptr">pointer</a> to the
<i>key-pointer</i> pair with the greatest key. The result is
<a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.No_Item">No_Item</a> if the tree is empty.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.Get_Root_Address"></a>function</font> 
Get_Root_Address (<b>Container</b> : B_Tree) <font color="#0000FF">return</font> 
Byte_Index;</tt></blockquote>
<p>The result of this function is the byte index of the root bucket of the tree. 
Note that the index may change as the tree gets updated. The tree root is set 
using 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.Set_Root_Address">Set_Root_Address</a> when the tree object has to be restored from the 
persistent storage. Typically before object finalization its actual root is 
obtained and stored somewhere in the persistent storage. When the storage is 
re-opened the root index is read from the storage, a tree object is created and 
then initialized using 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.Set_Root_Address">Set_Root_Address</a>.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.Inf"></a>function</font> Inf (<b>Container</b> 
: B_Tree; <b>Key</b> : Key_Type) <font color="#0000FF">return</font> Item_Ptr;</tt></blockquote>
<p>This function returns a 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.Item_Ptr">pointer</a> to the
<i>key-pointer</i> pair with the key less than or equal to <b>Key</b>. The result 
is <a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.No_Item">No_Item</a> if there 
is no such pair.</p>
<blockquote>
<tt><font color="#0000FF">
procedure</font> 
Initialize (<b>Container</b> : <font color="#0000FF">in out</font> B_Tree);</tt></blockquote>
<p>This procedure, when overridden in the child type must be called from the new 
implementation.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.Is_Empty"></a>function</font> 
Is_Empty (<b>Container</b> : B_Tree) <font color="#0000FF">return</font> 
Boolean;</tt></blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if the tree is 
empty.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.Is_In"></a>function</font> 
Is_In (<b>Container</b> : B_Tree; <b>Key</b> : Key_Type) <font color="#0000FF">
return</font> Boolean;</tt></blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if <b>Key</b> 
is in the tree.</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Remove<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> B_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> Remove<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> B_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This procedure removes a <i>key-pointer</i> pair by the key. Nothing happens if 
the key is not in the tree. When the output parameter <b>Pointer</b> is 
specified it is set to the pointer from the removed pair. If no pair was removed
<b>Pointer</b> is set to 0.</p>
<blockquote>
<tt><font color="#0000FF">
procedure</font> Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> B_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b>&nbsp;&nbsp; : Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> B_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b>&nbsp;&nbsp; : Byte_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Replaced</b>&nbsp; : <font color="#0000FF">out </font>Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This procedure adds new <i>key-pointer</i> pair if <b>Key</b> is not in the 
tree or else replaces the pointer&nbsp; in the pair if the <b>Key</b> is already in the 
tree. When the parameter <b>Replaced</b> is specified it is set to the old 
pointer if the pair was replaced. If the pair was added <b>Replaced</b> is set 
to 0.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.Set_Root_Address"></a>
procedure</font> Set_Root_Address<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> B_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Root</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This procedure sets the byte index of the tree root. Typically it is the 
value obtained using
<a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.Get_Root_Address">
Get_Root_Address</a> before finalization of the object in the previous session. 
The value must be kept between the sessions for instance in a memory pool root index 
(See <a href="#Persistent.Memory_Pools.Get_Root_Index">Get_Root_Index</a> and
<a href="#Persistent.Memory_Pools.Set_Root_Index">Set_Root_Index</a>). When new 
session begins the and an instance of B_Tree is created,
<a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.Set_Root_Address">
Set_Root_Address</a> must be called before any other operation.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.Sup"></a>function</font> Sup (<b>Container</b> 
: B_Tree; <b>Key</b> : Key_Type) <font color="#0000FF">return</font> Item_Ptr;</tt></blockquote>
<p>This function returns a 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.Item_Ptr">pointer</a> to the
<i>key-pointer</i> pair with the key greater than or equal to <b>Key</b>. The 
result is 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.No_Item">No_Item</a> if there 
is no such pair.</p>
<p><u><b>Pointers to the key-value pairs</b></u>. The type <a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.Item_Ptr">Item_Ptr</a> is used to point a
<i>key-value</i> pair in the tree:</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.Item_Ptr"></a>type</font> 
Item_Ptr<font color="#0000FF"> is private</font>;<br>
<a name="Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.No_Item"></a>No_Item : <font color="#0000FF">constant</font> 
Item_Ptr;</tt></blockquote>
<p>The value 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.No_Item">No_Item</a> is used to indicate 
no item. Note that <i>key-pointer</i> pointers are volatile, any tree update 
operation can potentially invalidate any pointer. The following operations are 
defined on the <i>key-pointer</i> pointer:</p>
<blockquote>
<tt><font color="#0000FF">function</font> Get_Bucket_Address (<b>Item</b> : Item_Ptr)
<font color="#0000FF">return</font> Byte_Index;</tt></blockquote>
<p>This function returns the address of the bucket pointed by <b>Item</b>. The 
result is 0 when <b>Item</b> is 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.No_Item">No_Item</a>.</p>
<blockquote>
<tt><font color="#0000FF">function</font> 
Get_Bucket_Size (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> 
Natural;</tt></blockquote>
<p>This function returns the number of used slots in the bucket. The result is 0 
when <b>Item</b> is 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.No_Item">No_Item</a>.</p>
<blockquote>
<tt><font color="#0000FF">function</font> 
Get_Index (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> Positive;</tt></blockquote>
<p>This function returns the position in the bucket of the <i>key-pointer</i> pair 
pointed by <b>Item</b>. The result is in the range 1..Get_Size (<b>Item</b>). 
Constraint_Error is propagated when <b>Item</b> is
<a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.No_Item">No_Item</a>.</p>
<blockquote>
<tt><font color="#0000FF">function</font> 
Get_Key (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> Key_Type;</tt></blockquote>
<p>This function returns the key in the <i>key-pointer</i> pair pointed by <b>Item</b>. 
Constraint_Error is propagated when <b>Item</b> is
<a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.No_Item">No_Item</a>.</p>
<blockquote>
<tt><font color="#0000FF">function</font> 
Get_Key_Address (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> 
Byte_Index;</tt></blockquote>
<p>This function returns the address of the key in the <i>key-value</i> pair pointed by <b>Item</b>. 
Constraint_Error is propagated when <b>Item</b> is
<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree.No_Item">No_Item</a>.</p>
<blockquote>
<tt><font color="#0000FF">function</font> 
Get_Next (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> Item_Ptr;</tt></blockquote>
<p>This function returns the pointer to the next <i>key-pointer</i> pair. The 
result 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.No_Item">No_Item</a> when there is no such pair.</p>
<blockquote>
<tt><font color="#0000FF">function</font> 
Get_Pointer (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> 
Byte_Index;</tt></blockquote>
<p>This function returns the pointer from the <i>key-pointer</i> pair pointed by <b>
Item</b>. Constraint_Error is propagated when <b>Item</b> is
<a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.No_Item">No_Item</a>.</p>
<blockquote>
<tt><font color="#0000FF">function</font> 
Get_Previous (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> 
Item_Ptr;</tt></blockquote>
<p>This function returns the pointer to the previous <i>key-value</i> pair. The 
result 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.No_Item">No_Item</a> when there is no such pair.</p>
<blockquote>
<tt><font color="#0000FF">function</font> 
Get_Root (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> Item_Ptr;</tt></blockquote>
<p>This function returns the pointer to the first <i>key-pointer</i> pair in the 
root bucket. The result 
<a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.No_Item">No_Item</a> when there 
is no such pair.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> 
Remove (<b>Item</b> : <font color="#0000FF">in out</font> Item_Ptr);<font color="#0000FF"><br>
procedure</font> 
Remove (<b>Item</b> : <font color="#0000FF">in out</font> Item_Ptr; <b>Pointer</b> 
: <font color="#0000FF">out</font> Byte_Index);</tt></p>
</blockquote>
<p>This procedure removes the <i>key-pointer</i> pair pointed by <b>Item</b>. 
Constraint_Error is propagated when <b>Item</b> is
<a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.No_Item">No_Item</a>. After removal <b>Item</b> is set 
to <a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.No_Item">No_Item</a>. 
When the parameter <b>Pointer</b> is specified it accepts the pointer from the 
removed pair. It is set to 0 when no pair is removed.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.Replace"></a>procedure</font>  
Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Item</b>&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> Item_Ptr;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer </b>&nbsp;: Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font>  
Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Item</b>&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> Item_Ptr;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b>&nbsp; 
: Byte_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Replaced</b> : <font color="#0000FF">out</font> Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This procedure changes the value in the <i>key-pointer</i> pair pointed by <b>
Item</b>. Constraint_Error is propagated when <b>Item</b> is
<a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree.No_Item">No_Item</a>. 
The parameter <b>Replaced</b> when specified accepts the replaced pointer.</p>
<h4><a name="3.3.5"></a>3.3.5 Persistent raw B-trees</h4>
<p><a name="Persistent.Memory_Pools.Streams.External_B_Tree"></a>The generic child package 
<a href="#Persistent.Memory_Pools">Persistent.Memory_Pools.</a><a href="#Persistent.Memory_Pools.Streams.External_B_Tree">Streams.External_B_Tree</a> provides 
a variant of the persistent B-tree with weakly typed keys and values. For both 
the type
<a href="#Persistent.Blocking_Files.Byte_Index">Byte_Index</a> is used. Usually 
the tree is used as private parent type for an implementation which either 
allocates keys and/or values in the pool and passes the resulting
<a href="#Persistent.Blocking_Files.Byte_Index">Byte_Index</a> to the operations 
of B-tree. Alternatively it can pack key and/or value into
<a href="#Persistent.Blocking_Files.Byte_Index">Byte_Index</a> if these fit into 
the
<a href="#Persistent.Blocking_Files.Byte_Index">Byte_Index</a>'s range. The 
ordering of keys can be changed by overriding the primitive operation 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Compare">Compare</a>.</p>
<table border="1" cellspacing="0" cellpadding="5">
	<tr>
		<td>The implementation of the package is task-safe, the B-tree object 
		can be concurrently accessed from several tasks.</td>
	</tr>
</table>
<p>The type of the B-tree is declared as:</p>
<blockquote>
<tt><font color="#0000FF">type</font> B_Tree<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Pool : <font color="#0000FF">access</font> 
Persistent_Pool'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is new </font>
Ada.Finalization.Limited_Controlled <font color="#0000FF">with private</font>;</tt></blockquote>
<p>Here Pool is the persistent memory to allocate the tree in. The following operations are defined on the type:</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Add"></a>procedure</font> Add<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> B_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Byte_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value&nbsp; </b>&nbsp;&nbsp; : Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This procedure adds new <i>key-value</i> pair to the tree. Constraint_Error is 
propagated when <b>Key</b> is already present in the tree.</p>
<blockquote>
<tt><font color="#0000FF">type</font> Outcome <font color="#0000FF">is</font> 
(Before, Same, After);<br>
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Compare"></a>
<font color="#0000FF">function</font> Compare<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> : 
B_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Left</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Byte_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Right</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Outcome;</tt></blockquote>
<p>This function is used to compare two keys. It can be overridden in order to 
change the ordering of keys.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Erase"></a>procedure</font> 
Erase (<b>Container</b> : <font color="#0000FF">in out</font> B_Tree);</tt></blockquote>
<p>This procedure removes all <i>key-value</i> pairs from the tree.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Finalize"></a>procedure</font> 
Finalize (<b>Container</b> : <font color="#0000FF">in out</font> B_Tree);</tt></blockquote>
<p>This procedure, when overridden in the child type must be called from the new 
implementation.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Find"></a>function</font> Find<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
(<b>&nbsp; Container</b> : B_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> 
Item_Ptr;</tt></blockquote>
<p>This function is used to search the tree for given key. The result is a
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Item_Ptr">pointer</a> to the found <i>key-value</i> 
pair or 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.No_Item">No_Item</a> if the key is not in the 
tree.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Get"></a>function</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Container</b> 
: B_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> Byte_Index;</tt></blockquote>
<p>This function is returns the value associated with the key. Constraint_Error 
is propagated when the key is not in the tree.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Get_First"></a>function</font> 
Get_First (<b>Container</b> : B_Tree) <font color="#0000FF">return</font> 
Item_Ptr;</tt></blockquote>
<p>This function returns a 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Item_Ptr">pointer</a> to the
<i>key-value</i> pair with the least key. The result is
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.No_Item">No_Item</a> if the tree is empty.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Get_Last"></a>function</font> 
Get_Last (<b>Container</b> : B_Tree) <font color="#0000FF">return</font> 
Item_Ptr;</tt></blockquote>
<p>This function returns a 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Item_Ptr">pointer</a> to the
<i>key-value</i> pair with the greatest key. The result is
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.No_Item">No_Item</a> if the tree is empty.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Get_Root_Address"></a>function</font> 
Get_Root_Address (<b>Container</b> : B_Tree) <font color="#0000FF">return</font> 
Byte_Index;</tt></blockquote>
<p>The result of this function is the byte index of the root bucket of the tree. 
Note that the index may change as the tree gets updated. The tree root is set 
using 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Set_Root_Address">Set_Root_Address</a> when the tree object has to be restored from the 
persistent storage. Typically before object finalization its actual root is 
obtained and stored somewhere in the persistent storage. When the storage is 
re-opened the root index is read from the storage, a tree object is created and 
then initialized using 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Set_Root_Address">Set_Root_Address</a>.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Inf"></a>function</font> Inf (<b>Container</b> 
: B_Tree; <b>Key</b> :  
Byte_Index) <font color="#0000FF">return</font> Item_Ptr;</tt></blockquote>
<p>This function returns a 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Item_Ptr">pointer</a> to the
<i>key-value</i> pair with the key less than or equal to <b>Key</b>. The result 
is <a href="#Persistent.Memory_Pools.Streams.External_B_Tree.No_Item">No_Item</a> if there 
is no such pair.</p>
<blockquote>
<tt><font color="#0000FF">
procedure</font> 
Initialize (<b>Container</b> : <font color="#0000FF">in out</font> B_Tree);</tt></blockquote>
<p>This procedure, when overridden in the child type must be called from the new 
implementation.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Is_Empty"></a>function</font> 
Is_Empty (<b>Container</b> : B_Tree) <font color="#0000FF">return</font> 
Boolean;</tt></blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if the tree is 
empty.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Is_In"></a>function</font> 
Is_In (<b>Container</b> : B_Tree; <b>Key</b> :  
Byte_Index) <font color="#0000FF">
return</font> Boolean;</tt></blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if <b>Key</b> 
is in the tree.</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Remove<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> B_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:  
Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> Remove<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> B_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:  
Byte_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value&nbsp; </b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This procedure removes a <i>key-value</i> pair by the key. Nothing happens if 
the key is not in the tree. When the output parameter <b>Value</b> is 
specified it is set to the value from the removed pair. If no pair was removed
<b>Value</b> is set to 0.</p>
<blockquote>
<tt><font color="#0000FF">
procedure</font> Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> B_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:  
Byte_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value&nbsp; </b>&nbsp;&nbsp; : Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> B_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:  
Byte_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp;&nbsp;&nbsp; : Byte_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Replaced</b>&nbsp; : <font color="#0000FF">out </font>Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This procedure adds new <i>key-value</i> pair if <b>Key</b> is not in the 
tree or else replaces the value&nbsp; in the pair if the <b>Key</b> is already in the 
tree. When the parameter <b>Replaced</b> is specified it is set to the old 
value if the pair was replaced. If the pair was added <b>Replaced</b> is set 
to 0.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Set_Root_Address"></a>
procedure</font> Set_Root_Address<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> B_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Root</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This procedure sets the byte index of the tree root. Typically it is the 
value obtained using
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Get_Root_Address">
Get_Root_Address</a> before finalization of the object in the previous session. 
The value must be kept between the sessions for instance in a memory pool root index 
(See <a href="#Persistent.Memory_Pools.Get_Root_Index">Get_Root_Index</a> and
<a href="#Persistent.Memory_Pools.Set_Root_Index">Set_Root_Index</a>). When new 
session begins the and an instance of B_Tree is created,
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Set_Root_Address">
Set_Root_Address</a> must be called before any other operation.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Sup"></a>function</font> Sup (<b>Container</b> 
: B_Tree; <b>Key</b> : Byte_Index) <font color="#0000FF">return</font> Item_Ptr;</tt></blockquote>
<p>This function returns a 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Item_Ptr">pointer</a> to the
<i>key-value</i> pair with the key greater than or equal to <b>Key</b>. The 
result is 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.No_Item">No_Item</a> if there 
is no such pair.</p>
<p><u><b>Pointers to the key-value pairs</b></u>. The type <a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Item_Ptr">Item_Ptr</a> is used to point a
<i>key-value</i> pair in the tree:</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Item_Ptr"></a>type</font> 
Item_Ptr<font color="#0000FF"> is private</font>;<br>
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.No_Item"></a>No_Item : <font color="#0000FF">constant</font> 
Item_Ptr;</tt></blockquote>
<p>The value 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.No_Item">No_Item</a> is used to indicate 
no item. Note that <i>key-value</i> pointers are volatile, any tree update 
operation can potentially invalidate any pointer. The following operations are 
defined on the <i>key-value</i> pointer:</p>
<blockquote>
<tt><font color="#0000FF">function</font> Get_Bucket_Address (<b>Item</b> : Item_Ptr)
<font color="#0000FF">return</font> Byte_Index;</tt></blockquote>
<p>This function returns the address of the bucket pointed by <b>Item</b>. The 
result is 0 when <b>Item</b> is 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.No_Item">No_Item</a>.</p>
<blockquote>
<tt><font color="#0000FF">function</font> 
Get_Bucket_Size (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> 
Natural;</tt></blockquote>
<p>This function returns the number of used slots in the bucket. The result is 0 
when <b>Item</b> is 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.No_Item">No_Item</a>.</p>
<blockquote>
<tt><font color="#0000FF">function</font> 
Get_Index (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> Positive;</tt></blockquote>
<p>This function returns the position in the bucket of the <i>key-value</i> pair 
pointed by <b>Item</b>. The result is in the range 1..Get_Size (<b>Item</b>). 
Constraint_Error is propagated when <b>Item</b> is
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.No_Item">No_Item</a>.</p>
<blockquote>
<tt><font color="#0000FF">function</font> 
Get_Key (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font>  
Byte_Index;</tt></blockquote>
<p>This function returns the key in the <i>key-value</i> pair pointed by <b>Item</b>. 
Constraint_Error is propagated when <b>Item</b> is
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.No_Item">No_Item</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> 
Get_Next (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> Item_Ptr;</tt></p>
</blockquote>
<p>This function returns the pointer to the next <i>key-value</i> pair. The 
result 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.No_Item">No_Item</a> when there is no such pair.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> 
Get_Previous (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> 
Item_Ptr;</tt></p>
</blockquote>
<p>This function returns the pointer to the previous <i>key-value</i> pair. The 
result 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.No_Item">No_Item</a> when there is no such pair.</p>
<blockquote>
<tt><font color="#0000FF">function</font> 
Get_Root (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> Item_Ptr;</tt></blockquote>
<p>This function returns the pointer to the first <i>key-pointer</i> pair in the 
root bucket. The result 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.No_Item">No_Item</a> when there 
is no such pair.</p>
<blockquote>
<tt><font color="#0000FF">function</font> 
Get_Value (<b>Item</b> : Item_Ptr) <font color="#0000FF">return</font> 
Byte_Index;</tt></blockquote>
<p>This function returns the value from the <i>key-value</i> pair pointed by <b>
Item</b>. Constraint_Error is propagated when <b>Item</b> is
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.No_Item">No_Item</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> 
Remove (<b>Item</b> : <font color="#0000FF">in out</font> Item_Ptr);<font color="#0000FF"><br>
procedure</font> 
Remove (<b>Item</b> : <font color="#0000FF">in out</font> Item_Ptr; <b>Value</b> 
: <font color="#0000FF">out</font> Byte_Index);</tt></p>
</blockquote>
<p>This procedure removes the <i>key-value</i> pair pointed by <b>Item</b>. 
Constraint_Error is propagated when <b>Item</b> is
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.No_Item">No_Item</a>. After removal <b>Item</b> is set 
to <a href="#Persistent.Memory_Pools.Streams.External_B_Tree.No_Item">No_Item</a>. 
When the parameter <b>Value</b> is specified it accepts the value from the 
removed pair. It is set to 0 when no pair is removed.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Replace"></a>procedure</font>  
Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Item</b>&nbsp;&nbsp; : <font color="#0000FF">in out</font> Item_Ptr;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value </b>&nbsp;: Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font>  
Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Item</b>&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> Item_Ptr;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value&nbsp; </b>&nbsp; 
: Byte_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Replaced</b> : <font color="#0000FF">out</font> Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This procedure changes the value in the <i>key-value</i> pair pointed by <b>
Item</b>. Constraint_Error is propagated when <b>Item</b> is
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.No_Item">No_Item</a>. 
The parameter <b>Replaced</b> when specified accepts the replaced pointer.</p>
<h4><a name="3.3.6"></a>3.3.6 Persistent multi-keyed tables</h4>
<p><a name="Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table"></a>The generic child package 
<a href="#Persistent.Memory_Pools">Persistent.Memory_Pools.</a><a href="#Persistent.Memory_Pools.Streams.External_B_Tree">Streams.External_B_Tree</a><a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table">.Generic_Table</a> provides 
a table allocated in an external storage. The table can be searched by any of 
the keys identified by the generic formal discrete type Key_Index.</p>
<blockquote>
	<table border="1" cellspacing="0" cellpadding="5" width="258">
		<tr>
			<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px" width="22" bgcolor="#FFDEBD">
			<i>k<sub>11</sub></i></td>
			<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px" width="22" bgcolor="#FFDEBD">
			<i>k<sub>12</sub></i></td>
			<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px" width="12">
			...</td>
			<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px" width="24" bgcolor="#FFDEBD">
			<i>k<sub>1N</sub></i></td>
			<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px" width="22" bgcolor="#C0D8D6">
			<i>v<sub>11</sub></i></td>
			<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px" width="22" bgcolor="#C0D8D6">
			<i>v<sub>12</sub></i></td>
			<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px" width="12">
			...</td>
			<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px" width="26" bgcolor="#C0D8D6">
			<i>v<sub>1M</sub></i></td>
		</tr>
		<tr>
			<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px" width="22" bgcolor="#FFDEBD">
			<i>k<sub>21</sub></i></td>
			<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px" width="22" bgcolor="#FFDEBD">
			<i>k<sub>22</sub></i></td>
			<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px" width="12">
			...</td>
			<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px" width="24" bgcolor="#FFDEBD">
			<i>k<sub>2N</sub></i></td>
			<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px" width="22" bgcolor="#C0D8D6">
			<i>v<sub>21</sub></i></td>
			<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px" width="22" bgcolor="#C0D8D6">
			<i>v<sub>22</sub></i></td>
			<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px" width="12">
			...</td>
			<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px" width="26" bgcolor="#C0D8D6">
			<i>v<sub>2M</sub></i></td>
		</tr>
		<tr>
			<td style="border-style: solid; border-width: 1px" colspan="8">
			<p align="center">...</td>
		</tr>
		<tr>
			<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px" width="22" bgcolor="#FFDEBD">
			<i>k<sub>L1</sub></i></td>
			<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px" width="22" bgcolor="#FFDEBD">
			<i>k<sub>L2</sub></i></td>
			<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px" width="12">
			...</td>
			<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px" width="24" bgcolor="#FFDEBD">
			<i>k<sub>LN</sub></i></td>
			<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px" width="22" bgcolor="#C0D8D6">
			<i>v<sub>L1</sub></i></td>
			<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px" width="22" bgcolor="#C0D8D6">
			<i>v<sub>L2</sub></i></td>
			<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px" width="12">
			...</td>
			<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px" width="26" bgcolor="#C0D8D6">
			<i>v<sub>LM</sub></i></td>
		</tr>
	</table>
</blockquote>
<p>Each row <i>i</i> 
of the table is associated with a tuple of unique keys (<i>k<sub>i1</sub></i>,<i> 
k<sub>i2</sub></i>, ..., <i>k<sub>iN</sub></i>). Any of the keys can be used to 
identify the row. Additionally the row contains a tuple of&nbsp; values (<i>v<sub>i1</sub></i>,<i> 
v<sub>i2</sub></i>, ..., <i>v<sub>iM</sub></i>) identified by the generic formal discrete type Value_Index. 
Internally for each type of keys has a B-tree of its own. Items of the trees 
point to the rows. Keys and values can be queried from the row.</p>
<p>The implementation is raw and untyped. All keys and values are of 
the type Byte_Index.</p>
<blockquote>
<tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type</font> Key_Index <font color="#0000FF">is</font> (&lt;&gt;);<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Value_Index <font color="#0000FF">
is</font> (&lt;&gt;);<br>
<font color="#0000FF">package</font> 
Persistent.Memory_Pools.Streams.External_B_Tree.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Generic_Table
<font color="#0000FF">is</font> ...</tt></blockquote>
<table border="1" cellspacing="0" cellpadding="5">
	<tr>
		<td>The implementation of the package is task-safe, the table object 
		can be concurrently accessed from several tasks.</td>
	</tr>
</table>
<p>The package declares:</p>
<blockquote>
	<p><tt><font color="#0000FF">type</font> Keys_Tuple <font color="#0000FF">is 
	array</font> (Key_Index) <font color="#0000FF">of</font> Byte_Index;</tt></p>
</blockquote>
<p>This is the tuple of keys associated with each table row. The row is uniquely 
identified by any of the keys from the tuple. The table can be searched for any 
of the keys. The row ordering induced by a key is independent on other keys.</p>
<blockquote>
	<p><tt><font color="#0000FF">type</font> Values_Tuple <font color="#0000FF">
	is array</font> (Values_Index) <font color="#0000FF">of</font> Byte_Index;</tt></p>
</blockquote>
<p>This is the tuple of data kept by each table row.</p>
<p>The type of the table is declared as:</p>
<blockquote>
<tt><font color="#0000FF">type</font> Table<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Pool : <font color="#0000FF">access</font> 
Persistent_Pool'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is new </font>
Ada.Finalization.Limited_Controlled <font color="#0000FF">with private</font>;</tt></blockquote>
<p>Here Pool is the persistent memory to allocate the tree in. The following operations are defined on the type:</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Add"></a>procedure</font> Add<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> Table;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Keys</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Keys_Tuple;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Values </b>&nbsp;&nbsp; : Values_Tuple<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This procedure adds a new row to the table. <b>Keys</b> specifies the row's 
keys. <b>Values</b> does the row's data. Constraint_Error is 
propagated when <b>Keys</b> contains a key already used for a table row.</p>
<blockquote>
<tt><font color="#0000FF">type</font> Outcome <font color="#0000FF">is</font> 
(Before, Same, After);<br>
<font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Compare">
</a>function</font> Compare<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> : 
Table;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Left</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Byte_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Right</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Outcome;</tt></blockquote>
<p>This function is used to compare two keys of the type specified by <b>Index</b>. It can be overridden in order to 
change the ordering of keys.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Erase">
</a>procedure</font> 
Erase (<b>Container</b> : <font color="#0000FF">in out</font> Table);</tt></blockquote>
<p>This procedure removes all table rows.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Finalize">
</a>procedure</font> 
Finalize (<b>Container</b> : <font color="#0000FF">in out</font> Table);</tt></blockquote>
<p>This procedure, when overridden in the child type must be called from the new 
implementation. Note that
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Get_Root_Address">
Get_Root_Address</a> should be called before object finalization and the 
obtained value stored somewhere else.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Find">
</a>function</font> Find<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
(<b>&nbsp; Container</b> : Table;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> 
Row_Ptr;</tt></blockquote>
<p>This function is used to search the table for given key identified by its 
type (<b>Index</b>) and value (<b>Key</b>). The result is a
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Row_Ptr">pointer</a> to the found 
table row or 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.No_Row">No_Row</a> if 
no row was found.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Get"></a>function</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Container</b> 
: Table;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> 
Values_Tuple;</tt></blockquote>
<p>This function is returns the values associated with the key identified by its 
type (<b>Index</b>) and value (<b>Key</b>). Constraint_Error 
is propagated when the row does not exist.</p>
<blockquote>
<tt><font color="#0000FF">
function</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Container</b> 
: Table;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
Byte_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Column</b>&nbsp;&nbsp;&nbsp; 
: Value_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> 
Byte_Index;</tt></blockquote>
<p>This function is returns the value associated with the key identified by its 
type (<b>Index</b>) and value (<b>Key</b>) from the column specified by the 
parameter <b>Column</b>. Constraint_Error 
is propagated when the row does not exist.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Get_First">
</a>function</font> 
Get_First<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Container</b> : Table<b>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Index</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
Row_Ptr;</tt></blockquote>
<p>This function returns a 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Row_Ptr">pointer</a> to the
row with the least key. The parameter <b>Index</b> specifies the key type. The result is 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.No_Row">No_Row</a> if the 
table is empty.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Get_Last">
</a>function</font> 
Get_Last<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Container</b> : Table<b>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Index</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
Row_Ptr;</tt></blockquote>
<p>This function returns a 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Row_Ptr">pointer</a> to the
row with the greatest key of the type <b>Index</b>. The result is 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.No_Row">No_Row</a> if the 
table is empty.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Get_Root_Address">
</a>function</font> 
Get_Root_Address (<b>Container</b> : Table) <font color="#0000FF">return</font> 
Byte_Index;</tt></blockquote>
<p>The result of this function is the byte index of the root bucket of the table. 
Note that the index may change as the table gets updated. The table root is set 
using
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Set_Root_Address">Set_Root_Address</a> when the 
table object has to be restored from the 
persistent storage. Typically before object finalization its actual root is 
obtained and stored somewhere in the persistent storage. When the storage is 
re-opened the root index is read from the storage, a table object is created and 
then initialized using
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Set_Root_Address">Set_Root_Address</a>.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Inf"></a>function</font> Inf<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Container</b> 
: Table;<b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Index</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :  
Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
Row_Ptr;</tt></blockquote>
<p>This function returns a 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Row_Ptr">pointer</a> to the
row with the key less than or equal the key identified by its type (<b>Index</b>) and value (<b>Key</b>). The result 
is 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.No_Row">No_Row</a> if there 
is no such row.</p>
<blockquote>
<tt><font color="#0000FF">
procedure</font> 
Initialize (<b>Container</b> : <font color="#0000FF">in out</font> Table);</tt></blockquote>
<p>This procedure, when overridden in the child type must be called from the new 
implementation. Note that
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Set_Root_Address">Set_Root_Address</a> 
must be called after initialization if the table is persistent in the storage.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Is_Empty">
</a>function</font> 
Is_Empty (<b>Container</b> : Table) <font color="#0000FF">return</font> 
Boolean;</tt></blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if the table is 
empty.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Is_In">
</a>function</font> 
Is_In<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Container</b> 
: Table;<b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Index</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :  
Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">
&nbsp;return</font> Boolean;</tt></blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if the table 
contains a row identified by its type (<b>Index</b>) and value (<b>Key</b>). </p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Remove<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> Table;<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Index</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:  
Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> Remove<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> Table;<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Index</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:  
Byte_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Values </b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Values_Tuple<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> Remove<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> Table;<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Index</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:  
Byte_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Keys&nbsp;&nbsp; </b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Keys_Tuple;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Values </b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Values_Tuple<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>These procedures remove a row identified by its type (<b>Index</b>) and value (<b>Key</b>). Nothing happens if 
the row is not in the table. When the output parameters <b>Keys</b> and <b>Value</b> 
are specified they are filled with removed row's keys and values. If no row was removed 
they are filled with zeros.</p>
<blockquote>
<tt><font color="#0000FF">
procedure</font> Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> Table;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Keys</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Keys_Tuple;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Values</b>&nbsp;&nbsp;&nbsp; : Values_Tuple<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> B_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Keys</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Keys_Tuple;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Values</b>&nbsp;&nbsp;&nbsp; : Values_Tuple;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Replaced</b>&nbsp; : <font color="#0000FF">out </font>Values_Tuple<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>These procedures adds a new or replace an existing row indicated by <b>Keys</b>. When the parameter <b>Replaced</b> 
is specified it is filled with the replaced 
values. If the row was added <b>Replaced</b> is filled with zeros.</p>
<blockquote>
<tt><font color="#0000FF">
procedure</font>   
Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> Table;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Index</b>&nbsp;&nbsp;&nbsp;&nbsp; : Key_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Byte_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Column</b>&nbsp;&nbsp;&nbsp; : Value_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp;&nbsp;&nbsp; : Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">procedure</font>  
Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> Table;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Index</b>&nbsp;&nbsp;&nbsp;&nbsp; : Key_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Byte_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Column</b>&nbsp;&nbsp;&nbsp; : Value_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp;&nbsp;&nbsp; : Byte_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Replaced</b>&nbsp; : <font color="#0000FF">out</font> Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>These procedures replace a single row value specified by the parameter <b>
Column</b>. The row is identified by its type (<b>Index</b>) and value (<b>Key</b>). When the parameter <b>Replaced</b> 
is specified it is set to the replaced 
value. Contstraint_Error is propagated when there is no such row.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Set_Root_Address">
</a>procedure</font> Set_Root_Address<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> B_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Root</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This procedure sets the byte index of the tree root. Typically it is the 
value obtained using
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Get_Root_Address">Get_Root_Address</a> before finalization of the object in the previous 
session, for instance in a memory pool root index 
(See <a href="#Persistent.Memory_Pools.Get_Root_Index">Get_Root_Index</a> and
<a href="#Persistent.Memory_Pools.Set_Root_Index">Set_Root_Index</a>). When a new 
session begins the and an instance of Table is created,
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Set_Root_Address">Set_Root_Address</a> must be called before any other operation.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Sup"></a>function</font> Sup<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Container</b> 
: Table;<b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Index</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :  
Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
Row_Ptr;</tt></blockquote>
<p>This function returns a 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Row_Ptr">pointer</a> to the
row with the key greater than or equal to <b>Key</b>. The 
result is 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.No_Row">No_Row</a> if there 
is no such row.</p>
<blockquote>
<tt><font color="#0000FF">
procedure</font>  
Update<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Container</b> 
: Table;<b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Index</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Key_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :  
Byte_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Handler</b>&nbsp;&nbsp; : <font color="#0000FF">in out</font> 
Update_Handler'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This procedure changes values of the row identified by its type (<b>Index</b>) and value (<b>Key</b>) 
using primitive operation
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Update">
Update</a> of <b>Handler</b>. Constraint_Error is propagated when there is no 
such row.</p>
<p><u><b>Pointers to the rows</b></u>. The type 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Row_Ptr">
Row_Ptr</a> is used to point a
<i>key-value</i> pair in the tree:</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Row_Ptr">
</a>type</font> 
Row_Ptr<font color="#0000FF"> is private</font>;<br>
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.No_Row">
</a>No_Row : <font color="#0000FF">constant</font> 
Row_Ptr;</tt></blockquote>
<p>The value 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.No_Row">No_Row</a> is used to indicate 
no row. Note that row pointers are volatile, any table update 
operation can potentially invalidate any pointer. The following operations are 
defined on the row pointer:</p>
<blockquote>
<tt><font color="#0000FF">function</font> Get_Bucket_Address (<b>Row</b> : Row_Ptr)
<font color="#0000FF">return</font> Byte_Index;</tt></blockquote>
<p>This function returns the address of the bucket pointed by <b>Row</b>. The 
result is 0 when <b>Row </b>is 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.No_Row">No_Row</a>.</p>
<blockquote>
<tt><font color="#0000FF">function</font> 
Get_Bucket_Size (<b>Row</b> : Row_Ptr) <font color="#0000FF">return</font> 
Natural;</tt></blockquote>
<p>This function returns the number of used slots in the bucket. The result is 0 
when <b>Row </b>is 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.No_Row">No_Row</a>.</p>
<blockquote>
<tt><font color="#0000FF">function</font> 
Get_Index (<b>Row</b> : Row_Ptr) <font color="#0000FF">return</font> Positive;</tt></blockquote>
<p>This function returns the position in the bucket of the row 
pointed by <b>Row</b>. The result is in the range 1..Get_Size (<b>Row</b>). 
Constraint_Error is propagated when <b>Row </b>is
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.No_Row">No_Row</a>.</p>
<blockquote>
<tt><font color="#0000FF">function</font> 
Get_Key<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Row&nbsp; </b>&nbsp;: 
Row_Ptr;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b> 
: Key_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font>  
Byte_Index;</tt></blockquote>
<p>This function returns the key indicated by the type <b>Index</b> and 
corresponding to <b>Row</b>. 
Constraint_Error is propagated when <b>Row </b>is
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.No_Row">No_Row</a>.</p>
<blockquote>
<tt><font color="#0000FF">function</font> 
Get_Keys (<b>Row</b> : Row_Ptr)<font color="#0000FF"> return</font>  
Keys_Tuple;</tt></blockquote>
<p>This function returns keys corresponding to <b>Row</b>. 
Constraint_Error is propagated when <b>Row </b>is
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.No_Row">No_Row</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> 
Get_Next<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Row&nbsp; </b>&nbsp;: 
Row_Ptr;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b> 
: Key_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
Row_Ptr;</tt></p>
</blockquote>
<p>This function returns the pointer to the row next to one pointed by <b>Row</b> 
according to the key type <b>Index</b>. The 
result 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.No_Row">No_Row</a> when there is no such 
row.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> 
Get_Previous<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Row&nbsp; </b>&nbsp;: 
Row_Ptr;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b> 
: Key_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
Row_Ptr;</tt></p>
</blockquote>
<p>This function returns the pointer to the row previous to one pointed by <b>
Row</b> according to the key type <b>Index</b>. The 
result
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.No_Row">No_Row</a> when there is no such 
row.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> 
Get_Root<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Row&nbsp; </b>&nbsp;: 
Row_Ptr;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b> 
: Key_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
Row_Ptr;</tt></p>
</blockquote>
<p>This function returns the pointer to the first row in the 
root bucket of the key type <b>Index</b>. The result 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.No_Row">No_Row</a> when there 
is no such row.</p>
<blockquote>
<tt><font color="#0000FF">function</font> 
Get_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Row&nbsp;&nbsp; </b>&nbsp;: 
Row_Ptr;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Column</b> 
: Value_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
Byte_Index;</tt></blockquote>
<p>This function returns the value indicated by <b>Row </b>and<b> Column</b>. Constraint_Error is propagated when <b>
Row </b>is
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.No_Row">No_Row</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> 
Remove (<b>Item</b> : <font color="#0000FF">in out</font> Row_Ptr);<font color="#0000FF"><br>
procedure</font> 
Remove (<b>Item</b> : <font color="#0000FF">in out</font> Row_Ptr; <b>Values</b> 
: <font color="#0000FF">out</font> Values_Tuple);</tt></p>
</blockquote>
<p>This procedure removes the row pointed by <b>Row</b>. 
Constraint_Error is propagated when <b>Row </b>is
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.No_Row">No_Row</a>. After removal <b>
Row </b>is set 
to  
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.No_Row">No_Row</a>. 
When the parameter <b>Values</b> is specified it accepts the values from the 
removed row. It is filled with zeros when no row was removed.</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Replace">
</a>procedure</font>  
Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Row </b>&nbsp;&nbsp; : <font color="#0000FF">in out</font> 
Row_Ptr;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Column</b> : Value_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value </b>&nbsp;: Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font>  
Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Row</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> 
Row_Ptr;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Column</b>&nbsp;&nbsp; : Value_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value&nbsp; </b>&nbsp; 
: Byte_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Replaced</b> : <font color="#0000FF">out</font> Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This procedure changes the value in the row indicated by <b>Row</b> and <b>
Column</b>. Constraint_Error is propagated when <b>Row </b>is
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.No_Row">No_Row</a>. 
The parameter <b>Replaced</b> when specified accepts the replaced value.</p>
<blockquote>
<tt><font color="#0000FF">
procedure</font>  
Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Row </b>&nbsp;&nbsp; : <font color="#0000FF">in out</font> 
Row_Ptr;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Values</b>&nbsp;: Values_Tuple<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font>  
Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Row</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> 
Row_Ptr;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value&nbsp; </b>&nbsp; 
: Values_Tuple;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Replaced</b> : <font color="#0000FF">out</font> Values_Tuple<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This procedure changes values of the row indicated by <b>Row</b>. Constraint_Error is propagated when <b>
Row </b>is
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.No_Row">No_Row</a>. 
The parameter <b>Replaced</b> when specified accepts the replaced value.</p>
<blockquote>
<tt><font color="#0000FF">
procedure</font>  
Update<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Row </b>&nbsp;&nbsp;&nbsp; : 
Row_Ptr;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Handler</b>&nbsp;: <font color="#0000FF">in out</font> Update_Handler'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This procedure changes values of the row indicated by <b>Row</b> using 
primitive operation
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Update">
Update</a> of <b>Handler</b>. Constraint_Error is propagated when <b>Row </b>is
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.No_Row">No_Row</a>.</p>
<p><u><b>User-defined update handler</b></u>. The type 
<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Update_Handler">
Update_Handler</a> is used for custom table row updates:</p>
<blockquote>
<tt>
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Update_Handler">
</a><font color="#0000FF">type</font> Update_Handler <font color="#0000FF">is 
abstract<br>
&nbsp;&nbsp; new</font> Ada.Finalization.Limited_Controlled
<font color="#0000FF">with null record</font>;</tt></blockquote>
<p>The primitive operation is used to update table row:</p>
<blockquote>
<tt><font color="#0000FF">
<a name="Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table.Update">
</a>procedure</font> Update<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Handler</b> :
<font color="#0000FF">in out</font> Update_Handler;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Keys</b>&nbsp;&nbsp;&nbsp; 
: Keys_Tuple;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Values</b>&nbsp; : <font color="#0000FF">in out</font> Values_Tuple<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></blockquote>
<p>The parameter <b>Keys</b> is the keys of the row being modified. <b>Values</b> 
is the row values initialized by the actual row data. It can be updated to 
change row data.</p>
<hr><p align="right">
  <A name="4"></A><a href="#3.3"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><A
      href="#5"><IMG src="next.gif" alt="[Next]" width="29" height="29"></A></p>
<H2>4. Unbounded arrays</H2>
<p><a name="Generic_Unbounded_Array"></a><a name="Unbounded_Array"></a>
<a name="Unbounded_arrays_etc"></a>The package
<a href="#Generic_Unbounded_Array"> Generic_Unbounded_Array</a> defines the type
<a href="#Generic_Unbounded_Array">Unbounded_Array</a>. An instance of the type
is  a  dynamically  expanded  vector  of elements. The implementation keeps vector contiguous,  so  it  might  be
very  inefficient to put complex data structures into the array. In many cases it  is  better  to  put  pointers  to  elements  there.  See  also
the package <a href="#Generic_Unbounded_Ptr_Array"> Generic_Unbounded_Ptr_Array</a>  which instantiates
<a href="#Generic_Unbounded_Array"> Generic_Unbounded_Array</a> for this purpose.
The type wraps the component Vector which is a pointer to an array of elements.  One  can use Vector to access array elements
and query its present bounds, which are rather arbitrary. The unused&nbsp; elements  of
the array vector are padded using a distinguished null-element value The package
<a href="#Generic_Unbounded_Array"> Generic_Unbounded_Array</a>  is generic and has  the  following
generic parameters:
</p>
<blockquote>
  <p><tt><font color="#0000FF">generic<br>
  </font>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">type</font> Index_Type
  <font color="#0000FF"> is</font> (&lt;&gt;);<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">type
  </font> Object_Type<font color="#0000FF"> is private</font>; <br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">type
  </font> Object_Array_Type<font color="#0000FF"> is<br>
 </font> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000FF">array </font> (Index_Type <font color="#0000FF"> range</font> &lt;&gt;)
  <font color="#0000FF"> of </font> Object_Type;<br>
&nbsp;&nbsp;&nbsp;Null_Element : Object_Type;<br>
&nbsp;&nbsp;&nbsp;Minimal_Size&nbsp;: Positive := <font color="#800000">64</font>;<br>
&nbsp;&nbsp;&nbsp;Increment&nbsp;&nbsp;&nbsp;&nbsp;: Natural&nbsp; := <font color="#800000">50</font>;<br>
  <font color="#0000FF">
  package </font> Generic_Unbounded_Array<font color="#0000FF"> is </font>...</tt></p>
</blockquote>
<p>Here:
</p>
<ul>
  <li>Index_Type is the type used to index the array elements;</li>
  <li>Object_Type is the type of array elements;</li>
  <li>Object_Array_Type is an array type built on Index_Type and Object_Type.
    This is the type of the array's vector;</li>
  <li>Null_Element is a value of Object_Type used as a null element;</li>
  <li>Minimal_Size is the minimal number of elements by which the array vector is enlarged. When the first
    element is put into the array, this will
    be the initial vector size.</li>
  <li>Increment governs further vector enlargements. The vector is enlarged by <i>n</i>*Increment/100,
    where <i> n</i> is the current vector size. If the evaluated increment of 
  the vector is less than Minimal_Size
    elements, then the latter is used instead.</li>
</ul>
<p>The type
<a href="#Generic_Unbounded_Array">Unbounded_Array</a> is declared as follows:</p>
<blockquote>
  <p><tt><font color="#0000FF">   type
  </font>
 Object_Array_Ptr<font color="#0000FF"> is access
  </font>
  Object_Array_Type;<font color="#0000FF"><br>
   type
  </font>
 Unbounded_Array<font color="#0000FF"> is<br>
  </font>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">new
  </font>
 Ada.Finalization.Limited_Controlled <font color="#0000FF"> with<br>
   record<br>
  </font>
&nbsp;&nbsp;&nbsp;Vector : Object_Array_Ptr := <font color="#0000FF">null</font>;<font color="#0000FF"><br>
   end record</font>;</tt></p>
</blockquote>
<p>Array elements can be accessed through indexing the component Vector. Note
that single what can be said about the length of the vector is that it is big
enough to keep all elements put into the array. The unused elements in the
vector are padded using the value Null_Element. The implementation is very
straightforward. It does not implement any optimization of assignments, like the
implementation of <a href="#Generic_Set">Generic_Set</a> does. This choice was
intentionally made to mimic arrays as close as possible. If reference counting
is needed a wrapper type could be built around
<a href="#Generic_Unbounded_Array">Unbounded_Array</a>. The following operations are
defined on <a href="#Generic_Unbounded_Array">Unbounded_Array</a>:</p>
<blockquote>
<p>
<tt><font color="#0000FF">procedure</font> Erase
  (<b>Container</b> : <font color="#0000FF"> in out </font>Unbounded_Array);</tt></p>
</blockquote>
<p>This procedure removes all elements from <b>Container</b> making it empty.</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Finalize
  (<b>Container</b> : <font color="#0000FF"> in out </font>Unbounded_Array);</tt></blockquote>
<p>The destructor frees the memory allocated for the array vector.</p>
<blockquote>
<tt><font color="#0000FF">function</font> Fetch<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(
&nbsp;<b>Container</b>&nbsp;:&nbsp;Unbounded_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Index</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;Index_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)
&nbsp;<font color="#0000FF">return</font>   Object_Type;</tt></blockquote>
<p>This function returns a container element or Null_Element if <b>Index</b> is out of vector range.</p>
<blockquote>
<tt><font color="#0000FF">function</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(
&nbsp;<b>Container</b>&nbsp;:&nbsp;Unbounded_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Index</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;Index_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)
&nbsp;<font color="#0000FF">return</font>   Object_Type;</tt></blockquote>
<p>This function is an equivalent to <b>Container</b>.Vector (<b>Index</b>).
Constraint_Error is propagated if <b>Index</b> is out of vector range.</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(
&nbsp;<b>Container</b> : <font color="#0000FF"> in out </font> Unbounded_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Index</b>&nbsp;&nbsp;&nbsp;&nbsp;     :
Index_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Element</b>&nbsp;&nbsp;   : Object_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);</tt>
</blockquote>
This procedure is used to put / replace an element in array using its index.
The array vector is expanded as necessary. Unused elements are padded with
Null_Element.
<hr>
<p align="right">
  <A name="5"></A><A href="#4"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></A><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><A
      href="#6"><IMG src="next.gif" alt="[Next]" width="29" height="29"></A></p>
<H2>5. Unbounded arrays of pointers</H2>
<p><a name="Generic_Unbounded_Ptr_Array"></a><a name="Unbounded_Ptr_Array"></a>The package
<a href="#Generic_Unbounded_Ptr_Array">Generic_Unbounded_Ptr_Array</a> defines the type
<a href="#Unbounded_Ptr_Array">Unbounded_Ptr_Array</a>. An instance of <a href="#Unbounded_Ptr_Array">Unbounded_Ptr_Array</a> is  a  dynamically  expanded
vector  of pointers to elements. Upon destruction objects pointed by array  elements  are  destroyed.  Same  happens  when  an element is
replaced. The package has the following generic parameters:</p>
<blockquote>
  <p><tt><font color="#0000FF">generic<br>
  </font>
  &nbsp;&nbsp;&nbsp;<font color="#0000FF">type
  </font>
 Index_Type<font color="#0000FF"> is
  </font>
 (&lt;&gt;);<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">type
  </font>
 Object_Type (&lt;&gt;)<font color="#0000FF"> is limited private</font>;<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">type
  </font>
 Object_Ptr_Type<font color="#0000FF"> is access
  </font>
  Object_Type;<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">type
  </font>
 Object_Ptr_Array_Type is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000FF">array
  </font>
  (Index_Type <font color="#0000FF"> range
  </font>
 &lt;&gt;) <font color="#0000FF"> of
  </font>
  Object_Ptr_Type;<br>
&nbsp;&nbsp;&nbsp;Minimal_Size&nbsp;: Positive := <font color="#800000">64</font>;<br>
&nbsp;&nbsp;&nbsp;Increment&nbsp;&nbsp;&nbsp;&nbsp;: Natural&nbsp; := <font color="#800000">50</font>;<br>
  <font color="#0000FF">
  package
  </font>
 Generic_Unbounded_Ptr_Array<font color="#0000FF"> is
  </font>
  ...</tt></p>
</blockquote>
<p>Here:</p>
<ul>
  <li>Index_Type is the type used to index the array elements;</li>
  <li>Object_Type is the type of array elements;</li>
  <li>Object_Ptr_Type is an access type for Object_Type;</li>
  <li>Object_Array_Ptr_Type is an array type built on Index_Type and
    Object_Ptr_Type. This is the type of the array's vector;</li>
  <li>Minimal_Size is the minimal number of elements by which the array vector is enlarged. When the first
    element is put into the array, this will
    be the initial vector size.</li>
  <li>Increment governs further vector enlargements. The vector is enlarged by <i>n</i>*Increment/100,
    where <i> n</i> is the current vector size. If the evaluated increment of 
  the vector is less than Minimal_Size
    elements, then the latter is used instead.</li>
</ul>
<p>The type <a href="#Unbounded_Ptr_Array">Unbounded_Ptr_Array</a> is declared
through an instantiation of the package <a href="#Generic_Unbounded_Array">Generic_Unbounded_Array</a>.
Array elements can be accessed through indexing the component Vector which are
pointers to the elements. Note that single what can be said about the length of
the vector is that it is big enough to keep all elements put into the array. The
unused elements in the vector are padded using <font color="#0000FF">null</font>.
The following operations are defined on <a href="#Unbounded_Ptr_Array">Unbounded_Ptr_Array</a>:</p>
<blockquote>
<p>
<tt><font color="#0000FF">procedure</font> Erase
  (<b>Container</b> : <font color="#0000FF"> in out </font>Unbounded_Array);</tt></p>
</blockquote>
<p>This procedure removes all elements from <b>Container</b> making it empty.</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Finalize
  (<b>Container</b> : <font color="#0000FF"> in out </font>Unbounded_Ptr_Array);</tt></blockquote>
<p>The destructor frees the memory allocated for the array vector and all elements it refers to.</p>
<blockquote>
<tt><font color="#0000FF">function</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;<b>Container</b> :
Unbounded_Ptr_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Index</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: Index_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;&nbsp;<font color="#0000FF">return</font> 
 Object_Ptr_Type;</tt></blockquote>
<p>This function is an equivalent to <b>Container</b>.Vector (<b>Index</b>) with 
the exception that <font color="#0000FF">null</font> is returned when <b>Index</b> is out of vector range.</p>
<blockquote>
<tt><font color="#0000FF">   procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;             (
&nbsp;<b>Container</b> : <font color="#0000FF"> in out </font>Unbounded_Ptr_Array;<br>
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;
&nbsp;<b>                Index</b>
&nbsp;&nbsp;&nbsp; : Index_Type;<br>
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;
&nbsp;<b>                Element</b>
&nbsp;   : Object_Ptr_Type<br>
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;             );</tt>
</blockquote>
<p>This procedure is used to put in / replace an array element using its index. If the replaced array element is not 
<font color="#0000FF">null</font> then the object it points
to is destroyed.
Note that the object pointed by Element is not copied. Thus it is not a responsibility of the caller to destroy  the  object.  It  will  be
automatically  destroyed upon  array destruction  or replacing the element in the array.
The array vector is expanded as necessary. Unused elements are padded with 
<font color="#0000FF">null</font>.</p>
<p>The implementation of
<a href="#Generic_Segmented_Stack">Generic_Segmented_Stack</a> provides an 
illustration of use
<a href="#Generic_Unbounded_Ptr_Array">Generic_Unbounded_Ptr_Array</a>. A 
segmented stack consists of segments of same size. The list of segments is 
viewed as an abstract array used to instantiate <a href="#Generic_Stack">
Generic_Stack</a>. The array index is split into the high-order index indicating 
a segment and the low-order one specifying the element in the segment. The list
of segments is implemented as an
<a href="#Unbounded_Ptr_Array">Unbounded_Ptr_Array</a> indexed by the high-order 
index. Observe that once allocated a segment gets referenced in
<a href="#Unbounded_Ptr_Array">Unbounded_Ptr_Array</a>, so there is no need to 
explicitly deallocate segments,
<a href="#Unbounded_Ptr_Array">Unbounded_Ptr_Array</a> willl do it. So the 
implementation of <a href="#Generic_Segmented_Stack">Generic_Segmented_Stack</a> 
can be as straightforward as:</p><ul>
<li>Declaration of the type of segments as a fixed sized array of stack 
elements;</li>
<li>Instantiation of
<a href="#Generic_Unbounded_Ptr_Array">Generic_Unbounded_Ptr_Array</a> using the 
segment type;</li>
<li>Instantiation of <a href="#Generic_Stack">Generic_Stack</a> based on that 
unbounded array. </li>
</ul>
<hr><p align="right">
  <A name="6"></A><A href="#5"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></A><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><A
      href="#6.1"><IMG src="next.gif" alt="[Next]" width="29" height="29"></A></p>
<H2>6. Stacks</H2>
<P><a name="Stacks_etc"></a>Stack, also LIFO Stack (Last in
First Out), is a container in which the only accessible element is the last one.</p><p align="right">
  <A name="6.1"></A><A href="#6"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></A><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><A
      href="#6.2"><IMG src="next.gif" alt="[Next]" width="29" height="29"></A></p>
<H3>6.1. Stacks based on abstract arrays</H3>
<p><a name="Generic_Stack"></a><a name="Stack"></a>The package
<a href="#Generic_Stack">Generic_Stack </a>defines the type <a href="#Stack">
Stack</a> which provides a generic stack. The stack is built upon an array type 
which might be a <a href="#Unbounded_Array">Unbounded_Array</a>, <a href="#Unbounded_Ptr_Array">Unbounded_Ptr_Array</a>, 
array of handles or some other type (like Unbounded_String). The package has the following generic parameters:</p>
<blockquote>
  <p><tt><font color="#0000FF">generic<br>
  </font>
  &nbsp;&nbsp;&nbsp;<font color="#0000FF">type
  </font>
 Index_Type<font color="#0000FF"> is
  </font>
 (&lt;&gt;);<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">type
  </font>
 Object_Type (&lt;&gt;)<font color="#0000FF"> is limited private</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Array_Type <font color="#0000FF">
  is limited private</font>;<br>
&nbsp;&nbsp; Null_Element : Object_Type;<br>
&nbsp;&nbsp; <font color="#0000FF">with function </font>Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  (&nbsp; Container : Array_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  Index&nbsp;&nbsp;&nbsp;&nbsp; : Index_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  )&nbsp; <font color="#0000FF">return</font> Object_Type <font color="#0000FF">
  is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with procedure </font>Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  (&nbsp; Container : <font color="#0000FF">in out </font>Array_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  Index&nbsp;&nbsp;&nbsp;&nbsp; : Index_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  Element&nbsp;&nbsp; : Object_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  )&nbsp; <font color="#0000FF">is</font> &lt;&gt;;<br>
  <font color="#0000FF">package</font> Generic_Stack <font color="#0000FF">is</font><br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Stack <font color="#0000FF">is 
  new </font>Ada.Finalization.Limited_Controlled <font color="#0000FF">with 
  private</font>;</tt></p>
</blockquote>
<p>Here the formal parameters are:
</p>
<ul>
  <li>Index_Type is the type used to index the array elements;</li>
  <li>Object_Type is the type of array / stack elements;</li>
  <li>Array_Type is a private limited type implementing an array indexed by Index_Type and
    containing Object_Ptr_Type;</li>
  <li>Null_Element is a value of Object_Type used as a null element. The items 
  removed from the stack are always padded with Null_Element. This warranties 
  that for a stack built on <a href="#Unbounded_Ptr_Array">Unbounded_Ptr_Array</a> 
  the popped items will be indeed destroyed. Observe that for this reason a 
  function Pop is not provided, because there is no safe way to return a popped 
  object without copying it;</li>
  <li>Get is the function used to get an array element by its index. It is never 
  called for elements which were not previously put using the procedure Put. 
  Thus any range checks can be omitted;</li>
  <li>Put is the procedure used to store array elements. When it is called for 
  some array new index, for which it was not called before, then the index value 
  is the next following the last new index. In other words the array grows by one 
  element at time. The stack can have a limited size. If so then Put is allowed 
  to 
  raise an exception when the value of the parameter Index is out of limit.</li>
</ul>
<p>The following operations are defined on <a href="#Stack">Stack</a>:</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Erase (<b>Container</b> :
  <font color="#0000FF">in out </font>Stack);</tt></blockquote>
<p>This procedure pops all items from the stack <b>Container</b>.</p><blockquote>
  <tt><font color="#0000FF"><a name="Generic_Stack.Get"></a>function</font> Get (<b>Container</b> : Stack; <b>
  Index</b> : Index_Type)<br>
&nbsp;<font color="#0000FF">&nbsp; return</font>   Object_Type;</tt></blockquote>
<p>This function returns the  stack item with the index specified by the
parameter <b>Index</b>. The item item on the stack top has the index returned by
<a href="#Generic_Stack.Mark">Mark</a>, so that</p>
<blockquote>
  <tt>Top&nbsp;(Container) = Get&nbsp;(Container,&nbsp;Mark&nbsp;(Container))</tt></blockquote>
<p>Constraint_Error is propagated if <b>Index</b> points out of stack.</p>
<blockquote>
  <tt><font color="#0000FF">function</font> Is_Empty (<b>Container</b> :
  Stack) <font color="#0000FF">return</font> Boolean;</tt></blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if Container
  is empty.</p><blockquote>
<tt><font color="#0000FF"><a name="Generic_Stack.Mark"></a>function</font>
  Mark (<b>Container</b> : Stack) <font color="#0000FF">return</font> 
 Index_Type;</tt></blockquote>
<p>The value returned by this function can be used in the procedure
  <a href="#Generic_Stack.Release">Release</a> to pop all the items pushed in
  between. When the type Index_Type is an integer type, then the difference
  between two values returned by <a href="#Generic_Stack.Mark">Mark</a> is the
  number of stack items.</p><blockquote>
  <tt><font color="#0000FF">procedure</font> Pop (<b>Container</b> :
  <font color="#0000FF">in out </font>Stack; <b>Count</b> : Natural :=
  <font color="#800000">1</font>);</tt></blockquote>
  <P>This procedure pops <b>Count</b> items from the top of <b>Container</b>. If 
  the stack does not contain enough items, it is emptied.</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Push (<b>Container</b> :
  <font color="#0000FF">in out </font>Stack; <b>Item</b> : Object_Type);</tt></blockquote>
  <P>This procedure pushes <b>Item</b> onto <b>Container</b>.</p><blockquote>
  <tt><font color="#0000FF">procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Container</b> : 
  <font color="#0000FF">in out</font> Stack;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
  Index</b>&nbsp;&nbsp;&nbsp;&nbsp; : Index_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
  Element</b>&nbsp;&nbsp; : Object_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
  <P>This procedure replaces the stack item specified by the parameter <b>Index</b>
  with <b>Element</b>. The index is same as described in
  <a href="#Generic_Stack.Get">Get</a>. Constraint_Error is 
  propagated if <b>Index</b> points out of stack.</p><blockquote>
  <tt><font color="#0000FF"><a name="Generic_Stack.Release"></a>procedure</font>
  Release (<b>Container</b> : in out Stack; <b>Mark</b> : Index_Type);</tt></blockquote>
  <P>This procedure is used to pop all items pushed since a call to the function
  <a href="#Generic_Stack.Mark">Mark</a> which result was the value of the 
  parameter <b>Mark</b>. Nothing happens if the stack was already popped below
  <b>Mark</b>.</p><blockquote>
  <P><tt><font color="#0000FF">function</font> Top (<b>Container</b> : Stack)
  <font color="#0000FF">return</font>   Object_Type;</tt></p></blockquote>
  <P>This function returns the topmost stack item. Constraint_Error is
  propagated if <b>Container</b> is empty.</p><p align="right">
  <A name="6.2"></A><A href="#6.1"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></A><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><A
      href="#7"><IMG src="next.gif" alt="[Next]" width="29" height="29"></A></p>
<H3>6.2. Segmented stacks</H3>
<p><a name="Generic_Segmented_Stack"></a>The package
<a href="#Generic_Segmented_Stack">Generic_Segmented_Stack</a> instantiates <a href="#Generic_Stack">Generic_Stack</a> 
so that the stack will use a list of segments of same 
size. The number of stack segments is unlimited. New segments are allocated as 
necessary. The package is generic:</p>
<blockquote>
  <p><tt><font color="#0000FF">generic<br>
  </font>
  &nbsp;&nbsp;&nbsp;<font color="#0000FF">type
  </font>
 Index_Type<font color="#0000FF"> is
  </font>
 (&lt;&gt;);<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">type
  </font>
 Object_Type <font color="#0000FF"> is  private</font>;<br>
&nbsp;&nbsp; Null_Element : Object_Type;<br>
&nbsp;&nbsp; Segment_Size : Positive := <font color="#800000">128</font>;<br>
&nbsp;&nbsp; Minimal_Size : Positive := <font color="#800000">64</font>;<br>
&nbsp;&nbsp; Increment&nbsp;&nbsp;&nbsp; : Natural&nbsp;&nbsp;:=
  <font color="#800000">50</font>;<br>
  <font color="#0000FF">package</font> Generic_Segmented_Stack
  <font color="#0000FF">is<br>
&nbsp;&nbsp; ...<br>
&nbsp;&nbsp; package</font> Segmented_Stack <font color="#0000FF">is new </font>
  Generic_Stack ...</tt></p>
</blockquote>
<p><a name="Generic_Segmented_Stack_parameters"></a>Here the formal parameters are:</p>
<ul>
  <li>Index_Type is the type used to index the stack elements. It can be used to
  <a href="#Generic_Stack.Mark">mark</a> and <a href="#Generic_Stack.Release">
  release</a> the stack;</li>
  <li>Object_Type is the type of the stack elements;</li>
  <li>Null_Element is a value of Object_Type used as a null element. The items 
  removed from the stack are always padded with Null_Element;</li>
  <li>Segment_Size is the size of a stack segment in slots;</li>
  <li>Minimal_Size of the segment slots array. This parameter and the next one 
  control allocation of the array segment slots;</li>
  <li>Increment. When there is no free space the stack is enlarged by allocation 
  a new segment. A reference to the segment is placed in an array of the segment 
  slots. That array is enlarged by allocating Size * Increment / 100 new slots. 
  Here Size is the current number of slots. The allocated amount of slots cannot 
  be less than the parameter Minimal_Size specifies. So it will be the initial 
  size after the first segment gets allocated.</li>
</ul>
<p>The package can be used as follows:</p>
<blockquote>
<p><tt><font color="#0000FF">package</font> Float_Stack <font color="#0000FF">is</font><br>
&nbsp;&nbsp; <font color="#0000FF">new</font> Generic_Segmented_Stack (Integer, Float,
<font color="#800000">0.0</font>);<br>
<font color="#0000FF">use</font>   Float_Stack.Segmented_Stack;<br>
...<br>
LIFO : Stack;</tt></p>
</blockquote>
  <hr>  <p align="right">
  <A name="7"></A><A href="#6.2"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></A><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><A
      href="#7.1"><IMG src="next.gif" alt="[Next]" width="29" height="29"></A></p>
<H2>7. Pools</H2>
<P><a name="Pools_etc"></a>User-defined storage pools can be
used for objects which creation / destruction policy allows a more efficient 
memory management strategy than the standard heap offers, but yet not enough 
strict to allocate them on the system stack.</p><p align="right">
  <A name="7.1"></A><A href="#7"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></A><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><A
      href="#7.2"><IMG src="next.gif" alt="[Next]" width="29" height="29"></A></p>
<H3>7.1. Stack pool</H3>
<p><a name="Stack_Storage"></a><a name="Stack_Storage.Pool"></a>The package <a href="#Stack_Storage">
Stack_Storage</a> provides an implementation of a user-defined pool organized as 
a stack. The package the type <a href="#Stack_Storage.Pool">Pool</a> derived form
System.Storage_Pools.Root_Storage_Pool:</p>
<blockquote>
  <p><tt><font color="#0000FF">type</font>
  Pool<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Initial_Size : Storage_Count;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Items_Number : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is new</font>
  Root_Storage_Pool <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>A stack pool consists of contiguous segments allocated dynamically as 
necessary. The discriminants control the stack segments allocation policy. <b>
Initial_Size</b> determines the initial default size of a newly allocated 
segment. If this size is less than the size of the object being allocated the 
default size is set to the object size multiplied to <b>Items_Number</b>. This 
value will then used as the default size for all further segments. The segments 
allocated earlier having lesser size will be freed when possible. Otherwise, 
they remain allocated until pool destruction. Upon stack pool destruction, all 
the stack segments are deallocated. No checks made whether some objects remain 
allocated on the stack. Note also that no checks made whether objects allocation 
/ deallocation order is indeed LIFO (last in, first out). Deallocation of an 
object frees the memory of all objects allocated after it. <i>The stack pool is 
<u>not</u> task-safe. If that is required it has to be protected from a concurrent
access</i>.</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Deallocate_All (<b>Stack</b> : 
<font color="#0000FF">in out</font> Pool);</tt></blockquote>
<p>This procedure deallocates everything allocated in the pool. It should be 
used with great care.</p>
<blockquote>
<tt><font color="#0000FF"><a name="Stack_Storage.Get_Last_Segment"></a>function</font> 
Get_Last_Segment (<b>Stack</b> : Pool) <font color="#0000FF">return</font> 
Natural;</tt></blockquote>
<p>This function returns the number of the last segment in <b>Stack</b> holding 
some allocated data.</p>
<blockquote>
<tt><font color="#0000FF"><a name="Stack_Storage.Get_Segments_Number"></a>
function</font> Get_Segments_Number (<b>Stack</b> : Pool) <font color="#0000FF">
return</font> Natural;</tt></blockquote>
<p>This function returns the total number of segments in <b>Stack</b>.</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Get_Segment_Data<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Stack</b> : 
Pool;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Index</b> : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Size</b>&nbsp; 
: <font color="#0000FF">out</font> Storage_Count;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Used</b>&nbsp; 
: <font color="#0000FF">out</font> Storage_Count;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Start</b> : <font color="#0000FF">out</font> Address<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></blockquote>
<p>This function returns information about a segment in <b>Stack</b> specified 
by <b>Index</b> in the range 1..<a href="#Stack_Storage.Get_Segments_Number">Get_Segments_Number</a>.
<b>Size</b> is the segment size. <b>Used</b> is the space allocated in the 
segment. <b>Start</b> is the first memory address of the segment. The first free 
address is <b>Start</b> + <b>Used</b>. Free space in the segment is <b>Size</b> 
- <b>Used</b>. Free space of the segments before
<a href="#Stack_Storage.Get_Last_Segment">Get_Last_Segment</a> is not used until 
deallocation of memory in next segments. Constraint_Error is propagated when 
Index is illegal.</p>
<p align="right">
  <A name="7.2"></A><A href="#7.1"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></A><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#7.3"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>7.2. Mark and release pool for controlled objects</H3>
<p><a name="Stack_Storage.Mark_And_Release"></a>The generic 
child package <a href="#Stack_Storage.Mark_And_Release">Stack_Storage.Mark_And_Release</a> provides an implementation of a 
mark and release pool for limited controlled objects:</p>
<blockquote>
  <p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; </font>Stack : <font color="#0000FF">in out</font>   Pool'Class;<font color="#0000FF"><br>
  package</font> Stack_Storage.Mark_And_Release <font color="#0000FF">is</font> 
  ...</tt></p>
</blockquote>
<p><a name="Pool_Object"></a>The generic parameter Stack is a descendant of <a href="#Stack_Storage.Pool">
Pool</a>, a stack pool. The package defines:</p>
<blockquote>
<p><tt><font color="#0000FF">type </font>Pool_Object<font color="#0000FF"> is<br>
&nbsp;&nbsp; new </font>Ada.Finalization.Limited_Controlled <font color="#0000FF">
with private</font>;</tt></p>
</blockquote>
<p>This is the base type for all objects to be allocated on Stack. The pool 
objects should be allocated only in the pool (using an allocator
<font color="#0000FF">new</font>). If they are destroyed explicitly using
Unchecked_Deallocation, then it should happen LIFO and never under the last
<a href="#Pool_Mark">pool mark</a>. The type <a href="#Pool_Object">Pool_Object</a> 
has the following operations:</p>
<blockquote>
<tt><font color="#0000FF">procedure</font> Finalize
  (<b>Object</b> : <font color="#0000FF"> in out </font>Pool_Object);</tt></blockquote>
<p>The destructor has to be called by all descendants of <a href="#Pool_Object">
Pool_Object</a>. Storage_Error is propagated if <b>Object</b> is not the last
allocated object in the pool.</p><blockquote>
<tt><font color="#0000FF">procedure</font> Initialize
  (<b>Object</b> : <font color="#0000FF"> in out </font>Pool_Object);</tt></blockquote>
The constructor has to be called by all descendants.<blockquote>
<p><tt><font color="#0000FF">type </font>Pool_Object_Ptr<font color="#0000FF"> 
is access</font>   Pool_Object'Class;<font color="#0000FF"><br>
for </font>Pool_Object_Ptr'Storage_Pool <font color="#0000FF">use</font> Stack;</tt></p>
</blockquote>
<p>This is the access type, which can be used as the target for an allocator of 
a <a href="#Pool_Object">Pool_Object</a> descendant. If other access type used 
as the target, then it has to be specific to the pool Stack.</p>
<blockquote>
<tt><font color="#0000FF"><a name="Pool_Mark"></a>type</font> Pool_Mark
<font color="#0000FF">is</font><br>
&nbsp;&nbsp; <font color="#0000FF">new</font> 
Ada.Finalization.Limited_Controlled<font color="#0000FF"> with private</font>;</tt></blockquote>
<p>Objects of <a href="#Pool_Mark">Pool_Mark</a> are used as snap-shots of the
pool state. When such a pool mark object is created it remembers the pool state. 
Upon its destruction it finalizes all the objects allocated in the pool since 
its construction and reclaims the storage occupied by the objects. If some pool
objects have to be destroyed explicitly, then that shall be ones created after the last pool 
mark creation only. The following operations are defined on <a href="#Pool_Mark">
Pool_Mark</a>:</p>
<blockquote><tt><font color="#0000FF">procedure</font> Finalize
  (<b>Snap</b> : <font color="#0000FF"> in out </font>Pool_Mark);</tt></blockquote>
<p>The destructor removes all objects remaining in the pool since construction 
of <b>Snap</b>. Storage_Error is propagated on object finalization errors.</p>
<blockquote><tt><font color="#0000FF">procedure</font> Initialize
  (<b>Snap</b> : <font color="#0000FF"> in out </font>Pool_Mark);</tt></blockquote>
<p>The constructor remembers the pool state.</p>
<p>The following short code sample
illustrates use of mark and release pool:</p>
<blockquote>
<tt><font color="#0000FF">declare</font><br>
&nbsp;&nbsp; Snap : Pool_Mark;<font color="#008000">&nbsp; -- Mark the pool 
state</font><br>
&nbsp;&nbsp; Ptr&nbsp; : Pool_Object_Ptr;<font color="#0000FF"><br>
begin</font><br>
&nbsp;&nbsp; ...<br>
&nbsp;&nbsp; Ptr := <font color="#0000FF">new </font>Derived_Pool_Object;<font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
-- Allocate</font><br>
&nbsp;&nbsp; ...<br>
&nbsp;&nbsp; Ptr := <font color="#0000FF">new</font> 
 Another_Derived_Pool_Object;
<font color="#008000">-- Allocate</font><br>
&nbsp;&nbsp; ...<br>
<font color="#0000FF">end</font>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- Release all allocated objects</font></tt></blockquote>
<p align="right">
  <A name="7.3"></A><a href="#7.2"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#7.4"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>7.3. Persistent storage memory pool</H3>
<p><a name="Persistent.Memory_Pools"></a>The child package <a href="#Persistent.Memory_Pools">Persistent.Memory_Pools</a> provides a 
persistent storage memory pool. The pool implementation sits upon the direct 
access file provided by the package <a href="#Persistent.Blocking_Files">
Persistent.Blocking_Files</a>. The file keeps the memory blocks from the pool. 
It can be closed and reopened again. The file format and the structure of the 
memory pool is portable so long the underlying direct I/O access is. That means 
precisely that the file can be accessed on different platforms if its blocks can 
be read and written there.</p>
<p>The following data types are defined in the package:</p>
<blockquote>
  <p><tt><font color="#0000FF">
	type </font>Root_Index<font color="#0000FF">
	is range </font><font color="#800000">1</font>..<font color="#800000">16</font>;</tt></p>
</blockquote>
<p>This is the index of 16 user-defined byte indices. The indices can be read (<a href="#Persistent.Memory_Pools.Get_Root_Index">Get_Root_Index</a>) 
and written (<a href="#Persistent.Memory_Pools.Set_Root_Index">Set_Root_Index</a>). 
Typically the root memory block index is stored as an index.</p>
<blockquote>
  <p><tt><font color="#0000FF">
	<a name="Persistent.Memory_Pools.Persistent_Pool"></a>type </font>Persistent_Pool<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; File : <font color="#0000FF"> 
	access</font> Persistent_Array'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF"> 
	is new </font>Ada.Finalization.Limited_Controlled<font color="#0000FF"> 
	with private</font>;</tt></p>
</blockquote>
<p>A instance of this type represents a persistent memory pool. The file object 
indicated by the discriminant <b>File</b> must be open before the pool object is 
created and remain open until object finalization.</p>
<table border="1" cellpadding="5" cellspacing="0">
	<tr>
		<td>Note that the implementation of
		<a href="#Persistent.Memory_Pools.Persistent_Pool">Persistent_Pool</a> 
		is task-safe. The type operations can be used from 
		concurrent tasks.
		</td>
	</tr>
</table>
	<p>&nbsp;The following operations are defined on the type:</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Memory_Pools.Allocate"></a>function </font>Allocate<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pool</b> :
	Persistent_Pool;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Size</b> : 
	Byte_Count<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Byte_Index;</tt></p>
</blockquote>
<p>This function allocates a memory block of at least <b>Size</b> byte large in 
the persistent pool. The result is the 
<a href="#Persistent.Blocking_Files.Byte_Index">byte index</a> of the first byte of the 
allocated memory block. The memory block is freed using
<a href="#Persistent.Memory_Pools.Deallocate">Deallocate</a>. Use_Error is 
propagated when no memory pool file is open, or when the file was opened 
read-only. See also
<a href="#Persistent.Memory_Pools.Fetch">Fetch</a> for an eager allocator.</p>
<table border="1" cellpadding="5" cellspacing="0">
	<tr>
		<td><a href="#Persistent.Memory_Pools.Fetch">Allocate</a> and
<a href="#Persistent.Memory_Pools.Fetch">Fetch</a> cannot allocate more memory 
		than fits into one file block. Larger objects can be allocated and used 
		through the 
		stream interfaces provided in the package
		<a href="#Persistent.Memory_Pools.Streams">Persistent.Memory_Pools.Streams</a>.</td>
	</tr>
</table>
<blockquote>
  <p><tt><font color="#0000FF">procedure </font>Commit (<b>Pool</b> 
	: <font color="#0000FF">in out</font> Persistent_Pool);</tt></p>
</blockquote>
<p>This procedure commits the pending transaction on the underlying file and 
opens a new one. The operation is task-safe. It does nothing if the file does 
not support transactions. Note that there is no corresponding rollback operation 
because rolling back the file would corrupt the pool's state. In order to return 
the pool to its previous state the current pool object must be finalized, the 
file rolled back, and a new pool object created. </p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Memory_Pools.Deallocate"></a>
	procedure </font>Deallocate<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pool</b>&nbsp; 
	: <font color="#0000FF">in out</font> Persistent_Pool;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Index</b> : Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure frees the memory block of which
<a href="#Persistent.Blocking_Files.Byte_Index">byte index</a> is Index. 
Use_Error is propagated when no memory pool file is open, or when the file was 
opened read-only.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Memory_Pools.Expand"></a>function </font>
	Expand<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pool</b>&nbsp; : Persistent_Pool;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b> 
	: Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Byte_Count;</tt></p>
</blockquote>
<p>This function expands the memory block pointed by <b>Index</b> if there is a 
free space behind it. The result is the new block size. Use_Error is propagated 
when no memory pool file is open, or when the file was opened read-only.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Memory_Pools.Fetch"></a>function</font> 
	Fetch<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pool</b> :
	Persistent_Pool;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Size</b> : 
	Byte_Count<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Byte_Index;</tt></p>
</blockquote>
<p>This procedure allocates at least <b>Size</b> bytes in Pool. It tries to 
allocate as much space as possible. When a fitting block is found it is 
allocated full. The actual size of the allocated block can be obtained using
<a href="#Persistent.Memory_Pools.Get_Size">Get_Size</a>. The result is the
<a href="#Persistent.Blocking_Files.Byte_Index">byte index</a> of the first byte of the 
allocated memory block. The memory block is freed using
<a href="#Persistent.Memory_Pools.Deallocate">Deallocate</a>. Use_Error is 
propagated when no memory pool file is open, or when the file was opened 
read-only. See also
<a href="#Persistent.Memory_Pools.Fetch">Allocate</a> for a conservative 
allocator.</p>
<blockquote>
  <p><tt><font color="#0000FF">procedure</font> Finalize (<b>Pool</b>:
	<font color="#0000FF">in out</font> Persistent_Pool);</tt></p>
</blockquote>
<p>This procedure is called upon object destruction. When the type is derived from and this procedures is 
overridden, the new implementation must call it from inside.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Memory_Pools.Flush"></a>
	procedure </font>Flush (<b>Pool</b>: <font color="#0000FF">in out</font> 
	Persistent_Pool);</tt></p>
</blockquote>
<p>This procedure writes all cached updated file blocks back to the file. I/O 
errors are propagated on system errors.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Memory_Pools.Get_Block_Size">
	</a>function</font> 
	Get_Block_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pool</b>&nbsp; :
	Persistent_Pool;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b> 
	: Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Byte_Count;</tt></p>
</blockquote>
<p>This function returns the total size of the block containing the byte 
specified by <b>Index</b>. Use_Error is propagated when no memory pool file is 
open. See also <a href="#Persistent.Blocking_Files.Get_Size">Get_Size</a>.</p>
<blockquote>
  <p><tt><font color="#0000FF">function</font> Get_Blocks_Free (<b>Pool</b> :
	Persistent_Pool) <font color="#0000FF">
	return</font> Block_Count;</tt></p>
</blockquote>
<p>This function returns the number unused file blocks. New file blocks are 
allocated in the file as necessary. It is 0 when no file is open.</p>
<blockquote>
  <p><tt><font color="#0000FF">function</font> Get_Blocks_Used (<b>Pool</b> :
	Persistent_Pool) <font color="#0000FF">
	return</font> Block_Count;</tt></p>
</blockquote>
<p>This function returns the number used file blocks. It is 0 when no file is 
open.</p>
<blockquote>
  <p><tt><font color="#0000FF">function</font> Get_Bytes_Free (<b>Pool</b> :
	Persistent_Pool) <font color="#0000FF">
	return</font> Byte_Index;</tt></p>
</blockquote>
<p>This function returns the number unused bytes in the pool. The count does not 
include the memory used to maintain the internal structures of the pool. The 
result is 0 when no file is open.</p>
<blockquote>
  <p><tt><font color="#0000FF">function</font> Get_Bytes_Used (<b>Pool</b> :
	Persistent_Pool) <font color="#0000FF">
	return</font> Byte_Index;</tt></p>
</blockquote>
<p>This function returns the number used bytes from the pool. This does not 
include the memory used to maintain the pool. The result is 0 when no file is 
open.</p>
<blockquote>
  <p><tt><font color="#0000FF">function</font> Get_Name (<b>Pool</b> :
	Persistent_Pool) <font color="#0000FF">
	return</font> String;</tt></p>
</blockquote>
<p>This function returns the name of the file used by the pool. Use_Error is 
propagated when no memory pool file is open. </p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Memory_Pools.Get_Root_Index">
	</a>function</font> 
	Get_Root_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pool</b>&nbsp; :
	Persistent_Pool;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b> 
	: Root_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Byte_Count;</tt></p>
</blockquote>
<p>This function returns the root index corresponding to <b>Index</b>. Root 
indices are used to keep user information, e.g. the index of the master block 
allocated in the pool. All root indices are initialized 0. When the master 
blocks gets allocated or relocated
<a href="#Persistent.Memory_Pools.Set_Root_Index">Set_Root_Index</a> can be used 
to set an index to point to it.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Memory_Pools.Get_Size"></a>function</font> 
	Get_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pool</b>&nbsp; :
	Persistent_Pool;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b> 
	: Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Byte_Count;</tt></p>
</blockquote>
<p>This function returns the number of bytes available to use in the block 
containing the byte specified by <b>Index</b>. Use_Error is propagated when no memory pool file is 
open.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Memory_Pools.Get_Space"></a>function</font> 
	Get_Space (<b>Pool</b> :
	Persistent_Pool) <font color="#0000FF">return</font> Byte_Index;</tt></p>
</blockquote>
<p>This function returns the number of bytes available for allocation in the 
file. The result is equal to the number of file blocks multiplied by the block 
size minus the length of the file header it is also equal to the sum number of 
free and used bytes plus the number of free and used file blocks multiplied by 4 
bytes of the block margin length. Use_Error is propagated when no memory pool 
file is open.</p>
<blockquote>
  <p><tt><font color="#0000FF">procedure </font>Initialize (<b>Pool</b> 
	: <font color="#0000FF">in out</font> Persistent_Pool);</tt></p>
</blockquote>
<p>This procedure must be called when overridden by derived type. The file 
indicated in the discriminant must be open.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Memory_Pools.Is_Open"></a>function</font> 
	Is_Open (<b>Pool</b> :
	Persistent_Pool) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if the pool 
file is open.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Memory_Pools.Set_Root_Index">
	</a>procedure</font> Set_Root_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pool</b>&nbsp; 
	: <font color="#0000FF">in out</font> Persistent_Pool;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Index</b> : Root_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Value</b> : Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the root index corresponding to <b>Index</b>. Root 
indices are persistent. They can be read back using
<a href="#Persistent.Memory_Pools.Get_Root_Index">Get_Root_Index</a>.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Memory_Pools.Truncate"></a>
	procedure</font> Truncate<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pool</b>&nbsp; 
	: <font color="#0000FF">in out</font> Persistent_Pool;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Index</b> : Byte_Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Size</b>&nbsp; 
	: Byte_Count<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure truncates the memory block pointed by <b>Index</b> to <b>Size</b>. 
Nothing happens if the new size is greater than the current one or when the 
freed space is less than minimal possible size. Use_Error is propagated when no 
memory pool file is open, or when the file was opened read-only.</p>
<h4><a name="7.3.1"></a>7.3.1. Concurrent access to the container file</h4>
<p>The type <a href="#Persistent.Memory_Pools.Holder">Holder</a> declared in the 
package <a href="#Persistent.Memory_Pools">Persistent.Memory_Pools</a> allows to 
access the underlying container file in a task-safe way.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Memory_Pools.Holder"></a>type</font> 
	Holder (Pool : <font color="#0000FF">access</font> Persistent_Pool'Class)<font color="#0000FF"> 
	is<br>
&nbsp;&nbsp; new</font> Ada.Finalization.Limited_Controlled
	<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>In the scope of the object an access to the file Pool.File is exclusive.</p>
<p align="right">
  <A name="7.4"></A><a href="#7.3"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#8"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>7.4. Streams to persistent storage memory pool</H3>
<p><a name="Persistent.Memory_Pools.Streams"></a>The  
child package <a href="#Persistent.Memory_Pools.Streams">Persistent.Memory_Pools.Streams</a> 
provides 
stream interfaces to the persistent storage memory pool. The interface can be 
used to allocate objects larger than the file block length. The contents is 
split into a set of linked memory blocks. The stream interface transparently crosses block borders when data are read 
(<a href="#Persistent.Memory_Pools.Streams.Input_Stream">Input_Stream</a>) or 
written (<a href="#Persistent.Memory_Pools.Streams.Output_Stream">Output_Stream</a>). 
Blocks are allocated transparently when the stream is written. The memory allocation 
strategy of output stream is eager. When an output stream is closed the unused allocated space 
is reclaimed. The memory allocated by writing can also be 
freed using
<a href="#Persistent.Memory_Pools.Deallocate">Deallocate</a>. This is the only 
operation that should be used on the memory allocated trough output stream. Operations like
<a href="#Persistent.Memory_Pools.Allocate">Allocate</a>,
<a href="#Persistent.Memory_Pools.Expand">Expand</a>,
<a href="#Persistent.Memory_Pools.Fetch">Fetch</a>,
<a href="#Persistent.Memory_Pools.Truncate">Truncate</a> may not be mixed with 
stream operations.</p>
<h4><a name="7.4.1"></a>7.4.1. Output streams</h4>
<blockquote>
  <p><tt><font color="#0000FF">
	<a name="Persistent.Memory_Pools.Streams.Output_Stream"></a>type </font>
	Output_Stream<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pool</b> : <font color="#0000FF">access</font> 
	Persistent_Pool'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is new </font>
	Root_Stream_Type<font color="#0000FF"> with private</font>;</tt></p>
</blockquote>
<p>This stream object is used to store objects into the pool specified as the 
object's discriminant <b>Pool</b>. The output stream allocates memory blocks as 
necessary. The object can be read back from an
<a href="#Persistent.Memory_Pools.Streams.Input_Stream">Input_Stream</a>. When a 
new stream object is written it automatically allocates the first memory block. 
The index of the first block can be obtained using
<a href="#Persistent.Memory_Pools.Streams.Get_First">Get_First</a>. The storage 
written using streams shall not be modified otherwise than using streams defined 
in this package. The memory allocated by writing
<a href="#Persistent.Memory_Pools.Streams.Output_Stream">Output_Stream</a> can 
be reclaimed using
<a href="#Persistent.Memory_Pools.Deallocate">Deallocate</a> with the index 
returned by <a href="#Persistent.Memory_Pools.Streams.Get_First">Get_First</a>. 
Reading from <a href="#Persistent.Memory_Pools.Streams.Output_Stream">
Output_Stream</a> causes propagation of Use_Error.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Memory_Pools.Streams.Append">
	</a>procedure </font>Append<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Stream</b> :
	<font color="#0000FF">in out</font> Output_Stream;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Index</b>&nbsp; : Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure opens previously written storage allocated at <b>Index</b>. 
Newly written data are appended to the end of used storage. Use_Error is 
propagated when no pool file is open. See also
<a href="#Persistent.Memory_Pools.Streams.Open">Open</a>.</p>
<blockquote>
  <p><tt><font color="#0000FF">procedure </font>Close (<b>Stream</b> :
	<font color="#0000FF">in out</font> Output_Stream);</tt></p>
</blockquote>
<p>This procedure disconnects the stream from memory and brings it into the 
state of a newly created object. When closed unused memory allocated for the 
stream is freed. The stream contents can be read back using
<a href="#Persistent.Memory_Pools.Streams.Input_Stream">Input_Stream</a>.</p>
<blockquote>
  <p><tt><font color="#0000FF">
	<a name="Persistent.Memory_Pools.Streams.Get_First"></a>function </font>
	Get_First (<b>Stream</b> : Output_Stream)<font color="#0000FF"> return </font>
	Byte_Index;</tt></p>
</blockquote>
<p>This function returns the index of the first byte allocated. It can be used 
in
<a href="#Persistent.Memory_Pools.Deallocate">Deallocate</a> and in operations 
like <a href="#Persistent.Memory_Pools.Streams.Append">Append</a> and
<a href="#Persistent.Memory_Pools.Streams.Open_Input">Open</a>. Use_Error is 
propagated when no stream is open or written.</p>
<blockquote>
  <p><tt><font color="#0000FF">function </font>Get_Written (<b>Stream</b> : 
	Output_Stream)<font color="#0000FF"><br>
&nbsp;&nbsp; return</font> Stream_Element_Count;</tt></p>
</blockquote>
<p>This function returns the number of stream elements written into <b>Stream</b>. 
For a newly created object the result is 0.</p>
<blockquote>
  <p><tt><font color="#0000FF"><a name="Persistent.Memory_Pools.Streams.Open">
	</a>procedure</font> Open<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Stream</b> :
	<font color="#0000FF">in out</font> Output_Stream;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Index</b>&nbsp; : Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure opens previously written storage allocated at <b>Index</b> for 
rewriting. Newly written data will be placed from the beginning of the allocated 
storage. Use_Error is propagated when no pool file is open. See also
<a href="#Persistent.Memory_Pools.Streams.Append">Append</a>.</p>
<blockquote>
  <p><tt><font color="#0000FF">procedure</font> Read<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Stream</b> :
	<font color="#0000FF">in out</font> Output_Stream;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Item</b>&nbsp;&nbsp; 
	: <font color="#0000FF">out</font> Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Last</b>&nbsp;&nbsp; 
	: <font color="#0000FF">out</font> Stream_Element_Offset<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure propagates Use_Error.</p>
<blockquote>
  <p><tt><font color="#0000FF">procedure</font> Write<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Stream</b> :
	<font color="#0000FF">in out</font> Output_Stream;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Item</b>&nbsp;&nbsp; 
	: Stream_Element_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The implementation of stream interface stores written element into the memory 
blocks allocated in the pool. Use_Error is propagated when no memory pool file 
is open. I/O errors are propagated on other errors.</p>
<p>The following code sample illustrates usage of
<a href="#Persistent.Memory_Pools.Streams.Output_Stream">Output_Stream</a> and
<a href="#Persistent.Memory_Pools.Streams.Input_Stream">Input_Stream</a>:</p>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#B8D3D1"><tt>
<font color="#0000FF">declare</font><br>
&nbsp;&nbsp; Pool&nbsp; : <font color="#0000FF">aliased</font> Persistent_Pool;<br>
&nbsp;&nbsp; Hello : Byte_Index;<br>
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp; Open (Pool, &quot;<font color="#FF0000">my_storage.dat</font>&quot;);<font color="#008000"> 
-- Open external file</font><br>
&nbsp;&nbsp; <font color="#0000FF">declare</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Output : <font color="#0000FF">aliased</font> 
Output_Stream (Pool'Access);<br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String'Output (Output'Access, &quot;<font color="#FF0000">Hello 
World!</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hello := Get_First (Output);<br>
&nbsp;&nbsp; <font color="#0000FF">end</font>;<br>
&nbsp;&nbsp;&nbsp;<font color="#008000">-- Now &quot;Hello World!&quot; is stored in the pool at Hello<br>
</font>&nbsp;&nbsp;&nbsp;<font color="#008000">-- The memory pool can be closed and the 
application<br>
</font>&nbsp;&nbsp;&nbsp;<font color="#008000">-- exited. Another application can open the pool 
and<br>
</font>&nbsp;&nbsp;&nbsp;<font color="#008000">-- read stored string at Hello as follows:<br>
</font>&nbsp;&nbsp;&nbsp;...<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">declare</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008000"> </font>Input : <font color="#0000FF">aliased</font> 
Input_Stream (Pool'Access);<font color="#008000"><br>
&nbsp;&nbsp; </font><font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Open (Input, Hello);<font color="#008000"> -- Set 
input stream to Hello</font><br>
<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; declare<br>
</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Data : String := 
String'Input (Input'Access);<br>
<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; begin</font><font color="#008000"> 
-- Now Data is &quot;Hello World!&quot;</font><font color="#0000FF"><br>
</font>&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<br>
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;<font color="#0000FF">end</font>;<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">end</font>;<br>
&nbsp;&nbsp; ...</tt></TD>
  </TR>
</TABLE>
<h4><a name="7.4.2"></a>7.4.2. Input streams</h4>
<blockquote>
  <p><tt><font color="#0000FF">
	<a name="Persistent.Memory_Pools.Streams.Input_Stream"></a>type </font>
	Input_Stream<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pool</b> : <font color="#0000FF">access</font> 
	Persistent_Pool'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is new </font>
	Root_Stream_Type<font color="#0000FF"> with private</font>;</tt></p>
</blockquote>
<p>The input stream is set to the first allocated memory block written using
<a href="#Persistent.Memory_Pools.Streams.Output_Stream">Output_Stream</a>. When 
reading from the stream the internal pointer moves through the allocated memory 
up to the last stored stream element.</p>
<blockquote>
  <p><tt><font color="#0000FF">procedure </font>Close (<b>Stream</b> :
	<font color="#0000FF">in out</font> Input_Stream);</tt></p>
</blockquote>
<p>This procedure disconnects the stream from memory and brings it into the 
state of a newly created object.</p>
<blockquote>
  <p><tt><font color="#0000FF">function </font>Compare<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Left</b>&nbsp; :
	Input_Stream;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Right</b> 
	: Stream_Element_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Precedence;<font color="#0000FF"><br>
	function </font>Compare<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Left </b>&nbsp;:
	Input_Stream;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Right</b> 
	: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Precedence;</tt></p>
</blockquote>
<p>These functions compare the unread contents of stream with another stream or an array of stream 
elements or characters of a string. The result is of the enumeration <i>Less</i>,
<i>Equal</i>, <i>Greater</i> defined in
<a href="http://www.dmitry-kazakov.de/ada/strings_edit.htm#Strings_Edit.Lexicographical_Order">Strings_Edit.Lexicographical_Order</a>. 
An unopened stream is considered empty.</p>
<blockquote>
  <p><tt><font color="#0000FF">function </font>End_Of (<b>Stream</b> : 
	Input_Stream)<font color="#0000FF"> return </font>Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if the end of 
stream is reached. For a newly created object the result is 0.</p>
<blockquote>
  <p><tt><font color="#0000FF">function </font>Equal<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Stream</b> :
	Input_Stream;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Item</b>&nbsp;&nbsp; 
	: Stream_Element_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Boolean;<font color="#0000FF"><br>
	function </font>Equal<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Stream</b> :
	Input_Stream;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Text</b>&nbsp;&nbsp; 
	: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Boolean;</tt></p>
</blockquote>
<p>These functions compare the unread contents of <b>Stream</b> with an array of stream 
elements or characters of a string. The result is <i><font color="#800000">true</font></i> 
if both are equal. An unopened stream is considered empty.</p>
<blockquote>
  <p><tt><font color="#0000FF">function </font>Get_First (<b>Stream</b> : 
	Input_Stream)<font color="#0000FF"> return </font>Byte_Index;</tt></p>
</blockquote>
<p>This function returns the index of the first byte allocated. It can be used 
in
<a href="#Persistent.Memory_Pools.Deallocate">Deallocate</a> and in operations 
like <a href="#Persistent.Memory_Pools.Streams.Append">Append</a> and
<a href="#Persistent.Memory_Pools.Streams.Open_Input">Open</a>. Use_Error is 
propagated when no stream is open or written.</p>
<blockquote>
  <p><tt><font color="#0000FF">
	<a name="Persistent.Memory_Pools.Streams.Get_Length"></a>function </font>
	Get_Length (<b>Stream</b> : Input_Stream)<font color="#0000FF"> return </font>
	Stream_Element_Count;</tt></p>
</blockquote>
<p>This function returns the number of elements allocated. For a newly created 
object the result is 0.</p>
<blockquote>
  <p><tt><font color="#0000FF">function </font>Get_Unread (<b>Stream</b> : 
	Input_Stream)<font color="#0000FF"> return </font>Stream_Element_Count;</tt></p>
</blockquote>
<p>This function returns the number of elements to read. At the beginning it is 
equal to <a href="#Persistent.Memory_Pools.Streams.Get_Length">Get_Length</a>, 
at the end it is 0. For a newly created object the result is 0.</p>
<blockquote>
  <p><tt><font color="#0000FF">function </font>Less<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Stream</b> :
	Input_Stream;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Item</b>&nbsp;&nbsp; 
	: Stream_Element_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Boolean;<font color="#0000FF"><br>
	function </font>Less<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Stream</b> :
	Input_Stream;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Text</b>&nbsp;&nbsp; 
	: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Boolean;</tt></p>
</blockquote>
<p>These functions compare the unread contents of Stream with an array of stream 
elements or characters of a string. The result is <i><font color="#800000">true</font></i> 
if the unread content of Stream is less than the second parameter. An unopened 
stream is considered empty.</p>
<blockquote>
  <p><tt><font color="#0000FF">
	<a name="Persistent.Memory_Pools.Streams.Open_Input"></a>procedure </font>
	Open<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Stream</b> :
	<font color="#0000FF">in out</font> Input_Stream;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Index</b>&nbsp; : Byte_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the stream to read from the storage at <b>Index</b>. It 
must be called before reading from the stream. Use_Error is propagated when no 
memory pool file is open.</p>
<blockquote>
  <p><tt><font color="#0000FF">procedure</font> Read<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Stream</b> :
	<font color="#0000FF">in out</font> Input_Stream;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Item</b>&nbsp;&nbsp; 
	: <font color="#0000FF">out</font> Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Last</b>&nbsp;&nbsp; 
	: <font color="#0000FF">out</font> Stream_Element_Offset<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The implementation of stream interface read elements from the memory blocks 
allocated in the pool. Use_Error is propagated when no memory pool file is open. 
I/O errors are propagated on other errors.</p>
<blockquote>
  <p><tt><font color="#0000FF">procedure </font>Rewind (<b>Stream</b> :
	<font color="#0000FF">in out</font> Input_Stream);</tt></p>
</blockquote>
<p>This procedure re-opens the stream from the beginning.</p>
<blockquote>
  <p><tt><font color="#0000FF">procedure</font> Write<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Stream</b> :
	<font color="#0000FF">in out</font> Input_Stream;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Item</b>&nbsp;&nbsp; 
	: Stream_Element_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure propagates Use_Error.</p>
<h4><a name="7.4.3"></a>7.4.3. Generic look ahead</h4>
<p><a name="Persistent.Memory_Pools.Streams.Look_Ahead"></a>The generic 
procedure <a href="#Persistent.Memory_Pools.Streams.Look_Ahead">Look_Ahead</a> 
is used to scan the unread contents of the stream without actually reading it:</p>
<blockquote>
  <p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type </font>User_Data_Type (&lt;&gt;) <font color="#0000FF">is limited 
	private</font>;<font color="#0000FF"><br>
&nbsp;&nbsp; type </font>Visitor_Type<font color="#0000FF"> is access procedure<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>(&nbsp; <b>Contents</b>&nbsp; 
	: Byte_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>User_Data</b> :
	<font color="#0000FF">in out</font> User_Data_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Continue</b>&nbsp; 
	:<font color="#0000FF"> out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	procedure </font>Look_Ahead<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Stream</b>&nbsp;&nbsp;&nbsp; 
	: Input_Stream'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Visit</b>&nbsp;&nbsp;&nbsp;&nbsp; : Visitor_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	User_Data</b> : <font color="#0000FF">in out</font> User_Data_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The parameter <b>Stream</b> is the input stream. <b>User_Data</b> is the data 
to pass along to the visitor call-back. <b>Visit</b> is the callback called on 
chucks of the allocated data not yet read through the stream. The procedure's 
first parameter <b>Contents</b> is the array of stream bytes to process. The 
parameter <b>User_Data</b> is same as in the call to
<a href="#Persistent.Memory_Pools.Streams.Look_Ahead">Look_Ahead</a>. The 
parameter <b>Continue</b> is used to indicate premature completion. When set to
<i><font color="#800000">true</font></i> the process is continued to the next 
chuck of unread allocated data. When set to <i><font color="#800000">false</font></i>
<a href="#Persistent.Memory_Pools.Streams.Look_Ahead">Look_Ahead</a> returns 
immediately. Use_Error is propagated when the stream is not open.</p>
<hr>

<p align="right">
  <a href="#8" name="8"></a><a href="#7.4"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#8.1"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<h2>8. Doubly-linked networks</h2>
<p><a name="Generic_Doubly_Linked_Web"></a>The generic package
<a href="#Generic_Doubly_Linked_Web">Generic_Doubly_Linked_Web</a> provides 
double-linked networks of items:</p>

<blockquote>
  <p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type </font>List_Identification_Type <font color="#0000FF">is</font> 
	(&lt;&gt;);<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> List_Item_Type (&lt;&gt;)
	<font color="#0000FF">is limited private</font>;<br>
&nbsp;&nbsp; Pool : <font color="#0000FF">in out</font> Root_Storage_Pool'Class;<br>
	<font color="#0000FF">package</font> Generic_Doubly_Linked_Web
	<font color="#0000FF">is</font> ...</tt></p>

</blockquote>

<p>The items can be of any type as specifies the formal parameter List_Item_Type. 
This includes limited and unconstrained types. They are not required to be 
tagged. So protected objects or tasks can be items. The items are never copied when inserted 
into, moved along or 
removed from a list. All operations on the network lists and their items are 
referential. Insertion and removal are <i>O</i>(1). An item of the network may participate several lists of different types. The set 
of distinct list types is determined by the formal parameter List_Identification_Type, which is a discrete type. For each value of this type 
each item has a pair of pointers (links). So the number of values of List_Identification_Type is the number of lists an item can be simultaneously 
situated in. For a standard doubly-linked list where an item can be in only one 
list, the parameter List_Identification_Type could be, for example: </p>
<p><tt><font color="#0000FF">&nbsp;&nbsp; type </font>List_Identification
<font color="#0000FF">is</font> (The_List);</tt></p>
<p>For multiple lists as illustrated on the figure below, it could be: </p>
<p><tt><font color="#0000FF">&nbsp;&nbsp; type </font>List_Identification
<font color="#0000FF">is</font> (Blue, Green, Red);</tt></p>
<blockquote>
	<p><img border="0" src="d_l_lists.gif" width="499" height="544" alt="doubly-linked list"></p>
</blockquote>

<p>The figure shows 5 items forming a network of 4 lists of 3 different types. For instance, 
the item B is in the <i>blue</i> list A-B-C-D, <i>green</i> list B-C-D and <i>red</i> list B-C-D-E.</p>
<p>The items are allocated in the storage pool specified by the formal parameter 
Pool. The service data (links) associated with an item are allocated in Pool.</p>
<p>The package provides the access type
<a href="#Generic_Doubly_Linked_Web.Node">Node</a> for referencing the items 
and the access type <a href="#Generic_Doubly_Linked_Web.Web">Web</a> to 
reference the head items of lists. Note that each list is circular, so any of 
its items can be considered as a head. All list operations are defined in terms 
of <a href="#Generic_Doubly_Linked_Web.Node">Node</a> and
<a href="#Generic_Doubly_Linked_Web.Web">Web</a>. Naturally,
<a href="#Generic_Doubly_Linked_Web.Web">Web</a> and
<a href="#Generic_Doubly_Linked_Web.Node">Node</a> are freely convertible to 
each other:</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Doubly_Linked_Web.Node"></a>type&nbsp;</font>Node<font color="#0000FF">&nbsp;is&nbsp;access&nbsp;</font>List_Item_Type;<font color="#0000FF"><br>
	<a name="Generic_Doubly_Linked_Web.Web"></a>type </font>Web<font color="#0000FF">&nbsp;is&nbsp;new&nbsp;</font>Node;</tt></p>
	<blockquote>
		<i>A distinct type was chosen to separate pointers to items from ones to lists. 
		This was important for aliasing prevention. For example if </i>
		<a href="#Generic_Doubly_Linked_Web.Node">Node</a><i> were used in
	</i><a href="#Generic_Doubly_Linked_Web.Delete">Delete</a><i>, then the following 
	would be legal:</i><blockquote>
			<p><tt>Delete (Messages, List_Head, List_Head);</tt></p>
		</blockquote>
		<p><i>So the operation </i><a href="#Generic_Doubly_Linked_Web.Delete">Delete</a><i> could 
finalize the item referenced by the third parameter, and thus set List_Head to
		</i><font color="#0000FF">null</font><i>. At the same time it would set the second 
parameter to point to the next item in the list, setting List_Head to some not
		</i><font color="#0000FF">null</font><i> value. 
The result would depend on the compiler and the program were erroneous. This 
		manifests an 
aliasing problem, which cannot occur because in&nbsp;</i><a href="#Generic_Doubly_Linked_Web.Delete">Delete</a>
		<i> the second 
parameter has the type </i><a href="#Generic_Doubly_Linked_Web.Web">Web</a><i>, 
		making it impossible to mistakenly alias it to another type.</i></p>
		<p><i>The representation clause</i></p>
		<blockquote>
			<p><tt><font color="#0000FF">for</font> Node'Size 
				<font color="#0000FF">use</font> 
		Integer_Address'Size;</tt></p>
		</blockquote>
		<p><i>is used to prevent the compiler from making &quot;fat&quot; pointers out of 
			</i><a href="#Generic_Doubly_Linked_Web.Node">Node</a> <i>and</i>
		<a href="#Generic_Doubly_Linked_Web.Web">Web</a><i>. This should actually be 
	Address'Size, but that would be illegal because Address'Size is not a static 
	expression in Ada. The type Integer_Address should have same size as Address on almost all 
	architectures. If it is not, change it to an explicit number. Remember that 
	the size is specified in bits.</i></p>
	</blockquote>
</blockquote>
<p>A list item is created by using the allocator <font color="#0000FF">new</font>. The obtained pointer is passed to 
<a href="#Generic_Doubly_Linked_Web.Append">Append</a> (<a href="#Generic_Doubly_Linked_Web.Prepend">Prepend</a>) or 
<a href="#Generic_Doubly_Linked_Web.Insert">Insert</a> as appropriate. The 
procedure
<a href="#Generic_Doubly_Linked_Web.Append">Append</a> is used for creating a new list. The list is specified by a pointer to its head. So it can be created like:</p>

<blockquote>
  <p><tt>&nbsp;&nbsp; Head : Web; <font color="#008000">-- Empty list</font><br>
	<font color="#0000FF">begin</font><br>
&nbsp;&nbsp; Append (Messages, Head, <font color="#0000FF">new</font> Object);</tt></p>

</blockquote>
<p>Now Head points to the newly allocated item in the list. Subsequent items can be created as:</p>
<blockquote>
	<p><tt>&nbsp;&nbsp; Append (Messages, Head, <font color="#0000FF">new</font> Object);</tt></p>
</blockquote>
<p>The first parameter of all list operations is the type of the list. If there were several types of lists, we could place the same item into different lists. For example:</p>

<blockquote>
  <p><tt><font color="#0000FF">type</font> Signal <font color="#0000FF">is<br>
&nbsp;&nbsp; new abstract </font>Ada.Finalization.Limited_Controlled
	<font color="#0000FF">with private</font>;<br>
	<font color="#0000FF">type</font> Signal_List <font color="#0000FF">is</font> 
	(Alarm, Log);<br>
	<font color="#0000FF">type</font> Some_Ptr <font color="#0000FF">is access
	</font><i>Any</i>; <font color="#008000">-- The default storage pool</font><br>
	<font color="#0000FF">package</font> Signal_Lists <font color="#0000FF">is<br>
&nbsp;&nbsp; new </font>Generic_Doubly_Linked_Web<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Signal_List,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Signal'Class,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Some_Ptr'Storage_Pool<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
	...<br>
	Message := <font color="#0000FF">new</font> Error_Message;<font color="#008000"> -- Derived from Signal</font><br>
	Append (Alarm, Notifications_List, Message);<br>
	Append (Log,&nbsp;&nbsp; System_Trace_List,&nbsp; Message);</tt></p>

</blockquote>
<p>Both
<a href="#Generic_Doubly_Linked_Web.Append">Append</a> or 
<a href="#Generic_Doubly_Linked_Web.Insert">Insert</a> are intended for placing newly allocated items or items removed from their lists before. To move an item from one list to another of the same type 
they take an additional parameter <b>Source</b> to specify the head of the list, the 
element is removed from. These procedures are equivalent to a call to
<a href="#Generic_Doubly_Linked_Web.Remove">Remove</a> with a subsequent
<a href="#Generic_Doubly_Linked_Web.Append">Append</a> or 
<a href="#Generic_Doubly_Linked_Web.Insert">Insert</a> as required. The difference between&nbsp;
<a href="#Generic_Doubly_Linked_Web.Append">Append</a> and
<a href="#Generic_Doubly_Linked_Web.Insert">Insert</a> is that for
<a href="#Generic_Doubly_Linked_Web.Append">Append</a> the list head is specified and thus the list can 
be empty. For 
<a href="#Generic_Doubly_Linked_Web.Insert">Insert</a> the list head is not identified and the list cannot be empty. 
The design of these operations was chosen to prevent, when possible, dangling 
pointers and garbage. For this reason all operations that remove an item from a 
list refer to the list head. When appropriately used, the rest of the list 
should not become unreferenced. The deallocator of the storage pool where 
the list items are kept, checks freed items for being unreferenced. When a freed item is 
still in a list, Program_Error is propagated out of Unchecked_Deallocation.</p>
<p>There is no special function to obtain the first element in the list because 
the list head is also the first element. So:</p>

<blockquote>
  <p><tt>Element := Node (Container);</tt></p>

</blockquote>
<p>would do the job.</p>
<p>The following list operations are defined:</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Doubly_Linked_Web.Append"></a>
	procedure </font>Append<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Brand</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: List_Identification_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Container</b> : <font color="#0000FF">in out </font>Web;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b>&nbsp;&nbsp; : Node;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure inserts <b>Element</b> is at 
the end of <b>Container</b>. <b>Element</b> is either a newly 
allocated item or an item outside any lists of the type <b>Brand</b>. 
Constraint_Error is propagated when <b>Element</b> already is in a list. This 
includes <b>Container</b>. <b>Container</b> can be empty before a call to the 
procedure, in which case <b>Element</b> becomes the head of it. See also
<a href="#Generic_Doubly_Linked_Web.Prepend">Prepend</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Doubly_Linked_Web.Append_Moving"></a>
	procedure</font> Append<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Brand</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: List_Identification_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Container</b> : <font color="#0000FF">in out</font> Web;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b>&nbsp;&nbsp; : Node;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Source</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> Web<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is an equivalent to 
<a href="#Generic_Doubly_Linked_Web.Remove">Remove</a> followed by
<a href="#Generic_Doubly_Linked_Web.Append">Append</a> without the parameter <b>
Source</b>. It moves <b>Element</b> from
<b>Source</b> to <b>Container</b>. When <b>Source</b> and <b>
Container</b> is the same list <b>Container</b> parameter takes advantage. 
Constraint_Error is propagated when <b>Element</b> is <font color="#0000FF">null</font>. 
See also <a href="#Generic_Doubly_Linked_Web.Prepend_Moving">Prepend</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Doubly_Linked_Web.Delete">
	</a>procedure</font> Delete<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Brand</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: List_Identification_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Container</b> : <font color="#0000FF">in out</font> Web;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b>&nbsp;&nbsp; : <font color="#0000FF">in out</font> Node<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure removes <b>Element</b> from <b>Container</b>. The item 
following <b>Element</b> becomes the new list head. The operation is void when
<b>Element</b> is <font color="#0000FF">null</font>. The 
parameter <b>Container</b> is ignored when <font color="#0000FF">null</font>. 
When <b>Element</b> after its removal does not belong to any list its target 
object is finalized, freed, and then <b>Element</b> is set to
<font color="#0000FF">null</font>.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Doubly_Linked_Web.Erase">
	</a>procedure</font> Erase<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Brand</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: List_Identification_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Container</b> : <font color="#0000FF">in out</font> Web<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure removes all elements from <b>Container</b>. When an element after its removal does not belong to any list its target 
object is finalized and freed.&nbsp; </p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Doubly_Linked_Web.Insert">
	</a>procedure</font> Insert<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Brand</b>&nbsp;&nbsp;&nbsp; 
	: List_Identification_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Position</b> : Node;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b>&nbsp; : Node<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure inserts <b>Element</b> after the item specified by the parameter <b>Position</b>. <b>Element</b> may 
not be in any list. Constraint_Error is propagated otherwise or when <b>Element</b> 
is <font color="#0000FF">null</font>. Constraint_Error is also propagated when
<b>Position</b> is <font color="#0000FF">null</font> or not in a list of <b>
Brand</b> type.
<a href="#Generic_Doubly_Linked_Web.Insert">Insert</a> is similar to
<a href="#Generic_Doubly_Linked_Web.Append">Append</a>, with the difference that an 
arbitrary list item is used to indicate the insertion position. For this reason
<a href="#Generic_Doubly_Linked_Web.Append">Append</a> can deal with empty lists, 
while <a href="#Generic_Doubly_Linked_Web.Insert">Insert</a> requires at least 
one item in. To insert <b>Element</b> before <b>Position</b> use:</p>
<blockquote>
	<blockquote>
		<p><tt>Insert (Brand, Previous (Brand, Position), Element);&nbsp; </tt>
		</p>
	</blockquote>
	<p><tt><font color="#0000FF">
	<a name="Generic_Doubly_Linked_Web.Insert_Moving"></a>procedure</font> Insert<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
	<b>Brand</b>&nbsp;&nbsp;&nbsp;&nbsp;: List_Identification_Type;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>Position </b>: Node;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>Element</b>&nbsp;&nbsp;: Node;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>Source</b>&nbsp;&nbsp;&nbsp;: <font color="#0000FF">in out</font> Web<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is an equivalent to 
<a href="#Generic_Doubly_Linked_Web.Remove">Remove</a> followed by
<a href="#Generic_Doubly_Linked_Web.Insert">Insert</a>. It moves <b>Element</b> from
<b>Source</b> to the list of <b>Position</b>. The parameter has the same meaning as in
<a href="#Generic_Doubly_Linked_Web.Insert">Insert</a>. When <b>Position</b> and <b>
Element</b> refer the same item, the procedure does nothing. Constraint_Error is propagated when 
<b>Element</b> or <b>Position</b> is <font color="#0000FF">null</font>. It is 
also propagated when <b>Position</b> is not in a list of <b>Brand</b> type.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Is_Empty<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
	<b>Brand</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: List_Identification_Type;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>Container</b> 
	: Web<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; 
	<font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function return <font color="#800000"><i>true</i></font> if <b>
Container </b>is <font color="#0000FF">null</font>. For containers of he type
		<a href="#Generic_Doubly_Linked_Web.Web">Web</a> emptiness is equivalent 
to being <font color="#0000FF">null</font>.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Doubly_Linked_Web.Is_In"></a>
	function</font> Is_In<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Brand</b>&nbsp;&nbsp; 
	: List_Identification_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Element</b> 
	: Node<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Boolean;</tt></p>
</blockquote>
<p>This function return <font color="#800000"><i>false</i></font> if <b>Element</b> 
is <font color="#0000FF">null</font> or else is not in any list of <b>Brand</b> 
type. Where <a href="#Generic_Doubly_Linked_Web.Is_In">Is_In</a> returns 
<font color="#800000"><i>false</i></font>
<a href="#Generic_Doubly_Linked_Web.Next">Next</a> and
<a href="#Generic_Doubly_Linked_Web.Previous">Previous</a> would raise 
Contraint_Error.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Doubly_Linked_Web.Is_In_any_list"></a>
	function</font> Is_In (<b>Element</b> 
	: Node) <font color="#0000FF">
	return</font> Boolean;</tt></p>
</blockquote>
<p>This function return <font color="#800000"><i>false</i></font> if <b>Element</b> 
is <font color="#0000FF">null</font> or else is not in any list of any 
type.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Doubly_Linked_Web.Merge"></a>
	procedure</font> Merge<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Brand</b> 
	: List_Identification_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Head</b>&nbsp; 
	: <font color="#0000FF">in out</font> Web;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Tail</b>&nbsp; 
	: <font color="#0000FF">in out</font> Web<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);</tt></p>
</blockquote>
<p>This procedure merges two lists. The list <b>Tail</b> is appended to the list
<b>Head</b>. Either of the list can be <font color="#0000FF">null</font>. The 
operation is void if <b>Head</b> = <b>Tail</b>. After completion <b>Head</b> and
<b>Tail</b> point to the merged sublists.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Doubly_Linked_Web.Next"></a>
	function</font> Next<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Brand</b>&nbsp;&nbsp; 
	: List_Identification_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Element</b> 
	: Node<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Node;<br>
	<font color="#0000FF">function</font> Next<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Brand</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: List_Identification_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Container</b> 
	: Web<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Node;</tt></p>
</blockquote>
<p>These functions return item following either <b>Element</b> or the head of <b>
Container</b>. Constraint_Error is propagated in all cases when there is no next 
item. Note that when the element is in a list of <b>Brand</b> type, it always 
has a next element, maybe itself. The list is circular.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Doubly_Linked_Web.Prepend"></a>
	procedure </font>Prepend<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Brand</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: List_Identification_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Container</b> : <font color="#0000FF">in out </font>Web;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b>&nbsp;&nbsp; : Node;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure inserts <b>Element</b> is in front of <b>Container</b>. <b>Element</b> is either a newly 
allocated item or an item outside any lists of the type <b>Brand</b>. 
Constraint_Error is propagated when <b>Element</b> already is in a list. This 
includes <b>Container</b>. <b>Container</b> can be empty before a call to the 
procedure, in which case <b>Element</b> becomes the head of it. See also
<a href="#Generic_Doubly_Linked_Web.Append">Append</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Generic_Doubly_Linked_Web.Prepend_Moving"></a>
	procedure</font> Prepend<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Brand</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: List_Identification_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Container</b> : <font color="#0000FF">in out</font> Web;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b>&nbsp;&nbsp; : Node;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Source</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> Web<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is an equivalent to 
<a href="#Generic_Doubly_Linked_Web.Remove">Remove</a> followed by
<a href="#Generic_Doubly_Linked_Web.Prepend">Prepend</a> without the parameter <b>
Source</b>. It moves <b>Element</b> from
<b>Source</b> to the beginning of <b>Container</b>. When <b>Source</b> and <b>
Container</b> is the same list <b>Container</b> parameter takes advantage. 
Constraint_Error is propagated when <b>Element</b> is <font color="#0000FF">null</font>. 
The operation is void when <b>Container</b> and <b>Element</b> refer to the same 
item See also <a href="#Generic_Doubly_Linked_Web.Append_Moving">Append</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Doubly_Linked_Web.Previous">
	</a>function</font> Previous<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Brand</b>&nbsp;&nbsp; 
	: List_Identification_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Element</b> 
	: Node<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Node;<br>
	<font color="#0000FF">function</font> Previous<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Brand</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: List_Identification_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Container</b> 
	: Web<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Node;</tt></p>
</blockquote>
<p>These functions return item preceding either <b>Element</b> or the head of <b>
Container</b>. Constraint_Error is propagated in all cases when there is no 
previous item. When the element is in a list of <b>Brand</b> type, it always has 
a next element, maybe itself, because the list is circular.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Doubly_Linked_Web.Remove">
	</a>procedure</font> Remove<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Brand</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: List_Identification_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Container</b> : <font color="#0000FF">in out</font> Web;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b>&nbsp;&nbsp; : Node<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure removes <b>Element</b> from <b>Container</b>. The item 
following <b>Element</b> becomes the new list head. The operation is void when
<b>Element</b> is not in a list or <font color="#0000FF">null</font>. The 
parameter <b>Container</b> is ignored when <font color="#0000FF">null</font>. 
Unlikely to
	<a href="#Generic_Doubly_Linked_Web.Delete">Delete</a> <b>Element</b> is 
never freed.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Doubly_Linked_Web.Take">
	</a>procedure</font> Take<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Brand</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: List_Identification_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Container</b> : <font color="#0000FF">in out</font> Web;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Node<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure removes the first element from <b>Container</b>. The item 
following it becomes the new list head. The removed element is returned through 
the parameter <b>Element</b>. It is set to <font color="#0000FF">null</font> 
when <b>Container</b> is empty. When returned <b>Element</b> is not <font color="#0000FF">null</font> and 
not in any list (<a href="#Generic_Doubly_Linked_Web.Is_In_any_list">Is_In</a> (<b>Element</b>) = 
<font color="#800000"><i>false</i></font>), 
then it becomes the caller's responsibility either to destroy <b>Element</b> or to 
return it back to a list.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Dope_Size <font color="#0000FF">
	return</font> Storage_Offset;</tt></p>
</blockquote>
<p>This informational function returns the number of storage elements the 
compiler places in front of an item. The value is estimated and is available only after first call to a list operation. Constraint_Error 
is propagated when the size is yet not determined.</p>
<p align="right">
  <a href="#8.1" name="8.1"></a><a href="#8"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#8.2"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<h3>8.1. Doubly-linked lists of networks (specialization)</h3>
<p><a name="Generic_Doubly_Linked_Web.Generic_List"></a>The generic child package
<a href="#Generic_Doubly_Linked_Web.Generic_List">Generic_Doubly_Linked_Web.Generic_List</a> provides 
a specialization of
<a href="#Generic_Doubly_Linked_Web">Generic_Doubly_Linked_Web</a> constrained 
to one type of lists:</p>

<blockquote>
  <p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type</font> Brand : List_Identification_Type;<font color="#0000FF"><br>
	package </font>Generic_Doubly_Linked_Web.Generic_List<font color="#0000FF"> is</font> ...</tt></p>

</blockquote>

<p>The formal parameter Brand specifies the type of the list. The package 
defines specialized types of list nodes and list heads corresponding to
<a href="#Generic_Doubly_Linked_Web.Node">Node</a> and
<a href="#Generic_Doubly_Linked_Web.Web">Web</a>:</p>

<blockquote>
  <p><tt><font color="#0000FF">
	<a name="Generic_Doubly_Linked_Web.Generic_List.Item"></a>type </font>Item<font color="#0000FF"> 
	is new </font>Node;<font color="#0000FF"><br>
	<a name="Generic_Doubly_Linked_Web.Generic_List.List"></a>type </font>List<font color="#0000FF"> 
	is new </font>Web;</tt></p>

</blockquote>

<p>Items of the network can be allocated using either of these access types. The 
purpose of <a href="#Generic_Doubly_Linked_Web.Generic_List.Item">Item</a> and
<a href="#Generic_Doubly_Linked_Web.Generic_List.List">List</a> is specify which 
type links are involved in the specialized operations:</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Doubly_Linked_Web.Generic_List.Append"></a>
	procedure </font>Append (<b>Container</b> : <font color="#0000FF">in out </font>List; <b>
	Element</b> : Item);</tt></p>
</blockquote>
<p>This procedure is specialized version of
<a href="#Generic_Doubly_Linked_Web.Append">Append</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure </font>Append<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp;
	Container</b> : <font color="#0000FF">in out </font>List;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b>&nbsp;&nbsp; : Item;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Source</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> List<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	procedure </font>Append<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp;
	Container</b> : <font color="#0000FF">in out </font>List;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b>&nbsp;&nbsp; : Node;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Source</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> List<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is specialized version of moving
<a href="#Generic_Doubly_Linked_Web.Append_Moving">Append</a>. The parameter <b>Element</b> can be of either <a href="#Generic_Doubly_Linked_Web.Generic_List.Item">Item</a> 
or
<a href="#Generic_Doubly_Linked_Web.Node">Node</a> types.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Doubly_Linked_Web.Generic_List.Delete">
	</a>procedure</font> Delete (<b>Container</b> : <font color="#0000FF">in out</font> 
	List; <b>Element</b> : <font color="#0000FF">in out</font> Item);<font color="#0000FF"><br>
	procedure</font> Delete (<b>Container</b> : <font color="#0000FF">in out</font> 
	List; <b>Element </b>: <font color="#0000FF">in out</font> Node);</tt></p>
</blockquote>
<p>This is a specialized version of <a href="#Generic_Doubly_Linked_Web.Delete">Delete</a>. 
The parameter <b>Element</b> can be of either <a href="#Generic_Doubly_Linked_Web.Generic_List.Item">Item</a> 
or
<a href="#Generic_Doubly_Linked_Web.Node">Node</a> types.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Erase (<b>Container</b> : <font color="#0000FF">in out</font> 
	List);</tt></p>
</blockquote>
<p>This is specialized version of <a href="#Generic_Doubly_Linked_Web.Erase">
Erase</a>. It removes all elements from <b>Container</b>. When an element after its removal does not belong to any list its target 
object is finalized and freed.&nbsp; </p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Doubly_Linked_Web.Generic_List.Insert">
	</a>procedure</font> Insert (<b>Position</b> : Item; <b>
	Element</b>&nbsp;: Item);<font color="#0000FF"><br>
	procedure</font> Insert (<b>Position</b> : Node; <b>
	Element</b>&nbsp;: Item);</tt></p>
</blockquote>
<p>This is a specialized version of <a href="#Generic_Doubly_Linked_Web.Insert">Insert</a>. 
The parameter <b>Position</b> can be of either <a href="#Generic_Doubly_Linked_Web.Generic_List.Item">Item</a> 
or
<a href="#Generic_Doubly_Linked_Web.Node">Node</a> types. The parameter <b>
Element</b> is only of <a href="#Generic_Doubly_Linked_Web.Generic_List.Item">Item</a> 
type, because otherwise it were impossible to resolve names overloading. Though <a href="#Generic_Doubly_Linked_Web.Generic_List.Item">Item</a> 
and
<a href="#Generic_Doubly_Linked_Web.Node">Node</a> resemble base and derived 
tagged types, they are not.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Doubly_Linked_Web.Generic_List.Insert_Moving"></a>
	procedure</font> Insert<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>
	Position </b>: Item;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b>&nbsp;&nbsp;: Item;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Source</b>&nbsp;&nbsp;&nbsp;: <font color="#0000FF">in out</font> List<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	procedure</font> Insert <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>
	Position </b>: Item;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b>&nbsp;&nbsp;: Node;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Source</b>&nbsp;&nbsp;&nbsp;: <font color="#0000FF">in out</font> List<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	procedure</font> Insert<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>
	Position </b>: Node;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b>&nbsp;&nbsp;: Item;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Source</b>&nbsp;&nbsp;&nbsp;: <font color="#0000FF">in out</font> List<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	procedure</font> Insert<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>
	Position </b>: Node;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b>&nbsp;&nbsp;: Node;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Source</b>&nbsp;&nbsp;&nbsp;: <font color="#0000FF">in out</font> List<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures are specialized versions of
moving <a href="#Generic_Doubly_Linked_Web.Insert_Moving">Insert</a>. The parameters <b>Position</b> and 
<b>Element</b> can be of any combination of <a href="#Generic_Doubly_Linked_Web.Generic_List.Item">Item</a> 
or
<a href="#Generic_Doubly_Linked_Web.Node">Node</a> types.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Is_In (<b>Element</b> 
	: Item) <font color="#0000FF">
	return</font> Boolean;</tt></p>
</blockquote>
<p>These function return <font color="#800000"><i>false</i></font> if <b>Element</b> 
is <font color="#0000FF">null</font> or else is not in any list of the Brand 
type.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Merge (<b>Head</b> :
	<font color="#0000FF">in out</font> List; <b>Tail</b> :
	<font color="#0000FF">in out</font> List);</tt></p>
</blockquote>
<p>This procedure merges two lists. It is a specialized version of
<a href="#Generic_Doubly_Linked_Web.Merge">Merge</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Doubly_Linked_Web.Generic_List.Next"></a>
	function</font> Next(<b>Element</b> 
	: Item) <font color="#0000FF">
	return</font> Item;<br>
	<font color="#0000FF">function</font> Next(<b>Container</b> 
	: List) <font color="#0000FF">
	return</font> Item;</tt></p>
</blockquote>
<p>These are specialized versions of <a href="#Generic_Doubly_Linked_Web.Next">
Next</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Generic_Doubly_Linked_Web.Generic_List.Prepend"></a>
	procedure </font>Prepend (<b>Container</b> : <font color="#0000FF">in out </font>List; <b>
	Element</b> : Item);</tt></p>
</blockquote>
<p>This procedure is specialized version of
<a href="#Generic_Doubly_Linked_Web.Prepend">Prepend</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure </font>Prepend<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp;
	Container</b> : <font color="#0000FF">in out </font>List;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b>&nbsp;&nbsp; : Item;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Source</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> List<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	procedure </font>Prepend<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp;
	Container</b> : <font color="#0000FF">in out </font>List;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b>&nbsp;&nbsp; : Node;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Source</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> List<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is specialized version of moving
<a href="#Generic_Doubly_Linked_Web.Prepend_Moving">Prepend</a>. The parameter <b>Element</b> can be of either <a href="#Generic_Doubly_Linked_Web.Generic_List.Item">Item</a> 
or
<a href="#Generic_Doubly_Linked_Web.Node">Node</a> types.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Doubly_Linked_Web.Generic_List.Previous">
	</a>function</font> Previous (<b>Element</b> 
	: Item) <font color="#0000FF">
	return</font> Item;<br>
	<font color="#0000FF">function</font> Previous (<b>Container</b> 
	: List) <font color="#0000FF">
	return</font> Item;</tt></p>
</blockquote>
<p>These are specialized versions of
<a href="#Generic_Doubly_Linked_Web.Previous">Previous</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Doubly_Linked_Web.Generic_List.Remove">
	</a>procedure</font> Remove<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>
	Container</b> : <font color="#0000FF">in out</font> List;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b>&nbsp;&nbsp; : Item<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	procedure</font> Remove<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>
	Container</b> : <font color="#0000FF">in out</font> List;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b>&nbsp;&nbsp; : Node<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This is specialized version of <a href="#Generic_Doubly_Linked_Web.Remove">
Remove</a>. The parameter <b>Element</b> can be of either <a href="#Generic_Doubly_Linked_Web.Generic_List.Item">Item</a> 
or
<a href="#Generic_Doubly_Linked_Web.Node">Node</a> types.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Generic_Doubly_Linked_Web.Generic_List.Take">
	</a>procedure</font> Take<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>
	Container</b> : <font color="#0000FF">in out</font> List;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Item<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	procedure</font> Take<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>
	Container</b> : <font color="#0000FF">in out</font> List;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Node<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This is a specialized version of <a href="#Generic_Doubly_Linked_Web.Take">
Take</a>. The parameter <b>Element</b> can be of either <a href="#Generic_Doubly_Linked_Web.Generic_List.Item">Item</a> 
or
<a href="#Generic_Doubly_Linked_Web.Node">Node</a> types.</p>
<p align="right">
<a name="8.2"></a><a href="#8.1"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#9"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<h3>8.2. Doubly-linked lists</h3>
<p><a name="Generic_Doubly_Linked"></a>The generic package
<a href="#Generic_Doubly_Linked">Generic_Doubly_Linked</a> provides 
plain double-linked lists of elements allocated in the standard storage pool. 
The package is provided to simplify use of
<a href="#Generic_Doubly_Linked_Web">Generic_Doubly_Linked_Web</a> for this 
case.</p>

<blockquote>
  <p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type </font>List_Item_Type (&lt;&gt;)<font color="#0000FF"> is limited 
	private</font>;<br>
	<font color="#0000FF">package</font> Generic_Doubly_Linked
	<font color="#0000FF">is<br>
	</font> &nbsp;&nbsp; ...<font color="#0000FF"><br>
&nbsp;&nbsp; package </font>Doubly_Linked<font color="#0000FF"> is</font> ...</tt></p>

</blockquote>

<p>The typical use of the package is as follows:</p>

<blockquote>
  <p><tt><font color="#0000FF">type </font>My_Item <font color="#0000FF">is</font> 
	...;<font color="#0000FF"><br>
	package </font>My_Lists<font color="#0000FF"> is new </font>
	Generic_Doubly_Linked (My_Item);<font color="#0000FF"><br>
	use </font>My_Lists.Doubly_Linked;</tt></p>

</blockquote>

<p>The package Doubly_Linked is an instance of
<a href="#Generic_Doubly_Linked_Web.Generic_List">Generic_Doubly_Linked_Web.Generic_List</a>, 
which provides the types&nbsp; <a href="#Generic_Doubly_Linked_Web.Generic_List.Item">Item</a> and
<a href="#Generic_Doubly_Linked_Web.Generic_List.List">List</a> and operations 
on them (see <a href="#GNAT_bug">warning</a>).</p>
<h4><a name="8.2.1"></a>8.2.1. Doubly-linked list example</h4>
<p>The example represents an implementation of a simple scheduler of jobs. There 
is a pool of worker tasks and a queue of abstract jobs. The tasks take jobs from 
the queue, process them and then return them back to the queue. A doubly-linked 
list us used as the queue implementation. Jobs are tagged, so the queue 
contains class-wide objects. The example is located in the <i>test_components</i> 
subdirectory.
</p>File <i>test_linked_lists_scheduler.ads</i>:<br>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#0000FF">with</font> 
  Ada.Finalization;<br>
<font color="#0000FF">with</font> Generic_Doubly_Linked;<br>
<br>
<font color="#0000FF">package</font> Test_Linked_Lists_Scheduler
<font color="#0000FF">is</font><br>
<font color="#008000">&nbsp;&nbsp; --<br>
&nbsp;&nbsp; -- Job -- Abstract piece of work<br>
&nbsp;&nbsp; --<br>
</font>&nbsp;&nbsp; <font color="#0000FF">type</font> Job <font color="#0000FF">
is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; abstract new </font>Ada.Finalization.Controlled
<font color="#0000FF">with<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; null record</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Do_It (Work :
<font color="#0000FF">in out</font> Job) <font color="#0000FF">is abstract</font>;<br>
<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">package</font>&nbsp;Job_List&nbsp;<font color="#0000FF">&nbsp;is&nbsp;new</font>&nbsp;Generic_Doubly_Linked&nbsp;(Job'Class);<br>
&nbsp;&nbsp; <font color="#0000FF">use</font> Job_List.Doubly_Linked;</tt></TD>
  </TR>
</TABLE>
<p>The package Test_Linked_List_Scheduler declares an abstract type Job, which 
is a piece of work to be done. The abstract procedure Do_It is to be overridden by 
a concrete job. It is called by a worker task to accomplish the job. The package Job_List instantiates
<a href="#Generic_Doubly_Linked">Generic_Doubly_Linked</a> with Job'Class as the 
parameter. The package Job_List.Doubly_Linked provides a doubly linked list of 
Job'Class objects. Note that the list elements are class-wide, i.e. it can 
contain any kind of jobs.</p>
File <i>test_linked_lists_scheduler.ads (continuation)</i>:<br>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#008000">&nbsp;&nbsp; --<br>
&nbsp;&nbsp; -- Worker -- A task doing jobs<br>
&nbsp;&nbsp; --</font><br>
&nbsp;&nbsp; <font color="#0000FF">task type</font> Worker;<br>
<font color="#008000">&nbsp;&nbsp; --<br>
&nbsp;&nbsp; -- Submit -- A new job for processing<br>
&nbsp;&nbsp; --<br>
</font>&nbsp;&nbsp; <font color="#0000FF">procedure</font> Submit (Work : Item);<br>
<font color="#008000">&nbsp;&nbsp; --<br>
&nbsp;&nbsp;&nbsp;--&nbsp;Shut_Down&nbsp;--&nbsp;Purge&nbsp;the&nbsp;jobs&nbsp;queue&nbsp;and&nbsp;stop&nbsp;workers<br>
&nbsp;&nbsp; --<br>
</font>&nbsp;&nbsp; <font color="#0000FF">procedure</font> Shut_Down;</tt></TD>
  </TR>
</TABLE>
<p>The type Worker is a task doing jobs. The procedure Submit is used to submit 
a job. It has the parameter of the type <a href="#Generic_Doubly_Linked_Web.Generic_List.Item">Item</a> 
which is an access to Job'Class. The procedure Shut_Down is used to purge the 
jobs queue and stop all workers.</p>
File <i>test_linked_lists_scheduler.ads (continuation)</i>:<br>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#008000">&nbsp;&nbsp; --<br>
&nbsp;&nbsp; -- Print_Me -- A concrete job, prints some text<br>
&nbsp;&nbsp; --</font><br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">type</font>&nbsp;Print_Me&nbsp;(Length&nbsp;:&nbsp;Natural)&nbsp;<font color="#0000FF">is&nbsp;new</font>&nbsp;Job&nbsp;<font color="#0000FF">with record</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Text : String (<font color="#800000">1</font>..Length);<br>
&nbsp;&nbsp; <font color="#0000FF">end record</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Do_It (Work :
<font color="#0000FF">in out</font> Print_Me);<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Have_To_Print (Text : String)
<font color="#0000FF">return</font> Item; <br>
<br>
<font color="#0000FF">end</font> Test_Linked_Lists_Scheduler;</tt></TD>
  </TR>
</TABLE>
<p>The type Print_Me is a concrete job. It prints a text on the screen.</p>
File <i>test_linked_lists_scheduler.adb</i>:<br>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">with</font> Ada.Text_IO;&nbsp; 
<font color="#0000FF">use</font> Ada.Text_IO;<br>
<br>
<font color="#0000FF">package body </font>Test_Linked_Lists_Scheduler is<br>
<br>
&nbsp;&nbsp; Queue_Closed : <font color="#0000FF">exception</font>;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">protected</font> Waiting_Queue
<font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entry</font>&nbsp;Get_For_Service&nbsp;(Work&nbsp;:&nbsp;<font color="#0000FF">out</font>&nbsp;Item);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">procedure</font> Shut_Down;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">procedure</font> Submit (Work : Item);<br>
&nbsp;&nbsp; <font color="#0000FF">private</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Queue&nbsp; : List;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Closed : Boolean;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Waiting_Queue;</tt></TD>
  </TR>
</TABLE>
<p>The protected object Waiting_Queue holds the list of jobs waiting for 
service. It has the entry point Get_For_Service called by a worker to get a new 
job to do. The exception Queue_Closed is used to notify a worker that it has to 
exit. The procedure Shut_Down closes the queue. The procedure Submit puts a new 
job into the queue.</p>File 
<i>test_linked_lists_scheduler.adb (continuation)</i>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">&nbsp;&nbsp; protected body 
</font>Waiting_Queue
<font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
entry</font> Get_For_Service (Work : <font color="#0000FF">out</font> Item)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> Closed 
<font color="#0000FF">or else </font>Queue /= <font color="#0000FF">null is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if </font>Closed <font color="#0000FF">then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
raise </font>Queue_Closed;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">else</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Take&nbsp;(Queue,&nbsp;Work);&nbsp;<font color="#008000">--&nbsp;The&nbsp;first&nbsp;in&nbsp;the&nbsp;list</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end</font> Get_For_Service;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">procedure</font> Submit (Work : Item)<font color="#0000FF"> is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Append (Queue, Work); <font color="#008000">-- Add to the end</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">if</font> Closed 
<font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Erase (Queue);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end</font> Submit;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">procedure</font> Shut_Down
<font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Closed := True;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Erase (Queue);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end</font> Shut_Down;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Waiting_Queue;</tt></TD>
  </TR>
</TABLE>
<p>The implementation of Waiting_Queue is straightforward. The procedure 
Get_For_Service uses <a href="#Generic_Doubly_Linked_Web.Generic_List.Take">Take</a> 
to extract the first job from the queue. Its barrier contains Queue /=
<font color="#0000FF">null</font>, which is non-empty queue test. The barrier is 
always true after a call to Shut_Down. In this case Queue_Closed is propagated 
out of Get_For_Service. The procedure Submit places a new Job into the queue.</p>File 
<i>test_linked_lists_scheduler.adb (continuation)</i>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">&nbsp;&nbsp; task body</font> Worker <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
This : Item;<br>
&nbsp; <font color="#0000FF">&nbsp;begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
loop</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Waiting_Queue.Get_For_Service (This);<br>
<font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Now&nbsp;we&nbsp;are&nbsp;holding&nbsp;This,&nbsp;so&nbsp;be&nbsp;careful&nbsp;with&nbsp;exceptions,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- the item must back to the queue in all cases<br>
</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
This.Do_It;<br>
&nbsp;<font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- Item has been serviced, return it back<br>
</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Waiting_Queue.Submit (This);<br>
<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
exception<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;when</font> Queue_Closed =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
exit</font>;<br>
<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
when others </font>=&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Waiting_Queue.Submit (This);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end loop</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Worker;</tt></TD>
  </TR>
</TABLE>
<p>The implementation of a worker task runs an infinite loop in which it takes a 
job from the queue using Get_For_Service and then calls Do_It for the job (note, 
Ada 2005 syntax). After that it submits the job back. When Queue_Closed is 
propagated out of Get_For_Service, the worker exits.</p>File 
<i>test_linked_lists_scheduler.adb (continuation)</i>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp;&nbsp;<font color="#0000FF">procedure</font>&nbsp;Submit&nbsp;(Work&nbsp;:&nbsp;Item)<font color="#0000FF">&nbsp;is<br>
&nbsp;&nbsp;
begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Waiting_Queue.Submit (Work);<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Submit;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Shut_Down
<font color="#0000FF">is<br>
&nbsp;&nbsp;
begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Waiting_Queue.Shut_Down;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Shut_Down;</tt></TD>
  </TR>
</TABLE>
<p>The implementation of Submit and Shut_Down procedures call to the 
corresponding ones of the protected object.</p>File 
<i>test_linked_lists_scheduler.adb (continuation)</i>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; <font color="#0000FF">procedure </font> 
Do_It (Work : <font color="#0000FF">in out</font> Print_Me)
<font color="#0000FF">is<br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp; </font> &nbsp;&nbsp; Put_Line (Work.Text);<font color="#0000FF"><br>
&nbsp;&nbsp; end </font> Do_It;<font color="#0000FF"><br>
<br>
&nbsp;&nbsp; function</font> Have_To_Print (Text : String) 
<font color="#0000FF">return</font> Item <font color="#0000FF">is<br>
&nbsp;&nbsp;
begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new</font> Print_Me'<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Job<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">with</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Length =&gt; Text'Length,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Text&nbsp;&nbsp; =&gt; Text<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Have_To_Print;<br>
<br>
<font color="#0000FF">end</font> Test_Linked_Lists_Scheduler;</tt></TD>
  </TR>
</TABLE>
<p>The implementation of the Print_Me job. The procedure Do_It prints the text. 
The function Have_To_Print allocates a new job object.</p>File 
<i>test_linked_lists_scheduler_test.adb</i>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">with</font>&nbsp;Test_Linked_Lists_Scheduler;&nbsp;&nbsp;<font color="#0000FF">use</font>&nbsp;Test_Linked_Lists_Scheduler;<br>
<br>
<font color="#0000FF">procedure</font> Test_Linked_Lists_Scheduler_Test
<font color="#0000FF">is</font><br>
&nbsp;&nbsp; W1 : Worker;<br>
&nbsp;&nbsp; W2 : Worker;<br>
&nbsp;&nbsp; W3 : Worker;<br>
&nbsp;&nbsp; W4 : Worker;<br>
&nbsp;&nbsp; W5 : Worker;<br>
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp; Submit (Have_To_Print (&quot;<font color="#FF0000">The</font>&quot;));<br>
&nbsp;&nbsp; Submit (Have_To_Print (&quot;<font color="#FF0000">quick</font>&quot;));<br>
&nbsp;&nbsp; Submit (Have_To_Print (&quot;<font color="#FF0000">brown</font>&quot;));<br>
&nbsp;&nbsp; Submit (Have_To_Print (&quot;<font color="#FF0000">fox</font>&quot;));<br>
&nbsp;&nbsp; Submit (Have_To_Print (&quot;<font color="#FF0000">jumps</font>&quot;));<br>
&nbsp;&nbsp; Submit (Have_To_Print (&quot;<font color="#FF0000">over</font>&quot;));<br>
&nbsp;&nbsp; Submit (Have_To_Print (&quot;<font color="#FF0000">the</font>&quot;));<br>
&nbsp;&nbsp; Submit (Have_To_Print (&quot;<font color="#FF0000">lazy</font>&quot;));<br>
&nbsp;&nbsp; Submit (Have_To_Print (&quot;<font color="#FF0000">dog</font>&quot;));<br>
&nbsp;&nbsp; <font color="#0000FF">delay</font> <font color="#800000">10.0</font>;<br>
&nbsp;&nbsp; Shut_Down;<br>
<font color="#0000FF">end</font> Test_Linked_Lists_Scheduler_Test;</tt></TD>
  </TR>
</TABLE>
<p>The test program creates five worker tasks and submits 9 jobs. After 10 
seconds of processing it terminates.</p>
<hr>
<p align="right">
  <A name="9"></A><a href="#8.2"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#9.1"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>9. Graphs</H2>
<p><a name="directed_graphs"></a>Directed graph is a binary relation G:E&times;E&#8594;[0,1] defined on 
a set of nodes E 
(also called <i>vertices</i>). Two nodes <i>a</i> and <i>b</i> are said connected by an 
edge (also by an <i>arrow</i> or<i> arc</i>) 
leading from <i>a</i> to <i>b</i> in the graph G when <i>a</i>G<i>b</i>. Here the node <i>a</i> is called <i>parent</i>, the node <i>b</i> 
is called <i>child</i>. A directed graph is <i>acyclic</i> when the transitive closure
G<sup>*</sup> of the graph G is irreflexive (i.e. <i>a</i>G<sup>*</sup><i>a</i> does 
not hold for any node <i>a</i>). The transitive closure of a graph is an infinite 
union of compositions of the relation G:</p>
<blockquote>
	<p>G<sup>*</sup>&nbsp;=&nbsp;G&nbsp;&cup;&nbsp;G&#8728;G&nbsp;&#8746;&nbsp;G&#8728;G&#8728;G&nbsp;&#8746;...</p>
</blockquote>
<p>where composition and union of relations are defined as:</p>
<blockquote>
	&#8704;<i>a,b&nbsp;&nbsp; a</i>R&#8728;S<i>b</i>&nbsp;= &exist;<i>c&nbsp;a</i>R<i>c</i>&and;<i>c</i>S<i>b&nbsp;&nbsp;&nbsp; a</i>R&#8746;S<i>b</i>&nbsp;= 
	<i>a</i>R<i>b</i>&or;<i>a</i>S<i>b</i></blockquote>
<p>The meaning of the transitive closure G<sup>*</sup> is that 
<i>a</i>G<sup>*</sup><i>b</i> 
holds when there is a path of any length from <i>a</i> to <i>b</i> in G. In a directed acyclic graph no path leads back to any node. The tree is 
a case of the directed acyclic graph when additionally for any node there is no 
more than one parent. Thus any types of trees can be represented by a directed 
graph. The undirected graph is a directed graph when G is 
symmetric (commutative).</p>
<blockquote>
	<p><img border="0" src="directed_graph.gif" width="278" height="251" alt="directed graph"></p>
</blockquote>
<p>A weighted graph has a weight associated with each edge. The binary relation G is 
generalized to a function mapping nodes to the weights G:E&times;E&#8594;W. The union of weighted graphs 
can be then defined using some operation +:W&times;W&#8594;W on the weights:</p>
<blockquote>
	&#8704;<i>a,b a</i>R&#8746;S<i>b</i>&nbsp;= 
	<i>a</i>R<i>b+a</i>S<i>b</i></blockquote>
<p>The composition of weighted graphs is defined using + and a second operation 
*:W&times;W&#8594;W:</p>
<blockquote>
	<table border="0" cellspacing="0" cellpadding="0">
		<tr>
			<td valign="top">&#8704;<i>a,b a</i>R&#8728;S<i>b</i>&nbsp;=</td>
			<td valign="top" align="center"><big><big>&#928;</big></big><br><i>c</i>&isin;E</td>
			<td valign="top"><i>a</i>R<i>c</i>+<i>c</i>S<i>b</i></td>
		</tr>
	</table>
</blockquote>
<p>The transitive closure G<sup>*</sup> in these terms may exist or not 
depending on the chosen operations + and *.</p>
<blockquote>
	<p>
	<img border="0" src="directed_weighted_graph.gif" width="331" height="148" alt="directed weighted graph"></p>
</blockquote>
<p>The above represents an example of a directed weighted graph used in syntax 
analysis (state automate describing a numeric literal). The nodes are states, 
the weights are sets of chains of characters (patterns). The operation + is 
concatenation, the operation * is alternation.</p>
<p align="right">
<a name="9.1"></a><a href="#9"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#9.2"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<h3>9.1. Directed graphs</h3>
<p><a name="Generic_Directed_Graph"></a>The package 
<a href="#Generic_Directed_Graph">Generic_Directed_Graph</a> provides a generic implementation of 
directed graphs:</p>
<blockquote>
	<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type </font>Node_Type (&lt;&gt;) <font color="#0000FF">is limited 
	private;<br>
&nbsp;&nbsp; </font>Pool&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">in out </font>Root_Storage_Pool'Class;<br>
&nbsp;&nbsp; Minimal_Parents_Size&nbsp; : Positive := <font color="#800000">16</font>;<br>
&nbsp;&nbsp; Minimal_Children_Size : Positive := <font color="#800000">16</font>;<br>
&nbsp;&nbsp; Increment&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Natural&nbsp; := <font color="#800000">50</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">with function </font>Equal (Left, Right :
	<font color="#0000FF">access</font> Node_Type)
	<font color="#0000FF">return</font> Boolean <font color="#0000FF">is</font> 
	&lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with function </font>Less&nbsp; (Left, Right :
	<font color="#0000FF">access</font> Node_Type)
	<font color="#0000FF">return</font> Boolean <font color="#0000FF">is</font> 
	&lt;&gt;;<font color="#0000FF"><br>
	package </font>Generic_Directed_Graph<font color="#0000FF"> is</font> ...</tt></p>
</blockquote>
<p>The formal parameters are:</p>
<ul>
	<li><i>Node_Type</i> is the type of the graph nodes. It can be any type 
	including limited and indefinite ones;</li>
	<li><i>Pool</i> is the storage pool used to allocate the nodes;</li>
	<li><i>Minimal_Parents_Size</i> is the minimal number of nodes by which the 
	set of parents of a node is enlarged;</li>
	<li><i>Minimal_Children_Size</i> is the minimal number of nodes by which the 
	set of children of a node is enlarged;</li>
	<li><i>Increment</i> controls parent and childrent sets enlargements. The 
	sets are enlarged by <i>n</i>*Increment/100,
    where <i> n</i> is the current set size. If the evaluated increment of 
  the set is less than the corresponding minimal size parameter, then the
    later is used instead;</li>
	<li><i>Equal</i> is the equivalence relation defined on graph nodes. The 
	relation is used in the sets of nodes. Note that the function uses access 
	types rather than objects. Thus an implementation may use address comparison 
	when nodes are considered unique independently on their actual values;</li>
	<li><i>Less</i> is the order relation used in sets of nodes.</li>
</ul>
<p>The formal operations <i>Equal</i> and <i>Less</i> are required for the sets 
of children or parents of a given node, which has to be sorted. They are also 
used for enumeration of the children and parents. The node position in the 
operations like <a href="#Generic_Directed_Graph.Get_Child">Get_Child</a> is 
determined by this order. An implementation of <i>Equal</i> and <i>Less</i> can 
be based on the contents of the nodes. In other cases, when the order of nodes 
in is of no importance, the helper 
	package <a href="#Generic_Address_Order">Generic_Address_Order</a> can be used to produce the operations 
<i>Equal</i> 
	and <i>Less</i> for Node_Type. In this case the nodes will be ordered 
according to their memory addresses.</p>
<p>The graph nodes are referenced using the access type
<a href="#Generic_Directed_Graph.Node">Node</a> defined in the package:</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Directed_Graph.Node"></a>type </font>
	Node<font color="#0000FF"> is access </font>Node_Type;</tt></p>
</blockquote>
<p>The type is a pool specific access type bound to the storage pool defined in the 
package. The pool is a proxy pool, which ultimately takes storage from the pool 
specified by the formal parameter <i>Pool</i>. The proxy storage pool maintains the sets of 
parent and children nodes transparently to the node object. Thus there is no 
need to derive graph nodes from a dedicated parent type or interface related 
specifically to the graph implementation.</p>
<p>The package defines 
the types:</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Directed_Graph.Subgraph_Type"></a>type </font>
	Subgraph_Type<font color="#0000FF"> 
	is mod </font>2**3;</tt></p>
</blockquote>
<p>The values of the type Subgraph_Type characterize a node relatively to the 
given one The constants are defined:</p>
<ul>
	<li><i>Self</i>, the current node itself;</li>
	<li><i>Ancestor</i>, ancestor nodes, the transitive closure of the 
	converse G (G<sup>-1*</sup>);</li>
	<li><i>Descendant</i>, descendant nodes, the transitive closure of G
	(G<sup>*</sup>);</li>
	<li><i>Any</i>, any reachable node.</li>
</ul>
<p>The array of nodes:</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Directed_Graph.Nodes_Array"></a>type </font>
	Nodes_Array<font color="#0000FF"> 
	is array </font>(Positive <font color="#0000FF">range </font>&lt;&gt;)<font color="#0000FF"> 
	of Node</font>;</tt></p>
</blockquote>
<p>The following operations are defined on
<a href="#Generic_Directed_Graph.Node">Node</a>:</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Generic_Directed_Graph.Connect"></a>procedure</font> 
	Connect<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Parent</b>&nbsp; 
	: Node;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Child</b>&nbsp;&nbsp; : Node;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Acyclic</b> : Boolean := True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure creates a directed edge from <b>Parent</b> to <b>Child</b>. 
When the edge already exists this operation is void. In the case when <b>Parent</b> has a child different from
<b>Child</b>, yet equivalent to it according to the provided comparison 
operation, or else <b>Child</b> has a parent equivalent, but different from <b>
Parent</b>, then Argument_Error is propagated. Additionally when <b>
Acyclic</b> is <i><font color="#800000">true</font></i>, it is checked that the 
new edge would not create a cycle in the graph, that is when <b>Child</b> would become 
or already is an 
ancestor of <b>Parent</b>. Otherwise Constraint_Error is propagated. Note that 
checking potentially requires traversal of all nodes of the graph. 
Constraint_Error is also propagated when either <b>Parent</b> or <b>Child</b> is
<font color="#0000FF">null</font>. </p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Generic_Directed_Graph.Delete"></a>procedure</font> 
	Delete<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Vertex</b>&nbsp;&nbsp; :
	<font color="#0000FF">in out</font> Node;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Subgraph</b> : Subgraph_Type 
	:= Any<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure deletes a subgraph connected to <b>Vertex</b>. The parameter <b>
Subgraph</b> specifies which parts of the graph to be removed and freed: For 
example in order to delete <b>Vertex</b> and all its descendants <b>
Subgraph</b> should be <i>Descendant</i> <font color="#0000FF">or</font> <i>Self</i>.
When the object referenced by <b>Vertex</b> is destroyed, <b>Vertex</b> is set 
to <font color="#0000FF">null</font>. The operation is void when <b>Vertex</b> 
is <font color="#0000FF">null</font>.
<a href="#Generic_Directed_Graph.Delete">Delete</a> does not create new edges, 
therefore a connected graph can become disjoint. See 
<a href="#Generic_Directed_Graph.Remove">Remove</a>, which keeps graph 
connected.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Generic_Directed_Graph.Disconnect"></a>procedure</font> 
	Disconnect (<b>Parent</b> : 
	Node; <b>Child</b> : Node);</tt></p>
</blockquote>
<p>This procedure removes the edge from <b>Parent</b> to <b>Child</b> if the 
edge 
exist. Otherwise the operation is void. For example, In order to move a subtree from one 
parent node to another one use <a href="#Generic_Directed_Graph.Disconnect">Disconnect</a> 
followed by <a href="#Generic_Directed_Graph.Connect">Connect</a>. 
Constraint_Error is propagated when either <b>Parent</b> or <b>Child</b> is
<font color="#0000FF">null</font>.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Directed_Graph.Find_Child">
	</a>function</font> Find_Child (<b>Parent</b> : 
	Node; <b>Child</b> : Positive) <font color="#0000FF">return</font> Natural;</tt></p>
</blockquote>
<p>This function returns the position of <b>Child</b> in the list of children of the node <b>Parent</b>. 
All children of a node are enumerated from 1 according to the formal functions
<i>Equal</i> and <i>Less</i>. See also 
<a href="#Generic_Directed_Graph.Get_Child">Get_Child</a>. The result is 
0 when <b>Child</b> is not a child of <b>Parent</b>. Constraint_Error is 
propagated when <b>Parent</b> or <b>Child</b> is <font color="#0000FF">null</font>.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Directed_Graph.Find_Parent">
	</a>function</font> Find_Parent (<b>Parent</b> : 
	Node; <b>Child</b> : Positive) <font color="#0000FF">return</font> Natural;</tt></p>
</blockquote>
<p>This function returns the position of <b>Parent</b> in the list of parents of the node
<b>Child</b>.  
All parents of a node are enumerated from 1 according to the formal functions <i>
Equal</i> and <i>Less</i>. See also
<a href="#Generic_Directed_Graph.Get_Parent">Get_Parent</a>. The result is 0 when <b>Parent</b> is not a parent of <b>Child</b>. Constraint_Error 
is propagated when <b>Parent</b> or <b>Child</b> is <font color="#0000FF">null</font>.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Directed_Graph.Free"></a>procedure</font> Free <font color="#0000FF">is 
	new</font> Ada.Unchecked_Deallocation (Node_Type, Node);</tt></p>
</blockquote>
<p>This procedure deletes the node object. Program_Error is propagated when the 
node is in a graph. This includes the cases when the node is a parent / child 
of itself. See the function <a href="#Generic_Directed_Graph.Is_Connected">
Is_Connected</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Directed_Graph.Get_Children">
	</a>function</font> Get_Children (<b>Parent</b> : 
	Node) <font color="#0000FF">return</font> Nodes_Array;<font color="#0000FF"><br>
	function</font> Get_Children (<b>Parent</b> : 
	Node) <font color="#0000FF">return</font> Node_Sets.Set;</tt></p>
</blockquote>
<p>This function returns the array containing the children nodes of <b>Parent</b>. 
Constraint_Error is propagated when <b>Parent</b> is <font color="#0000FF">null</font>.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Generic_Directed_Graph.Get_Children_Number"></a>function</font> 
	Get_Children_Number (<b>Parent</b> : Node) <font color="#0000FF">return</font> 
	Natural;</tt></p>
</blockquote>
<p>This function returns the number of children of the node <b>Parent</b>. 
Constraint_Error is propagated when <b>Parent</b> is <font color="#0000FF">null</font>.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Generic_Directed_Graph.Get_Child"></a>function</font> 
	Get_Child (<b>Parent</b> : 
	Node; <b>Child</b> : Positive) <font color="#0000FF">return</font> Node;</tt></p>
</blockquote>
<p>This function returns a child of the node <b>Parent</b> by its position <b>
Child</b>. Constraint_Error is propagated when <b>Child</b> &gt;
<a href="#Generic_Directed_Graph.Get_Children_Number">Get_Children_Number</a> (<b>Parent</b>) 
or else <b>Parent</b> is <font color="#0000FF">null</font>.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Generic_Directed_Graph.Get_Parent"></a>function</font> 
	Get_Parent (<b>Child</b> : 
	Node; <b>Parent</b> : Positive) <font color="#0000FF">return</font> Node;</tt></p>
</blockquote>
<p>This function returns a parent of the node <b>Child</b> by its position <b>
Parent</b>. Constraint_Error is propagated when <b>Parent</b> &gt;
<a href="#Generic_Directed_Graph.Get_Parents_Number">Get_Parents_Number</a> (<b>Child</b>) 
or else <b>Child</b> is <font color="#0000FF">null</font>.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Directed_Graph.Get_Parents">
	</a>function</font> Get_Parents (<b>Child</b> : 
	Node) <font color="#0000FF">return</font> Nodes_Array;<font color="#0000FF"><br>
	function</font> Get_Parents (<b>Child</b> : 
	Node) <font color="#0000FF">return</font> Node_Sets.Set;</tt></p>
</blockquote>
<p>This function returns the array or set containing the parent nodes of <b>Child</b>. 
Constraint_Error is propagated when <b>Child</b> is <font color="#0000FF">null</font>.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Generic_Directed_Graph.Get_Parents_Number"></a>function</font> 
	Get_Parents_Number (<b>Child</b> : Node) <font color="#0000FF">return</font> 
	Natural;</tt></p>
</blockquote>
<p>This function returns the number of parents of the node <b>Child</b>. 
Constraint_Error is propagated when <b>Child</b> is <font color="#0000FF">null</font>.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Directed_Graph.Is_Ancestor">
	</a>function</font> Is_Ancestor (<b>Parent</b> : 
	Node; <b>Child</b> : Node) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function evaluates the transitive closure of G. The result is
<font color="#800000"><i>true</i></font> when <b>Parent</b> G<sup>*</sup> <b>Child</b>, 
i.e. when there is a path in G from <b>Parent</b> to <b>Child</b>. 
Constraint_Error is propagated when either <b>Parent</b> or <b>Child</b> is
<font color="#0000FF">null</font>.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Directed_Graph.Is_Connected">
	</a>function</font> Is_Connected (<b>Vertex</b> : Node) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> when the node 
<b>Vertex</b> is connected by an edge. Constraint_Error is propagated when <b>Vertex</b> is
<font color="#0000FF">null</font>.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Directed_Graph.Is_Descendant">
	</a>function</font> Is_Descendant (<b>Child</b> : 
	Node; <b>Parent</b> : Node) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function evaluates the transitive closure of G<sup>-1</sup>. The 
result is <i><font color="#800000">true</font></i> when <b>Child</b> G<sup>-1*</sup>
<b>Parent</b>, i.e. when there is a path in G<sup>-1</sup> from <b>Child
</b>to <b>Parent</b>. This is equivalent to
<a href="#Generic_Directed_Graph.Is_Ancestor">Is_Ancestor</a> (<b>Parent</b>, <b>
Child</b>), but computed differently by tracking the edges backwards from <b>
Child</b> to <b>Parent</b>. Constraint_Error is propagated when either <b>Parent</b> 
or <b>Child</b> is <font color="#0000FF">null</font>.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Directed_Graph.Is_Sibling">
	</a>function</font> Is_Sibling (<b>Left</b>, <b>
	Right</b> : Node) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Left</b> 
and <b>Right</b> share at least one parent. Constraint_Error is propagated when 
either <b>Left</b> or <b>Right</b> is <font color="#0000FF">null</font>.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Directed_Graph.Precedes"></a>function</font> 
	Precedes (<b>Left</b>, <b>Right</b> 
	: Node) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>Comparison of nodes used in node sets, induced by the formal function <i>Less</i>. The value <font color="#0000FF">null</font> 
is considered preceding all valid access values.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Directed_Graph.Related"></a>function</font> Related (<b>Parent</b> : Node;
	<b>Child</b> : Node) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function evaluates G. The result is <i><font color="#800000">true</font></i> 
when <b>Parent</b> <b> <i>G</i></b> <b>Child</b> i.e. when there is an edge from <b>
Parent</b> to <b>Child</b>. Constraint_Error is propagated when either <b>Parent</b> 
or <b>Child</b> is <font color="#0000FF">null</font>.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Generic_Directed_Graph.Remove"></a>procedure</font> Remove (<b>Vertex</b> : Node);</tt></p>
</blockquote>
<p>This procedure removes <b>Vertex</b> from the graph. Each pair of edges 
leading from a parent of <b>Vertex</b> to a child of <b>Vertex</b>, is replaced by an edge from 
the parent to the child, thus the graph remains connected. The effect of the 
operation is obtaining an equivalent graph, such that <i>a</i>G<i>'b</i> = <i>a</i>G<i>b</i> 
for all nodes except the removed. The object pointed by <b>Vertex</b> is not deleted. 
Constraint_Error is propagated when <b>Vertex</b> is <font color="#0000FF">null</font>.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Directed_Graph.Same"></a>function</font> 
	Same (<b>Left</b>, <b>Right</b> 
	: Node) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>The nodes comparison function used in node sets, induced by the formal function <i>Equal</i>. The value <font color="#0000FF">null</font> 
is considered preceding all valid access values.</p>
<p>The package instantiates the packages <a href="#Generic_Unbounded_Array">
Generic_Unbounded_Array</a> and <a href="#Generic_Set">Generic_Set</a> with the 
type
<a href="#Generic_Directed_Graph.Node">Node</a>:</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Directed_Graph.Node_Arrays">
	</a>package</font> Node_Arrays<font color="#0000FF"> 
	is<br>
&nbsp;&nbsp; new </font>Generic_Unbounded_Array (Positive, Node, Nodes_Array,
	<font color="#0000FF">null</font>);<font color="#0000FF"><br>
	<a name="Generic_Directed_Graph.Node_Sets"></a>package</font> Node_Sets <font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> Generic_Set (Node, <font color="#0000FF">null</font>, &quot;<font color="#FF0000">=</font>&quot; 
	=&gt; Same, &quot;<font color="#FF0000">&lt;</font>&quot; 
	=&gt; Precedes);</tt></p>
</blockquote>
<p align="right">
<a name="9.2"></a><a href="#9.1"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#10"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<h3>9.2. Directed weighted graphs</h3>
<p><a name="Generic_Directed_Weighted_Graph"></a>The package 
<a href="#Generic_Directed_Weighted_Graph">Generic_Directed_Weighted_Graph</a> 
provides a generic implementation of directed weighted graphs:</p>
<blockquote>
	<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type </font>Node_Type (&lt;&gt;) <font color="#0000FF">is limited 
	private;<br>
&nbsp;&nbsp; type </font>Weight_Type (&lt;&gt;) <font color="#0000FF">is  
	private;&nbsp; <br>
&nbsp;&nbsp; </font>Pool&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">in out </font>Root_Storage_Pool'Class;<br>
&nbsp;&nbsp; Minimal_Parents_Size&nbsp; : Positive := <font color="#800000">16</font>;<br>
&nbsp;&nbsp; Minimal_Children_Size : Positive := <font color="#800000">16</font>;<br>
&nbsp;&nbsp; Increment&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Natural&nbsp; := <font color="#800000">50</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">with function </font>Equal (Left, Right :
	<font color="#0000FF">access</font> Node_Type&nbsp; ) <font color="#0000FF">
	return</font> Boolean <font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with function </font>Equal (Left, Right :
	<font color="#0000FF">access</font> Weight_Type) <font color="#0000FF">
	return</font> Boolean <font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with function </font>Less&nbsp; (Left, Right 
	: <font color="#0000FF">access</font> Node_Type&nbsp; )
	<font color="#0000FF">return</font> Boolean <font color="#0000FF">is</font> 
	&lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with function </font>Less&nbsp; (Left, Right 
	: <font color="#0000FF">access</font> Weight_Type) <font color="#0000FF">
	return</font> Boolean <font color="#0000FF">is</font> &lt;&gt;;<font color="#0000FF"><br>
	package </font>Generic_Directed_Weighted_Graph<font color="#0000FF"> is</font> ...</tt></p>
</blockquote>
<p>The formal parameters are:</p>
<ul>
	<li><i>Node_Type</i> is the type of the graph nodes. It can be any type 
	including limited and indefinite ones;</li>
	<li>Weight_Type is the type of the weight;</li>
	<li><i>Pool</i> is the storage pool used to allocate the nodes;</li>
	<li><i>Minimal_Parents_Size</i> is the minimal number of nodes by which the 
	set of parents of a node is enlarged;</li>
	<li><i>Minimal_Children_Size</i> is the minimal number of nodes by which the 
	set of children of a node is enlarged;</li>
	<li><i>Increment</i> controls parent and childrent sets enlargements. The 
	sets are enlarged by <i>n</i>*Increment/100,
    where <i> n</i> is the current set size. If the evaluated increment of 
  the set is less than the corresponding minimal size parameter, then the
    later is used instead.</li>
	<li><i>Equal</i> is the equivalence relation defined on graph nodes and 
	weights. The 
	relations <i>Equal</i> and <i>Less</i> are used in the sets of nodes and for ordering the nodes. Note that the functions use access 
	types rather than objects. Thus an implementation may use address comparison 
	when nodes are considered just unique independently on their actual values. The 
	parents of a node are enumerated in the order determined by
	<font color="#0000FF">access</font> Node_Type comparisons. The children 
	nodes are enumerated in the order determined by the <font color="#0000FF">
	access</font> Weight_Type comparisons;</li>
	<li><i>Less</i> is the order relation used in sets of nodes and for ordering 
	nodes. When 
the order of nodes or weights are of no importance, the helper 
	package <a href="#Generic_Address_Order">Generic_Address_Order</a> can be used to produce the operations 
<i>Equal</i> 
	and <i>Less</i> for any given type.</li>
</ul>
<p>The package is similar to <a href="#Generic_Directed_Graph">
Generic_Directed_Graph</a>. The following entities are equivalent:</p>
<ul>
	<li>types
<a href="#Generic_Directed_Graph.Node">Node</a>,
	<a href="#Generic_Directed_Graph.Nodes_Array">Nodes_Array</a>,
	<a href="#Generic_Directed_Graph.Subgraph_Type">Subgraph_Type</a>;</li>
	<li>operations; <a href="#Generic_Directed_Graph.Delete">Delete</a>,
	<a href="#Generic_Directed_Graph.Disconnect">Disconnect</a>,
	<a href="#Generic_Directed_Graph.Find_Parent">Find_Parent</a>,
	<a href="#Generic_Directed_Graph.Free">Free</a>,
	<a href="#Generic_Directed_Graph.Get_Children">Get_Children</a> (returning a 
	set),
	<a href="#Generic_Directed_Graph.Get_Children_Number">Get_Children_Number</a>,
	<a href="#Generic_Directed_Graph.Get_Parent">Get_Parent</a>,
	<a href="#Generic_Directed_Graph.Get_Parents">Get_Parents</a>,
	<a href="#Generic_Directed_Graph.Get_Parents_Number">Get_Parents_Number</a>,
	<a href="#Generic_Directed_Graph.Is_Ancestor">Is_Ancestor</a>,
	<a href="#Generic_Directed_Graph.Is_Connected">Is_Connected</a>,
	<a href="#Generic_Directed_Graph.Is_Descendant">Is_Descendant</a>,
	<a href="#Generic_Directed_Graph.Is_Sibling">Is_Sibling</a>,
	<a href="#Generic_Directed_Graph.Precedes">Precedes</a>,
	<a href="#Generic_Directed_Graph.Related">Related</a>,
	<a href="#Generic_Directed_Graph.Same">Same</a>;</li>
	<li>packages <a href="#Generic_Directed_Graph.Node_Arrays">Node_Arrays</a>,
	<a href="#Generic_Directed_Graph.Node_Sets">Node_Sets</a>.</li>
</ul>
<p>The operations
	<a href="#Generic_Directed_Graph.Find_Child">Find_Child</a>,
	<a href="#Generic_Directed_Graph.Get_Child">Get_Child</a>,
	<a href="#Generic_Directed_Graph.Get_Children">Get_Children</a> (returning 
an array) are different in that respect that they are using the order determined 
by the comparisons of <font color="#0000FF">access</font> Weight_Type specified 
by the corresponding formal functions <i>Equal</i> and <i>Less</i>.</p>
<p>The following operations are different or new:</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Generic_Directed_Weighted_Graph.Classify"></a>procedure</font> 
	Classify<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Parent</b> : 
	Node; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Weight</b> : Weight_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Lower</b>&nbsp; : <font color="#0000FF">out</font> Natural;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Upper</b>&nbsp; : <font color="#0000FF">out</font> Natural<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure classifies the children of <b>Parent</b> according to the 
value of <b>Weight</b>. The output <b>Lower</b> is the position of the child 
node with the greatest weight less or equal to the value of <b>Weight</b>. When 
there is no such child <b>Lower</b> is 0. The output <b>Upper</b> is the 
position of the child node with the least weight greater or equal to the value
<b>Weight</b>. When there is no such child <b>Upper</b> is the number of 
children + 1. The behavior of
<a href="#Generic_Directed_Weighted_Graph.Classify">Classify</a> ensures that when there is a child node with the 
weight equal to the value <b>Weight</b>, then <b>Lower</b> = <b>Upper</b> = the 
position of the child. Otherwise <b>Lower</b> + 1 = <b>Upper</b>. When <b>Lower</b> and 
<b>Upper</b> are 
valid positions of nodes, then the interval of weights corresponding to these nodes contains 
<b>Weight</b>. Constraint_Error is&nbsp; propagated when <b>Parent</b> is
<font color="#0000FF">null</font>.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Generic_Directed_Weighted_Graph.Connect"></a>procedure</font> 
	Connect<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Parent</b>&nbsp; 
	: Node;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Child</b>&nbsp;&nbsp; : Node;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Weight</b>&nbsp; : Weight_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Acyclic</b> : Boolean := True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure creates a directed edge from <b>Parent</b> to <b>Child</b> 
with the weight specified by the parameter <b>Weight</b>. 
When the edge already exists and according to the formal comparison operations 
the weights are equivalent, this operation replaces the old weight with the 
value of <b>Weight</b>. When there is an edge from <b>Parent</b>&nbsp; to a 
child node different from <b>Child</b>, with the weight equivalent to <b>Weight</b> 
according to the formal comparison operations of the weights, Argument_Error is 
propagated. It is also propagated when there is an edge from a parent node to <b>
Child</b>, such that the node is different from <b>Parent</b>, but considered 
equivalent according to the formal operations of node comparisons. Additionally when <b>
Acyclic</b> is <i><font color="#800000">true</font></i>, it is checked that the 
new edge would not create a cycle in the graph, that is when <b>Child</b> would become 
or already is an 
ancestor of <b>Parent</b>. Otherwise Constraint_Error is propagated. Note that 
checking potentially requires traversal of all nodes of the graph. 
Constraint_Error is also propagated when either <b>Parent</b> or <b>Child</b> is
<font color="#0000FF">null</font>.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Generic_Directed_Weighted_Graph.Get_Weight"></a>function</font> 
	Get_Weight (<b>Parent</b> : 
	Node; <b>Child</b> : Positive) <font color="#0000FF">return</font> 
	Weight_Type;<font color="#0000FF"><br>
	function</font> 
	Get_Weight (<b>Parent</b> : 
	Node; <b>Child</b> : Node&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">return</font> 
	Weight_Type;</tt></p>
</blockquote>
<p>These functions return the weight of the edge <b>Parent</b> - <b>
Child</b>. The child can be specified either by its position or else directly as 
a node. Constraint_Error is propagated when there is no such edge or else <b>Parent</b> 
or <b>Child</b> is <font color="#0000FF">null</font>. The position of the node 
is determined&nbsp; by the comparisons of <font color="#0000FF">access</font> 
Weight_Type specified by the corresponding formal functions <i>Equal</i> and <i>
Less</i>.</p>
<h4><a name="9.2.1"></a>9.2.1. Suffix tree example</h4>
<p><a name="suffix_tree_sample"></a>The example represents a straightforward implementation of suffix trees. The example is located in the <i>test_components</i> 
subdirectory.
</p>File <i>test_suffix_tree.ads</i>:<br>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#0000FF">with</font> 
  Generic_Directed_Weighted_Graph;<br>
<font color="#0000FF">with</font> Generic_Address_Order;<br>
<br>
<font color="#0000FF">package</font> Test_Suffix_Tree <font color="#0000FF">is<br>
&nbsp;&nbsp; type</font> Node_Type <font color="#0000FF">is null record</font>;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- Nodes have no contents</font><br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Default <font color="#0000FF">is 
access</font> Node_Type; <font color="#008000">-- Default access type</font><br>
<font color="#008000">&nbsp;&nbsp; --<br>
&nbsp;&nbsp; -- Node_Order -- Ordering of nodes by their addresses<br>
&nbsp;&nbsp; --</font><br>
&nbsp;&nbsp; <font color="#0000FF">package</font> Node_Order
<font color="#0000FF">is new </font>Generic_Address_Order (Node_Type);<br>
&nbsp;&nbsp; <font color="#0000FF">use</font> Node_Order;<br>
<font color="#008000">&nbsp;&nbsp; --<br>
&nbsp;&nbsp; -- Ordering of the edge weights <br>
&nbsp;&nbsp; --</font><br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Equal (Left, Right :
<font color="#0000FF">access</font> Character) <font color="#0000FF">return</font> 
Boolean;<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Less&nbsp; (Left, Right :
<font color="#0000FF">access</font> Character) <font color="#0000FF">return</font> 
Boolean;<br>
<font color="#008000">&nbsp;&nbsp; --<br>
&nbsp;&nbsp; -- Directed graph of Node_Type weighted by Character values<br>
&nbsp;&nbsp; --</font><br>
&nbsp;&nbsp; <font color="#0000FF">package</font> Character_Weighted_Graphs
<font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new</font> Generic_Directed_Weighted_Graph<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Node_Type&nbsp;&nbsp; 
=&gt; Node_Type,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Weight_Type =&gt; Character,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pool&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
=&gt; Default'Storage_Pool,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Minimal_Parents_Size =&gt; <font color="#800000">1</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp; <font color="#0000FF">subtype</font> Suffix_Tree
<font color="#0000FF">is</font> Character_Weighted_Graphs.Node;<br>
<font color="#008000">&nbsp;&nbsp; --<br>
&nbsp;&nbsp; -- Build -- Creates the suffix tree from a string<br>
&nbsp;&nbsp; --</font><br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Build (Text : String)
<font color="#0000FF">return</font> Suffix_Tree;<br>
<font color="#008000">&nbsp;&nbsp; --<br>
&nbsp;&nbsp; -- Print -- Outputs the tree<br>
&nbsp;&nbsp; --</font><br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Print (Tree : Suffix_Tree; 
Prefix : String := &quot;&quot;);<br>
<br>
<font color="#0000FF">end</font> Test_Suffix_Tree;</tt></TD>
  </TR>
</TABLE>
<p>The package defines Node_Type as an empty record, since suffix tree nodes 
would contain no data. The order of nodes is irrelevant, therefore <a href="#Generic_Address_Order">Generic_Address_Order</a> 
is instantiated to provide some order of nodes. The type of edge weight is 
Character. The order of children nodes is determined by the weights of incoming 
edges. The operations Equal and Less use character comparison to order children. 
The instance of <a href="#Generic_Directed_Weighted_Graph">Generic_Directed_Weighted_Graph</a> 
specifies Minimal_Parents_Size as 1, because tree has no more than one parent 
per node. Then the package declares two operations <i>Build</i> to create a tree 
and <i>Print</i> to output it onto the standard output.</p>File 
<i>test_suffix_tree.adb</i>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">with</font>&nbsp;Ada.Text_IO;&nbsp;
<font color="#0000FF">use</font> Ada.Text_IO;<br>
<br>
<font color="#0000FF">package body</font> Test_Suffix_Tree <font color="#0000FF">
is<br>
&nbsp;&nbsp; use</font> Character_Weighted_Graphs;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Equal (Left, Right :
<font color="#0000FF">access</font> Character) <font color="#0000FF">return</font> 
Boolean <font color="#0000FF">is<br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return</font> Left.<font color="#0000FF">all</font> 
= Right.<font color="#0000FF">all</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Equal;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Less (Left, Right :
<font color="#0000FF">access</font> Character) <font color="#0000FF">return</font> 
Boolean <font color="#0000FF">is<br>
&nbsp;&nbsp; begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Left.<font color="#0000FF">all</font> 
&lt; Right.<font color="#0000FF">all</font>; <br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Less;</tt></TD>
  </TR>
</TABLE>
<p>The implementation of Equal and Less is obvious.</p>File 
<i>test_suffix_tree.adb (continuation)</i>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; <font color="#0000FF">function</font> 
Build (Text : String) <font color="#0000FF">return</font> Suffix_Tree
<font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Root&nbsp; : Node := <font color="#0000FF">new</font> 
Node_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Focus : Node;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lower : Natural;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Upper : Natural;<br>
&nbsp;&nbsp; <font color="#0000FF">begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for </font>Index <font color="#0000FF">in</font> 
Text'Range <font color="#0000FF">loop</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Focus := Root;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">for</font> 
Current <font color="#0000FF">in</font> Index..Text'Last loop<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Classify 
(Focus, Text (Current), Lower, Upper);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">if</font> Lower = Upper then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Focus := Get_Child (Focus, Lower);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
declare</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Branch : Node := <font color="#0000FF">new</font> Node_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Connect (Focus, Branch, Text (Current));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Focus := Branch;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">end</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end loop</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end loop</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Root;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Build;</tt></TD>
  </TR>
</TABLE>
<p>The implementation of Build creates the root node. Then it scans the string 
for its suffixes. For each suffix the tree is matched from the top. The 
procedure <a href="#Generic_Directed_Weighted_Graph.Classify">Classify</a> is 
used to match the current character of the suffix against the edges of the 
current tree node. When an edge for the character exists the edge is followed. 
When no edge exists a new node is created connected by an edge weighted by the 
character and then this edge is followed.</p>File 
<i>test_suffix_tree.adb (continuation)</i>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; <font color="#0000FF">procedure</font> 
Print (Tree : Suffix_Tree; Prefix : String := &quot;&quot;) <font color="#0000FF">is<br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for </font>Index <font color="#0000FF">in</font>
<font color="#800000">1</font>..Get_Children_Number (Tree) <font color="#0000FF">
loop<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if </font>Index &gt;
<font color="#800000">1</font> <font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put (Prefix);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put (Get_Weight (Tree, Index));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Print (Get_Child (Tree, Index), 
Prefix &amp; ' ');<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end loop</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">if</font> 
Get_Children_Number (Tree) = <font color="#800000">0</font>
<font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; New_Line;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Print;<br>
<br>
<font color="#0000FF">end</font> Test_Suffix_Tree;</tt></TD>
  </TR>
</TABLE>
<p>The package Test_Suffix_Tree can be used as follows:</p>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#B8D3D1"><tt>
<font color="#0000FF">with</font> Test_Suffix_Tree;&nbsp; <font color="#0000FF">
use</font> Test_Suffix_Tree;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Character_Weighted_Graphs;<br>
<font color="#0000FF">procedure</font> Test <font color="#0000FF">is<br>
&nbsp;</font>&nbsp; Tree : Suffix_Tree := Build (&quot;<font color="#FF0000">mississippi</font>&quot;);<br>
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp; Print (Tree);<br>
&nbsp;&nbsp; Delete (Tree);<br>
<font color="#0000FF">end</font> Test;</tt></TD>
  </TR>
</TABLE>
<p>The output should look like:</p>
<blockquote>
	<p><tt>ippi<br>
&nbsp;ssippi<br>
&nbsp;&nbsp;&nbsp; ssippi<br>
	mississippi<br>
	pi<br>
&nbsp;pi<br>
	sippi<br>
&nbsp; ssippi<br>
&nbsp;sippi<br>
&nbsp;&nbsp; ssippi</tt></p>
</blockquote>
<hr>
<p align="right">
  <A name="10"></A><a href="#9.2"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#10.1"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>10. Lock-free data structures</H2>
<P>Lock-free data structures provide shared access to their content without 
locking. For multi-core and other architectures of shared memory locking might 
be expensive compared to some extra overhead required for implementation of 
a lock-free access. So lock-free structures might appear more efficient. Another 
potential advantage of lock-free access is deadlock prevention. A sufficiently more complex use and less predictable behavior 
(mostly in the cases where a corresponding locking structure would block) count 
to the disadvantages of lock-free structures. The choice between lock-free and 
locking structure depends on each concrete case.</p>
<P>Here it is necessary to clarify what is understood under the term <i>
lock-free</i> access. Clearly no processor instruction can be executed in a 
lock-free manner. There is always some sort of synchronization involved which 
ultimately is resulted in a non instant execution time. Neither a bounded access 
time is meant here, because a lock-free access can be interrupted and preempted.</p>
<P>In the context of the programming language Ada we define as lock-free any 
operations that are not:</p>
<ol>
	<li><i>potentially blocking</i> as it is defined in the
	<a href="http://www.adaic.com/standards/05rm/html/RM-9-5-1.html"><i>Ada 
	Language Reference Manual</i> 9.5.1</a>;</li>
	<li>involving calls to <i>protected subprograms</i> (ibidem), including 
	protected functions, procedures and entries.</li>
</ol>
<P>From this definition follows that in particular accessing atomic objects is lock-free. For atomic 
objects see the <a href="http://www.adaic.com/standards/05rm/html/RM-C-6.html">
<i>Ada Language Reference Manual</i> C.6</a>.</p>
<p align="right">
  <A name="10.1"></A><a href="#10"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#10.2"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>10.1. FIFO</H3>
<H4><a name="10.1.1"></a>10.1.1. Lock-free FIFO of definite elements</H4>
<p><a name="Generic_FIFO"></a>The package <a href="#Generic_FIFO">Generic_FIFO</a> 
provides a lock-free first in, first out queue, which can be used between one publisher and 
one subscriber.</p>
<blockquote>
	<p><img border="0" src="fifo.gif" width="446" height="128" alt="fifo"></p>
</blockquote>
<p>The package is generic:</p>
<blockquote>
	<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type </font>Element_Type <font color="#0000FF">is private</font>;<font color="#0000FF"><br>
	package </font>Generic_FIFO<font color="#0000FF"> is</font> ...</tt></p>
</blockquote>
<p>The type of FIFO is:</p>
<blockquote>
	<p><tt><font color="#0000FF">type </font>FIFO (Size : Positive)<font color="#0000FF"> 
	is<br>
&nbsp;&nbsp; new </font>Ada.Finalization.Limited_Controlled
	<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The discriminant Size determines the maximal size of the queue. A queue can 
hold no more than Size - 1 elements. The following primitive operations are defined in the package:</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Delete (<b>Queue</b> :
	<font color="#0000FF">in out</font> FIFO; <b>Count</b> : Natural := 1);</tt></p>
</blockquote>
<p>This procedure removes <b>Count</b> elements from <b>
Queue</b>. When the queue contains <b>Count</b> or less elements, it becomes 
empty. The elements are removed from the same queue end
<a href="#Generic_FIFO.Get">Get</a> and <a href="#Generic_FIFO.Peek">Peek</a> 
access. Therefore it shall be called from the same task.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_FIFO.Get"></a>procedure</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Queue</b>&nbsp;&nbsp; 
	: <font color="#0000FF">in out</font> FIFO;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b> : <font color="#0000FF">out</font> Element_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Empty</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This function takes one element out of <b>Queue</b>. When <b>Queue</b> is empty the 
output parameter <b>Empty</b> is set to <font color="#800000"><i>true</i></font> 
and <b>Element</b> is not changed. 
Otherwise <b>Element</b> is the element taken and <b>Empty</b> is set to
<font color="#800000"> <i>
false</i></font>.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get (<b>Queue</b> :
	FIFO) <font color="#0000FF">return</font> 
	Element_Type;</tt></p>
</blockquote>
<p>This is a variant of <a href="#Generic_FIFO.Get">Get</a> which raises Constraint_Error when <b>
Queue</b> is empty.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Is_Empty (<b>Queue</b> : FIFO)
	<font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Queue</b> 
is empty.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Is_Full (<b>Queue</b> : FIFO)
	<font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Queue</b> 
is full.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_FIFO.Is_Preserved"></a>function</font> 
	Is_Preserved (<b>Queue</b> : FIFO; <b>Element</b> : Element_Type)<br>
&nbsp;&nbsp;
	<font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Element</b> 
has to be preserved in <b>Queue</b> 
by the procedure <a href="#Generic_FIFO.Purge">Purge</a>. This is the default 
behavior. The function can be overridden in order to change the behavior of
<a href="#Generic_FIFO.Purge">Purge</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_FIFO.Peek"></a>procedure</font> 
	Peek<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Queue</b>&nbsp;&nbsp; 
	: FIFO;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b> : <font color="#0000FF">out</font> Element_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Empty</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This function returns the element of <b>Queue</b>, a
<a href="#Generic_FIFO.Get">Get</a> operation would take. Unlikely to
<a href="#Generic_FIFO.Get">Get</a> it does not remove the element from <b>Queue</b>. When 
<b>Queue</b> is empty the 
output parameter <b>Empty</b> is set to <font color="#800000"><i>true</i></font> 
and <b>Element</b> is not changed. 
Otherwise <b>Element</b> is the element at the <b>Queue</b> beginning and <b>Empty</b> is set to <i>
<font color="#800000">false</font></i>.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Peek (<b>Queue</b> :
	FIFO) <font color="#0000FF">return</font> 
	Element_Type;</tt></p>
</blockquote>
<p>This is a variant of <a href="#Generic_FIFO.Peek">Peek</a> which raises Constraint_Error when <b>
Queue</b> is empty.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_FIFO.Purge"></a>procedure</font> 
	Purge<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Queue</b>&nbsp; 
	: <font color="#0000FF">in out</font> FIFO;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Purged</b> : <font color="#0000FF">out</font> Natural<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
	<font color="#0000FF">procedure</font> Purge<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Queue</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">in out</font> FIFO;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Is_Preserved</b> : Is_Preserved_Ptr;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Purged</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">out</font> 
	Natural<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure removes all elements for which
<a href="#Generic_FIFO.Is_Preserved">Is_Preserved</a> returns <i>
<font color="#800000">false</font></i>. The parameter <b>Purged</b> is set to 
the number of elements removed from the <b>Queue</b>. The default implementation 
of <a href="#Generic_FIFO.Is_Preserved">Is_Preserved</a> returns
<font color="#800000"><i>true</i></font>, so it needs to be overridden to make
<a href="#Generic_FIFO.Purge">Purge</a> removing any element. Observe also that 
there is a potential race condition in <a href="#Generic_FIFO.Purge">Purge</a> 
when new elements are added concurrently. The newly added elements might be not 
removed. If it is essential to remove the race condition, the implementation of
<a href="#Generic_FIFO.Is_Preserved">Is_Preserved</a> must return <i>
<font color="#800000">false</font></i> for newly added elements.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Queue</b>&nbsp;&nbsp; 
	: <font color="#0000FF">in out</font> FIFO;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b> : Element_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Full</b>&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure places <b>Element</b> into <b>Queue</b>. When Element is put,
<b>Full</b> is set to <font color="#800000"><i>false</i></font>. Otherwise it is 
set to <i><font color="#800000">true</font></i>.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Queue</b>&nbsp;&nbsp; 
	: <font color="#0000FF">in out</font> FIFO;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b> : Element_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This is a variant of the procedure above which raises Constraint_Error when
<b>Queue</b> is full.</p>
<H4><a name="10.1.2"></a>10.1.2. Signaled FIFO of definite elements</H4>
<p><a name="Generic_FIFO.Signaled_FIFO"></a>The child package
<a href="#Generic_FIFO.Signaled_FIFO">Generic_FIFO.Signaled_FIFO</a> 
provides FIFO with almost lock-free behavior. The implementation locks only if 
the operation has to block. That is, upon reading from an empty queue or else 
writing into a full queue. Otherwise it is lock-free.</p>
<blockquote>
	<p><tt><font color="#0000FF">generic<br>
	package </font>Generic_FIFO.Generic_Signaled <font color="#0000FF">is</font> ...</tt></p>
</blockquote>
<p>The type of Signaled_FIFO is:</p>
<blockquote>
	<p><tt><font color="#0000FF">type </font>Signaled_FIFO<font color="#0000FF"> 
	is new </font>FIFO<font color="#0000FF"> with private;</font></tt></p>
</blockquote>
<p>The following operations are added or have an altered behavior:</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_FIFO.Signaled_FIFO.Cancel">
	</a>procedure</font> Cancel (<b>Queue</b> : <font color="#0000FF">in out
	</font>Signaled_FIFO);</tt></p>
</blockquote>
<p>This procedure releases all blocked tasks.
<a href="#Generic_FIFO.Signaled_FIFO.Get">Get</a> and
<a href="#Generic_FIFO.Signaled_FIFO.Peek">Peek</a> called for an empty queue, 
as well as <a href="#Generic_FIFO.Signaled_FIFO.Put">Put</a> called for a full 
queue are blocked. Their waiting is prematurely ended when
<a href="#Generic_FIFO.Signaled_FIFO.Cancel">Cancel</a> is called. In this case 
End_Error is propagated out the corresponding calls. Note that differently to
<a href="#Generic_FIFO.Signaled_FIFO.Get">Get</a>,
<a href="#Generic_FIFO.Signaled_FIFO.Peek">Peek</a> and
<a href="#Generic_FIFO.Signaled_FIFO.Put">Put</a>, this procedure can be called 
from any task.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_FIFO.Signaled_FIFO.Get"></a>
	function</font> Get (<b>Queue</b> : Signaled_FIFO) <font color="#0000FF">
	return</font> 
	Element_Type;<font color="#0000FF"><br>
	function</font> Get (<b>Queue</b> :
	Signaled_FIFO; <b>Timeout</b> : Duration)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> 
	Element_Type;</tt></p>
</blockquote>
<p>These functions block when <b>
Queue</b> is empty. If a timeout is specified, upon its expiration, 
Contraint_Error is propagated as it would for the parent type. End_Error is 
propagated when waiting was prematurely cancelled by a call to
<a href="#Generic_FIFO.Signaled_FIFO.Cancel">Cancel</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_FIFO.Signaled_FIFO.Peek"></a>
	function</font> Peek (<b>Queue</b> : Signaled_FIFO) <font color="#0000FF">
	return</font> 
	Element_Type;<font color="#0000FF"><br>
	function</font> Peek (<b>Queue</b> : Signaled_FIFO; <b>Timeout</b> : 
	Duration)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> 
	Element_Type;</tt></p>
</blockquote>
<p>These functions block when <b>Queue</b> is empty. If a timeout is specified, 
upon its expiration, Contraint_Error is propagated. End_Error is propagated when 
waiting was prematurely cancelled by a call to
<a href="#Generic_FIFO.Signaled_FIFO.Cancel">Cancel</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_FIFO.Signaled_FIFO.Put"></a>procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Queue</b>&nbsp;&nbsp; 
	: <font color="#0000FF">in out</font> FIFO;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b> : Element_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Queue</b>&nbsp;&nbsp; 
	: <font color="#0000FF">in out</font> FIFO;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b> : Element_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Timeout</b> : Duration<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures&nbsp;block when <b>Queue</b> is full. If a timeout is 
specified, upon its expiration, Contraint_Error is propagated. End_Error is 
propagated when waiting was prematurely cancelled by a call to
<a href="#Generic_FIFO.Signaled_FIFO.Cancel">Cancel</a>.</p>
<H4><a name="10.1.3"></a>10.1.3. Lock-free FIFO of indefinite elements</H4>
<p><a name="Generic_Indefinite_FIFO"></a>The package 
<a href="#Generic_Indefinite_FIFO">Generic_Indefinite_FIFO</a> 
provides a lock-free first in, first out queue, which can be used between one publisher and 
one subscriber. It is similar to <a href="#Generic_FIFO">Generic_FIFO</a> 
except that it can handle elements of indefinite types, such as unconstrained 
arrays or class-wide types. The package is generic:</p>
<blockquote>
	<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type </font>Element_Type (&lt;&gt;) <font color="#0000FF">is private</font>;<font color="#0000FF"><br>
	package </font>Generic_Indefinite_FIFO<font color="#0000FF"> is</font> ...</tt></p>
</blockquote>
<p>The type of FIFO is:</p>
<blockquote>
	<p><tt><font color="#0000FF">type </font>FIFO (Size : Storage_Count)<font color="#0000FF"> 
	is<br>
&nbsp;&nbsp; new </font>Ada.Finalization.Limited_Controlled
	<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The discriminant Size determines the maximal size of the queue in storage 
elements. A queue can 
hold objects which total size in storage elements is no more than Size - 1. This 
is not the exact limit, which could be lower due to memory fragmentation. There 
can be no more than two fragments, except than small holes needed for alignment 
reasons. Note that because the element size is 
unknown in advance, it is impossible to determine whether the queue is full </p>
<p>The following primitive operations are defined in the package:</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Delete (<b>Queue</b> :
	<font color="#0000FF">in out</font> FIFO; <b>Count</b> : Natural := 1);</tt></p>
</blockquote>
<p>This procedure removes <b>Count</b> elements from <b>
Queue</b>. When the queue contains <b>Count</b> or less elements, it becomes 
empty. The elements are removed from the same queue end
<a href="#Generic_Indefinite_FIFO.Get">Get</a> and
<a href="#Generic_Indefinite_FIFO.Peek">Peek</a> access. Therefore it shall be 
called from the same task.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Indefinite_FIFO.Get"></a>function</font> Get (<b>Queue</b> :
	FIFO) <font color="#0000FF">return</font> 
	Element_Type;</tt></p>
</blockquote>
<p>This function returns one element from <b>Queue</b>. The element is removed 
from the queue. Constraint_Error is propagated when the queue is empty.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Free_Space (<b>Queue</b> : 
	FIFO) <font color="#0000FF">return</font> Storage_Count;</tt></p>
</blockquote>
<p>This function returns the maximal available space in <b>Queue</b>. Note that 
the result greater than the element size does not yet guarantee a consequent
<a href="#Generic_Indefinite_FIFO.Put">Put</a> would not fail. The queue space 
can be fragmented up to two segments. Therefore only when the result is twice as 
required then <a href="#Generic_Indefinite_FIFO.Put">Put</a> will not fail.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Is_Empty (<b>Queue</b> : FIFO)
	<font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Queue</b> 
is empty.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Indefinite_FIFO.Peek"></a>function</font> Peek (<b>Queue</b> :
	FIFO) <font color="#0000FF">return</font> 
	Element_Type;</tt></p>
</blockquote>
<p>This function is similar to <a href="#Generic_Indefinite_FIFO.Get">Get</a> 
except that it does not remove the element from <b>Queue</b>. Constraint_Error 
is propagated when the queue is empty.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Indefinite_FIFO.Put"></a>procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Queue</b>&nbsp;&nbsp; 
	: <font color="#0000FF">in out</font> FIFO;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b> : Element_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure put <b>Element</b> into <b>Queue</b>. Constraint_Error when
<b>Queue</b> does not have enough space for <b>Element</b>.</p>
<H4><a name="10.1.4"></a>10.1.4. Signaled FIFO of indefinite elements</H4>
<p><a name="Generic_Indefinite_FIFO.Signaled_FIFO"></a>The child package
<a href="#Generic_Indefinite_FIFO.Signaled_FIFO">Generic_Indefinite_FIFO.Signaled_FIFO</a> 
provides FIFO with almost lock-free behavior. The implementation locks only if 
the operation has to block. That is, upon reading from an empty queue or else 
writing into a full queue. Otherwise it is lock-free.</p>
<blockquote>
	<p><tt><font color="#0000FF">generic<br>
	package </font>Generic_Indefinite_FIFO.Generic_Signaled <font color="#0000FF">is</font> ...</tt></p>
</blockquote>
<p>The type of Signaled_FIFO is:</p>
<blockquote>
	<p><tt><font color="#0000FF">type </font>Signaled_FIFO<font color="#0000FF"> 
	is new </font>FIFO<font color="#0000FF"> with private;</font></tt></p>
</blockquote>
<p>The following operations are added or have an altered behavior:</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Indefinite_FIFO.Signaled_FIF.Cancel">
	</a>procedure</font> Cancel (<b>Queue</b> : <font color="#0000FF">in out
	</font>Signaled_FIFO);</tt></p>
</blockquote>
<p>This procedure releases all blocked tasks.
<a href="#Generic_Indefinite_FIFO.Signaled_FIFO.Get">Get</a> and
<a href="#Generic_Indefinite_FIFO.Signaled_FIFO.Peek">Peek</a> called for an empty queue, 
as well as <a href="#Generic_Indefinite_FIFO.Signaled_FIFO.Put">Put</a> called for a full 
queue are blocked. Their waiting is prematurely ended when
<a href="#Generic_Indefinite_FIFO.Signaled_FIF.Cancel">Cancel</a> is called. In this case 
End_Error is propagated out the corresponding calls. Note that differently to
<a href="#Generic_Indefinite_FIFO.Signaled_FIFO.Get">Get</a>,
<a href="#Generic_Indefinite_FIFO.Signaled_FIFO.Peek">Peek</a> and
<a href="#Generic_Indefinite_FIFO.Signaled_FIFO.Put">Put</a>, this procedure can be called 
from any task.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Indefinite_FIFO.Signaled_FIFO.Get"></a>
	function</font> Get (<b>Queue</b> : Signaled_FIFO) <font color="#0000FF">
	return</font> 
	Element_Type;<font color="#0000FF"><br>
	function</font> Get (<b>Queue</b> :
	Signaled_FIFO; <b>Timeout</b> : Duration)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> 
	Element_Type;</tt></p>
</blockquote>
<p>These functions block when <b>
Queue</b> is empty. If a timeout is specified, upon its expiration, 
Contraint_Error is propagated as it would for the parent type. End_Error is 
propagated when waiting was prematurely cancelled by a call to
<a href="#Generic_Indefinite_FIFO.Signaled_FIF.Cancel">Cancel</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Indefinite_FIFO.Signaled_FIFO.Peek"></a>
	function</font> Peek (<b>Queue</b> : Signaled_FIFO) <font color="#0000FF">
	return</font> 
	Element_Type;<font color="#0000FF"><br>
	function</font> Peek (<b>Queue</b> : Signaled_FIFO; <b>Timeout</b> : 
	Duration)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> 
	Element_Type;</tt></p>
</blockquote>
<p>These functions block when <b>Queue</b> is empty. If a timeout is specified, 
upon its expiration, Contraint_Error is propagated. End_Error is propagated when 
waiting was prematurely cancelled by a call to
<a href="#Generic_Indefinite_FIFO.Signaled_FIF.Cancel">Cancel</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Indefinite_FIFO.Signaled_FIFO.Put"></a>
	procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Queue</b>&nbsp;&nbsp; 
	: <font color="#0000FF">in out</font> FIFO;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b> : Element_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Queue</b>&nbsp;&nbsp; 
	: <font color="#0000FF">in out</font> FIFO;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b> : Element_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Timeout</b> : Duration<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures blocks when <b>Queue</b> is full. If a timeout is 
specified, upon its expiration, Contraint_Error is propagated. End_Error is 
propagated when waiting was prematurely cancelled by a call to
<a href="#Generic_Indefinite_FIFO.Signaled_FIF.Cancel">Cancel</a>.</p>
<p align="right">
  <A name="10.2"></A><a href="#10.1"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#11"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>10.2. Blackboard</H3>
<p>Blackboard is a data structure of broadcasted messages. Publishers put 
their messages (elements) onto the blackboard. The blackboard elements remain accessible there for 
the subscribers until newly put elements override them. The elements order in 
the blackboard is first in, first out. Accessing the blackboard for read is 
lock-free. Additionally the blackboard provides mechanisms for elements
identification and enumeration. When an element is put into the blackboard it 
receives a unique reference. The reference can be used to access the element so 
long it is in the blackboard. After element expiration a reference can still be 
used to determine this condition. References can be advanced to the next element or else to the first 
not yet expired element in the 
blackboard.</p>
<blockquote>
	<p><img border="0" src="blackboard.gif" width="325" height="147" alt="blackboard"></p>
</blockquote>
<H4><a name="10.2.1"></a>10.2.1. Single publisher blackboard</H4>
<p><a name="Generic_Blackboard"></a>The package <a href="#Generic_Blackboard">Generic_Blackboard</a> 
provides a blackboard safe to use with one publisher writing into it, and any 
number of subscribers accessing it only for read. The package is generic:</p>
<blockquote>
	<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type </font>Element_Type (&lt;&gt;) <font color="#0000FF">is private</font>;<font color="#0000FF"><br>
	package </font>Generic_Blackboard<font color="#0000FF"> is</font> ...</tt></p>
</blockquote>
<p>The generic parameter is the type of the elements in the blackboard.&nbsp; 
The elements are stored in the blackboard temporarily. Newly coming elements 
override the most elder ones. The elements can be indefinite, tagged and 
class-wide. However </p>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD>
<i>Because the elements in the blackboard are destructed automatically in an 
implicit way, it is not allowed to use elements of controlled types as well as 
of any other types requiring non-null finalization.</i></TD>
  </TR>
</TABLE>
<p>The type of a blackboard is:</p>
<blockquote>
	<p><tt><font color="#0000FF">type </font>Blackboard (Size : Storage_Count)
	<font color="#0000FF">is<br>
&nbsp;&nbsp; new </font>Ada.Finalization.Limited_Controlled
	<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The discriminant Size determines the size of the blackboard in storage 
elements. The time an element survives in the blackboard depends on the 
blackboard size, the size of the elements and on how frequently elements are put 
into it. The elements in the blackboard are accessed through references which 
know if the destination is still valid:</p>
<blockquote>
	<p><tt><font color="#0000FF">type </font>Reference<font color="#0000FF"> is 
	private</font>;</tt></p>
</blockquote>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD>
<i>When the compiler does not support atomic access to 64-bit integers, an 
alternative version based on GCC's built-in functions is used. When compiling 
from sources using the project file, the scenario variable Atomic_Access 
controls the method to use:</i><ul>
	<li><i>Pragma-atomic (subdirectory atomic-access/ada)</i></li>
	<li><i>GCC-built-ins (subdirectory atomic-access/gcc)</i></li>
</ul>
<p><i>Precompiled distributions select an appropriate implementation 
automatically.</i></TD>
  </TR>
</TABLE>
<p>The following primitive operations are defined in the package: </p>
<blockquote>
	<p><tt><font color="#0000FF">function </font>First (<b>Storage</b> : 
	Blackboard) <font color="#0000FF">return</font> Reference;</tt></p>
</blockquote>
<p>This function returns a reference to the first element available in <b>
Storage</b>. Note that this function can return an invalid reference when used 
concurrently. It that case the caller should call it again, unless the 
result is greater than <b>Storage</b> according to &gt;. Together with
<a href="#Generic_Blackboard.Next">Next</a>, this function can be used to scan 
the elements of a blackboard.</p>
<blockquote>
	<p><tt><font color="#0000FF">function </font>Get (<b>Storage</b> : 
	Blackboard; <b>Pointer</b> : Reference)<br>
	<font color="#0000FF">&nbsp;&nbsp; return</font> Element_Type;</tt></p>
</blockquote>
<p>This function returns an element by reference. Constraint_Error is propagated 
when <b>Pointer</b> is not a valid reference. Note that any reference can become 
invalid when the blackboard is being written.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Is_Valid (<b>Storage</b> : 
	Blackboard; <b>Pointer</b> : Reference)<font color="#0000FF"><br>
&nbsp;&nbsp; return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Pointer</b> 
is a valid reference in <b>Storage</b>. It is equivalent to
<font color="#0000FF">not</font> <b>Storage</b> &gt; <b>Pointer</b>
<font color="#0000FF">and not</font> <b>Storage</b> &lt; <b>Pointer</b>.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Blackboard.Next"></a>procedure</font> 
	Next<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> : 
	Blackboard;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Pointer</b> : <font color="#0000FF">in out</font> Reference;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Sequent</b> : <font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure advances the reference <b>Pointer</b> to the next element. 
When <b>Pointer</b> is valid and there is a next element then <b>Sequent</b> is 
set to <font color="#800000"><i>true</i></font> and <b>Pointer</b> will refer to 
that element. When <b>Pointer</b> refers to a lost element then it is set to the 
first available element and <b>Sequent</b> is set to <i><font color="#800000">
false</font></i>. When <b>Pointer</b> refers to a not yet available element, it 
is not changed and <b>Sequent</b> is set to <font color="#800000"><i>true</i></font>. 
The following code snippet illustrates how <a href="#Generic_Blackboard.Next">
Next</a> can be used to scan a blackboard:</p>
<blockquote>
	<p><tt>Data : 
	Blackboard;<br>
	&nbsp;&nbsp;
	...<br>
	<font color="#0000FF">task body </font>Scanner <font color="#0000FF">is</font><br>
&nbsp;&nbsp; Element : Reference;<br>
	&nbsp;&nbsp;
	Sequent : Boolean;<br>
	<font color="#0000FF">begin</font><br>
	&nbsp;&nbsp; Element := First (Data);<font color="#008000"> -- The first 
	element</font><font color="#0000FF"><br>
	&nbsp;&nbsp; loop<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if not </font>(Element &gt; Data)<font color="#0000FF"> 
	then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>... 
	Get (Data, Element) ...<font color="#008000"> -- Use element</font><font color="#0000FF"><br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; exception<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when </font>Constraint_Error =&gt;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<font color="#008000"> -- The element is lost</font><font color="#0000FF"><br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; end</font>;<font color="#0000FF"><br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>Next (Data, Element, Sequent);<font color="#0000FF"><br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if not </font>Sequent<font color="#0000FF"> then<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>...<font color="#008000"> -- Some elements were lost</font><font color="#0000FF"><br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; end if</font>;<font color="#0000FF"><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay</font><font color="#800000"> 
	0.010</font>;<font color="#008000">&nbsp; -- Wait for new elements to come</font><font color="#0000FF"><br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; end if</font>;<font color="#0000FF"><br>
	&nbsp;&nbsp; end loop</font>;<br>
	<font color="#0000FF">end </font>Scanner;</tt></p>
</blockquote>
<p>Note that lost elements can be detected by the scanner. This is the best what 
a scanner could have, because blackboard is a lock-free structure and it cannot 
block the publisher writing into it</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Next<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> : 
	Blackboard;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Pointer</b> : <font color="#0000FF">in out</font> Reference;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Sequent</b> : <font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure advances the reference <b>Pointer</b> to the next element. 
When <b>Pointer</b> is valid and there is a next element then <b>Sequent</b> is 
set to <font color="#800000"><i>true</i></font> and <b>Pointer</b> will refer to 
that element. When <b>Pointer</b> refers to a lost element then it is set to the 
first available element and <b>Sequent</b> is set to <i><font color="#800000">
false</font></i>. When <b>Pointer</b> refers to a not yet available </p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Blackboard.Put"></a>procedure</font> 
	Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> :
	<font color="#0000FF">in out</font> Blackboard;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b> : Element_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Pointer</b> : <font color="#0000FF">out</font> Reference<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	procedure</font> 
	Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b> :
	<font color="#0000FF">in out</font> Blackboard;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b> : Element_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures put <b>Element</b> into <b>Storage</b> and returns a 
reference to it, when the parameter <b>Pointer</b> is used. The operation overrides the most outdated items in the 
blackboard making references to them invalid. Storage_Error is propagated when
<b>Element</b> is too large to fit into <b>Storage</b> even if it alone there. 
The procedure is the only one which shall be used from one task or else 
exclusively.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> 
	Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b>&nbsp; :
	<font color="#0000FF">in out</font> Blackboard;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b>&nbsp; : Element_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Preserve</b> : Reference;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Pointer</b>&nbsp; : <font color="#0000FF">out</font> Reference<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Success</b>&nbsp; : <font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	procedure</font> 
	Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Storage</b>&nbsp; :
	<font color="#0000FF">in out</font> Blackboard;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Element</b>&nbsp; : Element_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Preserve</b> : Reference;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Success</b>&nbsp; : <font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These are variants of <a href="#Generic_Blackboard.Put">Put</a>, which 
prevent overriding of the items referenced by <b>Preserve</b> and later. The 
parameter <b>Success</b> is set to <font color="#800000"><i>true</i></font> when
<b>Element</b> was successfully put into <b>Storage</b>. It is set to
<font color="#800000"><i>false</i></font> when <b>Element</b> was not put, 
because there is no room in <b>Storage</b> without removing protected items.</p>
<blockquote>
	<p><tt><font color="#0000FF">function </font>Upper (<b>Storage</b> : 
	Blackboard) <font color="#0000FF">return</font> Reference;</tt></p>
</blockquote>
<p>This function returns the least upper bound of <b>Storage</b>. That is the 
reference to the element which will be put next into.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> &quot;<font color="#FF0000">&lt;</font>&quot; 
	(<b>Storage</b> : Blackboard; <b>Pointer</b> : Reference)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Boolean;<br>
	<font color="#0000FF">function</font> &quot;<font color="#FF0000">&gt;</font>&quot; (<b>Storage</b> 
	: Blackboard; <b>Pointer</b> : Reference)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Boolean;<br>
	<font color="#0000FF">function</font> &quot;<font color="#FF0000">&lt;</font>&quot; (<b>Pointer</b> 
	: Reference; <b>Storage</b> : Blackboard)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Boolean;<br>
	<font color="#0000FF">function</font> &quot;<font color="#FF0000">&gt;</font>&quot; (<b>Pointer</b> 
	: Reference; <b>Storage</b> : Blackboard)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>These functions provide reference validity checks. <b>Storage</b> &lt; <b>
Pointer</b>, when <b>Pointer</b> refers to an element not yet written into the 
blackboard. The procedure <a href="#Generic_Blackboard.Next">
Next</a> returns such reference when it reaches the end of a blackboard.<b> 
Storage</b> &gt; <b>Pointer</b>, when <b>Pointer</b> refers to a lost element, which 
is already overridden by newer elements. When neither <b>Storage</b> &lt; <b>
Pointer </b>nor<b> Storage</b> &gt; <b>Pointer</b>, then <b>Pointer</b> is refers 
to an accessible (valid) element in <b>Storage</b>. In other words comparisons 
are made in the sense of intervals, when the blackboard is considered as a 
consequent range of contained elements. Because the blackboard elements are 
written in FIFO order, the following statement is 
true:</p>
<blockquote>
	<p>Let S<sub>1</sub>, S<sub>2</sub> be the states of a blackboard S at the times
	<i>t</i><sub>1</sub>&le;<i>t</i><sub>2</sub>. P<sub>1</sub>, P<sub>2</sub> 
	be the states of a reference P to the same blackboard element at the 
	corresponding times, then</p>
	<p>&nbsp;&nbsp;&nbsp; S<sub>1</sub>&gt;P<sub>1</sub> =&gt; S<sub>2</sub>&gt;P<sub>2<br>
	</sub>&nbsp;&nbsp;&nbsp; S<sub>2</sub>&lt;P<sub>2</sub> =&gt; S<sub>1</sub>&lt;P<sub>1</sub></p>
</blockquote>
<blockquote>
	<p><tt><font color="#0000FF">function</font> &quot;<font color="#FF0000">&lt;</font>&quot;&nbsp; 
	(<b>Left</b>, <b>Right</b> : Reference) <font color="#0000FF">return</font> 
	Boolean;<br>
	<font color="#0000FF">function</font> &quot;<font color="#FF0000">&gt;</font>&quot;&nbsp; 
	(<b>Left</b>, <b>Right</b> : Reference) <font color="#0000FF">return</font> 
	Boolean;<br>
	<font color="#0000FF">function</font> &quot;<font color="#FF0000">&lt;=</font>&quot; (<b>Left</b>,
	<b>Right</b> : Reference) <font color="#0000FF">return</font> Boolean;<br>
	<font color="#0000FF">function</font> &quot;<font color="#FF0000">&gt;=</font>&quot; (<b>Left</b>,
	<b>Right</b> : Reference) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>References are directly comparable even if not valid. Elements put later onto 
the blackboard have greater references.</p>
<blockquote>
	<p><tt>First_Reference : <font color="#0000FF"> constant</font> Reference;</tt></p>
</blockquote>
<p>This value is of a reference to the first blackboard element.</p>
<H4><a name="10.2.2"></a>10.2.2. Multiple publishers blackboard</H4>
<p><a name="Generic_Blackboard.Generic_Task_Safe"></a>The child package
<a href="#Generic_Blackboard.Generic_Task_Safe">Generic_Blackboard.Generic_Task_Safe</a> provides a 
blackboard, which is safe to use with any number of publishers:</p>
<blockquote>
	<p><tt><font color="#0000FF">generic<br>
	package </font>Generic_Blackboard.Generic_Task_Safe<font color="#0000FF"> is</font> ...</tt></p>
</blockquote>
<p>The package provides a derived blackboard type: </p>
<blockquote>
	<p><tt><font color="#0000FF">type </font>Shared_Blackboard<font color="#0000FF"> 
	is new </font>Blackboard<font color="#0000FF"> with private</font>;</tt></p>
</blockquote>
<p>This type overrides the procedure <a href="#Generic_Blackboard.Put">Put</a> 
with an implementation that uses a protected subprogram in order to write the 
blackboard in a task safe way.</p>
<hr>
<p align="right">
  <A name="11"></A><a href="#10.2"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#11.1"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>11. Locking synchronization primitives</H2>
<p><a name="Synchronization"></a>The package <a href="#Synchronization">Synchronization</a> is a parent package 
of the child packages providing various locking synchronization primitives. The 
package defines:</p>
<blockquote>
	<p><tt>Ownership_Error : <font color="#0000FF">exception</font>;</tt></p>
</blockquote>
<p align="right">
  <A name="11.1"></A><a href="#11"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#11.2"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>11.1. Notes on programming with protected objects</H3>
<p>Here it is appropriate to discuss some techniques used in Ada for task 
synchronization. There exist two major mechanisms of synchronization in Ada:</p>
<ul>
	<li><i>rendezvous</i></li>
	<li><i>protected objects</i></li>
</ul>
<p>Rendezvous is an synchronous call to an entry of a task. As such it cannot be 
reused unless the task types have multiple instances. It is also considered 
heavy-weight because it often requires context switching. However, rendezvous 
and protected objects should not be considered competing. There exist problems 
more natural to solve with rendezvous than with protected objects, and the inverse.</p>
<p>A protected object has a state and three types of operations to handle its 
state:</p>
<ul>
	<li><i>protected function</i> can safely access the state, but cannot change 
	it, at least officially;</li>
	<li><i>protected procedure</i> can safely change the protected object state;</li>
	<li><i>entry</i> can do anything and also can be queued to.</li>
</ul>
<p>The difference between <i>protected procedures</i> and <i>entries</i> is in 
the queue. When a protected procedure is called that never blocks the caller 
task. When an entry is called that potentially blocks.</p>
<blockquote>
	<p><i>Non-blocking</i> does not imply any specific time constraint. In fact 
	a non-blocking call to a protected object may result in some delay. It is 
	also possible that the task doing it would in effect loose the processor. 
	Non-blocking only means that the waiting time does not depend on either the 
	program logic or its inputs. So it is considered &quot;instant&quot; from the program 
	point of view. Blocking means that the program logic can become aware of the 
	delay caused by the call. For example, I/O is considered blocking. The 
	program shall be prepared to deal with blocking. This is one reason why <i>
	entries</i> and <i>procedures</i> are distinct in protected objects.</p>
</blockquote>
<p>When an entry call blocks the caller task spends its time in the queue of the 
entry. Each entry also has a barrier, a condition which opens or closes the 
entry. When an entry is open, a task calling to the entry can be unblocked in 
order to execute the entry body. When the entry is closed, the task is blocked 
and stays in the entry queue. The barrier depends on the protected object state. 
Though it is possible to refer to non-local variables from the barrier, that 
would be useless because the barriers are re-evaluated only when the protected 
object state is &quot;officially&quot; changed. And this happens only when a protected 
procedure or an entry body is executed.</p>
<p>So the actual parameters and global variables cannot be used in the barriers. 
That is quite limiting. Fortunately, there exists a technique to circumvent this 
constraint. The technique is based on the <i>requeue</i> 
statement (see <a href="http://www.adaic.com/standards/05rm/html/RM-9-5-4.html"> <i>Ada 
Language Reference Manual</i> 9.5.4</a>), which is one the most 
powerful constructs of the Ada concurrency model. A task 
queued to a protected object entry can be re-queued to another entry under the 
condition that the parameter profile is same or else that the new entry does not 
have any parameters. Requeue is used in the &quot;lounge&quot; pattern discussed below.</p>
<p>Let us consider creating a shared counter. A counter can be incremented. It 
can be awaited for reaching some definite value. The interface of such a counter 
might look as follows:</p>
<blockquote>
	<p><tt><font color="#0000FF">protected type </font>Counter<font color="#0000FF"> 
	is<br>
&nbsp;&nbsp; entry</font> Wait (Goal : Natural); <font color="#008000">-- Wait for Goal 
	&gt;= Value</font><br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Count;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<font color="#008000">-- Increment counter</font><br>
	<font color="#0000FF">private<br>
	</font>&nbsp;&nbsp; Value : Natural := <font color="#800000">0</font>;&nbsp;&nbsp;&nbsp;
	<font color="#008000">&nbsp;&nbsp;&nbsp; -- The current counter state<br>
	</font><font color="#0000FF">end </font>Counter;</tt></p>
</blockquote>
<p>The procedure Count increments the counter value by 1. The entry Wait is used 
in order to wait for a state when Goal is greater than or equal to the counter 
value. This condition cannot be specified as the barrier of Wait. The solution 
of the problem is to add a private family of entry points Lounge:</p>
<blockquote>
	<p><tt><font color="#0000FF">protected type </font>Counter<font color="#0000FF"> 
	is<br>
&nbsp;&nbsp; entry</font> Wait (Goal : Natural);&nbsp;&nbsp; <font color="#008000">
	-- Wait for Goal &gt;= Value</font><br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Count;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<font color="#008000">-- Increment counter</font><br>
	<font color="#0000FF">private<br>
&nbsp;&nbsp; entry</font> Lounge (Boolean) (Goal : Natural);
	<font color="#008000">-- Callers are waiting here</font><br>
&nbsp;&nbsp; Value&nbsp;&nbsp; : Natural := <font color="#800000">0</font>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- The 
	current counter state<br>
	</font>&nbsp;&nbsp; Current : Boolean := False;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<font color="#008000">&nbsp;-- The current update state</font><br>
	<font color="#0000FF">end </font>Counter;</tt></p>
</blockquote>
<p>The implementation of Wait has the 
barrier true (no waiting). It checks if the condition is met and otherwise 
re-queues to the entry Lounge, where the caller task will actually wait for the 
condition to meet.</p>
<blockquote>
	<p><tt><font color="#0000FF">entry</font> Wait (Goal : 
	Natural) <font color="#0000FF">when </font>True<font color="#0000FF"> is<br>begin<br>&nbsp;&nbsp; if
	</font>Goal &gt; Value<font color="#0000FF"> then </font>
	<font color="#008000">-- Enter actual waiting if not 
	met<br></font><font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; requeue
	</font>Lounge (<font color="#0000FF">not </font>Current)<font color="#0000FF"> with abort</font>;<font color="#0000FF"><br>&nbsp;&nbsp; end if</font>;<br>
	<font color="#0000FF">end</font> Wait;</tt></p>
</blockquote>
<p>The barrier of Lounge is informally &quot;object's state has 
changed.&quot; This also cannot be spelt using the object's state alone. But it can 
be done using entry families. So the entry Lounge is split into two. In the 
declaration of it has <tt>(Boolean)</tt> following the entry name, which means, there 
exists Lounge (True) and Lounge (False). The object itself is in two states 
reflected by the variable Current. When Current is <i><font color="#800000">true</font></i>, 
Lounge (True) is open and Lounge (False) is closed. When Current is <i>
<font color="#800000">false</font></i>, they change places. The procedure Count 
increments the counter and then toggles Current. This causes tasks queued to a 
Lounge to execute the body and releases those of them the counter state reached Goal. 
Others are requeued back to the opposite Lounge entry: </p>
<blockquote>
	<p><tt><font color="#0000FF">entry</font> Lounge (<font color="#0000FF">for</font> Toggle
	<font color="#0000FF">in</font> Boolean) (Goal : 
	Natural)<br>
&nbsp; <font color="#0000FF">&nbsp;when </font>Toggle = 
	Current<font color="#0000FF"> is<br>
	begin<br>
	&nbsp;&nbsp; if </font>Goal &lt; Value<font color="#0000FF"> 
	then&nbsp;&nbsp; </font><font color="#008000">-- Continue waiting if not met<br>
	</font><font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; requeue </font>Lounge (<font color="#0000FF">not
	</font>Current)<font color="#0000FF"> 
	with abort</font>;<font color="#0000FF"><br>
	&nbsp;&nbsp; end if</font>;<br>
	<font color="#0000FF">end</font> Lounge;</tt></p>
</blockquote>
<p>The procedure Count increments Value and switches lounges:</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Count<font color="#0000FF"> is<br>begin<br>&nbsp;&nbsp;
	</font>Value&nbsp;&nbsp; := Value +
	<font color="#800000">1</font>; <font color="#008000">&nbsp; -- Increment 
	counter<br></font><font color="#0000FF">&nbsp; </font>&nbsp;Current 
	:= <font color="#0000FF">not</font> Current; <font color="#008000">-- Pulse 
	state change</font><br><font color="#0000FF">end</font> Count;</tt></p>
</blockquote>
<p>Here a careful reader could observe that this solution has a race condition, 
when Count toggles Current, there is no guarantee that all tasks from the 
corresponding Lounge's queue will execute the Lounge's body before next 
increment. In order to ensure that, a 
final step has to be done:</p>
<blockquote>
	<p><tt><font color="#0000FF">protected type </font>Counter<font color="#0000FF"> 
	is<br>
&nbsp;&nbsp; entry</font> Wait (Goal : 
	Natural); <font color="#008000">-- Wait for Goal &gt;= Value</font><br>
&nbsp;&nbsp; <font color="#0000FF">entry</font> Count;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<font color="#008000">&nbsp; -- Increment counter</font><br>
	<font color="#0000FF">private<br>
&nbsp;&nbsp; entry</font> Lounge (Boolean) (Goal : Natural);
	<font color="#008000">-- Callers are waiting here</font><br>
&nbsp;&nbsp; Value&nbsp;&nbsp; : Natural := <font color="#800000">0</font>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- The 
	current counter state<br>
	</font>&nbsp;&nbsp; Current : Boolean := False;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<font color="#008000">&nbsp;-- The current update state</font><br>
	<font color="#0000FF">end </font>Counter;</tt></p>
</blockquote>
<p>Here Count becomes an entry. This allows us to lock it when the queue of a 
Lounge from the previous notification step is not yet empty.</p>
<blockquote>
	<p><tt><font color="#0000FF">entry</font> Count <font color="#0000FF">when</font> 
	Lounge (Current)'Count =
	<font color="#800000">0</font> <font color="#0000FF">is<br>
	begin<br>
	&nbsp;&nbsp; </font>Value&nbsp;&nbsp; := Value +
	<font color="#800000">1</font>; <font color="#008000">&nbsp; -- Increment 
	counter<br>
	</font><font color="#0000FF">&nbsp; </font>&nbsp;Current 
	:= <font color="#0000FF">not</font> Current; <font color="#008000">-- Pulse 
	state change</font><br>
	<font color="#0000FF">end</font> Count;</tt></p>
</blockquote>
<p>Though Count is now an entry it does not really block.</p>
<p>The &quot;lounge&quot; pattern is considerably universal. In fact, the implementations 
of the most of the synchronization primitives described below are based on this 
pattern.</p>
<p align="right">
  <A name="11.2"></A><a href="#11.1"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#11.3"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>11.2. Events</H3>
<p><a name="Events"></a>An event is a synchronization object with a state, that 
can be changed 
and awaited for. As a synchronization primitive event is very low-level, and 
thus, is exposed to various 
problems from race condition to deadlocking. For this reason they should be used 
with a great care.</p>
<H4><a name="11.2.1"></a>11.2.1. Simple event</H4>
<p><a name="Synchronization.Events"></a>The package
<a href="#Synchronization.Events">Synchronization.Events</a> provides an 
implementation of a simple event. An event can be signaled, reset, and awaited 
for a definite state. Note that if the events need to be used in a combination 
the package
<a href="#Synchronization.Generic_Events_Array">
Synchronization.Generic_Events_Array</a> should be used instead. The event is 
signaled and reset manually, which can be a source of race condition when 
signaling is close followed by resetting. Such events represent a special case
<i>pulse events</i>. See the package
<a href="#Synchronization.Pulse_Events">Synchronization.Pulse_Events</a> which 
provides a race condition safe implementation of.</p>
<blockquote>
	<p><tt><font color="#0000FF">protected type </font>Event<font color="#0000FF"> 
	is </font>...</tt></p>
</blockquote>
<p>This is the type of the protected object implementing an event. The following 
subprograms and entries are provided:</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Is_Signaled
	<font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if the event 
is signaled.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Reset;</tt></p>
</blockquote>
<p>This procedure sets the event into the non-signaled state. It releases all 
tasks queued to the entry <a href="#Synchronization.Events.Wait_For_Reset">Wait_For_Reset</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Signal;</tt></p>
</blockquote>
<p>This procedure signals the event. It releases all tasks queued to the entry
<a href="#Synchronization.Events.Wait">Wait</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Synchronization.Events.Wait"></a>entry</font> 
	Wait;</tt></p>
</blockquote>
<p>This entry blocks until the event is signaled.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Synchronization.Events.Wait_For_Reset"></a>
	entry</font> Wait_For_Reset;</tt></p>
</blockquote>
<p>This entry blocks until the event is signaled.</p>
<H4><a name="11.2.2"></a>11.2.2. Pulse event</H4>
<p><a name="Synchronization.Pulse_Events"></a>The package
<a href="#Synchronization.Pulse_Events">Synchronization.Pulse_Events</a>&nbsp;provides 
an implementation of pulse events. A pulse event is signaled for a short, 
actually indivisible, period 
of time. It is reset automatically immediately after the last task awaiting the 
event is released. The implementation provided by this package is free of race 
conditions. That is, even if a task, released by the event, seized the processor 
before releasing other tasks, and then entered another wait for the same event, 
that would not release this task again. It will be blocked until a next 
pulsation of the event. The implementation also ensures that 
all tasks entering waiting before event pulsation are released before any 
consequent 
pulsation. The following diagram illustrates the constraints satisfied by 
the implementation in order to prevent race conditions:</p>
<blockquote>
	<p><img border="0" src="pulse_event.gif" width="518" height="173" alt="pulse event"></p>
</blockquote>
<p>As the diagram shows both pulsing and waiting are postponed until the end of 
releasing already blocked tasks. Any task entering waiting stay blocked while 
other tasks are released.</p>
<blockquote>
	<p><tt><font color="#0000FF">protected type </font>Pulse_Event<font color="#0000FF"> 
	is </font>...</tt></p>
</blockquote>
<p>This is the type of the protected object implementing a pulse event. The 
following subprograms and entries are provided:</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Synchronization.Pulse_Events.Pulse">
	</a>entry</font> Pulse;</tt></p>
</blockquote>
<p>This entry release all tasks waiting for the event. Note that though this is 
an entry, it does not block for any considerable time. When accepted, it releases 
all tasks queued to the entry <a href="#Synchronization.Pulse_Events.Wait">Wait</a> before 
any next <a href="#Synchronization.Pulse_Events.Pulse">Pulse</a> takes effect.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Synchronization.Pulse_Events.Wait">
	</a>entry</font> Wait;</tt></p>
</blockquote>
<p>This entry waits for an event pulsation (see
<a href="#Synchronization.Pulse_Events.Pulse">Pulse</a>).</p>
<H4><a name="11.2.3"></a>11.2.3. Events pulsing a value</H4>
<p><a name="Synchronization.Generic_Pulse_Events"></a>The package
<a href="#Synchronization.Generic_Pulse_Events">Synchronization.Generic_Pulse_Events</a>&nbsp;is 
a generic variant of
<a href="#Synchronization.Pulse_Events">Synchronization.Pulse_Events</a> which 
additionally distributes a value when an event is pulsed. The package is 
generic:</p>
<blockquote>
	<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type </font>Event_Value<font color="#0000FF"> is private</font>;<font color="#0000FF"><br>
	package </font>Synchronization.Generic_Pulse_Events<font color="#0000FF"> is </font>...</tt></p>
</blockquote>
<p>The formal generic parameter is the type of the values distributed when the 
event is pulsed.</p>
<blockquote>
	<p><tt><font color="#0000FF">protected type </font>Pulse_Event<font color="#0000FF"> 
	is </font>...</tt></p>
</blockquote>
<p>This is the type of the protected object implementing a pulse event. The 
following subprograms and entries are provided:</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Synchronization.Generic_Pulse_Events.Pulse">
	</a>entry</font> Pulse (<b>Value</b> : Event_Value);</tt></p>
</blockquote>
<p>This entry release all tasks waiting for the event and propagates <b>Value</b> 
to each of them. Note that though this is 
an entry, it does not block for any considerable time. When accepted, it releases 
all tasks queued to the entry <a href="#Synchronization.Generic_Pulse_Events.Wait">Wait</a> 
passing <b>Value</b> to all of them. Any consequent
<a href="#Synchronization.Generic_Pulse_Events.Pulse">Pulse</a> is blocked until 
end of releasing the tasks.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Synchronization.Generic_Pulse_Events.Wait">
	</a>entry</font> Wait (<b>Value</b> : <font color="#0000FF">out</font> Event_Value);</tt></p>
</blockquote>
<p>This entry waits for event pulsing by
<a href="#Synchronization.Generic_Pulse_Events.Pulse">Pulse</a>. The parameter 
Value is the value specified in the call to
<a href="#Synchronization.Generic_Pulse_Events.Pulse">Pulse</a>.</p>
<H4><a name="11.2.4"></a>11.2.4. Arrays of events</H4>
<p><a name="Synchronization.Generic_Events_Array"></a>The package
<a href="#Synchronization.Generic_Events_Array">
Synchronization.Generic_Events_Array</a> provides arrays of events. The 
objective of the design is to allow waiting for any combination of the events. The 
events from the array can be signaled, reset and awaited for. The implementation 
represented here is free of race conditions, when the state of the events is 
being changed. In this case it guarantees that all tasks awaiting for the state 
are released before any consequent state change. Another common class of race 
conditions is eliminated by providing atomic signal-then-wait 
operations. For instance a set of tasks may synchronize themselves at dedicated 
points by signaling an event and then awaiting for all events signaled. If tasks later reset
their events, that would constitute a race condition, because a 
task might reset its event before other tasks queued for all events set. The 
following figure illustrates the case:</p>
<blockquote>
	<p><img border="0" src="events_array_deadlock.gif" alt="events array deadlock"></p>
</blockquote>
<p>In this example the deadlock of the task <i>B</i> is caused by a premature resetting the event
<i>A</i>. An 
atomic signaling and waiting breaks the deadlock.</p>
<p>The package is generic</p>
<blockquote>
	<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type </font>Event_Type<font color="#0000FF"> is</font> (&lt;&gt;);<font color="#0000FF"><br>
	package </font>Synchronization.Generic_Events_Array<font color="#0000FF"> is</font> ...</tt></p>
</blockquote>
<p>The formal parameter is the index type of the events array. The package 
defines the following supplementary types: </p>
<blockquote>
	<p><tt><font color="#0000FF">type </font>Events_State<font color="#0000FF"> 
	is array </font>(Event_Type)<font color="#0000FF"> of</font> Boolean;</tt></p>
</blockquote>
<p>Objects of this type describe the state of an events array. For each event 
Event_State contains <font color="#800000"><i>true</i></font> if the event is 
signaled. The following set-theoretic operations are defined additionally to the 
standard operations of Boolean arrays in order to ease composition of arrays:</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> &quot;<font color="#FF0000">or</font>&quot; 
	(<b>Left</b>, <b>Right</b> : Event_Type) <font color="#0000FF">return</font> 
	Events_State;<br>
	<font color="#0000FF">function</font> &quot;<font color="#FF0000">or</font>&quot; (<b>Left</b> 
	: Events_State; <b>Right</b> : Event_Type) <font color="#0000FF">&nbsp; 
	return</font> Events_State;<br>
	<font color="#0000FF">function</font> &quot;<font color="#FF0000">or</font>&quot; (<b>Left</b> 
	: Event_Type; <b>&nbsp; Right</b> : Events_State) <font color="#0000FF">
	return</font> Events_State;</tt></p>
</blockquote>
<p>These functions compose a set when one parameter specifies an event.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> &quot;<font color="#FF0000">not</font>&quot; 
	(<b>Left</b> : Event_Type) <font color="#0000FF">return</font> Events_State;</tt></p>
</blockquote>
<p>This function creates a complement set of a singleton event.</p>
<blockquote>
	<p><tt><font color="#0000FF">type </font>Abstract_Condition<font color="#0000FF"> 
	is abstract<br>
&nbsp;&nbsp; new </font>Ada.Finalization.Controlled<font color="#0000FF"> with 
	null record</font>;</tt></p>
</blockquote>
<p>This type represents an abstract condition to wait for. The entries of the 
events array awaits for instances of the types derived from this base type. The 
derived type shall override the abstract primitive operation Satisfied. 
User-defined conditions can be created by deriving from this type.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Satisfied<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Condition</b> : 
	Abstract_Condition;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>State</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Events_State<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return </font>Boolean<font color="#0000FF"> is abstract</font>;</tt></p>
</blockquote>
<p>This function is used to check if the condition is satisfied. The parameter
<b>State</b> is the current state of the events array. Note that the function is 
called in the course of a protected action. That means, that it shall neither 
block, nor invoke any other protected actions. Further if it accesses shared 
non-local data, the user shall warranty that these data are either atomic or 
else are never accessed outside the protected actions of Events_Array.</p>
<p>The package provides some frequently used conditions:</p>
<blockquote>
	<p><tt>Always_Signaled : <font color="#0000FF">constant</font> 
	Abstract_Condition'Class;<br>
	<a name="Synchronization.Generic_Events_Array.All_Signaled"></a>All_Signaled&nbsp;&nbsp;&nbsp; : <font color="#0000FF">constant</font> 
	Abstract_Condition'Class;<br>
	Any_Signaled&nbsp;&nbsp;&nbsp; : <font color="#0000FF">constant</font>
	Abstract_Condition'Class;<br>
	No_Signaled&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">constant</font> 
	Abstract_Condition'Class;</tt></p>
</blockquote>
<p>The conditions:</p>
<ul>
	<li><i>Always_Signaled</i> is always satisfied,</li>
	<li><i>All_Singaled</i> 
is satisfied when all events are signaled;</li>
	<li><i>Any_Signaled</i> is satisfied when at 
least one event is signaled;</li>
	<li><i>No_Signaled</i> is satisfied when no events signaled.</li>
</ul>
<p>Further conditions are specified using the type Event_Signaled derived from 
Abstract_Condition.</p>
<blockquote>
	<p><tt><font color="#0000FF">type</font> Event_Signaled (Event : Event_Type)
	<font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> Abstract_Condition <font color="#0000FF">with null 
	record</font>;</tt></p>
</blockquote>
<p>The type represents a condition that the event corresponding to the value of 
the discriminant <b>Event</b> is signaled. Instances of this type can be created 
using the following function.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Signaled (<b>Event</b> : 
	Event_Type) <font color="#0000FF">return</font> Event_Signaled;</tt></p>
</blockquote>
<p>This function returns a condition satisfied when <b>Event</b> is 
signaled.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Reset (<b>Event</b> : 
	Event_Type) <font color="#0000FF">return</font> Event_Reset;</tt></p>
</blockquote>
<p>This function returns a condition satisfied when <b>Event</b> is not 
signaled.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Synchronization.Generic_Events_Array.Events_Array"></a>protected 
	type </font>Events_Array <font color="#0000FF">is</font> ...</tt></p>
</blockquote>
<p>Protected objects of this type represent arrays of events. Initially all 
events in the array are non-signaled. The following operations and entry points 
are defined for <a href="#Synchronization.Generic_Events_Array.Events_Array">
Events_Array</a>:</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_State <font color="#0000FF">
	return</font> Events_State;</tt></p>
</blockquote>
<p>This function returns the state of the array. The result is an array which 
for each event contains <i><font color="#800000">true</font></i> if the event is 
signaled.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Is_Signaled (<b>Event</b> : 
	Event_Type)<font color="#0000FF"> return</font> Events_State;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Event</b> 
is signaled.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Synchronization.Generic_Events_Array.Reset"></a>entry</font> Reset<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Events</b>&nbsp;&nbsp;&nbsp; : 
	Events_State;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Condition</b> : 
	Abstract_Condition'Class := Always_Signaled<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
	<font color="#0000FF">entry</font> Reset<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Event</b>&nbsp;&nbsp;&nbsp;&nbsp; : 
	Event_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Condition</b> : 
	Abstract_Condition'Class := Always_Signaled<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These entries reset an event or a number of events to the non-signaled 
state. When the first parameter specifies an event, then the event is set to the 
non-signaled state. When the parameter is an array, then each event for which 
the array contains <i><font color="#800000">true</font></i> is reset to the 
non-signaled state. The parameter <b>Condition</b> is the condition to wait for 
immediately after resetting the events. The default value is Always_Signaled, 
i.e. <a href="#Synchronization.Generic_Events_Array.Reset">Reset</a> returns 
after changing the events without waiting. Entering waiting, if any, is 
indivisible from resetting the events.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Synchronization.Generic_Events_Array.Signal"></a>entry</font> 
	Signal<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Events</b>&nbsp;&nbsp;&nbsp; : 
	Events_State;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Condition</b> : 
	Abstract_Condition'Class := Always_Signaled<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
	<font color="#0000FF">entry</font> Signal<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Event</b>&nbsp;&nbsp;&nbsp;&nbsp; : 
	Event_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Condition</b> : 
	Abstract_Condition'Class := Always_Signaled<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These entries signal an event or a number of events. When the first parameter 
is an event, then the event is signaled. When the parameter is an array, then 
each event for which the array contains <i><font color="#800000">true</font></i> 
is signaled. The parameter <b>Condition</b> is the condition to wait for 
immediately after signaled the events. The default value is Always_Signaled, 
i.e. <a href="#Synchronization.Generic_Events_Array.Signal">Signal</a> returns 
after changing the events without waiting. Entering waiting, if any, is 
indivisible from signaling the events.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Synchronization.Generic_Events_Array.Set"></a>entry</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>State</b>&nbsp;&nbsp;&nbsp;&nbsp; : 
	Events_State;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Condition</b> : 
	Abstract_Condition'Class := Always_Signaled<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This entry sets all events according to the value of <b>State</b>. The parameter 
<b>Condition</b> specifies the condition to wait for, immediately after setting the events. The default value is Always_Signaled, i.e. 
<a href="#Synchronization.Generic_Events_Array.Set">Set</a> returns after changing the events without waiting. 
Entering waiting, if any, is indivisible from setting the events.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	entry</font> Wait (<b>Condition</b> : 
	Abstract_Condition'Class);</tt></p>
</blockquote>
<p>This entries waits for <b>Condition</b>. See also <a href="#Synchronization.Generic_Events_Array.Signal">Signal</a>, <a href="#Synchronization.Generic_Events_Array.Reset">Reset</a> 
and 
<a href="#Synchronization.Generic_Events_Array.Set">Set</a> entries which also 
are capable of waiting for a certain condition.</p>
<H4><a name="11.2.5"></a>11.2.5. Synchronization at a checkpoint. Sample</H4>
<p><a name="Checkpoint_synchronization"></a>The following example illustrates use of the package 
for checkpoint synchronization problem: The problem arise when several tasks perform some jobs and need to be synchronized when all jobs 
are completed. A job completion is signaled by an event. A task completing its 
job signals the 
event, waits for other events signaled and then resets the event. This procedure 
is exposed to race conditions and deadlocks.</p>File <i>
test_synchronization_events_array.ads</i>:<TABLE border="1" cellpadding="15" cellspacing="0"><TR>
<TD bgcolor="#FFDEBD"><tt><font color="#0000FF">with</font> 
Synchronization.Generic_Events_Array;<br>
<br>
<font color="#0000FF">package</font> Test_Synchronization_Events_Array<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; type </font>Worker_ID <font color="#0000FF">is</font> (A, B, C);<br>
&nbsp;&nbsp; <font color="#0000FF">package</font> Events_Arrays
<font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;</font>Synchronization.Generic_Events_Array&nbsp;(Worker_ID);<br>
<font color="#0000FF">end</font> Test_Synchronization_Events_Array;</tt></TD>
  </TR>
</TABLE>
<p>This package instantiates
<a href="#Synchronization.Generic_Events_Array">
Synchronization.Generic_Events_Array</a>, which is necessary to do at the 
library level in Ada 95. In Ada 2005 it can be instantiated in nested scopes.</p>File 
<i>test_synchronization_events.adb</i> (<i>part of</i>)
:<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; ...<br>
<font color="#0000FF">with</font>&nbsp;Ada.Numerics.Float_Random;&nbsp;&nbsp;<font color="#0000FF">use</font>&nbsp;Ada.Numerics.Float_Random;<br>
<font color="#0000FF">with</font> Ada.Text_IO;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Ada.Text_IO;<br>
<br>
<font color="#0000FF">with</font> Test_Synchronization_Events_Array;<br>
<font color="#0000FF">use</font>&nbsp; Test_Synchronization_Events_Array;<br>
<font color="#0000FF">use</font>&nbsp; Events_Arrays;<br>
&nbsp;&nbsp; ...<br>
Worker_State : Events_Array;<br>
<br>
<font color="#0000FF">task type </font>Worker (ID : Worker_ID);<br>
<font color="#0000FF">task body</font> Worker <font color="#0000FF">is</font><br>
&nbsp;&nbsp; Dice : Generator;<br>
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp; Reset (Dice);<br>
&nbsp;&nbsp; <font color="#0000FF">for</font> Index <font color="#0000FF">in</font>
<font color="#800000">1</font>..<font color="#800000">10</font>
<font color="#0000FF">loop</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put_Line<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Worker_ID'Image (ID)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&nbsp; &quot;<font color="#FF0000"> doing things</font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&nbsp; Integer'Image (Index)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">delay</font> Duration 
(Random (Dice) * <font color="#800000">0.100</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Worker_State.Signal (ID, All_Signaled);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Worker_State.Reset (ID);<br>
&nbsp;&nbsp; <font color="#0000FF">end loop</font>;<br>
&nbsp;&nbsp; Put_Line (Worker_ID'Image (ID) &amp; &quot;<font color="#FF0000"> finished</font>&quot;);<br>
<font color="#0000FF">end</font> Worker;<br>
<br>
T1 : Worker (A);<br>
T2 : Worker (B);<br>
T3 : Worker (C);</tt></TD>
  </TR>
</TABLE>
<p>Here three tasks perform some piece of work. The work is simulated by waiting 
for a random period of time. At the end of each cycle a worker sets its event in 
the array of the events Worker_State. Then it waits for other workers. This 
action is 
performed atomically by:</p>
<blockquote>
	<p><tt>Worker_State.Signal (ID, All_Signaled);</tt></p>
</blockquote>
<p>Here ID is the worker/event identifier and 
<a href="#Synchronization.Generic_Events_Array.All_Signaled">All_Signaled</a> is a condition 
satisfied when all events are set. After this the worker resets its event</p>
<blockquote>
	<p><tt>Worker_State.Reset (ID);</tt></p>
</blockquote>
<p>and 
starts a new iteration of the cycle.</p>
<p align="right">
  <A name="11.3"></A><a href="#11.2"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#12"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>11.3. Mutexes</H3>
<p><a name="Mutexes"></a><i>Mutex</i> stands for <b>Mut</b>ual <b>Ex</b>clusion. 
It is a synchronization object used to prevent concurrent access to a resource. 
A more general but rarely used in practice concept is <i>semaphore</i> introduced by Edsger Dijkstra. 
Technically mutex is a semaphore with the count <i>k</i>=1. The count 1 means 
that only one task can own the mutex at a time. Mutexes are exposed to deadlocks 
when a task attempts to seize more than one mutex. It is enough to have two tasks and two 
mutexes in order to be able to construct a deadlock. Yet another problem is 
resource starvation caused by a 
premature termination of a task owning the mutex, for example, upon exception 
propagation.</p>
<H4><a name="11.3.1"></a>11.3.1. Reentrant mutex</H4>
<p><a name="Synchronization.Mutexes"></a>The package
<a href="#Synchronization.Mutexes">Synchronization.Mutexes</a> provides an 
implementation of mutexes, free of one particular problem, when a mutex 
is repetitively seized by the same task. The implementation avoids deadlock by 
allowing a task to seize the mutex more than once.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Synchronization.Mutexes.Mutex"></a>protected 
	type </font>Mutex <font color="#0000FF">is</font> ...</tt></p>
</blockquote>
<p>Protected objects of this type represent mutexes. The following operations and entry points 
are defined for <a href="#Synchronization.Mutexes.Mutex">Mutex</a>:</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Owner <font color="#0000FF">
	return</font> Task_ID;</tt></p>
</blockquote>
<p>This function returns the identification of the task owning the mutex. See 
the standard package Ada.Task_Identification for further information.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Synchronization.Mutexes.Grab"></a>
	procedure</font> Grab;</tt></p>
</blockquote>
<p>This procedure seizes the mutex if it is not owned by another task. <a href="#Synchronization.Mutexes.Is_Mine">Is_Mine</a> can be used afterwards in order to verify if the mutex 
was indeed seized. When the mutex was seized it shall be released by a 
call to <a href="#Synchronization.Mutexes.Release">Release</a>. For example:</p>
<blockquote>
	<p><tt>&nbsp;&nbsp; Resource : Mutex; <font color="#008000">&nbsp;&nbsp; -- A resource<br>
&nbsp;&nbsp; </font>...<br>
	<font color="#0000FF">begin<br>
	</font>&nbsp;&nbsp; ...<br>&nbsp;&nbsp; Resource.Grab; <font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- Try to seize it without 
		blocking</font><br><font color="#0000FF">&nbsp;&nbsp; if</font> Resource.Is_Mine 
	<font color="#0000FF">then</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...
	<font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
		-- Use the resource safely</font><br>&nbsp;&nbsp;
&nbsp;&nbsp; Resource.Release; <font color="#008000">-- Note, it has to be 
		released</font><br><font color="#0000FF">&nbsp;&nbsp; end if</font>;</tt></p>
</blockquote>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Synchronization.Mutexes.Is_Mine"></a>
	function</font> Is_Mine <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if the mutex is 
owned by the caller task.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Is_Owned <font color="#0000FF">
	return</font> Boolean;</tt></p>
</blockquote>
<p>This function return <i><font color="#800000">true</font></i> if the mutex is 
owned by a task.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Synchronization.Mutexes.Release"></a>
	procedure</font> Release;</tt></p>
</blockquote>
<p>This procedure releases the mutex previously seized by
<a href="#Synchronization.Mutexes.Grab">Grab</a> or 
<a href="#Synchronization.Mutexes.Seize">Seize</a>. Note that each call 
to <a href="#Synchronization.Mutexes.Seize">Seize</a> and each call to 
<a href="#Synchronization.Mutexes.Grab">Grab</a> that seized the mutex shall be matched by a call 
to <a href="#Synchronization.Mutexes.Release">Release</a>. Ownership_Error is 
propagated when the mutex is not owned by the caller task.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Synchronization.Mutexes.Seize"></a>
	entry</font> Seize;</tt></p>
</blockquote>
<p>This entry is used to seize the mutex. It blocks until the mutex becomes 
free. It does not block if the mutex is already owned by the caller task. Each call 
to <a href="#Synchronization.Mutexes.Seize">Seize</a> shall be matched by a call 
to <a href="#Synchronization.Mutexes.Release">Release</a>.</p>
<p>The package also defines:</p>
<blockquote>
	<p><tt><font color="#0000FF">type</font> Holder (Resource :
	<font color="#0000FF">access</font> Mutex) <font color="#0000FF">is<br>
&nbsp;&nbsp; new </font>Ada.Finalization.Limited_Controlled
	<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>This is a helper type used to ensure that each
<a href="#Synchronization.Mutexes.Seize">Seize</a> is matched by a <a href="#Synchronization.Mutexes.Release">Release</a> 
even if an exception is propagated. It is used as follows:</p>
<blockquote>
	<p><tt>&nbsp;&nbsp; Resource : <font color="#0000FF">aliased</font> Mutex; 
	<font color="#008000">-- A resource<br>
&nbsp;&nbsp; </font>...<br>
	<font color="#0000FF">begin<br>
	</font>&nbsp;&nbsp; ...<br>
&nbsp;&nbsp; <font color="#0000FF">declare</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	Lock : Holder (Resource'Access);<font color="#008000"> -- Seize the resource</font><br>
	<font color="#0000FF">&nbsp;&nbsp; begin</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<font color="#008000">&nbsp; -- 
	Enjoy exclusive access</font><br><font color="#0000FF">&nbsp;&nbsp; end</font>;&nbsp;
	<font color="#008000">&nbsp; -- Release the resource</font></tt></p>
</blockquote>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD>
<i>It is strongly recommended to use a Holder object in order to access a mutex 
even if that might cause some overhead. The reason is that asynchronous 
transfer of control (Language Reference Manual </i><a href="http://www.adaic.com/standards/05rm/html/RM-9-7-4.html">9.7.4</a>)<i>) 
from a task owning a mutex might leave the mutex seized. A Holder object 
warranties mutex release. In general one should 
avoid asynchronous transfer of control.</i></TD>
  </TR>
</TABLE>
<H4><a name="11.3.2"></a>11.3.2. Arrays of mutexes</H4>
<p><a name="Synchronization.Generic_Mutexes_Array"></a>The package
<a href="#Synchronization.Generic_Mutexes_Array">Synchronization.Generic_Mutexes_Array</a> provides an 
implementation of arrays of mutexes. Arrays of mutexes are deadlock free. The 
deadlock is prevented by numerous measures:</p>
<ul>
	<li>Multiple mutexes are seized atomically. When a task knows in advance the 
	mutexes it needs, it can greedily seize all of them. This operation is 
	atomic which prevent deadlock. Note that greedy seizing mutexes may under 
	certain conditions result in an uneven use of resources;</li>
	<li>Mutexes are ordered and the order is enforced upon seizing. If a task 
	tries to seize a mutex it does not own, when it already owns another mutex with a greater position 
	number, the exception Ownership_Error is propagated. This behavior is 
	independent on whether the offending mutex is actually free to seize;</li>
	<li>Mutexes can be seized when already owned by the task.</li>
</ul>
<p>The package is generic:</p>
<blockquote>
	<p><tt><font color="#0000FF">
	generic<br>
&nbsp;&nbsp; type </font>Mutex_Type<font color="#0000FF">
	is</font> (&lt;&gt;);<font color="#0000FF"><br>
	package </font>Synchronization.Generic_Mutexes_Array<font color="#0000FF">
	is</font> ...</tt></p>
</blockquote>
<p>The formal parameter is the index type of the mutexes array. The package 
defines the following supplementary types:</p>
<blockquote>
	<p><tt><font color="#0000FF">type </font>Mutexes_Set<font color="#0000FF"> 
	is array </font>(Mutex_Type)<font color="#0000FF"> of</font> Boolean;</tt></p>
</blockquote>
<p>This is a set of mutexes. For each mutex event <tt>Mutexes_Set </tt>contains <font color="#800000"><i>true</i></font> if the 
mutex is in the set. The following set-theoretic operations are defined 
additionally to the standard operations of Boolean arrays in order to ease 
composition of arrays:</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> &quot;<font color="#FF0000">or</font>&quot; 
	(<b>Left</b>, <b>Right</b> : Mutex_Type) <font color="#0000FF">return</font> 
	Mutexes_Set;<br>
	<font color="#0000FF">function</font> &quot;<font color="#FF0000">or</font>&quot; (<b>Left</b> 
	: Mutexes_Set; <b>Right</b> : Mutex_Type)
	<font color="#0000FF">&nbsp; return</font> Mutexes_Set;<br>
	<font color="#0000FF">function</font> &quot;<font color="#FF0000">or</font>&quot; (<b>Left</b> 
	: Mutex_Type;<b>&nbsp; Right</b> : Mutexes_Set) <font color="#0000FF">
	return</font> Mutexes_Set;</tt></p>
</blockquote>
<p>These functions compose a set when one parameter specifies an event.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> &quot;<font color="#FF0000">not</font>&quot; 
	(<b>Left</b> : Mutex_Type) <font color="#0000FF">return</font> Mutexes_Set;</tt></p>
</blockquote>
<p>This function creates a complement set of a singleton event.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Synchronization.Generic_Mutexes_Array.Mutexes_Array"></a>protected 
	type </font>Mutexes_Array<font color="#0000FF">
	is</font> ...</tt></p>
</blockquote>
<p>Protected objects of this type represent arrays of mutexes. The following operations and entry points 
are defined for <a href="#Synchronization.Generic_Mutexes_Array.Mutexes_Array">
Mutexes_Array</a>:</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Owner (<b>Mutex</b> : 
	Mutex_Type) <font color="#0000FF">return</font> Task_ID;</tt></p>
</blockquote>
<p>This function returns the identification of the task owning <b>Mutex</b>. See 
the standard package Ada.Task_Identification for further information.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Synchronization.Generic_Mutexes_Array.Grab"></a>procedure</font> 
	Grab (<b>Mutex</b> : Mutex_Type);<br>
	<font color="#0000FF">procedure</font> Grab (<b>Mutex</b> : Mutex_Type; <b>
	Success</b> : <font color="#0000FF">out</font> Boolean);</tt></p>
</blockquote>
<p>This procedures seize <b>Mutex</b> if it is not already owned by another 
task. <a href="#Synchronization.Generic_Mutexes_Array.Is_Mine">Is_Mine</a> can be used after
<a href="#Synchronization.Generic_Mutexes_Array.Grab">Grab</a> in order to verify if the mutex 
was indeed seized. When the mutex was seized is shall be released later by a 
call to <a href="#Synchronization.Generic_Mutexes_Array.Release">Release</a> or
<a href="#Synchronization.Generic_Mutexes_Array.Release_All">Release_All</a> 
with the same mutex specified. For example:</p>
<blockquote>
	<p><tt>&nbsp;&nbsp; Resource : Mutexes_Array; <font color="#008000">-- Resources<br>
&nbsp;&nbsp; </font>...<br>
	<font color="#0000FF">begin<br>
	</font>&nbsp;&nbsp; ...<br>&nbsp;&nbsp; Resource.Grab (Mutex); <font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- Try to seize it without 
		blocking</font><br><font color="#0000FF">&nbsp;&nbsp; if</font> Resource.Is_Mine 
	(Mutex) 
	<font color="#0000FF">then</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...
	<font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- Use the resource safely</font><br>&nbsp;&nbsp;
&nbsp;&nbsp; Resource.Release (Mutex); <font color="#008000">-- Note, it has to be 
		released</font><br><font color="#0000FF">&nbsp;&nbsp; end if</font>;</tt></p>
</blockquote>
<p>The variant with the output parameter <b>Success</b> sets the parameter to <i>
<font color="#800000">true</font></i> if the mutex was seized or to <i>
<font color="#800000">false</font></i> otherwise. When <b>Mutex</b> is to be 
seized and has the position less than one of a mutex already owned by the caller 
task, Ownership_Error is propagated.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Synchronization.Generic_Mutexes_Array.Grab_All"></a>procedure</font> 
	Grab_All (<b>Mutexes</b> : 
	Mutexes_Set; <b>Success</b> : <font color="#0000FF">out</font> Boolean);</tt></p>
</blockquote>
<p>This procedures seizes all <b>Mutexes</b>. If at least one mutex from <b>Mutexes
</b>is not already owned by another task the procedure does nothing and <b>
Success</b> is set to <font color="#800000"><i>false</i></font>. When mutexes 
are seized <b>Success</b> is set to <font color="#800000"><i>true</i></font>. 
Each mutex seized by 
<a href="#Synchronization.Generic_Mutexes_Array.Grab_All">Grab_All</a> 
has to be released by a matching call to <a href="#Synchronization.Generic_Mutexes_Array.Release">Release</a> 
or
<a href="#Synchronization.Generic_Mutexes_Array.Release_All">Release_All</a>. When <b>Mutexes</b> contains a mutex to be seized such that its position less 
than one of a mutex already owned by the caller task, yet not appearing in <b>
Mutexes</b>, then Ownership_Error is propagated.&nbsp; In this case the 
operation has no side effect on the mutexes array.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Synchronization.Generic_Mutexes_Array.Is_Mine"></a>function</font> Is_Mine 
	(<b>Mutex</b>&nbsp;&nbsp; : Mutex_Type) <font color="#0000FF">&nbsp;return</font> Boolean;<br>
	<font color="#0000FF">function</font> Is_Mine (<b>Mutexes</b> : Mutexes_Set) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Mutex</b> is 
owned by the caller. The variant with a set returns <i><font color="#800000">
true</font></i> if all mutexes from the set are owned by the caller.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Is_Owned (<b>Mutex</b> : Mutex_Type) <font color="#0000FF">
	return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Mutex</b> is 
owned by a task.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Synchronization.Generic_Mutexes_Array.Release"></a>
	procedure</font> Release (<b>Mutex</b> : Mutex_Type);</tt></p>
</blockquote>
<p>This procedure releases <b>Mutex</b> previously seized by
<a href="#Synchronization.Generic_Mutexes_Array.Grab">Grab</a>, 
<a href="#Synchronization.Generic_Mutexes_Array.Grab_All">Grab_All</a>, 
<a href="#Synchronization.Generic_Mutexes_Array.Seize">Seize</a> or 
<a href="#Synchronization.Generic_Mutexes_Array.Seize_All">Seize_All</a>. For 
each mutex the number of seizures shall match the number of releasing. Ownership_Error is 
propagated when <b>Mutex</b> is not owned by the caller.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Synchronization.Generic_Mutexes_Array.Release_All"></a>
	procedure</font> Release_All (<b>Mutexes</b> : Mutexes_Set);</tt></p>
</blockquote>
<p>This procedure releases all mutexes from <b>Mutexes</b> previously seized by
<a href="#Synchronization.Generic_Mutexes_Array.Grab">Grab</a>, 
<a href="#Synchronization.Generic_Mutexes_Array.Grab_All">Grab_All</a>, 
<a href="#Synchronization.Generic_Mutexes_Array.Seize">Seize</a> or 
<a href="#Synchronization.Generic_Mutexes_Array.Seize_All">Seize_All</a>. For 
each mutex the number of seizures shall match the number of releasing. Ownership_Error is 
propagated when at least one mutex is not owned by the caller. The procedure 
might release some of the mutexes before propagating the exception.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Synchronization.Generic_Mutexes_Array.Seize"></a>
	entry</font> Seize (<b>Mutex</b> : Mutex_Type);</tt></p>
</blockquote>
<p>This entry is used to seize <b>Mutex</b>. It blocks until the mutex becomes 
free. It does not block if the mutex is already owned by the caller. Each call 
to <a href="#Synchronization.Generic_Mutexes_Array.Seize">Seize</a> shall be matched by a call 
to <a href="#Synchronization.Generic_Mutexes_Array.Release">Release</a> or
<a href="#Synchronization.Generic_Mutexes_Array.Release_All">Release_All</a> 
with the same mutex specified. When <b>Mutex</b> has the position less than one of a mutex already owned by the caller 
task, Ownership_Error is propagated.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Synchronization.Generic_Mutexes_Array.Seize_All"></a>
	entry</font> Seize_All (<b>Mutexes</b> : Mutexes_Set);</tt></p>
</blockquote>
<p>This entry is used to seize all mutexes from <b>Mutex</b>. It blocks until the mutexes become 
available. It does not block if all mutexes are already owned by the caller. For 
each mutex specified in a call 
to <a href="#Synchronization.Generic_Mutexes_Array.Seize_All">Seize_All</a> 
there shall be a matching call&nbsp; 
to <a href="#Synchronization.Generic_Mutexes_Array.Release">Release</a> or
<a href="#Synchronization.Generic_Mutexes_Array.Release_All">Release_All</a>. When <b>Mutexes</b> contains a mutex with the position less 
than one of a mutex already owned by the caller task, yet not appearing in <b>
Mutexes</b>, then Ownership_Error is propagated. In this case the operation has 
no side effect on the mutexes array.</p>
<p>The package also defines two helper types:</p>
<blockquote>
	<p><tt><font color="#0000FF">type</font> Set_Holder<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Resource</b> : <font color="#0000FF">access</font> 
	Mutexes_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Seize</b>&nbsp;&nbsp;&nbsp; :
	<font color="#0000FF">access</font> Mutexes_Set<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is new </font>Ada.Finalization.Limited_Controlled
	<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>This is a helper type used to ensure that each
<a href="#Synchronization.Generic_Mutexes_Array.Seize_All">Seize_All</a> is matched by a 
<a href="#Synchronization.Generic_Mutexes_Array.Release_All">Release_All</a> 
even if an exception is propagated. It is used as follows:</p>
<blockquote>
	<p><tt>&nbsp;&nbsp; Resources : <font color="#0000FF">aliased</font> Mutexes_Array; 
	<font color="#008000">-- Resources<br>
&nbsp;&nbsp; </font>...<br>
	<font color="#0000FF">begin<br>
	</font>&nbsp;&nbsp; ...<br>
&nbsp;&nbsp; <font color="#0000FF">declare<br>
	</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Mutexes : <font color="#0000FF">
	aliased</font> Mutexes_Set := ...; <font color="#008000">-- The resources we 
	need here</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	Lock&nbsp;&nbsp;&nbsp; : Set_Holder (Resource'Access, Mutexes'Access);<font color="#008000"> -- Seize 
	them<br>
	</font>
	<font color="#0000FF">&nbsp;&nbsp; begin</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<font color="#008000">&nbsp; -- 
	Enjoy exclusive access</font><br><font color="#0000FF">&nbsp;&nbsp; end</font>;&nbsp;
	<font color="#008000">&nbsp; -- Release the resources</font></tt></p>
</blockquote>
<blockquote>
	<p><tt><font color="#0000FF">type</font> Singleton_Holder<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Resource</b> : <font color="#0000FF">access</font> 
	Mutexes_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Seize</b>&nbsp;&nbsp;&nbsp; : 
	Mutex_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is new </font>Ada.Finalization.Limited_Controlled
	<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>This is a helper type used to ensure that each
<a href="#Synchronization.Generic_Mutexes_Array.Seize">Seize</a> is matched by a <a href="#Synchronization.Generic_Mutexes_Array.Release">Release</a>  
even if an exception is propagated. It is used as follows:</p>
<blockquote>
	<p><tt>&nbsp;&nbsp; Resources : <font color="#0000FF">aliased</font> Mutexes_Array; 
	<font color="#008000">-- Resources<br>
&nbsp;&nbsp; </font>...<br>
	<font color="#0000FF">begin<br>
	</font>&nbsp;&nbsp; ...<br>
&nbsp;&nbsp; <font color="#0000FF">declare<br>
	</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	Lock : Singleton_Holder (Resource'Access, Mutex);<font color="#008000"> -- Seize 
	Mutex<br>
	</font>
	<font color="#0000FF">&nbsp;&nbsp; begin</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<font color="#008000">&nbsp; -- 
	Enjoy exclusive access</font><br><font color="#0000FF">&nbsp;&nbsp; end</font>;&nbsp;
	<font color="#008000">&nbsp; -- Release the resources</font></tt></p>
</blockquote>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD>
<i>It is strongly recommended to use a Holder object in order to access a mutex 
even if that might cause some overhead. The reason is that asynchronous 
transfer of control (Language Reference Manual </i><a href="http://www.adaic.com/standards/05rm/html/RM-9-7-4.html">9.7.4</a>)<i>) 
from a task owning a mutex might leave the mutex seized. A Holder object 
warranties mutex release. In general one should 
avoid asynchronous transfer of control.</i></TD>
  </TR>
</TABLE>
<H4><a name="11.3.3"></a>11.3.3. Dining philosophers sample</H4>
<p><a name="Dining_philosophers"></a>The following example illustrates use of mutexes array. It represents a 
solution of the <i>Dining Philosophers</i> problem. The problem is exposed when 
P<sub><i>i</i></sub> processes are competing for R<i><sub>i </sub></i>resources,
<i>i</i>=1..<i>N</i>, accessing more than one resource at a time. Philosophers 
are tasks. Each philosopher spends some random time thinking. Then he enters 
the dining room and takes his seat at the round table. In order to start to eat 
he seizes two forks, one on the left and another on the right of him. A 
philosopher waits for forks to become free if other philosophers use them. He 
puts both forks down and leaves the room when finished. The cycle repeats so 
long the philosopher lives. A deadlock occurs when, all philosophers seize a 
fork on their left. When the cutlery is implemented as an array of mutexes, 
where each fork is a mutex, no deadlock is possible, which solves the problem:</p>
<p>File <i>test_dining_philosophers_forks.ads</i>:
<TABLE border="1" cellpadding="15" cellspacing="0"><TR>
<TD bgcolor="#FFDEBD"><tt><font color="#0000FF">with</font> 
Synchronization.Generic_Mutexes_Array;<br>
<br>
<font color="#0000FF">package</font> Test_Dining_Philosophers_Forks
<font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;type&nbsp;</font>Philosopher&nbsp;<font color="#0000FF">is</font>&nbsp;(Aristotle,&nbsp;Kant,&nbsp;Spinoza,&nbsp;Marx,&nbsp;Russel);<br>
<font color="#0000FF">&nbsp;&nbsp;
package</font> Forks <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new</font> Synchronization.Generic_Mutexes_Array (Philosopher);<br>
<font color="#0000FF">end</font> Test_Dining_Philosophers_Forks;</tt></TD>
  </TR>
</TABLE>
<p>This package instantiates
<a href="#Synchronization.Generic_Mutexes_Array">Synchronization.Generic_Mutexes_Array</a>, which is necessary to do at the 
library level in Ada 95. In Ada 2005 it can be instantiated in nested scopes. 
The type Philosopher identifies the philosophers as well as the the fork on the 
right of the corresponding philosopher's seat.</p>File 
<i>test_dining_philosophers.adb</i>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">with</font> Ada.Exceptions;
<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; use</font> Ada.Exceptions;<br>
<font color="#0000FF">with</font> Ada.Numerics.Float_Random;
<font color="#0000FF">&nbsp;use</font> Ada.Numerics.Float_Random;<br>
<font color="#0000FF">with</font> Ada.Text_IO; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; use</font> Ada.Text_IO;<br>
<br>
<font color="#0000FF">with</font> Test_Dining_Philosophers_Forks;<br>
<font color="#0000FF">use</font>&nbsp; Test_Dining_Philosophers_Forks;<br>
<br>
<font color="#0000FF">procedure</font> Test_Dining_Philosophers
<font color="#0000FF">is<br>
&nbsp;&nbsp;
use </font>Test_Dining_Philosophers_Forks.Forks;<br>
<br>
&nbsp;&nbsp;&nbsp;Forks&nbsp;:&nbsp;<font color="#0000FF">aliased</font>&nbsp;Mutexes_Array;<font color="#008000">&nbsp;--&nbsp;Forks&nbsp;for&nbsp;hungry&nbsp;philosophers</font><br>
<font color="#008000">&nbsp;&nbsp;
--<br>
&nbsp;&nbsp;
-- Left_Of -- The fork left to the given one<br>
&nbsp;&nbsp;
--<br>
</font>&nbsp;&nbsp; <font color="#0000FF">function</font> Left_Of (Fork : Philosopher) 
<font color="#0000FF">return</font> Philosopher <font color="#0000FF">is<br>
&nbsp;&nbsp;
begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if </font>Fork = Philosopher'First <font color="#0000FF">then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return</font> Philosopher'Last;<br>
&nbsp;<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;
else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return </font>Philosopher'Pred (Fork);<br>
&nbsp;&nbsp;&nbsp; <font color="#0000FF">&nbsp;
end if</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Left_Of;<br>
<font color="#008000">&nbsp;&nbsp;
--<br>
&nbsp;&nbsp;
-- Person -- A task running some philosopher<br>
&nbsp;&nbsp;
--<br>
&nbsp;&nbsp;
-- ID - The philosopher ID<br>
&nbsp;&nbsp;
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">task type</font> Person (ID : Philosopher);<br>
&nbsp;&nbsp; <font color="#0000FF">task body</font> Person <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Cutlery : <font color="#0000FF">aliased</font> Mutexes_Set := ID 
<font color="#0000FF">or</font> Left_Of (ID);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Dice&nbsp;&nbsp;&nbsp; : Generator;<br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Reset (Dice);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">for</font> Life_Cycle
<font color="#0000FF">in</font> <font color="#800000">1</font>..<font color="#800000">50</font>
<font color="#0000FF">loop</font><br>
&nbsp;<font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- In his life a philosopher eats 50 times<br>
</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Put_Line (Philosopher'Image (ID) &amp; &quot;<font color="#FF0000"> is thinking</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">delay</font> Duration (Random (Dice) * 0.100);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Put_Line (Philosopher'Image (ID) &amp; &quot;<font color="#FF0000"> is hungry</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">declare</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Lock : Set_Holder (Forks'Access, Cutlery'Access);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Put_Line (Philosopher'Image (ID) &amp; &quot;<font color="#FF0000"> is eating</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">delay</font> Duration (Random (Dice) *
<font color="#800000">0.100</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end loop</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Put_Line (Philosopher'Image (ID) &amp; &quot;<font color="#FF0000"> is leaving</font>&quot;);<br>
&nbsp;&nbsp; <font color="#0000FF">exception<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
when</font> Error: <font color="#0000FF">others</font> =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Put_Line<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Philosopher'Image (ID)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&amp;&nbsp; &quot; <font color="#FF0000">caused</font> &quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&amp;&nbsp; Exception_Information (Error)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Person;<br>
<br>
&nbsp;&nbsp;
T1 : Person (Aristotle); <font color="#008000">-- Start philosophers</font><br>
&nbsp;&nbsp;
T2 : Person (Kant);<br>
&nbsp;&nbsp;
T3 : Person (Spinoza);<br>
&nbsp;&nbsp;
T4 : Person (Marx);<br>
&nbsp;&nbsp;
T5 : Person (Russel);<br>
<font color="#0000FF">begin<br>
&nbsp;&nbsp;
null</font>; <font color="#008000">-- Nothing to do in the main task, just sit and behold</font><br>
<font color="#0000FF">end</font> Test_Dining_Philosophers;</tt></TD>
  </TR>
</TABLE>
<p>In this implementation a philosopher seizes his forks using
<a href="#Synchronization.Generic_Mutexes_Array.Seize_All">Seize_All</a>. 
Because this is an indivisible operation it cannot deadlock.</p>
<hr>
<p align="right">
  <A name="12"></A><a href="#11.3"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><A
      href="#12.1"><IMG src="next.gif" alt="[Next]" width="29" height="29"></A></p>
<H2>12. Parsers</H2>
<P><a name="Parsers_etc"></a>Parsers can be used for  syntax analysis of infix expressions,
i.e. ones containing infix 
(dyadic), prefix and postfix operators, brackets, function calls, array indices 
etc. The approach presented does not require any grammar put down to generate scanner and 
analyzer. Nor any code generation steps are required. An object-oriented 
approach is used instead. The lexical procedures are dispatching, so that  implementations may be provided through overriding them. Parsers can be used both for 
immediate one-pass code interpretation and for  parsing tree building. Parser 
automatically detects the expression end allowing its easy integration. Operator 
precedence is expressed in a native way by setting priorities controlling 
association with the operands. Associations with the left  and right side 
operands are controlled independently. Commutative operators and their inverses
can be optimized when necessary. Especial attention is paid to error handling 
allowing generating very precise error messages and source code references. Samples 
from a small console calculator to a complete parsing tree generator for Ada 95
expressions illustrate examples of use.</p>
<P>The parsing method used is an extended
variant of an algorithm of infix to postfix notation conversion. I do not know who was 
its author. Already in 1975 T. Pratt in <i>Programming Languages, design and 
implementation</i> mentioned it as well known. The algorithm makes possible parsing and
interpreting infix expressions in one pass without returns. The following figure 
drafts out the idea and its implementation.</P>
<img border="0" src="lexer.jpg" width="420" height="277" alt="parser"><p>
<u><b>Quick reference</b></u>:</p>
<ul>
<li><a href="#Parsers.Generic_Operation">Operations</a>, the data structures 
used to bind recognized operations with the operands;</li>
<li><a href="#Parsers.Generic_Argument">Arguments</a>, the operation operands;</li>
<li><a href="#Parsers.Generic_Source">Sources</a>, to access 
the source code and maintain scan cursors;</li>
<li><a href="#Parsers.Generic_Token">Tokens</a>, the lexical token 
tables, controlling table driven lexers;</li>
<li><a href="#Parsers.Generic_Lexer">Lexers</a>,  to scan the 
source and call lexical subprograms as source lexemes get recognized.</li>
</ul>
<p align="right">
  <A name="12.1"></A><A href="#12"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></A><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#12.2"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>12.1. Example first, a small calculator</H3>
<p><a name="console_calculator"></a>In this paragraph I present an implementation of 
a small primitive floating 
point calculator. The calculator supports operations <tt>+</tt>, <tt>-</tt>, <tt>
*</tt>, <tt>/</tt>, <tt>**</tt>, brackets <tt>()</tt> and unary operators <tt>+</tt>,
<tt>-</tt>, <tt>abs</tt>.</p>
File <i>calculator.ads</i>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#0000FF">with</font> 
  Parsers.String_Source; <font color="#0000FF">&nbsp;use</font> 
  Parsers.String_Source;<br>
<font color="#0000FF">with</font>   Parsers.Generic_Lexer.Blanks;<br>
<font color="#0000FF">with</font>   Parsers.Generic_Token.Segmented_Lexer;<br>
<font color="#0000FF">with</font>   Tables.Names;<br>
<br>
<font color="#0000FF">package</font> Calculator <font color="#0000FF">is</font><br>
<font color="#008000">--<br>
-- Calculate -- A primitive floating-point calculator<br>
--<br>
--&nbsp;&nbsp;&nbsp; Formula - To be evaluated<br>
--<br>
-- Returns :<br>
--<br>
--&nbsp;&nbsp;&nbsp; The result of Formula<br>
--<br>
-- Exceptions :<br>
--<br>
--&nbsp;&nbsp;&nbsp; Syntax_Error&nbsp; - Any syntax error<br>
--&nbsp;&nbsp;&nbsp; Numeric_Error - Any numeric error<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Calculate (Formula : String)
<font color="#0000FF">return</font> Float;<br>
<br>
<font color="#0000FF">private</font><br>
<font color="#008000">--<br>
-- Operations -- All the operations supported<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Operations <font color="#0000FF">
is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Add, Sub, Mul, Div, Pow,&nbsp;&nbsp;&nbsp;
<font color="#008000">-- Infix operators</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Abs_Value, Plus, 
Minus,&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">-- Prefix operators</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Left_Bracket, 
Right_Bracket <font color="#008000">-- Brackets</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#008000">--<br>
-- &quot;and&quot; -- Checks operation associations, always True (Ok)<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">function</font> &quot;<font color="#FF0000">and</font>&quot; 
(Left, Right : Operations) <font color="#0000FF">return</font> Boolean;<br>
<font color="#008000">--<br>
-- Is_Commutative -- No commutative operations, always False<br>
--</font><br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">function</font>&nbsp;Is_Commutative&nbsp;(Left,&nbsp;Right&nbsp;:&nbsp;Operations)&nbsp;<font color="#0000FF">return</font>&nbsp;Boolean;<br>
<font color="#008000">--<br>
-- Is_Inverse -- No commutative operations, always False<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Is_Inverse (Operation : 
Operations) <font color="#0000FF">return</font> Boolean;<br>
<font color="#008000">--<br>
-- Group_Inverse -- No commutative operations, never called<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Group_Inverse (Operation : 
Operations) <font color="#0000FF">return</font> Operations;<br>
<font color="#008000">--<br>
-- Priorities -- The levels of association<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Priorities <font color="#0000FF">
is mod </font><font color="#800000">10</font>;<br>
<font color="#008000">--<br>
-- Tokens -- The lexical tokens<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">package</font> Tokens <font color="#0000FF">
is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new</font> Parsers.Generic_Token<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Operation_Type =&gt; 
Operations,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Argument_Type&nbsp; =&gt; Float,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Priority_Type&nbsp; =&gt; Priorities,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sources&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
=&gt; Code<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp; <font color="#0000FF">use</font> Tokens;<br>
<font color="#008000">--<br>
-- Check_Spelling -- Of a name, no checks<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Check_Spelling (Name : 
String);<br>
<font color="#008000">--<br>
-- Check_Matched -- Check if no broken keyword matched<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Check_Matched (Source : 
String; Pointer : Integer)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Boolean;<br>
<font color="#008000">--<br>
-- Token_Tables -- Case-insensitive tables of tokens<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">package</font> Token_Tables
<font color="#0000FF">is new </font>Tokens.Vocabulary.Names;<br>
<font color="#008000">--<br>
-- The tables of prefix, infix and postfix operations<br>
--</font><br>
&nbsp;&nbsp; Prefixes&nbsp; : <font color="#0000FF">aliased</font> 
  Token_Tables.Dictionary;<br>
&nbsp;&nbsp; Infixes&nbsp;&nbsp; : <font color="#0000FF">aliased</font> 
  Token_Tables.Dictionary;<br>
&nbsp;&nbsp; Postfixes : <font color="#0000FF">aliased</font> 
  Token_Tables.Dictionary;<br>
<font color="#008000">--<br>
-- Lexers -- Table driven lexers<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">package</font> Lexers <font color="#0000FF">
is new</font>   Tokens.Segmented_Lexer;<br>
<font color="#008000">--<br>
-- Blank_Skipping_Lexers -- Ones that skip blanks<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">package</font> Blank_Skipping_Lexers
<font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new</font> 
Lexers.Token_Lexer.Implementation.Blanks (Lexers.Lexer);<br>
<font color="#008000">--<br>
-- Expression -- The lexer using our tables<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Expression <font color="#0000FF">
is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new</font> Blank_Skipping_Lexers.Lexer<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Prefixes&nbsp; =&gt;
  Prefixes'Access,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Infixes&nbsp;&nbsp; 
=&gt; Infixes'Access,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Postfixes =&gt; Postfixes'Access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">with null record</font>;<br>
<font color="#008000">--<br>
-- Call -- Evaluates an operator <br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Call<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Context&nbsp;&nbsp; : <font color="#0000FF">access</font> Expression;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Operation : Tokens.Operation_Token;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
List&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Tokens.Arguments.Frame<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">return</font>   Tokens.Argument_Token;<br>
<font color="#008000">--<br>
-- Enclose -- Evaluates an expression in brackets<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Enclose<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Context : <font color="#0000FF">access</font> Expression;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Left&nbsp;&nbsp;&nbsp; : Tokens.Operation_Token;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Right&nbsp;&nbsp; : Tokens.Operation_Token;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
List&nbsp;&nbsp;&nbsp; : Tokens.Arguments.Frame<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">return</font>   Tokens.Argument_Token;<br>
<font color="#008000">--<br>
-- Get_Operand -- Recognizes an operand (float number)<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Get_Operand<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Context&nbsp; : <font color="#0000FF">in out</font> Expression;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Code&nbsp;&nbsp;&nbsp;&nbsp; : in out Source;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Argument : <font color="#0000FF">out</font>   Tokens.Argument_Token;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Got_It&nbsp;&nbsp; : <font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">end</font> Calculator;</tt></TD>
  </TR>
</TABLE>
<p>The package Calculator defines the function Calculate that takes a string
argument and returns the result of the expression in the string. In the
private part of the package, first the set of supported operations is defined, that is the 
enumeration type Operations. Then the following functions are defined on Operations 
to be used in generic instantiations:</p>
<ul>
<li>&quot;<font color="#FF0000">and</font>&quot; to figure out whether two operations can 
be associated. In our case it always returns <font color="#800000"><i>true</i></font>;</li>
<li>Is_Commutative checking whether a commutative operator optimization is 
required. It has little sense to optimize something for an interpreter, so this 
function also returns <i><font color="#800000">true</font></i>;</li>
<li>Is_Inverse checking whether an operator is an inverse of another commutative 
operator. It is always <font color="#800000"><i>false</i></font>;</li>
<li>Group_Inverse returning a commutative group inversion operator, this one 
will never be called.</li>
</ul>
<p>Next the package defines the type Priority used for operation association 
levels. That can be any type with &quot;<font color="#FF0000">&lt;</font>&quot; order 
defined. The types Operations and Priority are used to instantiate the package
<a href="#Parsers.Generic_Token">Parsers.Generic_Token</a>. The instance Tokens 
provides base types describing expression lexical tokens. That is the table type 
used to keep the legal names of the operations defined by the type Operations. 
The tables obtained are case sensitive. It is not exactly what is needed, 
because the expression should be case-insensitive. For this reason, the child 
table package <a href="http://www.dmitry-kazakov.de/ada/tables.htm#Tables.Names">Tables.Names</a> is 
instantiated. To do this first, there should be defined two additional 
subroutines:</p>
<ul>
<li>Check_Spelling, the procedure checking names placed into a table, it does 
nothing it our case for no checks required;</li>
<li>Check_Matches, the function checking that no broken name matched. Because 
the expression may contain operators named as <tt>abs</tt>. It is necessary to 
prevent it from being matched in the cases like <tt>abs1.2</tt>. For this 
Check_Matched observes the last character of a matched name and the character 
following it, to ensure that they are not both alphanumeric.</li>
</ul>
<p> <a href="http://www.dmitry-kazakov.de/ada/tables.htm#Tables.Names">Tables.Names</a> is instantiated as:</p>
<blockquote>
<p><tt> <font color="#0000FF">package</font> Token_Tables
<font color="#0000FF">is new </font>Tokens.Vocabulary.Names;</tt></p>
</blockquote>
<p>Next three tables from obtained Token_Tables are declared. They are:</p>
<ul>
<li>The table of prefix operations. It will contain tokens describing unary 
operators <tt>+</tt>, <tt>-</tt>, <tt>abs</tt> and the bracket <tt>(</tt>;</li>
<li>The table of infix operations to contain <tt>+</tt>, <tt>-</tt>, <tt>*</tt>,
<tt>/</tt>, <tt>**</tt>;</li>
<li>The table of postfix operation to contain the right bracket <tt>)</tt>.</li>
</ul>
<p>The final step is to create table-driven lexers using the tables we have. For 
this the package <a href="#Parsers.Generic_Token.Segmented_Lexer">
Parsers.Generic_Token.Segmented_Lexer</a> is instantiated under the name Lexers. 
The instance Lexers has the type Lexer which can be used to parse expressions. 
This type is abstract because it has some abstract operations to implement. The 
first operation is <a href="#Parsers.Generic_Lexer.Get_Blank">Get_Blank</a> used 
to skip blanks in the expression. The package
<a href="#Parsers.Generic_Lexer.Blanks">Parsers.Generic_Lexer.Blanks</a> 
provides an implementation that skips spaces, tabs etc. To use it
<a href="#Parsers.Generic_Lexer.Blanks">Parsers.Generic_Lexer.Blanks</a> is 
instantiated as Blank_Skipping_Lexers. The obtained type Lexer is then extended 
to set the type discriminants to the corresponding tables. The resulting type 
Expression is still abstract, but has only three things to define:</p>
<ul>
<li><a href="#Parsers.Generic_Lexer.Call">Call</a>, the function to evaluate operators;</li>
<li><a href="#Parsers.Generic_Lexer.Enclose">Enclose</a>, the function to evaluate brackets;</li>
<li><a href="#Parsers.Generic_Lexer.Get_Operand">Get_Operand</a>, the procedure to get an operand from source. For the calculator 
it is a number.</li>
</ul>
<p>The implementation of the package is straightforward:</p>
File <i>calculator.adb</i>:<TABLE border="1" cellpadding="15" cellspacing="0"><TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">with</font> 
  Ada.Characters.Handling;&nbsp; <font color="#0000FF">use</font> 
  Ada.Characters.Handling;<br>
<font color="#0000FF">with</font>  Ada.Exceptions;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font>  Ada.Exceptions;<br>
<font color="#0000FF">with</font>  Ada.IO_Exceptions;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font>  Ada.IO_Exceptions;<br>
<font color="#0000FF">with</font>  Strings_Edit;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font>  Strings_Edit;<br>
<font color="#0000FF">with</font>  Strings_Edit.Floats;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font>  Strings_Edit.Floats;<br>
<br>
<font color="#0000FF">with</font>  Ada.Numerics.Elementary_Functions;<br>
<font color="#0000FF">use</font>&nbsp; Ada.Numerics.Elementary_Functions;<br>
<br>
<font color="#0000FF">package body</font> Calculator <font color="#0000FF">is</font>
<br>
<br>
<font color="#0000FF">&nbsp;&nbsp; function</font> &quot;<font color="#FF0000">and</font>&quot; 
(Left, Right : Operations) <font color="#0000FF">return</font> Boolean<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return </font>True;<br>
<font color="#0000FF">&nbsp;&nbsp; end</font> &quot;<font color="#FF0000">and</font>&quot;;<br>
<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">function</font>&nbsp;Is_Commutative&nbsp;(Left,&nbsp;Right&nbsp;:&nbsp;Operations)&nbsp;<font color="#0000FF">return</font>&nbsp;Boolean&nbsp;<font color="#0000FF">is<br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return </font>False;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font>  Is_Commutative;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Is_Inverse (Operation : 
Operations) <font color="#0000FF">return</font> Boolean <font color="#0000FF">is<br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return </font>False;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font>  Is_Inverse;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Group_Inverse (Operation : 
Operations) <font color="#0000FF">return</font> Operations<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return</font> Minus;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font>  Group_Inverse;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Check_Spelling (Name : 
String)<font color="#0000FF"> is<br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; null</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Check_Spelling;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Check_Matched (Source : 
String; Pointer : Integer)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Boolean
<font color="#0000FF">is<br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <font color="#0000FF">not</font> 
Is_Alphanumeric (Source (Pointer))<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">or else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; not </font>Is_Alphanumeric 
(Source (Pointer - 1))<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Check_Matched;</tt></TD>
  </TR>
</TABLE>
<p>The function Check_Matched receives the string being parsed and the index of 
the first character following the matched name (lexeme). It checks that no 
broken names be matched.</p>
File <i>calculator.adb (continuation)</i>:
<TABLE border="1" cellpadding="15" cellspacing="0"><TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; <font color="#0000FF">function</font>
Call<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Context&nbsp;&nbsp; : <font color="#0000FF">access</font> Expression;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Operation : Tokens.Operation_Token;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
List&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Tokens.Arguments.Frame<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">return</font> Tokens.Argument_Token <font color="#0000FF">
is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result : Float;<br>
&nbsp;&nbsp; <font color="#0000FF">begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case</font> Operation.Operation
<font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when</font> Abs_Value =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result := abs 
List (List'First).Value;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> 
Add =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result := 
List (List'First).Value + List (List'Last).Value;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> 
Sub =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result := 
List (List'First).Value - List (List'Last).Value;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> 
Mul =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result := 
List (List'First).Value * List (List'Last).Value;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> 
Div =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result := 
List (List'First).Value / List (List'Last).Value;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> 
Pow =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exp&nbsp;(log&nbsp;(List&nbsp;(List'First).Value)&nbsp;*&nbsp;List&nbsp;(List'Last).Value);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> 
Plus =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result := 
List (List'First).Value;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> 
Minus =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result := 
-List (List'First).Value;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when 
others</font> =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">raise</font> Program_Error;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">if</font> Result'Valid
<font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> 
(Result, Operation.Location &amp; Link (List));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">else</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Raise_Exception<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Numeric_Error'Identity,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; &quot;<font color="#FF0000">Numeric 
error in </font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&nbsp; 
Operations'Image (Operation.Operation)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&nbsp; &quot;<font color="#FF0000"> 
at </font>&quot; &amp; Image (Operation.Location)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; );<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">exception<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when </font>Program_Error =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">raise</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when others</font> =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Raise_Exception<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Constraint_Error'Identity,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; &quot;<font color="#FF0000">Numeric 
error in </font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&nbsp; 
Operations'Image (Operation.Operation)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&nbsp; &quot;<font color="#FF0000"> 
at </font>&quot; &amp; Image (Operation.Location)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; );<br>
&nbsp;&nbsp; <font color="#0000FF">end </font>Call;</tt></TD>
  </TR>
</TABLE>
<p><a href="#Parsers.Generic_Lexer.Call">Call</a> implements operators. The parameter Operation identifies what for 
operator. The parameter List contains the operands. Each operand has value (the 
Value field) and location in the source (the Location field). When evaluated 
operator also returns a value and location. The new location is evaluated from 
the locations of the operands (function <a href="#Parsers.Generic_Token.Link">
Link</a>) and the operator.</p>
File <i>calculator.adb (continuation)</i>:
<TABLE border="1" cellpadding="15" cellspacing="0"><TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; <font color="#0000FF">function</font> 
Enclose<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Context : <font color="#0000FF">access</font> Expression;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Left&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;Tokens.Operation_Token;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Right&nbsp;&nbsp; : Tokens.Operation_Token;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
List&nbsp;&nbsp;&nbsp; : Tokens.Arguments.Frame<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">return</font> Tokens.Argument_Token <font color="#0000FF">
is<br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; List (List'First).Value,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Left.Location &amp; Right.Location<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Enclose;</tt></TD>
  </TR>
</TABLE>
<p><a href="#Parsers.Generic_Lexer.Enclose">Enclose</a> implements brackets. Order brackets <tt>()</tt> just return the operand.</p>
File <i>calculator.adb (continuation)</i>:
<TABLE border="1" cellpadding="15" cellspacing="0"><TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; <font color="#0000FF">procedure</font> 
Get_Operand<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Context&nbsp; : <font color="#0000FF">in out</font> Expression;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Code&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> Source;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Argument : <font color="#0000FF">out</font> Tokens.Argument_Token;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Got_It&nbsp;&nbsp; : <font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Line&nbsp;&nbsp;&nbsp; : String
<font color="#0000FF">renames</font> Get_Line (Code);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pointer : Integer := Get_Pointer (Code);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Value&nbsp;&nbsp; : Float;<br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Get (Line, Pointer, Value);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set_Pointer (Code, Pointer);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Argument := (Value, Link (Code));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Got_It&nbsp;&nbsp; := True;<br>
&nbsp;&nbsp; <font color="#0000FF">exception</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> End_Error =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Got_It := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> 
Constraint_Error =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set_Pointer (Code, Pointer);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Raise_Exception<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Numeric_Error'Identity,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;<font color="#FF0000">Too</font>&nbsp;<font color="#FF0000">large</font>&nbsp;<font color="#FF0000">number</font>&nbsp;<font color="#FF0000">at</font>&nbsp;&quot;&nbsp;&amp;&nbsp;Image&nbsp;(Link&nbsp;(Code))<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ); <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> Data_Error =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set_Pointer (Code, Pointer);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Raise_Exception<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Parsers.Syntax_Error'Identity,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">Wrong 
number at </font>&quot; &amp; Image (Link (Code))<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ); <br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Get_Operand;</tt></TD>
  </TR>
</TABLE>
<p>The procedure <a href="#Parsers.Generic_Lexer.Get_Operand">Get_Operand</a> gets the operand in the source. It uses
<a href="#Parsers.Generic_Source.Get_Line">Get_Line</a> to access the current 
source line. <a href="#Parsers.Generic_Source.Get_Pointer">Get_Pointer</a> 
returns where it should start. The procedure Get from
<a href="http://www.dmitry-kazakov.de/ada/strings_edit.htm#Float_Edit">Strings_Edit.Floats</a> is 
used to get a floating-point number. The
<a href="#Parsers.Generic_Source.Set_Pointer">Set_Pointer</a> advances the 
source cursor to the position next to the number. The function
<a href="#Parsers.Generic_Source.Link">Link</a> is used to get the location of 
the number matched.</p>
File <i>calculator.adb (continuation)</i>:
<TABLE border="1" cellpadding="15" cellspacing="0"><TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; Reckoner : Expression;<br>
<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">function</font>&nbsp;Calculate&nbsp;(Formula&nbsp;:&nbsp;String)&nbsp;<font color="#0000FF">return</font>&nbsp;Float&nbsp;<font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Copy&nbsp;&nbsp; : <font color="#0000FF">aliased</font> 
String := Formula;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Code&nbsp;&nbsp; : Source (Copy'Access);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result : Tokens.Argument_Token;<br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lexers.Parse (Reckoner, Code, Result);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">if</font> Get_Pointer 
(Code) &lt;= Copy'Last <font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Raise_Exception<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Parsers.Syntax_Error'Identity,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; &quot;<font color="#FF0000">Unrecognized 
'</font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&nbsp; Copy 
(Get_Pointer (Code)..Copy'Last)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&nbsp; &quot;<font color="#FF0000">'</font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; );<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Result.Value;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Calculate;</tt></TD>
  </TR>
</TABLE>
<p>The procedure Calculate implements the calculator. It just calls
<a href="#Parsers.Generic_Lexer.Parse">Parse</a> to interpret Formula and the 
checks that the whole string was matched.</p>
File <i>calculator.adb (continuation)</i>:
<TABLE border="1" cellpadding="15" cellspacing="0"><TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;Add_Operator&nbsp;(Prefixes,&nbsp;&quot;<font color="#FF0000">abs</font>&quot;,&nbsp;Abs_Value,&nbsp;<font color="#800000">8</font>,&nbsp;<font color="#800000">7</font>);<br>
&nbsp;&nbsp; Add_Operator (Prefixes, &quot;<font color="#FF0000">+</font>&quot;,&nbsp;&nbsp; 
Plus,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#800000">8</font>,
<font color="#800000">7</font>);<br>
&nbsp;&nbsp; Add_Operator (Prefixes, &quot;<font color="#FF0000">-</font>&quot;,&nbsp;&nbsp; 
Minus,&nbsp;&nbsp;&nbsp;&nbsp; <font color="#800000">8</font>,
<font color="#800000">7</font>);<br>
&nbsp;&nbsp; Add_Bracket&nbsp; (Prefixes, &quot;<font color="#FF0000">(</font>&quot;,&nbsp;&nbsp; 
Left_Bracket);<br>
<br>
&nbsp;&nbsp; Add_Operator (Infixes, &quot;<font color="#FF0000">+</font>&quot;,&nbsp; Add,
<font color="#800000">1</font>, <font color="#800000">2</font>);<br>
&nbsp;&nbsp; Add_Operator (Infixes, &quot;<font color="#FF0000">-</font>&quot;,&nbsp; Sub,
<font color="#800000">1</font>, <font color="#800000">3</font>);<br>
&nbsp;&nbsp; Add_Operator (Infixes, &quot;<font color="#FF0000">*</font>&quot;,&nbsp; Mul,
<font color="#800000">3</font>, <font color="#800000">4</font>);<br>
&nbsp;&nbsp; Add_Operator (Infixes, &quot;<font color="#FF0000">/</font>&quot;,&nbsp; Div,
<font color="#800000">3</font>, <font color="#800000">4</font>);<br>
&nbsp;&nbsp; Add_Operator (Infixes, &quot;<font color="#FF0000">**</font>&quot;, Pow,
<font color="#800000">9</font>, <font color="#800000">5</font>);<br>
<br>
&nbsp;&nbsp; Add_Bracket&nbsp; (Postfixes, &quot;<font color="#FF0000">)</font>&quot;, 
Right_Bracket); <br>
<font color="#0000FF">end</font> Calculator;</tt></TD>
  </TR>
</TABLE>
<p>Finally upon package elaboration the tables have to be filled in.
<a href="#Parsers.Generic_Token.Add_Operator">Add_Operator</a> is used to add an 
operator. The operator priorities are chosen to satisfy usual association rules.
<a href="#Parsers.Generic_Token.Add_Bracket">Add_Bracket</a> is used to add 
brackets.</p>
<p>A program using the calculator may look as follows:</p>
File <i>console_calculator.adb</i>:
<TABLE border="1" cellpadding="15" cellspacing="0"><TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">with</font> Ada.Exceptions;
<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; use</font> Ada.Exceptions;<br>
<font color="#0000FF">with</font> Ada.Text_IO; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
use</font> Ada.Text_IO;<br>
<font color="#0000FF">with</font> Strings_Edit.Floats;&nbsp;
<font color="#0000FF">use</font> Strings_Edit.Floats;<br>
<font color="#0000FF">with</font> Calculator;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Calculator;<br>
<font color="#0000FF">with</font> Parsers;<br>
<br>
<font color="#0000FF">procedure</font> Console_Calculator <font color="#0000FF">
is</font> <br>
&nbsp;&nbsp; Text : String (<font color="#800000">1</font>..<font color="#800000">120</font>);<br>
&nbsp;&nbsp; Last : Integer;<br>
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp; Put_Line (&quot;<font color="#FF0000">Enter an expression to calculate 
and hit &lt;enter&gt;</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;Put_Line&nbsp;(&quot;<font color="#FF0000">The</font>&nbsp;<font color="#FF0000">operations</font>&nbsp;<font color="#FF0000">supported</font>&nbsp;<font color="#FF0000">are</font>&nbsp;<font color="#FF0000">+,</font>&nbsp;<font color="#FF0000">-,</font>&nbsp;<font color="#FF0000">/,</font>&nbsp;<font color="#FF0000">*,</font>&nbsp;<font color="#FF0000">**,</font>&nbsp;<font color="#FF0000">abs,</font>&nbsp;<font color="#FF0000">()</font>&quot;);<br>
&nbsp;&nbsp; Put_Line (&quot;<font color="#FF0000">&nbsp;&nbsp; (to exit enter an 
empty string)</font>&quot;);<br>
&nbsp;&nbsp; <font color="#0000FF">loop</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put (&quot;<font color="#FF0000">&gt;</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Get_Line (Text, Last);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">exit when </font>Last &lt; 
Text'First;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put_Line (&quot;<font color="#FF0000">=</font>&quot; 
&amp; Image (Calculate (Text (<font color="#800000">1</font>..Last))));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">exception</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> 
Error : Numeric_Error | Parsers.Syntax_Error =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put_Line (Exception_Message 
(Error));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end loop</font>; <br>
<font color="#0000FF">exception</font><br>
&nbsp;&nbsp; <font color="#0000FF">when</font> Error : <font color="#0000FF">
others</font> =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put (&quot;<font color="#FF0000">Error :</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put_Line (Exception_Information (Error));<br>
<font color="#0000FF">end</font> Console_Calculator;</tt></TD>
  </TR>
</TABLE>
<p align="right">
  <A name="12.2"></A><a href="#12.1"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#12.3"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>12.2. Basic considerations</H3>
<p>An expression is a sequence of symbols involving operations applied to
operands. In programming languages expression is a formula used to compute a 
value. In most general way any expression has the following syntax:</p>
<blockquote>
<table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse">
<tr>
<td><tt>&lt;expression&gt;</tt></td>
<td>&nbsp;</td>
<td><tt>::=</tt></td>
<td>&nbsp;</td>
<td><tt>&lt;<font color="#008000">prefix</font>&gt;</tt></td>
<td>&nbsp;</td>
<td><tt>&lt;operand&gt;</tt></td>
<td>&nbsp;</td>
<td><tt>&lt;<font color="#000080">postfix</font>&gt;</tt></td>
<td>&nbsp;</td>
<td><tt>[</tt></td>
<td>&nbsp;</td>
<td><tt>&lt;<font color="#800000">infix</font>&gt;</tt></td>
<td>&nbsp;</td>
<td><tt>&lt;expression&gt;</tt></td>
<td>&nbsp;</td>
<td><tt>]</tt></td>
</tr>
</table>
</blockquote>
<p>Here <font color="#008000"> <tt>&lt;prefix&gt;</tt></font> denotes any list of prefix operations,
<font color="#000080"> <tt>&lt;postfix&gt;</tt></font>
does any list of postfix operations, <font color="#800000"> <tt>&lt;infix&gt;</tt></font> is always exactly one 
infix operation.</p>
<blockquote>
<p>For example in the following C++ expression: </p>
<blockquote>
<p><tt><font color="#008000">!</font> f <font color="#800000">(</font> 3 
<font color="#800000">+</font> x<font color="#000080">++&nbsp;)</font></tt></p>
</blockquote>
<p>Operands here are <tt>f</tt>,  <tt>3</tt> and  <tt>x</tt>. Prefix operation 
is <tt><font color="#008000">!</font></tt> (logical not). Postfix operations are
<font color="#000080"> <tt>++</tt></font> 
(post-increment) and right bracket <font color="#000080"><tt>)</tt></font>. Infix operations 
are the operator <font color="#800000"> <tt>
+</tt></font> and the left bracket <font color="#800000"><tt>(</tt></font>.</p>
</blockquote>
<p>The above syntax defines three kinds of operations depending of the context 
they may appear. We will use different colors to highlight the operation context.</p>
<ul>
<li><i><font color="#008000">Prefix operations</font></i> appear before an 
operand. There could be any number of prefix operations before an operand in the 
<i>prefix</i> context;</li>
<li><i><font color="#000080">Postfix operations</font></i> appear after an operand. There could be any number of 
postfix operations in a <i>postfix</i> context;</li>
<li><i><font color="#800000">Infix operations</font></i> separate operands surrounded by prefix and postfix 
operations. In the <i>infix</i> context there can be only one infix operation.</li>
</ul>
<H4><a name="12.2.1"></a>12.2.1. Types of lexical tokens</H4>
<p><a name="lexical_token_classes"></a>The operations are further subdivided into operators, delimiters 
(like
brackets), commas and ligatures, and reserved keywords used as modifiers.</p>
<p><u><b><a name="operator"></a>Operators</b></u>:</p>
<ul>
<li><font color="#008000"><i>Unary prefix operators</i></font> appear before the argument. Examples are
    unary plus and minus (<tt>+</tt>, 
    <tt>-</tt>), pre-increment and decrement in C++, <font color="#0000FF"><tt>abs</tt></font> 
in Ada. There can be any number of prefix operators applied to an argument. The 
order the prefix operators are applied to the argument is determined by the 
operators' priorities.</li>
<li><font color="#800000"><i>Binary infix operators</i></font> bind two arguments. An infix operator is 
placed between the arguments.
    <tt>+</tt>, 
    <tt>-</tt>, 
    <tt>*</tt>, 
    <tt>/</tt> are examples of infix operators. The order of the infix operators 
cannot be changed, but their evaluation order can and depends on their 
priorities. Infix operators can be implied. For example, the multiplication
  operator is implied in mathematical formulas.</li>
<li><font color="#000080"><i>Unary postfix operators</i></font> appear after the argument. Post-increment and decrement in C++ 
are postfix operators. There can be any number of postfix operators applied to 
an argument. The order the operators are applied in to the argument is determined 
by their priorities.</li>
</ul>
<p><u><b><a name="brackets"></a>Brackets, commas, ligatures</b></u>:</p>
<ul>
<li><font color="#008000"><i>Left order and aggregate brackets</i></font> occur in the prefix context, i.e. before 
the first 
argument. The last argument is bound by a right bracket. In Ada for both order 
and aggregate brackets <tt>(</tt> is used. 
In C++ it is <tt>(</tt> and <tt>{</tt>. There could be any number of left 
brackets before an argument. The order of left brackets cannot be changed.</li>
<li><font color="#800000"><i>Left index brackets</i> </font>occur in the infix context, i.e. they 
separate arguments as infix operator do. The index brackets are ones used to 
specify the actual parameter list of a function or the array indices, like <tt>(</tt> 
does in <tt>f(2,5)</tt>. The order of left brackets cannot be changed. In C++ 
there are two of them <tt>(</tt> and <tt>[</tt>, used for function calls and 
array indices correspondingly.</li>
<li><font color="#800000"><i>Commas</i></font> are used in the infix context to separate arguments 
in a list put in brackets. 
Commas cannot appear outside brackets. The order of commas cannot be changed. 
(In C++ the comma operator is not a comma, but a binary infix operator.)</li>
<li><font color="#800000"><i><a name="semicolons"></a>Semicolons</i></font> are 
much like commas. They are used in the infix context to separate <a href="#sublists">sublists</a> of 
arguments. The order of semicolons cannot be changed. Grouping arguments in 
sublists depends on the semicolons' priorities. In Ada <font color="#0000FF">
<tt>with</tt></font> in an extension aggregate is a semicolon.</li>
<li><font color="#800000"><i><a name="ligature"></a>Ligatures</i></font> are commas acting as infix operators. They appear in the 
infix context and only in brackets. The arguments separated by ligatures are 
bound into one argument. The order of ligatures cannot be changed. An example of a ligature is <tt>=&gt;</tt> 
used for named associations in Ada, like in</li>
</ul>
<blockquote>
<blockquote>
<p> <tt>Foo <font color="#800000">(</font>Left<font color="#800000">=&gt;</font>X, Right<font color="#800000">=&gt;</font>Y<font color="#000080">)</font>;</tt></p>
</blockquote>
</blockquote>
<ul>
<li><font color="#000080"><i>Right brackets</i></font> follow the last argument in the brackets. There 
could be any number of right brackets after an argument. The order of the 
brackets cannot be changed.</li>
</ul>
<p><a name="sublists"></a>Argument sublists are quite common in mathematical notation. 
For example a hypergeometric function:</p>
<blockquote>
<p> <tt>F <font color="#800000">(</font><i>x<sub>1</sub></i><font color="#800000">,</font>
<i>x<sub>2</sub></i><font color="#800000">,</font> <i>x<sub>3</sub></i><font color="#800000">;</font>
<i>y<sub>1</sub></i><font color="#800000">,</font> <i>y<sub>2</sub></i><font color="#800000">,</font>
<i>y<sub>3</sub></i> <font color="#800000">|</font> <i>z</i><font color="#000080">)</font></tt></p>
</blockquote>
<p>Here <tt><font color="#800000">;</font></tt> and <tt><font color="#800000">|</font></tt> 
are semicolons separating sublists of the argument list.&nbsp;If <tt>
<font color="#800000">;</font></tt> has higher priority than <tt>
<font color="#800000">|</font></tt> the above means:</p>
<blockquote>
<table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse">
<tr>
<td align="center" colspan="16"> <tt><font color="#800000">(</font><font color="#000080">)</font></tt></td>
</tr>
<tr>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px; border-right-style:solid; border-right-width:1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px; border-left-style:solid; border-left-width:1px">&nbsp;</td>
<td align="center" style="border-right-style: none; border-right-width: medium; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: none; border-left-width: medium; border-right-style:none; border-right-width:medium; border-top-style:solid; border-top-width:1px; border-bottom-style:none; border-bottom-width:medium">&nbsp;</td>
<td align="center" style="border-left-style: none; border-left-width: medium; border-right-style:none; border-right-width:medium; border-top-style:solid; border-top-width:1px; border-bottom-style:none; border-bottom-width:medium">&nbsp;</td>
<td align="center" style="border-left-style: none; border-left-width: medium; border-right-style:none; border-right-width:medium; border-top-style:solid; border-top-width:1px; border-bottom-style:none; border-bottom-width:medium">&nbsp;</td>
<td align="center" style="border-left-style: none; border-left-width: medium; border-right-style:none; border-right-width:medium; border-top-style:solid; border-top-width:1px; border-bottom-style:none; border-bottom-width:medium">&nbsp;</td>
<td align="center" style="border-left-style: none; border-left-width: medium; border-top-style:solid; border-top-width:1px; border-bottom-style:none; border-bottom-width:medium">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" colspan="3">&nbsp;</td>
<td align="center" style="border-bottom-style: solid; border-bottom-width: 1px" colspan="6"> <tt>
<font color="#800000">(|</font></tt></td>
<td align="center" style="border-style:none; border-width:medium; "> &nbsp;</td>
<td align="center" style="border-style:none; border-width:medium; "> &nbsp;</td>
<td align="center" style="border-style:none; border-width:medium; "> &nbsp;</td>
<td align="center" style="border-style:none; border-width:medium; " colspan="2"> 
<tt><font color="#800000">|</font><font color="#000080">)</font></tt></td>
</tr>
<tr>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" colspan="2">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: none; border-top-width: medium">&nbsp;</td>
<td align="center" style="border-top-style: none; border-top-width: medium">&nbsp;</td>
<td align="center" style="border-top-style: none; border-top-width: medium">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: none; border-top-width: medium">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" colspan="6"> <font color="#800000"> <tt>(;</tt></font></td>
<td style="border-right-style: none; border-right-width: medium" align="center" colspan="6"> 
<font color="#800000"> <tt>;|</tt></font></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td style="border-right-style: solid; border-right-width: 1px" align="center">&nbsp;</td>
<td style="border-left-style: solid; border-left-width: 1px" align="center">&nbsp;</td>
<td style="border-right-style: solid; border-right-width: 1px" align="center">&nbsp;</td>
<td style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px" align="center">&nbsp;</td>
<td style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px" align="center">&nbsp;</td>
<td style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px" align="center">&nbsp;</td>
<td style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px" align="center">&nbsp;</td>
<td style="border-left-style: solid; border-left-width: 1px" align="center">&nbsp;</td>
<td style="border-right-style: solid; border-right-width: 1px" align="center">&nbsp;</td>
<td style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px" align="center">&nbsp;</td>
<td style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px" align="center">&nbsp;</td>
<td style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px" align="center">&nbsp;</td>
<td style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px" align="center">&nbsp;</td>
<td style="border-left-style: solid; border-left-width: 1px" align="center">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;F&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;<i>x<sub>1</sub></i>&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;<i>x<sub>2</sub></i>&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;<i>x<sub>3</sub></i>&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;<i>y<sub>1</sub></i><sub>&nbsp;</sub></tt></td>
<td colspan="2" align="center"> <tt>&nbsp;<i>y<sub>2</sub></i>&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;<i>y<sub>3</sub></i>&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;<i>z</i>&nbsp;&nbsp;</tt></td>
</tr>
</table>
</blockquote>
<p> Argument lists and sublists are always bound by two operations, the left and
the right one. There are three kinds of semicolons:</p>
<ul>
<li>A <i>separator</i> closes the sublist on the left and starts another one. These are <tt><font color="#800000">;</font></tt> and <tt><font color="#800000">|</font></tt> 
in the example above;</li>
<li>A <i>close-semicolon </i>closes the sublist on the left;</li>
<li>An <i>open-semicolon</i> starts a new sublist. An example of this semicolon is Ada's
<font color="#0000FF"><tt>with</tt></font>:</li>
</ul>
<blockquote>
<p> <tt>(A, B <font color="#0000FF">with</font> C, D <font color="#0000FF">with</font> 
E)</tt></p>
<table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse">
<tr>
<td align="center"> &nbsp;</td>
<td align="center" colspan="6"> <tt><font color="#008000">(</font><font color="#000080">)</font></tt></td>
<td align="center"> &nbsp;</td>
<td align="center"> &nbsp;</td>
<td align="center"> &nbsp;</td>
</tr>
<tr>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" colspan="2">&nbsp;</td>
</tr>
<tr>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" colspan="6"> <tt> <font color="#800000">
with</font><font color="#000080">)</font></tt></td>
</tr>
<tr>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" colspan="2"> <tt> <font color="#800000">with</font><font color="#000080">)</font></tt></td>
</tr>
<tr>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td align="center" colspan="2"> <tt>&nbsp;&nbsp;A&nbsp;&nbsp;</tt></td>
<td align="center" colspan="2"> <tt>&nbsp;&nbsp;B&nbsp;&nbsp;</tt></td>
<td align="center" colspan="2"> <tt>&nbsp;&nbsp;C&nbsp;&nbsp;</tt></td>
<td align="center" colspan="2"> <tt>&nbsp;&nbsp;D&nbsp;&nbsp;</tt></td>
<td align="center" colspan="2"> <tt>&nbsp;&nbsp;E&nbsp;&nbsp;</tt></td>
</tr>
</table>
</blockquote>
<p><u><b><a name="modifier"></a>Modifiers</b></u>:</p>
<ul>
<li><i>Operation modifiers</i> are used to change the operation they follow. Operation modifiers can be 
used to implement multi-words operations, such as <font color="#0000FF"><tt>and 
then</tt></font> in Ada. First <font color="#0000FF"><tt>and </tt></font>is 
recognized, when <font color="#0000FF"><tt>then</tt></font> follows, it changes <font color="#0000FF"><tt>
and</tt></font> to <font color="#0000FF"><tt>and then</tt></font>.</li>
<li><i>Argument modifiers</i> are used to modify the operand they follow. For example, in Ada, <tt>
<font color="#0000FF">record</font></tt> can be an argument modifier used 
to recognize <tt><font color="#0000FF">null record</font></tt> in an expression.</li>
</ul>
<p>The modifiers can be used to stop expression parsing at reserved 
keywords. Thus in Ada the same <font color="#0000FF"><tt>then</tt></font> when does not 
follow <tt><font color="#0000FF">and</font></tt>, manifests the 
expression end in an if-statement.</p>
<H4><a name="12.2.2"></a>12.2.2. Priorities and association</H4>
<p><a name="operation_association"></a>Association of the operators with the operands is usually controlled by the
precedence level (the operator priority) and special rules for the case when the 
priorities are same. Here I propose a simpler and more general model. All 
operators have two priorities to control association with the operands on either 
side. So the left priority controls left-side association. Both unary and binary operators have the priorities. 
Binary infix operators normally have left and right priorities near to each 
other. To have left to right operand association the left priority should be 
slightly lower than the right one. The following example illustrates the process 
of operand association for <tt>A<b><font color="#800000">+</font></b>B<b><font color="#800000">*</font></b>C<b><font color="#800000">+</font></b>D<b><font color="#800000">+</font></b>E</tt>:</p>
<blockquote>
<table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse">
<tr>
<td> <tt>A <b><font color="#800000">+</font></b> B <b><font color="#800000">*</font></b>
C <b><font color="#800000">+</font></b> D <b><font color="#800000">+</font></b>
E =</tt></td>
<td align="center">&nbsp;</td>
<td align="center">&nbsp;</td>
<td align="center">&nbsp;</td>
<td align="center">&nbsp;</td>
<td align="center">&nbsp;</td>
<td align="center" colspan="4"><font color="#800000"> <tt><b>+</b></tt></font></td>
<td align="center">&nbsp;</td>
</tr>
<tr>
<td> <tt>A <span style="background-color: #C0D8D6"><sub>1</sub></span><b><font color="#800000">+</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span>
B <span style="background-color: #C0D8D6"><sub>3</sub></span><b><font color="#800000">*</font></b><span style="background-color: #C0D8D6"><sub>4</sub></span>
C <span style="background-color: #C0D8D6"><sub>1</sub></span><b><font color="#800000">+</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span> 
D <span style="background-color: #C0D8D6"><sub>1</sub></span><b><font color="#800000">+</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span> 
E =</tt></td>
<td align="center">&nbsp;</td>
<td align="center">&nbsp;</td>
<td align="center">&nbsp;</td>
<td align="center">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td> <tt>A <span style="background-color: #C0D8D6"><sub>1</sub></span><b><font color="#800000">+</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span> 
B</tt>&#8594;<tt><b><font color="#800000">*</font></b><span style="background-color: #C0D8D6"><sub>4</sub></span> 
C <span style="background-color: #C0D8D6"><sub>
1</sub></span><b><font color="#800000">+</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span> 
D <span style="background-color: #C0D8D6"><sub>1</sub></span><b><font color="#800000">+</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span> 
E =</tt></td>
<td align="center">&nbsp;</td>
<td align="center">&nbsp;</td>
<td align="center">&nbsp;</td>
<td align="center" colspan="4"><font color="#800000"> <tt><b>+</b></tt></font></td>
<td align="center">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td> <tt>A <span style="background-color: #C0D8D6"><sub>1</sub></span><b><font color="#800000">+</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span> 
B</tt>&#8594;<tt><b><font color="#800000">*</font></b></tt>&#8592;<tt>C <span style="background-color: #C0D8D6"><sub>
1</sub></span><b><font color="#800000">+</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span> 
D <span style="background-color: #C0D8D6"><sub>1</sub></span><b><font color="#800000">+</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span> 
E =</tt></td>
<td align="center">&nbsp;</td>
<td align="center">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td> <tt>A</tt>&#8594;<tt><b><font color="#800000">+</font></b></tt>&#8592;<tt>(B<b><font color="#800000">*</font></b>C) <span style="background-color: #C0D8D6"><sub>
1</sub></span><b><font color="#800000">+</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span> 
D <span style="background-color: #C0D8D6"><sub>1</sub></span><b><font color="#800000">+</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span> 
E =</tt></td>
<td align="center" colspan="6"><font color="#800000"> <tt><b>+</b></tt></font></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td> <tt>(A<b><font color="#800000">+</font></b>(B<b><font color="#800000">*</font></b>C))</tt>&#8594;<tt><b><font color="#800000">+</font></b></tt>&#8592;<tt>D <span style="background-color: #C0D8D6"><sub>
1</sub></span><b><font color="#800000">+</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span> 
E =</tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-left-style:none; border-left-width:medium">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td style="border-right-style: none; border-right-width: medium"> <tt>((A<b><font color="#800000">+</font></b>(B<b><font color="#800000">*</font></b>C))<b><font color="#800000">+</font></b>D)</tt>&#8594;<tt><b><font color="#800000">+</font></b></tt>&#8592;<tt>E 
=</tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-left-style:none; border-left-width:medium">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" colspan="4">
<font color="#800000"><b> <tt>*</tt></b></font></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td style="border-right-style: none; border-right-width: medium"> <tt>((A<b><font color="#800000">+</font></b>(B<b><font color="#800000">*</font></b>C))<b><font color="#800000">+</font></b>D)<b><font color="#800000">+</font></b>E</tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-left-style:none; border-left-width:medium">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td style="border-right-style: none; border-right-width: medium">&nbsp;</td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;A&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;B&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;C&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;D&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;E&nbsp;&nbsp;</tt></td>
</tr>
</table>
</blockquote>
<p>Normally, the left priority of a prefix operator is higher
than the right one and both are higher than the priorities of the infix 
operators so:</p>
<blockquote>
<table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse">
<tr>
<td> <tt>A <b><font color="#800000">-</font></b> <font color="#008000">++</font> <font color="#008000">-- </font>B <b><font color="#800000">+</font></b>
C =</tt></td>
<td align="center">&nbsp;</td>
<td align="center">&nbsp;</td>
<td align="center" style="border-bottom-style: solid; border-bottom-width: 1px" colspan="3"> <tt><font color="#800000">+</font></tt></td>
<td align="center">&nbsp;</td>
</tr>
<tr>
<td> <tt>A <span style="background-color: #C0D8D6"><sub>1</sub></span><b><font color="#800000">-</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span> <span style="background-color: #C0D8D6"><sub>
10</sub></span><font color="#008000">++</font><span style="background-color: #C0D8D6"><sub>9</sub></span> <span style="background-color: #C0D8D6"><sub>
10</sub></span><font color="#008000">--</font><span style="background-color: #C0D8D6"><sub>9</sub></span> 
B <span style="background-color: #C0D8D6"><sub>1</sub></span><b><font color="#800000">+</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span>
C =</tt></td>
<td align="center">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: none; border-top-width: medium">&nbsp;</td>
<td align="center" style="border-top-style: none; border-top-width: medium">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: none; border-top-width: medium">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td> <tt>A <span style="background-color: #C0D8D6"><sub>1</sub></span><b><font color="#800000">-</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span></tt>&#8594;<tt><font color="#008000">++</font><span style="background-color: #C0D8D6"><sub>9</sub></span></tt>&#8594;<tt><font color="#008000">--</font></tt>&#8592;<tt>B <span style="background-color: #C0D8D6"><sub>1</sub></span><b><font color="#800000">+</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span> 
C =</tt></td>
<td align="center" colspan="4"> <tt><b><font color="#800000">-</font></b></tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td style="border-right-style: none; border-right-width: medium"> <tt>A <span style="background-color: #C0D8D6"><sub>1</sub></span><b><font color="#800000">-</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span></tt>&#8594;<tt><font color="#008000">++</font></tt>&#8592;<tt>(<font color="#008000">--</font>B) <span style="background-color: #C0D8D6"><sub>1</sub></span><b><font color="#800000">+</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span> 
C =</tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-left-style:none; border-left-width:medium">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td style="border-right-style: none; border-right-width: medium"> <tt>A</tt>&#8594;<tt><b><font color="#800000">-</font></b></tt>&#8592;<tt>(<font color="#008000">++</font>(<font color="#008000">--</font>B)) <span style="background-color: #C0D8D6"><sub>1</sub></span><b><font color="#800000">+</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span> 
C =</tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-left-style:none; border-left-width:medium">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" colspan="2"> <tt><font color="#008000">++</font></tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td style="border-right-style: none; border-right-width: medium"> <tt>(A<b><font color="#800000">-</font></b>(<font color="#008000">++</font>(<font color="#008000">--</font>B)))</tt>&#8594;<tt><b><font color="#800000">+</font></b></tt>&#8592;<tt>C 
=</tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-left-style:none; border-left-width:medium">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" colspan="2"> <tt><font color="#008000">--</font></tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td style="border-right-style: none; border-right-width: medium"> <tt>(A<b><font color="#800000">-</font></b>(<font color="#008000">++</font>(<font color="#008000">--</font>B)))<b><font color="#800000">+</font></b>C 
=</tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-left-style:none; border-left-width:medium">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td> &nbsp;</td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;A&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;B&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;C&nbsp;&nbsp;</tt></td>
</tr>
</table>
</blockquote>
<p>There
might be exceptions from this rule as in the case of the
exponentiation operator, where it is useful to have the left priority of
<tt>**</tt> higher than the right priority of the unary minus and the right
priority of 
<tt>**</tt> lower than left priority of the unary
minus so, that <tt>-A**-B</tt> become:</p>
<blockquote>
<table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse">
<tr>
<td> <tt> <font color="#008000">-</font> A <b><font color="#800000">**</font></b> <font color="#008000">-</font>
B =</tt></td>
<td align="center" colspan="4"> <tt><font color="#008000">-</font></tt></td>
</tr>
<tr>
<td> <tt> <span style="background-color: #C0D8D6"><sub>
8</sub></span><font color="#008000">-</font><span style="background-color: #C0D8D6"><sub>7</sub></span> A <span style="background-color: #C0D8D6"><sub>
9</sub></span><b><font color="#800000">**</font></b><span style="background-color: #C0D8D6"><sub>5</sub></span> <span style="background-color: #C0D8D6"><sub>
8</sub></span><font color="#008000">-</font><span style="background-color: #C0D8D6"><sub>7</sub></span> 
B =</tt></td>
<td align="center" colspan="4"> <tt><b><font color="#800000">**</font></b></tt></td>
</tr>
<tr>
<td style="border-right-style: none; border-right-width: medium"> <tt> <span style="background-color: #C0D8D6"><sub>
8</sub></span><font color="#008000">-</font><span style="background-color: #C0D8D6"><sub>7</sub></span> A</tt>&#8594;<tt><b><font color="#800000">**</font></b><span style="background-color: #C0D8D6"><sub>5</sub></span></tt>&#8594;<tt><font color="#008000">-</font></tt>&#8594;<tt>B 
=</tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-left-style:none; border-left-width:medium">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td style="border-right-style: none; border-right-width: medium"> <tt> <span style="background-color: #C0D8D6"><sub>
8</sub></span><font color="#008000">-</font><span style="background-color: #C0D8D6"><sub>7</sub></span> A</tt>&#8594;<tt><b><font color="#800000">**</font></b></tt>&#8592;<tt>(<font color="#008000">-</font>B)=</tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-left-style:none; border-left-width:medium">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" colspan="2"> <tt><font color="#008000">-</font></tt></td>
</tr>
<tr>
<td style="border-right-style: none; border-right-width: medium"> <tt> <font color="#008000">-</font></tt>&#8592;<tt>(A<b><font color="#800000">**</font></b>(<font color="#008000">-</font>B))=</tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-left-style:none; border-left-width:medium">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td> <tt> <font color="#008000">-</font>(A<b><font color="#800000">**</font></b>(<font color="#008000">-</font>B))</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;A&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;B&nbsp;&nbsp;</tt></td>
</tr>
</table>
</blockquote>
<p>The priorities of the postfix operators should be selected so that the left 
priority be very high, but lower than the right priorities of the
prefix operators. The right priority should be slightly lower than
the left one, but higher than the right priorities of the infix
operators. Under these conditions:</p>
<blockquote>
<table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse">
<tr>
<td> <tt>A <b><font color="#800000">-</font></b> <font color="#008000">++</font> 
B <font color="#000080">++</font> <font color="#000080">--</font> <b><font color="#800000">-</font></b> 
C =</tt></td>
<td align="center">&nbsp;</td>
<td align="center">&nbsp;</td>
<td align="center" style="border-bottom-style: none; border-bottom-width: medium" colspan="3"> <tt><font color="#800000">
-</font></tt></td>
<td align="center">&nbsp;</td>
</tr>
<tr>
<td> <tt>A <span style="background-color: #C0D8D6"><sub>1</sub></span><b><font color="#800000">-</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span> <span style="background-color: #C0D8D6"><sub>
10</sub></span><font color="#008000">++</font><span style="background-color: #C0D8D6"><sub>9</sub></span> 
B <span style="background-color: #C0D8D6"><sub>
7</sub></span><font color="#000080">++</font><span style="background-color: #C0D8D6"><sub>8</sub></span> <span style="background-color: #C0D8D6"><sub>
7</sub></span><font color="#000080">--</font><span style="background-color: #C0D8D6"><sub>8</sub></span> <span style="background-color: #C0D8D6"><sub>1</sub></span><b><font color="#800000">-</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span> 
C =</tt></td>
<td align="center">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td> <tt>A <span style="background-color: #C0D8D6"><sub>1</sub></span><b><font color="#800000">-</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span></tt>&#8594;<tt><font color="#008000">++</font></tt>&#8592;<tt>B <span style="background-color: #C0D8D6"><sub>
7</sub></span><font color="#000080">++</font><span style="background-color: #C0D8D6"><sub>8</sub></span> <span style="background-color: #C0D8D6"><sub>
7</sub></span><font color="#000080">--</font><span style="background-color: #C0D8D6"><sub>8</sub></span> <span style="background-color: #C0D8D6"><sub>1</sub></span><b><font color="#800000">-</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span> 
C =</tt></td>
<td align="center" colspan="4"> <tt><font color="#800000">-</font></tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td style="border-right-style: none; border-right-width: medium"> <tt>A <span style="background-color: #C0D8D6"><sub>1</sub></span><b><font color="#800000">-</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span> 
(<font color="#008000">++</font>B)</tt>&#8594;<tt><font color="#000080">++</font></tt>&#8592;<tt><span style="background-color: #C0D8D6"><sub>7</sub></span><font color="#000080">--</font><span style="background-color: #C0D8D6"><sub>8</sub></span> <span style="background-color: #C0D8D6"><sub>1</sub></span><b><font color="#800000">-</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span> 
C =</tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-left-style:none; border-left-width:medium">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td style="border-right-style: none; border-right-width: medium"> <tt>A <span style="background-color: #C0D8D6"><sub>1</sub></span><b><font color="#800000">-</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span> 
((<font color="#008000">++</font>B)<font color="#000080">++</font>)</tt>&#8594;<tt><font color="#000080">--</font></tt>&#8592;<tt><span style="background-color: #C0D8D6"><sub>1</sub></span><b><font color="#800000">-</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span> 
C =</tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-left-style:none; border-left-width:medium">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" colspan="2"> <tt><font color="#000080">--</font></tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td style="border-right-style: none; border-right-width: medium"> <tt>A</tt>&#8594;<tt><b><font color="#800000">-</font></b>((<font color="#008000">++</font>B)<font color="#000080">++</font>)<font color="#000080">--</font>) <span style="background-color: #C0D8D6"><sub>1</sub></span><b><font color="#800000">-</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span> 
C =</tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-left-style:none; border-left-width:medium">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" colspan="2"> <tt><font color="#000080">++</font></tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td style="border-right-style: none; border-right-width: medium"> <tt>(A<b><font color="#800000">-</font></b>((<font color="#008000">++</font>B)<font color="#000080">++</font>)<font color="#000080">--</font>))</tt>&#8594;<tt><b><font color="#800000">-</font></b></tt>&#8592;<tt>C 
=</tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-left-style:none; border-left-width:medium">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" colspan="2"> <tt><font color="#008000">++</font></tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td style="border-right-style: none; border-right-width: medium"> <tt>(A<b><font color="#800000">-</font></b>((<font color="#008000">++</font>B)<font color="#000080">++</font>)<font color="#000080">--</font>))<b><font color="#800000">-</font></b>C</tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-left-style:none; border-left-width:medium">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td> &nbsp;</td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;A&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;B&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;C&nbsp;&nbsp;</tt></td>
</tr>
</table>
</blockquote>
<p>The order of evaluation of the unary operations can be changed by setting 
appropriate priorities. In extreme cases it could involve infix operators as 
well:</p>
<blockquote>
<table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse">
<tr>
<td> <tt>A <b><font color="#800000">*</font></b> <font color="#008000">?</font> 
B <font color="#000080">@</font> <b><font color="#800000">*</font></b> 
C =</tt></td>
<td align="center" style="border-right-style: none; border-right-width: medium" colspan="6"> <tt><font color="#000080">@</font></tt></td>
</tr>
<tr>
<td> <tt>A <span style="background-color: #C0D8D6"><sub>3</sub></span><b><font color="#800000">*</font></b><span style="background-color: #C0D8D6"><sub>4</sub></span> <span style="background-color: #C0D8D6"><sub>
1</sub></span><font color="#008000">?</font><span style="background-color: #C0D8D6"><sub>2</sub></span> 
B <span style="background-color: #C0D8D6"><sub>
2</sub></span><font color="#000080">@</font><span style="background-color: #C0D8D6"><sub>1</sub></span> <span style="background-color: #C0D8D6"><sub>3</sub></span><b><font color="#800000">*</font></b><span style="background-color: #C0D8D6"><sub>4</sub></span> 
C =</tt></td>
<td align="center" style="border-right-style: none; border-right-width: medium" colspan="6"> <tt><b><font color="#800000">*</font></b></tt></td>
</tr>
<tr>
<td> <tt>A <span style="background-color: #C0D8D6"><sub>3</sub></span><b><font color="#800000">*</font></b><span style="background-color: #C0D8D6"><sub>4</sub></span></tt>&#8592;<tt><span style="background-color: #C0D8D6"><sub>1</sub></span><font color="#008000">?</font><span style="background-color: #C0D8D6"><sub>2</sub></span> 
B <span style="background-color: #C0D8D6"><sub>
2</sub></span><font color="#000080">@</font><span style="background-color: #C0D8D6"><sub>1</sub></span> <span style="background-color: #C0D8D6"><sub>3</sub></span><b><font color="#800000">*</font></b><span style="background-color: #C0D8D6"><sub>4</sub></span> 
C =</tt></td>
<td align="center" style="border-right-style: none; border-right-width: medium"> &nbsp;</td>
<td align="center"> &nbsp;</td>
<td align="center" style="border-right-style: none; border-right-width: medium; border-left-style:solid; border-left-width:1px; border-top-style:solid; border-top-width:1px"> &nbsp;</td>
<td align="center" style="border-right-style: none; border-right-width: medium; border-top-style:solid; border-top-width:1px"> &nbsp;</td>
<td align="center" style="border-top-style:solid; border-top-width:1px"> &nbsp;</td>
<td align="center" style="border-right-style: none; border-right-width: medium; border-left-style:solid; border-left-width:1px"> &nbsp;</td>
</tr>
<tr>
<td> <tt><font color="#008000">?</font><span style="background-color: #C0D8D6"><sub>2</sub></span> A</tt>&#8594;<tt><b><font color="#800000">*</font></b></tt>&#8592;<tt>B <span style="background-color: #C0D8D6"><sub>
2</sub></span><font color="#000080">@</font><span style="background-color: #C0D8D6"><sub>1</sub></span> <span style="background-color: #C0D8D6"><sub>3</sub></span><b><font color="#800000">*</font></b><span style="background-color: #C0D8D6"><sub>4</sub></span> 
C =</tt></td>
<td align="center" style="border-right-style: none; border-right-width: medium"> &nbsp;</td>
<td align="center" style="border-left-style: none; border-left-width: medium; border-right-style: none; border-right-width: medium" colspan="2"> <tt><font color="#008000">?</font></tt></td>
<td align="center" style="border-top-style: none; border-top-width: medium; border-left-style:none; border-left-width:medium"> &nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: none; border-top-width: medium"> &nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px"> &nbsp;</td>
</tr>
<tr>
<td> <tt><font color="#008000">?</font></tt>&#8592;<tt>(A<b><font color="#800000">*</font></b>B) <span style="background-color: #C0D8D6"><sub>
2</sub></span><font color="#000080">@</font><span style="background-color: #C0D8D6"><sub>1</sub></span> <span style="background-color: #C0D8D6"><sub>3</sub></span><b><font color="#800000">*</font></b><span style="background-color: #C0D8D6"><sub>4</sub></span> 
C =</tt></td>
<td align="center" style="border-right-style: none; border-right-width: medium" colspan="4"> <tt><b><font color="#800000">*</font></b></tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px"> &nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px"> &nbsp;</td>
</tr>
<tr>
<td> <tt>(<font color="#008000">?</font>(A<b><font color="#800000">*</font></b>B)) <span style="background-color: #C0D8D6"><sub>
2</sub></span><font color="#000080">@</font><span style="background-color: #C0D8D6"><sub>1</sub></span></tt>&#8594;<tt><span style="background-color: #C0D8D6"><sub>3</sub></span><b><font color="#800000">*</font></b><span style="background-color: #C0D8D6"><sub>4</sub></span> 
C =</tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px"> &nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px"> &nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px"> &nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px"> &nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px"> &nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px"> &nbsp;</td>
</tr>
<tr>
<td> <tt>(<font color="#008000">?</font>(A<b><font color="#800000">*</font></b>B))</tt>&#8594;<tt><b><font color="#800000">*</font></b></tt>&#8592;<tt>C <span style="background-color: #C0D8D6"><sub>2</sub></span><font color="#000080">@</font> 
=</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;A&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;B&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;C&nbsp;&nbsp;</tt></td>
</tr>
<tr>
<td> <tt>((<font color="#008000">?</font>(A<b><font color="#800000">*</font></b>B))<b><font color="#800000">*</font></b>C)</tt>&#8594;<tt><font color="#000080">@</font> 
=</tt></td>
<td colspan="2" align="center"> &nbsp;</td>
<td colspan="2" align="center"> &nbsp;</td>
<td colspan="2" align="center"> &nbsp;</td>
</tr>
<tr>
<td> <tt>((<font color="#008000">?</font>(A<b><font color="#800000">*</font></b>B))<b><font color="#800000">*</font></b>C)<font color="#000080">@</font></tt></td>
<td colspan="2" align="center"> &nbsp;</td>
<td colspan="2" align="center"> &nbsp;</td>
<td colspan="2" align="center"> &nbsp;</td>
</tr>
</table>
</blockquote>
<p><a name="left_bracket_priority"></a>Association of a left index or function
call bracket with the operand on the left is 
controlled by the left priority of the bracket. This priority is usually high 
 
because otherwise:</p>
<blockquote>
<table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse">
<tr>
<td> <tt> A <b><font color="#800000">**</font></b> B (C, D + E) =</tt></td>
<td align="center" colspan="10"> <tt> <font color="#800000">(</font><font color="#000080">)</font></tt></td>
</tr>
<tr>
<td> <tt> A <span style="background-color: #C0D8D6"><sub>
9</sub></span><b><font color="#800000">**</font></b><span style="background-color: #C0D8D6"><sub>5</sub></span> 
B <sub><span style="background-color: #C0D8D6">4</span></sub><font color="#800000">(
</font>C<font color="#800000">,</font> D <span style="background-color: #C0D8D6"><sub>1</sub></span><b><font color="#800000">+</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span> 
E<font color="#000080">)</font> =</tt></td>
<td align="center">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center">&nbsp;</td>
</tr>
<tr>
<td> <tt> A</tt>&#8594;<tt><b><font color="#800000">**</font></b></tt>&#8592;<tt>B <sub><span style="background-color: #C0D8D6">4</span></sub><font color="#800000">(
</font>C<font color="#800000">,</font> D <span style="background-color: #C0D8D6"><sub>1</sub></span><b><font color="#800000">+</font></b><span style="background-color: #C0D8D6"><sub>2</sub></span> 
E<font color="#000080">)</font> =</tt></td>
<td colspan="4" align="center"> <tt> <b><font color="#800000">**</font></b></tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" colspan="4"> <tt> <b><font color="#800000">+</font></b></tt></td>
</tr>
<tr>
<td style="border-right-style: none; border-right-width: medium"> <tt> (A<b><font color="#800000">**</font></b>B)</tt>&#8594;<tt><font color="#800000">(
</font>C<font color="#800000">,</font> D</tt>&#8594;<tt><b><font color="#800000">+</font></b></tt>&#8592;<tt>E<font color="#000080">)</font> 
=</tt></td>
<td style="border-right-style: solid; border-right-width: 1px; border-left-style:none; border-left-width:medium" align="center">&nbsp;</td>
<td style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px" align="center">&nbsp;</td>
<td style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px" align="center">&nbsp;</td>
<td style="border-left-style: solid; border-left-width: 1px" align="center">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td> <tt> <font color="#000080">()(</font>A<b><font color="#800000">**</font></b>B<font color="#800000">,
</font>C<font color="#800000">,</font> D<b><font color="#800000">+</font></b>E)</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;A&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;B&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;C&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;D&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;E&nbsp;&nbsp;</tt></td>
</tr>
</table>
</blockquote>
<p>Here <tt>&quot;()&quot;</tt> denotes indexing or function call. Normally most 
of infix operators have lower priorities, with exception of component extraction 
which usually has a higher priority. Left index brackets have no right priority.</p>
<p>The aggregate, order 
left brackets, commas and ligatures have no association priorities. The 
following table summarizes the rules of choosing the operation priorities:</p>
<TABLE border="5" cellpadding="3" cellspacing="0">
  <TR>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Operation</b></font></TD>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Left</b></font></TD>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Right</b></font></TD>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Comment</b></font></TD>
  </TR>
  <TR>
    <TD valign="top">Unary prefix operators</TD>
    <TD valign="top">High</TD>
    <TD valign="top">High, but slightly lower than the left one</TD>
    <TD valign="top">Right to left evaluation order. Normally unary operators 
    have higher priorities than binary operators. However, in Ada we find that:<table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse">
    <tr>
    <td align="center" colspan="4">
    <p align="left"> <tt>
    <font color="#008000">-</font>A<font color="#800000">*</font>B =</tt></p></td>
    </tr>
    <tr>
    <td align="center" colspan="4"> <tt>
    <font color="#008000">-</font></tt></td>
    </tr>
    <tr>
    <td align="center" colspan="4"> <tt>
    <font color="#800000">*</font></tt></td>
    </tr>
    <tr>
    <td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
    <td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
    <td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
    <td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
    </tr>
    <tr>
    <td colspan="2" align="center"> <tt>&nbsp;&nbsp;A&nbsp;&nbsp;</tt></td>
    <td colspan="2" align="center"> <tt>&nbsp;&nbsp;B&nbsp;&nbsp;</tt></td>
    </tr>
    </table>
    </TD>
  </TR>
  <TR>
    <TD valign="top">Unary postfix operators</TD>
    <TD valign="top">High</TD>
    <TD valign="top">Higher than the left one</TD>
    <TD valign="top">Usually both priorities are lower than ones of the prefix 
    operators, so that prefix ones would be evaluated first, and the postfix 
    ones next and left to right</TD>
  </TR>
  <tr>
    <TD valign="top">Normal infix operators</TD>
    <TD valign="top">Moderate</TD>
    <TD valign="top">Slightly higher than the left one</TD>
    <TD valign="top">Left to right evaluation order. Operators like component 
    extraction&nbsp; <tt>A<font color="#800000">.</font>B</tt> should have both priorities very 
    high.</TD>
  </tr>
  <TR>
    <TD valign="top">Assignment operator</TD>
    <TD valign="top">High</TD>
    <TD valign="top">Low</TD>
    <TD valign="top">This ensures that<table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse">
    <tr>
    <td align="center" colspan="8">
    <p align="left"> <tt>A<font color="#800000"> + </font>B<font color="#800000">
    := </font>C<font color="#800000"> + </font>D =</tt></p></td>
    </tr>
    <tr>
    <td align="center" colspan="8"> <tt><font color="#800000">+</font></tt></td>
    </tr>
    <tr>
    <td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
    <td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
    <td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
    <td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
    <td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
    <td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td align="center">&nbsp;</td>
    </tr>
    <tr>
    <td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
    <td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
    <td align="center" colspan="6"> <tt><font color="#800000">:=</font></tt></td>
    </tr>
    <tr>
    <td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
    <td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
    <td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
    <td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
    <td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
    <td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
    <td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
    <td align="center">&nbsp;</td>
    </tr>
    <tr>
    <td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
    <td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
    <td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
    <td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
    <td colspan="4" align="center"> <tt><font color="#800000">+</font></tt></td>
    </tr>
    <tr>
    <td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
    <td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
    <td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
    <td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
    <td style="border-right-style: solid; border-right-width: 1px" align="center">&nbsp;</td>
    <td style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px" align="center">&nbsp;</td>
    <td style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px" align="center">&nbsp;</td>
    <td style="border-left-style: solid; border-left-width: 1px" align="center">&nbsp;</td>
    </tr>
    <tr>
    <td colspan="2" align="center"> <tt>&nbsp;&nbsp;A&nbsp;&nbsp;</tt></td>
    <td colspan="2" align="center"> <tt>&nbsp;&nbsp;B&nbsp;&nbsp;</tt></td>
    <td colspan="2" align="center"> <tt>&nbsp;&nbsp;C&nbsp;&nbsp;</tt></td>
    <td colspan="2" align="center"> <tt>&nbsp;&nbsp;D&nbsp;&nbsp;</tt></td>
    </tr>
    </table>
    </TD>
  </TR>
  <TR>
    <TD valign="top">Left index brackets</TD>
    <TD valign="top">Very high</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top">Array indices and function usually have higher priority 
    than most of infix operations, but not all of them::
    <table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse">
    <tr>
    <td align="center" colspan="6">
    <p align="left">
    <tt>A<font color="#800000">+</font>B<font color="#800000">(</font>C<font color="#000080">) </font>=</tt></p></td>
    <td align="center" colspan="6">
    <p align="left">
    <tt>A<font color="#800000">.</font>B<font color="#800000">(</font>C<font color="#000080">) </font>=</tt></p></td>
    </tr>
    <tr>
    <td align="center" colspan="6"> <tt><font color="#800000">+</font></tt></td>
    <td align="center" colspan="6"> <tt>()</tt></td>
    </tr>
    <tr>
    <td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
    <td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
    <td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
    <td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
    <td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
    <td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
    <td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
    <td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
    <td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
    </tr>
    <tr>
    <td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
    <td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
    <td align="center" colspan="4"> <tt>()</tt></td>
    <td align="center" colspan="4"> <tt><font color="#800000">.</font></tt></td>
    <td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
    <td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
    </tr>
    <tr>
    <td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
    <td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
    <td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
    <td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
    <td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
    <td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
    <td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
    <td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
    <td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
    <td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
    <td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
    <td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
    </tr>
    <tr>
    <td colspan="2" align="center"> <tt>&nbsp;&nbsp;A&nbsp;&nbsp;</tt></td>
    <td colspan="2" align="center"> <tt>&nbsp;&nbsp;B&nbsp;&nbsp;</tt></td>
    <td colspan="2" align="center"> <tt>&nbsp;&nbsp;C&nbsp;&nbsp;</tt></td>
    <td align="center" colspan="2"> <tt>&nbsp;&nbsp;A&nbsp;&nbsp;</tt></td>
    <td align="center" colspan="2"> <tt>&nbsp;&nbsp;B&nbsp;&nbsp;</tt></td>
    <td align="center" colspan="2"> <tt>&nbsp;&nbsp;C&nbsp;&nbsp;</tt></td>
    </tr>
    </table>
    </TD>
  </TR>
  </TABLE>
<p>Another case of association is represented by sublist semicolons. The
semicolons also have an
association priority with the arguments in the list. Although semicolon
association priorities do not interact with the operators' ones:</p>
<blockquote>
<table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse">
<tr>
<td align="center" colspan="16">
<p align="left"><tt><font color="#008000">(</font>A <b><font color="#800000">+</font></b> 
B <font color="#800000">:</font> C<font color="#800000">,</font> D
<font color="#800000">|</font> E <font color="#800000">:</font> F<font color="#800000">,</font> 
G <font color="#800000">|</font> H<font color="#000080">)</font></tt></p></td>
</tr>
<tr>
<td align="center" colspan="16"><tt><font color="#008000">(</font><font color="#000080">)</font></tt></td>
</tr>
<tr>
<td align="center">&nbsp;</td>
<td align="center">&nbsp;</td>
<td align="center">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td align="center" colspan="8"><tt><font color="#008000">(</font><font color="#800000">|</font></tt></td>
<td align="center" colspan="6"><tt><font color="#800000">||</font></tt></td>
<td align="center" colspan="2"><tt><font color="#800000">|</font><font color="#000080">)</font></tt></td>
</tr>
<tr>
<td align="center">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td align="center" colspan="4"><tt><font color="#008000">(</font><font color="#800000">:</font></tt></td>
<td align="center" colspan="4"><tt><font color="#800000">:|</font></tt></td>
<td align="center" colspan="2"><tt><font color="#800000">|:</font></tt></td>
<td align="center" colspan="4"><tt><font color="#800000">:|</font></tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td colspan="4" align="center"><tt><b><font color="#800000">+</font></b></tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td style="border-right-style: solid; border-right-width: 1px" align="center">&nbsp;</td>
<td style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px" align="center">&nbsp;</td>
<td style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px" align="center">&nbsp;</td>
<td style="border-left-style: solid; border-left-width: 1px" align="center">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-right-style: none; border-right-width: medium">&nbsp;</td>
<td align="center" style="border-left-style: none; border-left-width: medium">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td colspan="2" align="center"><tt>&nbsp;&nbsp;A&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"><tt>&nbsp;&nbsp;B&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"><tt>&nbsp;&nbsp;C&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"><tt>&nbsp;&nbsp;D&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"><tt>&nbsp;&nbsp;E&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"><tt>&nbsp;&nbsp;F&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"><tt>&nbsp;&nbsp;G&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"><tt>&nbsp;&nbsp;H&nbsp;&nbsp;</tt></td>
</tr>
</table>
</blockquote>
<p>In this example the colon separator has higher priority than one of bar
separator.</p>
<H4><a name="12.2.3"></a>12.2.3. Association checks</H4>
<p><a name="association_checks"></a>Sometimes operations cannot be arbitrarily
associated with each other. There are three cases where operation compatibility 
can be checked:</p>
<ul>
<li><a href="#operator">Operators</a>. Two operators cannot be associated when 
they may not share an operand. Usually it is the binary infix operators for 
which one may wish to limit association. An example can be found in Ada, where:</li>
</ul>
<blockquote>
<blockquote>
<p> <tt>A&nbsp;<font color="#0000FF">and</font>&nbsp;B&nbsp;<font color="#0000FF">or</font>&nbsp;C</tt></p>
</blockquote>
<p>is illegal. Here the infix operators &quot;<font color="#FF0000">and</font>&quot; and &quot;<font color="#FF0000">or</font>&quot; 
are incompatible. Order brackets should be used to make it legal. For instance:</p>
<blockquote>
<p> <tt>A&nbsp;<font color="#0000FF">and</font>&nbsp;(B&nbsp;<font color="#0000FF">or</font>&nbsp;C)</tt></p>
</blockquote>
<p>Unary operators also can be checked. In Ada both</p>
<blockquote>
<p> <tt><font color="#008000">+</font> <font color="#008000">-</font> A&nbsp; </tt>
and&nbsp;&nbsp; <tt>A<font color="#800000">**</font><font color="#008000">+</font>2</tt></p>
</blockquote>
<p>are illegal (see 
<a href="http://www.adaic.com/standards/05rm/html/RM-4-4.html"> <i>Ada Language Reference 
Manual</i> 4.4</a>). When 
association checks are used for unary operators it is important to define 
association incompatibility relation transitive. I.e. if an operator <i>x</i> 
cannot be associated with operator <i>y</i>, but can be with <i>z</i>, then <i>y
</i>cannot be associated with <i>z</i>. Otherwise some association error may 
remain undetected.</p>
</blockquote>
<ul>
<li><a href="#brackets">Brackets, commas and ligatures</a>. Commas, ligatures 
and right brackets can be checked against the corresponding left brackets. For 
instance in</li>
</ul>
<blockquote>
<blockquote>
<p><tt>( A&nbsp;+&nbsp;B&nbsp;]</tt></p>
</blockquote>
<p>The right square bracket is incompatible with the left round bracket.</p>
</blockquote>
<ul>
<li>Mixed case. The left index bracket can be checked both against an operator 
on the left and the commas, ligatures and right brackets on the right.</li>
</ul>
<H4><a name="12.2.4"></a>12.2.4. Commutative operators</H4>
<p><a name="commutative_operators"></a>A commutative  operation is one which result does not depend on the
argument order. For example, numeric addition is commutative because <i>a</i>+<i>b</i>&nbsp;=&nbsp;<i>b</i>+<i>a</i>. 
When&nbsp;the result does not depend on the operands order, an expression can be optimized by choosing a preferable order among many possible. The preferable order, could be one evaluating the constants and invariants first. For example: 1+<i>a</i>+2&nbsp;=&nbsp;(1+2)+<i>a</i>&nbsp;=&nbsp;3+<i>a</i>. Optimization may 
also take advantage of an inverse operation of a commutative group: 1+<i>a</i>-4&nbsp;=&nbsp;1+<i>a</i>+(-4)&nbsp;=&nbsp;(1+(-4))+<i>a</i>&nbsp;=&nbsp;-3+<i>a</i>. 
Here addition is the operation of a commutative group. Subtraction is the 
inverse operation. Unary minus is defined as 0-<i>x</i>, where 0 is the group's 
zero element. To support optimizations of this kind the commutative operations 
and their inverses can be parsed so that multiple appearances of binary 
operators will be replaced by an equivalent multiple-operand operation. For 
example:</p>
<blockquote>
<p> <tt>A <b><font color="#800000">+</font></b> B <font color="#800000"><b>-</b></font> 
C <b><font color="#800000">+</font></b> D <b><font color="#800000">+</font></b> 
E</tt></p>
</blockquote>
<p>can result in:</p>
<blockquote>
<table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse">
<tr>
<td align="center" colspan="10"> <tt>+</tt></td>
</tr>
<tr>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" colspan="2"> <tt>-</tt></td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;A&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;B&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;C&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;D&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;E&nbsp;&nbsp;</tt></td>
</tr>
</table>
</blockquote>
<p>Similarly:</p>
<blockquote>
<p> <tt>A <font color="#800000"><b>-</b></font> B <font color="#800000"><b>-</b></font> 
C <b><font color="#800000">+</font></b> D <b><font color="#800000">+</font></b> 
E</tt></p>
</blockquote>
<p>can be parsed as:</p>
<blockquote>
<table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse">
<tr>
<td align="center" colspan="10"> <tt>-</tt></td>
</tr>
<tr>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px; border-top-style: solid; border-top-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: none; border-right-width: medium" colspan="2"> <tt>
-</tt></td>
<td align="center" style="border-left-style: none; border-left-width: medium; border-right-style: none; border-right-width: medium" colspan="2"> <tt>
-</tt></td>
</tr>
<tr>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
<td align="center" style="border-right-style: solid; border-right-width: 1px">&nbsp;</td>
<td align="center" style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
</tr>
<tr>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;A&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;B&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;C&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;D&nbsp;&nbsp;</tt></td>
<td colspan="2" align="center"> <tt>&nbsp;&nbsp;E&nbsp;&nbsp;</tt></td>
</tr>
</table>
</blockquote>
<p>Note that the original order can be always restored when the inverse unary 
operation is prevented from being specified explicitly. For this one can have two different unary minus 
operations one for explicit use and another used implicitly as the group
inverse. So that later if a semantic analysis of the operands involved showed that they
in fact were not 
commutative, then the corresponding optimizations could be omitted and the 
original order applied.</p>
<p>The following table summarizes the most frequently used commutative groups:</p>
<TABLE border="5" cellpadding="3" cellspacing="0">
  <TR>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Operators</b></font></TD>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Group's operation</b></font></TD>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Its inverse</b></font></TD>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Inverse unary operation</b></font></TD>
  </TR>
  <TR>
    <TD valign="top"><tt>+</tt>, <tt>-</tt></TD>
    <TD valign="top">addition</TD>
    <TD valign="top">subtraction</TD>
    <TD valign="top">Unary minus: 0-<i>x</i></TD>
  </TR>
  <TR>
    <TD valign="top"><tt>*</tt>, <tt>/</tt></TD>
    <TD valign="top">multiplication</TD>
    <TD valign="top">division</TD>
    <TD valign="top">1/<i>x</i></TD>
  </TR>
  </TABLE>
<p>The  operations that are commutative, but usually have no inverse are: logical 
and bitwise <i>and</i>, <i>or</i>, <i>xor</i>; numerical <i>min</i>, <i>max</i>. 
Alternatives separator <tt>|</tt> in Ada is also commutative.</p>
<p>Commutative optimization can be also useful for non-commutative operations. 
Often it makes sense to make the component selector <tt>.</tt> commutative to 
simplify parsing tree.</p>
<p align="right">
  <A name="12.3"></A><a href="#12.2"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#12.4"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>12.3. The base package</H3>
<p><a name="Parsers"></a>The package <a href="#Parsers">Parsers</a> is the 
parent package of all others. It defines:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Token_Class <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp; </font>&nbsp;(&nbsp; Operator,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bracket,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Comma,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ligature,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Index,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sublist_Close,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sublist_Separator,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sublist_Open,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Postmodifier,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Premodifier<br>
&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This type enumerates the <a href="#lexical_token_classes">classes</a> of
operations. It also defines the subtypes of the sublist separators (<a href="#semicolons">semicolons</a>) 
and modifiers:</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Semicolon_Class"></a>subtype</font> 
Semicolon_Class <font color="#0000FF">is</font> Token_Class<br>
&nbsp;&nbsp; <font color="#0000FF">range</font> Sublist_Close..Sublist_Open;<br>
<font color="#0000FF">subtype</font> Modifier_Class <font color="#0000FF">is</font> 
Token_Class<br>
&nbsp;&nbsp; <font color="#0000FF">range</font> Postmodifier..Premodifier;</tt></p>
</blockquote>
<p>Further the package defines the exceptions:</p>
<blockquote>
<p><tt>Syntax_Error : <font color="#0000FF">exception</font>;</tt></p>
</blockquote>
<p>The exception Syntax_Error is used by lexers. Usually it has information attached containing 
the error description and location.</p>
<blockquote>
<p><tt><a name="Parsers.Association_Error"></a>Association_Error&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">exception</font>;<br>
<a name="Parsers.Missing_Right_Bracket"></a>Missing_Right_Bracket&nbsp;&nbsp;&nbsp; : <font color="#0000FF">exception</font>;<br>
<a name="Parsers.Unexpected_Comma"></a>Unexpected_Comma&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">exception</font>;<br>
<a name="Parsers.Unexpected_Operation"></a>Unexpected_Operation&nbsp;&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">exception</font>;<br>
<a name="Parsers.Unexpected_Right_Bracket"></a>Unexpected_Right_Bracket : <font color="#0000FF">exception</font>;<br>
<a name="Parsers.Wrong_Comma_Type"></a>Wrong_Comma_Type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">exception</font>;<br>
<a name="Parsers.Wrong_Right_Bracket_Type"></a>Wrong_Right_Bracket_Type : <font color="#0000FF">exception</font>;</tt></p>
</blockquote>
<p>These exceptions are used when dealing with <a href="#operation_stack">
operation stacks</a>. They are low-level ones, and normally never propagate 
out of a lexer unhandled.</p>
<p align="right">
  <A name="12.4"></A><a href="#12.3"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#12.5"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>12.4. Sources</H3>
<p><a name="Parsers.Generic_Source"></a>The parser can scan different kinds of
sources from plain strings to text files. The generic package
<a href="#Parsers.Generic_Source">Parsers.Generic_Source</a> specifies the 
abstract interface of a source:</p>
<blockquote>
<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type </font>Source_Type (&lt;&gt;)<font color="#0000FF"> is limited 
private</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Line_Ptr_Type<font color="#0000FF"> 
is access constant </font>String;<br>
&nbsp;&nbsp; <font color="#0000FF">type </font>Location_Type<font color="#0000FF"> 
is private</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">with function</font> Get_Line (Code : 
Source_Type)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> String
<font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with procedure </font>Get_Line<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
(&nbsp; Code&nbsp;&nbsp;&nbsp; : Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Line&nbsp;&nbsp;&nbsp; : <font color="#0000FF">out</font> Line_Ptr_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Pointer : <font color="#0000FF">out</font> Integer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Last&nbsp;&nbsp;&nbsp; : <font color="#0000FF">out</font> Integer<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
)&nbsp; <font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with function </font>Get_Pointer (Code : 
Source_Type)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Integer<font color="#0000FF"> 
is </font>&lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with function </font>Get_Backup_Pointer (Code 
: Source_Type)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Integer
<font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with function </font>Image (Link : 
Location_Type)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> String<font color="#0000FF"> 
is </font>&lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with function </font>Link (Code : Source_Type)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Location_Type
<font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with procedure </font>Next_Line (Code :
<font color="#0000FF">in out </font>Source_Type)<font color="#0000FF"> is </font>
&lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with procedure </font>Reset_Pointer (Code :
<font color="#0000FF">in out </font>Source_Type)<font color="#0000FF"> is </font>
&lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with procedure </font>Set_Pointer<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
(&nbsp; Code&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out </font>Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Pointer : Integer<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
)&nbsp; <font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with function </font>&quot;<font color="#FF0000">&amp;</font>&quot; 
(Left, Right : Location_Type)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Location_Type<font color="#0000FF"> 
is </font>&lt;&gt;;<br>
<font color="#0000FF">package</font> Parsers.Generic_Source
<font color="#0000FF">is<br>
end</font> Parsers.Generic_Source;</tt></p>
</blockquote>
<p>The package does not provide any operations of its own. It only defines the interface of a source. Here</p>
<blockquote>
<p><tt><font color="#0000FF">type </font>Source_Type (&lt;&gt;)<font color="#0000FF"> 
is limited private</font>;</tt></p>
</blockquote>
<p>is the type of a source. An implementation should maintain two source cursors 
(pointers). As the parser consumes the source text it advances the cursors. The 
source slice between two cursors specifies the last token recognized by the 
parser. It may return back to the token beginning. However if the source 
contains several lines or records, then cursors always point to  same line, 
so a return may never require the previous line:</p>
<blockquote>
<p>
<img border="0" src="source.jpg" alt="source parsing" width="428" height="217"></p>
<p><tt><font color="#0000FF">type </font>Line_Ptr_Type<font color="#0000FF"> is 
private</font>;</tt></p>
</blockquote>
<p>This pointer type is used to reference source line body in the procedure
<a href="#Parsers.Generic_Source.Get_Line-procedure">Get_Line</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">type </font>Location_Type<font color="#0000FF"> is 
private</font>;</tt></p>
</blockquote>
<p>Objects of this type are used to identify a contiguous slice of the source. 
This can be any part of the source, if multiple lines are supported, then 
Location_Type should allow to specify several source lines.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> End_Of (<b>Code</b> : Source_Type) <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> at the source 
end.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Source.Get_Line"></a>function</font> Get_Line (<b>Code</b> : Source_Type) <font color="#0000FF">
return</font> String;</tt></p>
</blockquote>
<p>This function gets the current source code line. It remains valid until the 
first call to <a href="#Parsers.Generic_Source.Next_Line">Next_Line</a>. 
End_Error is propagated when end source was reached either because the source is 
empty or because of a call to <a href="#Parsers.Generic_Source.Next_Line">
Next_Line</a> before.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Parsers.Generic_Source.Get_Line-procedure"></a>procedure </font>
Get_Line<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp; <b>
Code</b>&nbsp;&nbsp;&nbsp; : Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<b>Line</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">out</font> Line_Ptr_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<b>Pointer</b> : <font color="#0000FF">out</font> Integer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<b>Last</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">out</font> Integer<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);</tt></p>
</blockquote>
<p>This procedure is combines <a href="#Parsers.Generic_Source.Get_Line">
Get_Line</a> and <a href="#Parsers.Generic_Source.Get_Pointer">
Get_Pointer</a>. It returns a pointer to the buffer containing the current 
source code line (the parameter <b>Line</b>), the current cursor position (the 
parameter <b>Pointer</b>) in that buffer and the position of the last character 
in the buffer (the parameter <b>Last</b>). It might be more efficient than the 
function <a href="#Parsers.Generic_Source.Get_Line">
Get_Line</a> if the compiler optimization is not great and it might happen that 
renaming of a slice returned from <a href="#Parsers.Generic_Source.Get_Line">
Get_Line</a> could result in copying its content. The pointer returned may refer 
to a string longer that the current line. Usually the implementation of a source 
would hold an internal string buffer. <b>Line</b> might point to it, so that <b>
Line</b> (<b>Pointer</b>..<b>Last</b>) would be the rest of the current line, 
yet to parse. The implementation shall ensure equivalence of the value returned 
in the <b>Pointer</b> parameter to the one returned by the function <a href="#Parsers.Generic_Source.Get_Pointer">
Get_Pointer</a> and accepted by <a href="#Parsers.Generic_Source.Set_Pointer">
Set_Pointer</a>. Usually it is achieved when the function
<a href="#Parsers.Generic_Source.Get_Line">
Get_Line</a> returns a slice of the buffer returned by the procedure
<a href="#Parsers.Generic_Source.Get_Line-procedure">Get_Line</a>. Note that in 
Ada string slicing does not shift the lower bound of the result to 1. Thus it is 
safe to use plain slicing there.&nbsp; Like the function, the procedure
<a href="#Parsers.Generic_Source.Get_Line">
Get_Line</a> raises End_Error at the source end or else when the source is 
empty.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Source.Get_Pointer"></a>function </font>Get_Pointer (<b>Code</b> : Source_Type) <font color="#0000FF">
return</font> Integer;</tt></p>
</blockquote>
<p>This function gets the current cursor. The result is an index in the current 
line which would be returned by <a href="#Parsers.Generic_Source.Get_Line">
Get_Line</a>. It is in the range Line'First..Line'Last+1 provided that Line is 
the value returned by <a href="#Parsers.Generic_Source.Get_Line">Get_Line</a>. 
The character pointed by <a href="#Parsers.Generic_Source.Get_Pointer">
Get_Pointer</a> is the first one to parse. The characters before are the 
recognized ones. At the source end, when <a href="#Parsers.Generic_Source.Get_Line">
Get_Line</a> would raise End_Error, 1 is the result.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Source.Get_Backup_Pointer"></a>function </font>Get_Backup_Pointer (<b>Code</b> : Source_Type)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Integer;</tt></p>
</blockquote>
<p>This function returns the saved cursor. It is one to which Restore_Pointer 
would return. At the source end, when <a href="#Parsers.Generic_Source.Get_Line">
Get_Line</a> would raise End_Error, 1 is the result. The slice of the current line starting from the result of
<a href="#Parsers.Generic_Source.Get_Backup_Pointer">Get_Backup_Pointer</a> and 
ending in the character before one pointed by
<a href="#Parsers.Generic_Source.Get_Pointer">Get_Pointer</a> is usually the 
last recognized token.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Source.Next_Line"></a>procedure </font>Next_Line (<b>Code</b> : <font color="#0000FF">in out </font>
Source_Type);</tt></p>
</blockquote>
<p>This procedure advances to the next source line. After a successful 
completion <a href="#Parsers.Generic_Source.Get_Line">Get_Line</a> can be used 
to access the newly read source line. Both cursors are set to
<a href="#Parsers.Generic_Source.Get_Line">Get_Line</a>'First. So when the line 
is not empty <a href="#Parsers.Generic_Source.Get_Pointer">Get_Pointer</a> will 
return the index of the first character in the new source line. Data_Error is 
propagated on I/O errors. End_Error is propagated when the source end is 
reached.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Source.Reset_Pointer"></a>procedure </font>Reset_Pointer (<b>Code</b> :
<font color="#0000FF">in out </font>Source_Type);</tt></p>
</blockquote>
<p>This procedure moves the second cursor back to the first cursor, so that
<a href="#Parsers.Generic_Source.Get_Pointer">Get_Pointer</a> would return the 
value of <a href="#Parsers.Generic_Source.Get_Backup_Pointer">Get_Backup_Pointer</a>. 
The depth of the &quot;unget&quot; need not to be deeper than 1. Consequent calls to 
Reset_Pointer may have no effect. It is also not required to implement return to 
the previous line.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Source.Set_Pointer"></a>procedure </font>Set_Pointer<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Code</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out </font>Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : Integer<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is used to move the cursors forward. The parameter <b>Pointer</b>
is the new position of the second cursor, it should be in the range between the position returned by
<a href="#Parsers.Generic_Source.Get_Pointer">Get_Pointer</a> and the position 
following the last character of the current line, i.e.
<a href="#Parsers.Generic_Source.Get_Line">Get_Line</a> (<b>Code</b>)'Last + 1. 
At the source end when
<a href="#Parsers.Generic_Source.Get_Line">Get_Line</a> would raise End_Error, 
the only valid value to set is 1. Otherwise Layout_Error is propagated. The
first cursor is moved to the old position of the second one. The following small example illustrates an 
implementation of a routine to skip spaces in the source line:</p>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">procedure</font> Skip (Code :
<font color="#0000FF">in out </font>Source_Type) <font color="#0000FF">is</font><br>
&nbsp;&nbsp; Line&nbsp;&nbsp;&nbsp; : String <font color="#0000FF">renames</font> 
Get_Line (Code);<br>
&nbsp;&nbsp; Pointer : Integer := Get_Pointer (Code);<br>
<font color="#0000FF">begin<br>
</font>&nbsp;&nbsp;&nbsp;<font color="#0000FF">while</font>&nbsp;Pointer&nbsp;&lt;=&nbsp;Line'Last&nbsp;<font color="#0000FF">and</font>&nbsp;<font color="#0000FF">then</font>&nbsp;Line&nbsp;(Pointer)&nbsp;=&nbsp;'&nbsp;'&nbsp;<font color="#0000FF">loop</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pointer := Pointer + 1;<br>
&nbsp;&nbsp; <font color="#0000FF">end loop</font>;<br>
&nbsp;&nbsp; Set_Pointer (Code, Pointer);<br>
<font color="#0000FF">end</font> Skip;</tt></TD>
  </TR>
</TABLE>
<p>The procedure Skip could be implemented using the procedure
<a href="#Parsers.Generic_Source.Get_Line-procedure">Get_Line</a> as follows:</p>
<TABLE border="1" cellpadding="15" cellspacing="0" id="table1">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">procedure</font> Skip (Code :
<font color="#0000FF">in out </font>Source_Type) <font color="#0000FF">is</font><br>
&nbsp;&nbsp; Line&nbsp;&nbsp;&nbsp; : Line_Ptr_Type;<br>
&nbsp;&nbsp; Pointer : Integer;<br>
&nbsp;&nbsp; Last&nbsp;&nbsp;&nbsp; : Integer;<br>
<font color="#0000FF">begin<br>
</font>&nbsp;&nbsp; Get_Line (Code, Line, Pointer, Last);<font color="#0000FF"><br>
</font>&nbsp;&nbsp;&nbsp;<font color="#0000FF">while</font>&nbsp;Pointer&nbsp;&lt;=&nbsp;Last&nbsp;<font color="#0000FF">and</font>&nbsp;<font color="#0000FF">then</font>&nbsp;Line&nbsp;(Pointer)&nbsp;=&nbsp;'&nbsp;'&nbsp;<font color="#0000FF">loop</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pointer := Pointer + 1;<br>
&nbsp;&nbsp; <font color="#0000FF">end loop</font>;<br>
&nbsp;&nbsp; Set_Pointer (Code, Pointer);<br>
<font color="#0000FF">end</font> Skip;</tt></TD>
  </TR>
</TABLE>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Source.Link"></a>function </font>Link (<b>Code</b> : Source_Type)
<font color="#0000FF">return</font> Location_Type;</tt></p>
</blockquote>
<p>This function gets the source code location between two cursors. The second 
cursor is one returned by <a href="#Parsers.Generic_Source.Get_Pointer">
Get_Pointer</a>. The first cursor is the previous value of the second one 
returned by <a href="#Parsers.Generic_Source.Get_Backup_Pointer">Get_Backup_Pointer</a>. 
The slice in between is usually the last recognized lexical token. It includes 
the character pointed by the first cursor, and does not one pointed by the 
second one. Empty slices are allowed, so Link should never fail even at the end 
of a source. Should Link (<b>Code</b>) called immediately after a call to Skip 
above, it would return a location identifying the blank slice matched by Skip in 
the source code line. </p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Source.Image"></a>function </font>Image (<b>Link</b> : Location_Type)
<font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function returns a text description of a location. The result is a 
string;</p>
<blockquote>
<p><tt><font color="#0000FF">function </font>&quot;<font color="#FF0000">&amp;</font>&quot; (<b>Left</b>,
<b>Right</b> : Location_Type)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Location_Type;</tt></p>
</blockquote>
<p>This function is used to combine two, usually adjacent a source code 
locations. The result is a consecutive code fragment containing positions from 
both <b>Left</b> and <b>Right</b> locations. For example if <b>Left</b> and <b>
Right</b> are locations of &quot;(&quot; and &quot;)&quot; then the result is everything in the 
brackets including the brackets.</p>
<p>Various generic child packages provide parsing facilities to match a thing in 
a source and move the cursor beyond it:</p>
<ul>
	<li>Blanks skipping: <a href="#Parsers.Generic_Source.Get_Blank">plain 
	blanks</a>, <a href="#Parsers.Generic_Source.Get_Ada_Blank">Ada comments</a>,
	<a href="#Parsers.Generic_Source.Get_Cpp_Blank">C++ comments</a>;</li>
	<li>Matching a <a href="#Parsers.Generic_Source.Get_Text">text</a>;</li>
	<li>Matching a <a href="#Parsers.Generic_Source.Get_Token">text from a set</a> 
	of, that is when there is a list of alternatives to choose;</li>
	<li>Matching a <a href="#Parsers.Generic_Source.Keywords">keyword</a>, which 
	is similar to previous, based on a discrete type;</li>
	<li>Matching an XPM image format..</li>
</ul>
<H4><a name="12.4.1"></a>12.4.1. Source cursors I/O</H4>
<p><a name="Parsers.Generic_Source.Text_IO"></a>The child package
<a href="#Parsers.Generic_Source.Text_IO">Parsers.Generic_Source.Text_IO</a> can 
be used for debugging. It provides:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Put_Line<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>File</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: File_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Code</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Expand_Tabs</b> : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">procedure</font> Put_Line<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp; <b>Code</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Expand_Tabs</b> : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures output the current source code line following current source 
cursors. The output might look like: </p>
<blockquote>
<p><tt>123.0 + ( Value - 1)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ^^^^^|</tt></p>
</blockquote>
<p>The parameter <b>File</b> is the text file to write. It is the standard 
output if missing. <b>Code</b> is the source code. The parameter <b>Expand_Tabs</b> 
when <i><font color="#800000">true</font></i> forms the second output line in 
accordance with the tabulations expanded in the first line. The tabulations of 
the first line are not explicitly expanded, but output as-is.</p>
<p><a name="Parsers.Multiline_Source.Location_Text_IO"></a>The package
<a href="#Parsers.Multiline_Source.Location_Text_IO">
Parsers.Multiline_Source.Location_Text_IO</a> is an instance of
<a href="#Parsers.Generic_Source.Text_IO">Parsers.Generic_Source.Text_IO</a> for 
the multi-line source provided in the package
<a href="#Parsers.Multiline_Source">Parsers.Multiline_Source</a>.</p>
<H4><a name="12.4.2"></a>12.4.2. Procedures to skip blanks </H4>
<p><a name="Parsers.Generic_Source.Get_Blank"></a>There are three child procedures of
<a href="#Parsers.Generic_Source">Parsers.Generic_Source</a> which can be used 
to skip the following blanks and comments:</p>
<blockquote>
<p><tt><font color="#0000FF">generic</font><br>
<font color="#0000FF">procedure</font> Parsers.Generic_Source.Get_Blank<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Code</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Got_It</b> : <font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure  skips spaces, tabulations (HT), line feeds (LF), carriage returns 
(CR), vertical tabulations (VT), form feeds (FF) and 
requests <a href="#Parsers.Generic_Source.Next_Line">new source lines</a> when 
necessary. Upon completion <b>Got_It</b> is set to <i><font color="#800000">true</font></i> 
if the source end is not yet reached. Otherwise it is <font color="#800000"><i>
false</i></font>.</p>
<blockquote>
<p><tt><a name="Parsers.Generic_Source.Get_Ada_Blank"></a>
<font color="#0000FF">generic</font><br>
<font color="#0000FF">procedure</font> Parsers.Generic_Source.Get_Ada_Blank<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Code</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Got_It</b> : <font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure skips Ada 
95 comments, spaces, HT, LF, CR, VT, FF and requests <a href="#Parsers.Generic_Source.Next_Line">new source 
lines</a> when necessary. Upon completion <b>Got_It</b> is set to <i>
<font color="#800000">true</font></i> if the source end is not yet reached. 
Otherwise it is <font color="#800000"><i>false</i></font>.
<a name="Ada_comments"></a>Beware that according to Ada 95 RM
<a href="http://www.adaic.com/standards/05rm/html/RM-2-2.html">2.2</a> comment ends
either at the physical line end or in either of format effectors: LF, CR, VT, 
FF. This may lead to surprises when format effectors appear in the middle of what 
the operating system counts for a single line.</p>
<blockquote>
<p><a name="Parsers.Generic_Source.Get_Ada_2005_Blank"></a><tt>
<font color="#0000FF">generic</font><br>
<font color="#0000FF">procedure</font> Parsers.Generic_Source.Get_Ada_2005_Blank<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Code</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Got_It</b> : <font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure  skips Ada 2005 comments and blanks. It is similar to
<a href="#Parsers.Generic_Source.Get_Ada_Blank">Get_Ada_Blank</a> except that 
UTF-8 encoded space separators are also considered blank.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Source.Get_Cpp_Blank"></a>generic</font><br>
<font color="#0000FF">procedure</font> Parsers.Generic_Source.Get_Cpp_Blank<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Code</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Got_It</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Error</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<b>Error_At</b> : <font color="#0000FF">out</font> Location_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure  skips C++ comments, spaces, HT, LF, CR, VT, FF and requests <a href="#Parsers.Generic_Source.Next_Line">new source 
lines</a> when necessary. A C++ comment either starts with <tt>//</tt> (double 
forward slash) and continues to the end of the current line or it does with <tt>/*</tt> 
(forward slash, asterisk) and continues to the first appearance of closing <tt>
*/</tt>. In the latter case nested <tt>/*</tt>..<tt>*/</tt> comments are not 
recognized. Upon completion <b>Got_It</b> is set to <i><font color="#800000">
true</font></i> if the source end is not yet reached. Otherwise it is
<font color="#800000"><i>false</i></font>. Error is set to 
<font color="#800000">
<i>true</i></font> when no closing <tt>*/</tt>  is found before the source end. In 
this case Error_At contains the location of <tt>/*</tt> in the source. 
Otherwise, Error is <font color="#800000"><i>false</i></font> and Error_At is 
not defined.</p>
<H4><a name="12.4.3"></a>12.4.3. Procedure to skip text</H4>
<p>There are two child procedures of
<a href="#Parsers.Generic_Source">Parsers.Generic_Source</a> which can be used 
to skip a text in the source:</p>
<blockquote>
<p><a name="Parsers.Generic_Source.Get_Text"></a><tt><font color="#0000FF">generic</font><br>
<font color="#0000FF">procedure</font>  Parsers.Generic_Source.Get_Text<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Code</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font>  Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Text</b>&nbsp;&nbsp;
: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Got_It</b> : <font color="#0000FF">out</font> Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Map</b>&nbsp;&nbsp;&nbsp;
: Character_Mapping := Identity&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
<a name="Parsers.Generic_Source.Get_UTF8_Text"></a>generic</font><br>
<font color="#0000FF">procedure</font>  Parsers.Generic_Source.Get_UTF8_Text<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Code</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font>  Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Text</b>&nbsp;&nbsp;
: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Got_It</b> : <font color="#0000FF">out</font> Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Map</b>&nbsp;&nbsp;&nbsp;
: Unicode_Mapping := Identity&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p> The procedure <a href="#Parsers.Generic_Source.Get_Text">Get_Text</a> is 
used for dealing with Latin-1 encoded sources. The procedure
<a href="#Parsers.Generic_Source.Get_UTF8_Text">Get_UTF8_Text</a> is used with 
UTF-8 sources. Upon completion <b>Got_It</b> is set to <i><font color="#800000">true</font></i> 
if <b>Text</b> was recognized and skipped. Otherwise it is 
<font color="#800000"><i>
false</i></font>. It can be used for creating simple recursively descending
parsers. The parameter <b> Map</b> specifies the  character  equivalence.  A  character  in the source and in
<b> Text</b> are  equivalent  when  they  are  equivalent  in <b>Map</b>.  The default value  considers  all  characters  distinct. To have case-insensitive match  one can use
Ada.Strings.Maps.Constants.Lower_Case_Map with
<a href="#Parsers.Generic_Source.Get_Text">Get_Text</a>, and.<a href="http://www.dmitry-kazakov.de/ada/strings_edit.htm#Strings_Edit.UTF8.Maps.Constants">Strings_Edit.UTF8.Maps.Constants</a>.Lower_Case_Map 
with <a href="#Parsers.Generic_Source.Get_UTF8_Text">Get_UTF8_Text</a>. 
Syntax_Error is propagated from
<a href="#Parsers.Generic_Source.Get_UTF8_Text">Get_UTF8_Text</a> when source is 
not properly encoded UTF-8.</p>
<H4><a name="12.4.4"></a>12.4.4. Matching keywords</H4>
<p>When writing recursive descent parsers it is common to match the source
against a list of keywords. The child procedure <a href="#Parsers.Generic_Source.Get_Token">Get_Token</a>
of
<a href="#Parsers.Generic_Source">Parsers.Generic_Source</a>  can be used for
this purpose. It has a generic formal parameter Tokens which is an instance of
the package <a href="http://www.dmitry-kazakov.de/ada/tables.htm">Tables</a>:</p>
<blockquote>
<p><a name="Parsers.Generic_Source.Get_Token"></a><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; with package </font> Tokens<font color="#0000FF"> is new </font> Tables (&lt;&gt;);<font color="#0000FF"><br>
procedure </font> Parsers.Generic_Source.Get_Token<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Code</b>&nbsp;&nbsp;
: <font color="#0000FF"> in out </font> Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Folder</b> : Tokens.Table'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Token</b>&nbsp;
: <font color="#0000FF"> out</font> Tokens.Tag;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Got_It</b> :
<font color="#0000FF"> out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The procedure matches the source <b>Code</b> against the table <b>Folder</b>.
If a token from <b>Folder</b> is matched, then it is skipped in <b>Code</b>, the
value associated with it is stored in <b>Token</b> and <b>Got_It</b> is set to <i>
<font color="#800000">true</font></i>.
Otherwise <b>Got_It</b> is set to <font color="#800000"><i>false</i></font>, and
<b>Token</b> is not changed. Note that <b>Folder </b>can be a descendant of the table type defined in <a href="http://www.dmitry-kazakov.de/ada/tables.htm">Tables</a>.
This means that one can also use case-insensitive tables from the package <a href="http://www.dmitry-kazakov.de/ada/tables.htm#Tables.Names">Tables.Names</a>.</p>
<p><a name="Parsers.Generic_Source.Keywords"></a>When keywords to match are
plain case-insensitive words, the generic child package <a href="#Parsers.Generic_Source.Keywords">Keywords</a>
can be used instead of <a href="#Parsers.Generic_Source.Get_Token">Get_Token</a>.  An  enumeration type  is  the  generic parameter of the package. The literals of the
type are the keywords to match:</p>
<blockquote>
  <p><tt><font color="#0000FF">generic<br>
  &nbsp;&nbsp; type </font> Keyword <font color="#0000FF"> is</font> (&lt;&gt;);<br>
  <font color="#0000FF">package</font> Parsers.Generic_Source.Keywords<font color="#0000FF">
  is<br>
  </font>&nbsp;&nbsp; ...</tt></p>
</blockquote>
<p>The package provides the procedure:</p>
<blockquote>
<p><tt><font color="#0000FF">
procedure </font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Code</b>&nbsp;&nbsp;
: <font color="#0000FF"> in out </font> Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Token</b>&nbsp;
: <font color="#0000FF"> out</font>  Keyword;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Got_It</b> :
<font color="#0000FF"> out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This   procedure   matches   a   keyword   in <b>Code</b>.   Matching   is case-insensitive.  When  matched  the keyword value is set into
<b> Token</b> and <b> Got_It</b> is set to <i><font color="#800000">true</font></i>. The source  cursor  is  then  advanced
behind the  text  matched.  The  longest  possible  token  is  always matched. When no token matches the source
<b> Got_It</b> is set to <font color="#800000"><i>false</i></font>. The
following code sample illustrates usage of the package:</p>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6">
<p><tt><font color="#0000FF">     with</font> Parsers.Multiline_Source;<font color="#008000"> --
Muiltiline sources</font><br>
     ...<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Color_Type <font color="#0000FF"> is</font> (Red, Blue, White, Green);<br>
&nbsp;&nbsp; <font color="#0000FF">package</font> Colors<font color="#0000FF"> is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        new </font> Parsers.Multiline_Source.Code.Keywords
(Color_Type);<br>
&nbsp;&nbsp;     ...<br>
&nbsp;&nbsp; Color&nbsp; : Color_Type;<br>
&nbsp;&nbsp; Got_It : Boolean;<br>
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp;     ...<br>
&nbsp;&nbsp; <font color="#0000FF">loop</font><font color="#008000"> -- Parsing loop</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        ...<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        Colors.Get (Code, Color, Got_It);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">if not </font> Got_It <font color="#0000FF"> then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;           ... <font color="#008000"> -- This is probably a syntax error</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;           case </font> Color<font color="#0000FF"> is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;              when
</font> Red&nbsp; =&gt;<font color="#008000"> -- "red" was matched</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;                 ...<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> Blue =&gt;<font color="#008000"> -- "blue" was matched</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;                 ...</tt></p>
</TD>
  </TR>
</TABLE>
<p>This package has a limited use, because many words are reserved in Ada, and
thus cannot be enumeration literals.</p>
<H4><a name="12.4.5"></a>12.4.5. Parsing XPM files</H4>
<p><a name="Parsers.Generic_Source.XPM"></a>This is a useful example of 
designing parsers unrelated to infix expressions, based solely on sources. The 
source code is located in the subdirectory <i>xpm</i>. It provides 
a set of types to deal with XPM image format. The package is generic:</p>
<blockquote>
<p><tt><font color="#0000FF">generic<br>
package </font>Parsers.Generic_Source.XPM<font color="#0000FF"> is</font><br>
&nbsp;&nbsp; ...</tt></p>
</blockquote>
<p><a name="Parsers.Multiline_Source.XPM"></a>It can be instantiated for any 
type sources, but usually it makes sense for <a href="#Parsers.Multiline_Source">
multi-line sources</a> only. The is an instance of the package for this case:
<a href="#Parsers.Multiline_Source.XPM">Parsers.Multiline_Source.XPM</a>.</p>
<p>The generic package provides three subprograms for parsing XPM files. An XPM 
file is basically a C program containing data structures of an image. The source 
of it is usually parsed this way: </p>
<blockquote>
	<p><tt><font color="#0000FF">declare<br>
	</font>&nbsp;&nbsp; Header : Descriptor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= Get (Source);<br>
&nbsp;&nbsp; Map&nbsp;&nbsp;&nbsp; : Color_Tables.Table := Get (Source, Header);<br>
&nbsp;&nbsp; Image&nbsp; : Pixel_Buffer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := 
	Get (Source, Header, Map);<br>
	<font color="#0000FF">begin<br>
	</font>&nbsp;&nbsp; ... <font color="#008000">-- </font></tt><i>
	<font color="#008000">The image can be used here</font></i></p>
</blockquote>
<p>The package defines the following data types and subroutines:</p>
<blockquote>
  <p><tt><font color="#0000FF">type</font> Descriptor<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Has_Hotspot : Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Length&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is<br>
	record<br>
	</font>&nbsp;&nbsp; Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : String (<font color="#800000">1</font>..Length);<br>
&nbsp;&nbsp; Width&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Positive;<br>
&nbsp;&nbsp; Height&nbsp;&nbsp;&nbsp;&nbsp; : Positive;<br>
&nbsp;&nbsp; Pixel_Size : Positive;<br>
&nbsp;&nbsp; Map_Size&nbsp;&nbsp; : Positive;<br>
&nbsp;&nbsp; Extended&nbsp;&nbsp; : Boolean;<font color="#0000FF"><br>
&nbsp;&nbsp; case </font>Has_Hotspot<font color="#0000FF"> is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when </font>True =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X_Hotspot : Natural;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Y_Hotspot : Natural;<font color="#0000FF"><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when </font>False =&gt;<font color="#0000FF"><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; null</font>;<font color="#0000FF"><br>
&nbsp;&nbsp; end case</font>;<font color="#0000FF"><br>
	end record</font>;</tt></p>
</blockquote>
<p>The descriptor holds the information about an XPM image:</p>
<ul>
	<li>Name is the name of the image, as found in the file;</li>
	<li>Width is the image width in pixels;</li>
	<li>Height is the image height in pixels;</li>
	<li>Pixel_Size is the number of characters per pixel used in the file;</li>
	<li>Map_Size is the number of colors in the image colormap;</li>
	<li>Extended is <i><font color="#800000">true</font></i> if the image has 
	XPMEXT part;</li>
	<li>X_Hotspot is the horizontal co-ordinate of hostspot 0..;</li>
	<li>Y_Hotspot is the vertical co-ordinate of hostspot 0...</li>
</ul>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Parsers.Generic_Source.XPM.Get-descriptor"></a>function</font> Get (<b>Code</b> 
: <font color="#0000FF">
access</font> Source_Type) <font color="#0000FF">
return</font> Descriptor;</tt></p>
</blockquote>
<p>This function matches XPM descriptor in <b>Code</b> and returns the value of. 
Syntax_Error is propagated on syntax errors. Other exceptions are related to the 
source access.</p>
<blockquote>
  <p><tt><font color="#0000FF">type</font> RGB_Color <font color="#0000FF">is 
	range</font> <font color="#800000">0</font>..<font color="#800000">2</font>**<font color="#800000">24</font>;<br>
	Transparent : <font color="#0000FF">constant</font> RGB_Color := 
	RGB_Color'Last;<br>
	<font color="#0000FF">package</font> Color_Tables <font color="#0000FF">is 
	new</font> Tables (RGB_Color);</tt></p>
</blockquote>
<p>The color values are encoded as RGB, big-endian. For example, Red is 
16#FF0000#. The value 2**24 is used for the transparent color. The type 
Color_Table.Table is a mapping from String to RGB_Color used to represent color 
maps. It is an instance of <a href="http://www.dmitry-kazakov.de/ada/tables.htm">Tables</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Parsers.Generic_Source.XPM.Get-map"></a>function</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Code</b>&nbsp;&nbsp; 
: <font color="#0000FF">
access</font> Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Header</b> 
: Descriptor<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Color_Tables.Table;</tt></p>
</blockquote>
<p>This function matches XPM color map in <b>Code</b> and returns the value of.
<b>Header</b> is a descriptor obtained by a call to
<a href="#Parsers.Generic_Source.XPM.Get-descriptor">Get</a> immediately before. 
Syntax_Error is propagated on syntax errors. Other exceptions are related to the 
source access.</p>
<blockquote>
  <p><tt><font color="#0000FF">type</font> Pixel_Buffer <font color="#0000FF">is<br>
&nbsp;&nbsp; array </font>(Positive <font color="#0000FF">range</font> &lt;&gt;, 
	Positive <font color="#0000FF">range</font> &lt;&gt;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">of</font> RGB_Color;</tt></p>
</blockquote>
<p>This type is used to represent the image pixels as <i>row</i> x <i>column</i>.</p>
<blockquote>
<p><tt><font color="#0000FF">
function</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Code</b>&nbsp;&nbsp; 
: <font color="#0000FF">access</font> Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Header</b> 
: Descriptor;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Map</b>&nbsp;&nbsp;&nbsp; 
: Color_Tables.Table<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Pixel_Buffer;</tt></p>
</blockquote>
<p>This function matches XPM image in <b>Code</b> and returns the value of. <b>
Header</b> is a descriptor obtained by a call to
<a href="#Parsers.Generic_Source.XPM.Get-descriptor">Get</a> and <b>Map</b> is a 
color map obtained by a call to <a href="#Parsers.Generic_Source.XPM.Get-map">
Get</a>. Syntax_Error is propagated on syntax errors. Other exceptions are 
related to the source access.</p>
<H4><a name="12.4.6"></a>12.4.6. String sources</H4>
<p><a name="Parsers.String_Source"></a>The package
<a href="#Parsers.String_Source">Parsers.String_Source</a> provides an 
implementation of code source based on standard strings. The package is 
non-generic. It instantiates <a href="#Parsers.String_Source">
Parsers.Generic_Source</a> under the name Code. So the package 
Parsers.String_Source.Code can be used everywhere an instance of
<a href="#Parsers.String_Source">Parsers.Generic_Source</a> is required. 
Additionally the package defines:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Location <font color="#0000FF">is 
record</font><br>
&nbsp;&nbsp; From&nbsp;&nbsp; : Integer;<br>
&nbsp;&nbsp; Length : Natural;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>This is the type used for string source locations.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.String_Source.Source"></a>type</font> Source (Text : <font color="#0000FF">
access</font> String)<font color="#0000FF"> is limited record</font><br>
&nbsp;&nbsp; Pointer : Integer := Text'First;<br>
&nbsp;&nbsp; Last&nbsp;&nbsp;&nbsp; : Integer := Text'First;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>This is the type of a string source. The discriminant Text points to the 
string being parsed.</p>
<H4><a name="12.4.7"></a>12.4.7. Multi-line sources</H4>
<p><a name="Parsers.Multiline_Source"></a>The package
<a href="#Parsers.Multiline_Source">Parsers.Multiline_Source</a> provides an 
implementation of code sources consisting of several lines. The package is 
non-generic. It instantiates <a href="#Parsers.String_Source">
Parsers.Generic_Source</a> under the name Code. So the package 
Parsers.Multiline_Source.Code can be used everywhere an instance of
<a href="#Parsers.String_Source">Parsers.Generic_Source</a> is required. The 
package defines an abstract base type Source which should be concretized by 
overriding its abstract operations. The package defines: </p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Line_Number <font color="#0000FF">is 
new </font>Natural;</tt></p>
</blockquote>
<p>The source line numbers.</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Position <font color="#0000FF">is 
record</font><br>
&nbsp;&nbsp; Line&nbsp;&nbsp; : Line_Number;<br>
&nbsp;&nbsp; Column : Integer;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>The source position.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> &quot;<font color="#FF0000">&lt;</font>&quot; (<b>Left</b>,
<b>Right</b> : Position) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>The source positions are comparable using both <tt> &quot;<font color="#FF0000">=</font>&quot;</tt>
and <tt> &quot;<font color="#FF0000">&lt;</font>&quot;</tt> .</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Location <font color="#0000FF">is 
record</font><br>
&nbsp;&nbsp; First : Position;<br>
&nbsp;&nbsp; Next&nbsp; : Position;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>The source locations are specified by the first character position and the 
position of the first character next to location.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Multiline_Source.Source"></a>type</font> Source<font color="#0000FF"> is<br>
&nbsp;&nbsp; abstract new </font>Ada.Finalization.Limited_Controlled<font color="#0000FF"> 
with <br>
record</font><br>
&nbsp;&nbsp; Buffer&nbsp; : String_Ptr;<br>
&nbsp;&nbsp; Line&nbsp;&nbsp;&nbsp; : Line_Number := <font color="#800000">0</font>;<br>
&nbsp;&nbsp; Length&nbsp; : Natural;<br>
&nbsp;&nbsp; Pointer : Integer;<br>
&nbsp;&nbsp; Last&nbsp;&nbsp;&nbsp; : Integer;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>Here the fields are:</p>
<ul>
<li>Buffer is the current source line buffer</li>
<li>Line is the current source line number</li>
<li>Length is the current line length in the buffer</li>
<li>Pointer is the second cursor</li>
<li>Last is the first (backup) cursor</li>
</ul>
<p>The field Buffer points to a string, which is used to keep the current source 
line. The constructor allocates the buffer of some reasonable size. When a new 
line is requested the buffer can be replaced by a larger one if necessary. </p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Finalize (<b>Code</b> :
<font color="#0000FF">in out </font>Source);</tt></p>
</blockquote>
<p>The destructor deallocates the buffer.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize (<b>Code</b> :
<font color="#0000FF">in out </font>Source);</tt></p>
</blockquote>
<p>The constructor creates the buffer.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Get_Line (<b>Code</b> :
<font color="#0000FF">in out </font>Source)<font color="#0000FF"> is abstract</font>;</tt></p>
</blockquote>
<p>This is an abstract procedure to be overridden. An implementation should read 
a complete next line into <b>Code</b>.Buffer.<font color="#0000FF">all</font>. 
It may reallocate the buffer if necessary. After a successful completion <b>Code</b>.Buffer 
should point to a buffer containing the line and <b>Code</b>.Length should be 
the line length. The rest of the buffer is ignored. End_Error is propagated if 
no more lines available. Other exceptions can be used on I/O error.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Multiline_Source.Get_Location">
</a>function</font> Get_Location<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Message</b> : 
String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Prefix</b>&nbsp; 
: String := &quot;<font color="#FF0000">at </font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Location;</tt></p>
</blockquote>
<p>This function searches for a location image in an error message string. The 
image is searched backwards for an appearance of <b>Prefix</b>. If an image does 
not follow <b>Prefix</b> search continues. The result is the location decoded 
according to the format used by <a href="#Parsers.Generic_Source.Image">Image</a>. 
If no image found the result is ((0,0), (0,0)).</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Multiline_Source.Skip"></a>procedure</font> Skip (<b>Code</b> :
<font color="#0000FF">in out</font> Source'Class; <b>Link</b> : Location);</tt></p>
</blockquote>
<p>This procedure advances the source <b>Code</b> to the location <b>Link</b>, 
so that the result of <a href="#Parsers.Generic_Source.Link">Link</a> (<b>Code</b>) 
would equal to the value of the parameter <b>Link</b>. Layout_Error is 
propagated when the source is beyond the first position of <b>Link</b>. It is 
also propagated when some parts of <b>Link</b> do not belong to the source <b>
Code</b>.</p>
<p>The following sample code illustrates use of 
<a href="#Parsers.Multiline_Source.Skip">Skip</a> and
<a href="#Parsers.Multiline_Source.Get_Location">Get_Location</a> for error 
output:. The procedure takes error occurrence and the source file name. Then it 
opens the file, moves to the error location obtained and prints the location 
together with the error message.</p>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6">
<tt><font color="#0000FF">     with </font>Ada.Text_IO;<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
use </font>Ada.Text_IO;<font color="#0000FF"><br>
with </font>Ada.Exceptions;<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
use </font>Ada.Exceptions;<font color="#0000FF"><br>
with </font>Parsers.Multiline_Source;<font color="#0000FF">&nbsp; use </font>
Parsers.Multiline_Source;<font color="#0000FF"><br>
<br>
with </font>Parsers.Multiline_Source.Location_Text_IO;<font color="#0000FF"><br>
use&nbsp; </font>Parsers.Multiline_Source.Location_Text_IO;<font color="#0000FF"><br>
<br>
procedure </font>Show_Error (Error : Erroc_Occurrence; File_Name : String) <font color="#0000FF">     
is<br>
</font>&nbsp;&nbsp; File : <font color="#0000FF">aliased</font> File_Type;<br>
<font color="#0000FF">     begin</font><br>
&nbsp;&nbsp; Open (File, In_File, File_Name);<br>
&nbsp;&nbsp; <font color="#0000FF">declare</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Code : Parsers.Multiline_Source.Text_IO.Source (File'Access);<br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Skip (Code, Get_Location (Exception_Message 
(Error)));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put_Line (Code);<br>
&nbsp;&nbsp; <font color="#0000FF">exception<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when others</font> =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font>;<br>
&nbsp;&nbsp; Close (File);<br>
&nbsp;&nbsp; Put_Line (&quot;<font color="#FF0000">Error : </font>&quot; &amp; 
Exception_Message (Error));<br>
<font color="#0000FF">exception<br>
&nbsp;&nbsp; when others</font> =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Close (File); <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put_Line (&quot;<font color="#FF0000">Error : </font>&quot; 
&amp; Exception_Message (Error));<br>
<font color="#0000FF">end</font> Show_Error;</tt></TD>
  </TR>
</TABLE>
<H4><a name="12.4.8"></a>12.4.8. Text file sources</H4>
<p><a name="Parsers.Multiline_Source.Text_IO"></a>The package
<a href="#Parsers.Multiline_Source.Text_IO">Parsers.Multiline_Source.Text_IO</a> provides
sources based on text files. It declares the type Source:</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Multiline_Source.Text_IO.Source">
</a>type</font> Source (File : <font color="#0000FF">
access</font> File_Type) <font color="#0000FF">is</font><br>
&nbsp;&nbsp; <font color="#0000FF">new</font> Multiline_Source.Source<font color="#0000FF">
with private</font>;</tt></p>
</blockquote>
<p>The discriminant File points to the file to read. The type File_Type is defined 
in Ada.Text_IO. See also <a href="#Parsers.Multiline_Source.Latin1_Text_IO">Parsers.Multiline_Source.Latin1_Text_IO</a> 
and
<a href="#Parsers.Multiline_Source.Wide_Text_IO">Parsers.Multiline_Source.Wide_Text_IO</a> 
packages used for handling Latin-1 and wide (UCS-2) encoded files as with 
recoding into UTF-8.</p>
<H4><a name="12.4.9"></a>12.4.9. Standard input source</H4>
<p><a name="Parsers.Multiline_Source.Standard_Input"></a>The package
<a href="#Parsers.Multiline_Source.Standard_Input">Parsers.Multiline_Source.Standard_Input</a> provides
sources based on the standard input file. It declares the type Source:</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Parsers.Multiline_Source.Standard_Input.Source"></a>type</font> Source <font color="#0000FF">is</font> <font color="#0000FF">new</font> Multiline_Source.Source<font color="#0000FF">
with private</font>;</tt></p>
</blockquote>
<H4><a name="12.4.10"></a>12.4.10. Latin-1 and wide text file sources</H4>
<p><a name="Parsers.Multiline_Source.Latin1_Text_IO"></a>The package
<a href="#Parsers.Multiline_Source.Latin1_Text_IO">Parsers.Multiline_Source.Latin1_Text_IO</a> provides
sources based on latin-1 text files. It declares the type Source:</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Parsers.Multiline_Source.Latin1_Text_IO.Source">
</a>type</font> Source (File : <font color="#0000FF">
access</font> File_Type) <font color="#0000FF">is</font><br>
&nbsp;&nbsp; <font color="#0000FF">new</font> Multiline_Source.Source<font color="#0000FF">
with private</font>;</tt></p>
</blockquote>
<p>The discriminant File points to the file to read. The type File_Type is defined 
in Ada.Text_IO. The package is used to read text files encoded in Latin-1, when 
the parser is designed for UTF-8. Otherwise, Latin-1 files can also be read 
using <a href="#Parsers.Multiline_Source.Text_IO">Parsers.Multiline_Source.Text_IO</a>. The implementation 
recodes the input into UTF-8, so that the parser need not to care about the 
actual encoding. Note that the source position is translated correspondingly, 
i.e. Pointer would refer to the source line octet offset rather than to the 
corresponding character position.</p>
<p><a name="Parsers.Multiline_Source.Wide_Text_IO"></a>The package
<a href="#Parsers.Multiline_Source.Wide_Text_IO">Parsers.Multiline_Source.Wide_Text_IO</a> provides
sources based on wide text files. It declares the type Source:</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Multiline_Source.Wide_Text_IO.Source">
</a>type</font> Source (File : <font color="#0000FF">
access</font> File_Type) <font color="#0000FF">is</font><br>
&nbsp;&nbsp; <font color="#0000FF">new</font> Multiline_Source.Source<font color="#0000FF">
with private</font>;</tt></p>
</blockquote>
<p>The discriminant File points to the file to read. The type File_Type is defined 
in Ada.Wide_Text_IO. The package is used to read text files encoded in a way 
that requires wide text I/O. Usually it is UCS-2 files. The implementation 
recodes the input into UTF-8, so that the parser need not to care about the 
actual encoding. Note that the source position is translated correspondingly, 
i.e. Pointer would refer to the source line octet offset rather than to the 
corresponding character position.</p>
<H4><a name="12.4.11"></a>12.4.11. Stream sources</H4>
<p><a name="Parsers.Multiline_Source.Stream_IO"></a>The package
<a href="#Parsers.Multiline_Source.Stream_IO">Parsers.Multiline_Source.Stream_IO</a> provides
sources based on streams. The stream is read using the Character'Read stream 
attribute. The read characters are classified into the data and delimiter 
characters. The delimiter categories are defined by the type:</p>
<blockquote>
<p><tt><font color="#0000FF">
type</font> Delimiter <font color="#0000FF">is</font> (Line_End, Line_Trailer, 
Text_End);</tt></p>
</blockquote>
<p>Here the categories of the delimiters are:</p>
<ul>
	<li><i>Line_End</i>. A character of this category terminates the source line 
	where it appears. It never appears in the line body;</li>
	<li><i>Line_Trailer</i>. Characters of this category are removed at the line 
	end. They are not removed when appear elsewhere in the line;</li>
	<li><i>Text_End</i>. A character of this category terminates the source. It 
	is the last character read.&nbsp; It never appears in the line body. <i>
	Text_End</i> appears in a non-empty line it first ends this line as if <i>
	Line_End </i>character were seen and then the source is terminated. 
	</li>
</ul>
<p>Additionally, the End_Error exception, when propagated by Character'Read, acts as 
if a <i>Text_End</i> character were read. The package Delimiter_Map</p>
<blockquote>
<p><tt><font color="#0000FF">package</font> Delimiter_Maps <font color="#0000FF">
is new</font> Generic_Map (Character, Delimiter);</tt></p>
</blockquote>
<p>provides maps of characters to the delimiter categories.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Default_Delimiters
<font color="#0000FF">return</font> Map;</tt></p>
</blockquote>
<p>This function returns a mapping of default delimiters, which should be 
suitable for most cases. It contains the following mappings:</p>
<ul>
	<li>LF (0A<sub>16</sub>) is a <i>Line_End</i>;</li>
	<li>CR (0D<sub>16</sub>) is a <i>Line_Trailer</i>;</li>
	<li>EOT (04<sub>16</sub>) is a <i>Text_End</i>.</li>
</ul>
<p>&nbsp;The type Source is declared as</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Parsers.Multiline_Source.Stream_IO.Source"></a>type</font> Source 
(Stream : <font color="#0000FF">access</font> Root_Stream_Type'Class) <font color="#0000FF">is</font><br>
&nbsp;&nbsp; <font color="#0000FF">new</font> Multiline_Source.Source<font color="#0000FF">
with<br>
record<br>
</font>&nbsp;&nbsp; Delimiters : Map := Default_Delimiters;<font color="#0000FF"><br>
end record</font>;</tt></p>
</blockquote>
<p>The discriminant Stream is the stream to read from. The component Delimiters 
specifies the delimiters to use.</p>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD>
<i>Notes:</i><ul>
	<li><i>If the component Delimiters need to be changed, this has to be done 
before Initialize is called on the instance of Source. The reason for that is 
that Initialize caches the first source line, so it requires Delimiters properly 
set. In Ada 2005 you can use an aggregate to initialize Delimiters to another 
value. This initialization occurs before Initialize. In Ada 95, where limited 
aggregates are not allowed, you will have to override Initialize and set 
Delimiters there, before you call to the parent's type Initialize.</i></li>
	<li><i>If the String_Stream from the package </i>
	<a href="http://www.dmitry-kazakov.de/ada/strings_edit.htm#Strings_Edit.Streams">Strings_Edit.Streams</a>
	<i>is used the stream must be set before object is declared because the 
	first line read ahead upon object initialization. Here is the code sample 
	that illustrates the proper use of string stream:</i></li>
</ul>
<blockquote>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6">
<tt><font color="#0000FF">     declare</font><br>
&nbsp;&nbsp; Text : <font color="#0000FF">     aliased</font> 
Strings_Edit.Streams.String_Stream (<font color="#800000">1024</font>);<font color="#008000"> 
-- Declare string stream object</font><font color="#0000FF"><br>
begin</font><br>
&nbsp;&nbsp; Set (Text, &quot;<font color="#FF0000">abcd</font>&quot;);<font color="#008000"> 
-- Set a string into the stream</font><font color="#0000FF"><br>
&nbsp;&nbsp; declare<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>Input : <font color="#0000FF">     aliased</font> 
Parsers.Multiline_Source.Source (Text'<font color="#0000FF">Access</font>);
<font color="#008000">     -- Declare source</font><font color="#0000FF"><br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><font color="#008000">     -- Here the 
source input can be used</font><font color="#0000FF"><br>
&nbsp;&nbsp; end</font>;<font color="#0000FF"><br>
end</font>;</tt></TD>
  </TR>
</TABLE>
</blockquote>
</TD>
  </TR>
</TABLE>
<p align="right">
  <A name="12.5"></A><a href="#12.4"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#12.6"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>12.5. Tokens</H3>
<p><a name="Parsers.Generic_Token"></a>The expression tokens are operations and 
operands. The generic package <a href="#Parsers.Generic_Token">Parsers.Generic_Token</a> defines the token types:</p>
<blockquote>
<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type </font>Argument_Type <font color="#0000FF">&nbsp;is private</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Operation_Type
<font color="#0000FF">is private</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Priority_Type
<font color="#0000FF">&nbsp;is private</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">with package</font>  Sources <font color="#0000FF">is new</font> Generic_Source (&lt;&gt;); <br>
&nbsp;&nbsp; <font color="#0000FF">with function </font>&quot;<font color="#FF0000">and</font>&quot; 
(Left, Right : Operation_Type)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Boolean
<font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with function </font>Is_Commutative (Left, 
Right : Operation_Type)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Boolean
<font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with function </font>Is_Inverse (Binary_Operator 
: Operation_Type)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Boolean
<font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with function </font>Group_Inverse (Binary_Operator 
: Operation_Type)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> 
Operation_Type <font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with function </font>&quot;<font color="#FF0000">&lt;</font>&quot; 
(Left, Right : Priority_Type)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Boolean
<font color="#0000FF">is</font> &lt;&gt;;<br>
<font color="#0000FF">package</font> Parsers.Generic_Token <font color="#0000FF">
is</font> ...</tt></p>
</blockquote>
<p>The parameters of the package defines the operations and the operands to use:</p>
<ul>
<li>Argument_Type is the type used to identify expression arguments (operands). 
Interpreted expressions usually have Argument_Type being directly the type of 
the expression values. If generating a parsing tree is the goal, then 
Argument_Type is usually a reference to a node;</li>
<li>Operation_Type is the type to uniquely identify operations such as unary, binary 
operator, bracket. For an interpreted expression Operation_Type could directly 
refer to some code to execute an operation. In a parsing tree Operation_Type 
objects can be used for building the overloading list of the operation symbol, 
because usually operations are overloaded for different types and different 
visibility contexts. The generic formal functions &quot;<font color="#FF0000">and</font>&quot;, 
Is_Commutative, Is_Inverse and Group_Inverse provide operations on the type 
Operation_Type. They are used for operation <a href="#association_checks">
association checks</a> and for <a href="#commutative_operators">commutative
operation optimizations</a> as described in the package
<a href="#Parsers.Generic_Operation">Parsers.Generc_Operation</a>;</li>
<li>Priority_Type is the operation priority. Priorities are ordered using the
operation &quot;<font color="#FF0000">&lt;</font>&quot;, which is also a generic parameter of 
the package. Higher priority operations have <a href="#operation_association">
higher association</a> with the arguments;</li>
<li>Sources is an instance of <a href="#Parsers.Generic_Source">
Parsers.Generic_Source</a> providing access to the source code.</li>
</ul>
<p>The package provides implementation of the following data structures used 
during expression parsing:</p>
<ul>
<li>Stacks of arguments are provided by the package <b>Arguments</b> through 
instantiation of <a href="#Parsers.Generic_Argument">Parsers.Generic_Argument</a>:</li>
</ul>
<blockquote>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Token.Arguments"></a>package</font> Arguments <font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> Generic_Argument (Argument_Token);</tt></p>
</blockquote>
</blockquote>
<ul>
<li>Operation descriptors are provided by the package <b>Descriptors</b>, which is an 
instance of <a href="#Parsers.Generic_Operation">Parsers.Generic_Operation</a>:</li>
</ul>
<blockquote>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Token.Descriptors"></a>package</font> Descriptors <font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> Generic_Operation (Operation_Token, Priority_Type);</tt></p>
</blockquote>
</blockquote>
<ul>
<li>Tables of expression tokens are provided by the package <b>Vocabulary</b>, which is 
an instance of the package <a href="http://www.dmitry-kazakov.de/ada/tables.htm">Table</a>:</li>
</ul>
<blockquote>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Token.Vocabulary"></a>package</font> Vocabulary <font color="#0000FF">is new</font> Tables (Table_Token);</tt></p>
</blockquote>
<p>Token tables are used by parser to recognize operation symbols in the source. 
In accordance with three expression contexts there are at least tree token 
tables: the table of prefixes, the table of infixes and the table of postfixes. 
Each table contains the tokens which may appear in the corresonding context.</p>
</blockquote>
<p>To make these instantiations the package defines the following types:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Argument_Token <font color="#0000FF">is record</font><br>
&nbsp;&nbsp;
Value&nbsp;&nbsp;&nbsp; : Argument_Type;<br>
&nbsp;&nbsp;
Location : Location_Type;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>This type describes an appearance of an argument (operand) in the source. The 
field Value identifies the argument. The field Location is the argument 
location.</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Operation_Token <font color="#0000FF">is record</font><br>
&nbsp;&nbsp;
Operation : Operation_Type;<br>
&nbsp;&nbsp;
Location&nbsp; : Location_Type;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>This type describes an appearance of an operation in the source. Operation 
identifies the operation, Location is the operation location.</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Table_Token (Class : Token_Class := 
Operator) <font color="#0000FF">is record</font><br>
&nbsp;&nbsp; Operation : Operation_Type;<br>
&nbsp;&nbsp; <font color="#0000FF">case</font> Class <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> Operator =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Left&nbsp; : Priority_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Right : Priority_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> Index | 
Semicolon_Class'Range =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Priority : Priority_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> Bracket | Comma 
| Ligature | Modifier_Class'Range =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>This type describes the tokens associated with expression operations to 
recognize in the source. The discriminant Class specifies the class of the 
operation. The field Operation identifies the operation. Additional fields 
determine the operation priorities, if applied. The following operations on 
tables of Table_Table token can be used for filling the tables:</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Token.Add_Operator"></a>procedure</font> Add_Operator<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; <b>Table</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out </font>Vocabulary.Table'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Operator</b> : Operation_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Left</b>&nbsp;&nbsp;&nbsp;&nbsp; : Priority_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Right</b>&nbsp;&nbsp;&nbsp; : Priority_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);</tt></p>
</blockquote>
<p>This procedure is used to add an <a href="#operator">operator</a> to a token 
table. It can be either a prefix unary operator for a table of prefixes, or a 
binary infix operator for an table of infixes or a postfix unary operator for a table of postfixes. 
The parameter <b>Table</b> is the corresponding token table. <b>Name</b> is the 
operator name. Note that the same operator can be specified under different 
names. <b>Operator</b> is the operation associated with the name. <b>Left</b> 
and <b>Right</b> are the <a href="#operation_association">operator priorities</a>. Constraint_Error
is propagated on an incorrectly spelled name, if spelling is checked (see <a href="http://www.dmitry-kazakov.de/ada/tables.htm">Table</a>). Name_Error 
is propagated if the name is already in the table.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Token.Add_Bracket"></a>procedure</font> Add_Bracket<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; <b>Table</b>&nbsp;&nbsp; : <font color="#0000FF">in out</font> Vocabulary.Table'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Bracket</b> : Operation_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);</tt></p>
</blockquote>
<p>This procedure is used to add a left order <a href="#brackets">bracket</a> or one of an aggregate to a table of prefixes. It can also be used to add a right bracket of any kind to a table of postfixes. 
The parameter <b>Table</b> is the corresponding token table. <b>Name</b> is the 
bracket name. Note that the same bracket can be specified under different names.
<b>Bracket</b> is the operation associated with the name. Constraint_Error is 
propagated on an incorrectly spelled name. Name_Error is propagated if the name is already in the table.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Token.Add_Comma"></a>procedure</font> Add_Comma<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; <b>Table</b> : <font color="#0000FF">in out</font> Vocabulary.Table'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Comma</b> : Operation_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);</tt></p>
</blockquote>
<p>This procedure is used to add a comma to a table of infixes. The parameter <b>
Table</b> is the table. <b>Name</b> is the comma&nbsp; name. The same comma can 
be specified under different names. <b>Comma </b>&nbsp;is the operation 
associated with the name. Constraint_Error is propagated on an incorrectly spelled name. Name_Error 
is propagated if the name is already in the table.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Token.Add_Index"></a>procedure</font> Add_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; <b>Table</b> : <font color="#0000FF">in out</font> Vocabulary.Table'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b> : Operation_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Left</b>&nbsp; : Priority_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);</tt></p>
</blockquote>
<p>This procedure is used to add a <a href="#brackets">left index bracket</a> to a table of infixes. 
The parameter <b>Table</b> is the table. <b>Name</b> is the name of the left 
array index or function call bracket. Note that the same bracket can be 
specified under different names. <b>Index</b> is the operation associated with 
the name. <b>Left</b> is the left priority of the bracket. Constraint_Error is 
propagated on an incorrectly spelled name. Name_Error is propagated if the name is already in the table.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Token.Add_Ligature"></a>procedure</font> Add_Ligature<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; <b>Table</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> Vocabulary.Table'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Ligature</b> : Operation_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);</tt></p>
</blockquote>
<p>This procedure is used to add a <a href="#ligature">ligature</a> to a table of infixes. 
The parameter <b>Table</b> is the table. <b>Name</b> is the name of the 
ligature. Note that the same ligature can be specified under different names. <b>
Ligature</b> is the operation associated with the name. Constraint_Error is 
propagated on an incorrectly spelled name. Name_Error is propagated if the name is already in the table.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Token.Add_Postmodifier"></a>procedure</font> 
Add_Postmodifier<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; <b>Table</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> Vocabulary.Table'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Modifier</b> : Operation_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);</tt></p>
</blockquote>
<p>This procedure is used to add a <a href="#modifier">postmodifier</a> to  a table. The parameter <b>Table</b> is the table. <b>Name</b> is the name of the 
modifier. <b>Modifier</b> is the operation associated with the name. Constraint_Error is 
propagated on an incorrectly spelled name. Name_Error is propagated if the name is already in the table.</p>
<p>Modifiers 
cause call to <a href="#Parsers.Generic_Lexer.On_Postmodifier">On_Postmodifier</a> handler when recognized.</p>
<ul>
  <li>When
a modifier appears 
after an operation it is applied to the operation. This can be used to implement
multi-word operators. For example, to implement a multi-word infix operation one
can add a <a href="#modifier">postmodifier</a> to the prefix table.</li>
  <li>When a
modifier appears immediately after an 
argument it is applied to the argument.</li>
  <li>In all other cases the modifier forces
the parser to finish 
expression processing. If that happens after an infix operation it causes a call 
to <a href="#Parsers.Generic_Lexer.On_Missing_Operand">On_Missing_Operand</a>.</li>
</ul>
<p>A <a href="#modifier">postmodifier</a> added to the table of <i> infixes</i> is always discarded, because an infix operation is 
mandatory to appear after an operand. This has the effect of stopping parsing at 
the modifier, which can be utilized when there are reserved keywords used to 
bound expressions.</p>
<p>A <a href="#modifier">postmodifier</a> added to a <i> prefix</i> or <i> postfix</i> table may appear several times.
This behaviour may require special handling. For example, let &quot;<tt><font color="#008000">in</font></tt>&quot;
be a <a href="#modifier">postmodifier</a> for &quot;<tt><font color="#800000">is</font></tt>&quot;.
Then &quot;<tt>x<font color="#800000">&nbsp;is</font><font color="#008000">&nbsp;in</font>&nbsp;y</tt>&quot;
and &quot;<tt>x<font color="#800000">&nbsp;is</font><font color="#008000">&nbsp;in&nbsp;in</font>&nbsp;y</tt>&quot;
will all be legal. To prevent this, one should change the
operation to an equivalent once upon a call to <a href="#Parsers.Generic_Lexer.On_Postmodifier">On_Postmodifier</a>,
so that by the next call to it, one could detect that &quot;<tt><font color="#008000">in</font></tt>&quot;
was already applied and discard the second &quot;<tt><font color="#008000">in</font></tt>&quot;.</p>
<p>Note that a <a href="#modifier">postmodifier</a> cannot be used to modify 
commas because they never visit the operations stack.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Token.Add_Premodifier">
</a>procedure</font> Add_Premodifier<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Table</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Vocabulary.Table'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Modifier</b> : Operation_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is used to add a <a href="#modifier">premodifier</a> either to a table of prefixes or to a table of postfixes. The <a href="#modifier">premodifier</a> when recognized causes a call to
<a href="#Parsers.Generic_Lexer.On_Premodifier">On_Premodifier</a> when the operation following it appears. If the latter does not, 
<a href="#Parsers.Generic_Lexer.On_Missing_Operation">On_Missing_Operation</a> is called. Note that a <a href="#modifier">premodifier</a> cannot be returned back, thus a dangling <a href="#modifier">premodifier</a> is usually a severe error if it cannot be ignored. So it is preferable to use <a href="#modifier">postmodifiers</a> 
over <a href="#modifier">premodifiers</a> wherever possible. Constraint_Error is 
propagated on an incorrectly spelled name. Name_Error is propagated if the name is already in the table.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Token.Add_Semicolon"></a>procedure</font> Add_Semicolon<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Table</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Vocabulary.Table'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Semicolon</b> : Operation_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Class</b>&nbsp;&nbsp;&nbsp;&nbsp; : Semicolon_Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Priority</b>&nbsp; : Priority_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is used to add a <a href="#semicolons">semicolon</a> to a table of infixes. The parameter <b>
Table</b> is the table. <b>Name</b> is the semicolon&nbsp; name. The same 
semicolon can 
be specified under different names. <b>Semicolon</b>&nbsp;is the operation 
associated with the name, argument sublists separated by the semicolon will be 
merged by this operation. The parameter <b>Class</b> specifies the
<a href="#Parsers.Semicolon_Class">semicolon type</a>. Constraint_Error is propagated on an incorrectly spelled name. Name_Error 
is propagated if the name is already in the table. When a sublist obtains all it
is elements <a href="#Parsers.Generic_Lexer.Enclose">Enclose</a> is called with
the parameters indicating <a href="#brackets">left index bracket</a>, <a href="#brackets">bracket</a>
or <a href="#semicolons">semicolon</a> enclosing the sublist. Among the
operations of <a href="#Parsers.Generic_Lexer.Enclose">Enclose</a> at least one
is a <a href="#semicolons">semicolon</a>. The parameter <b>Priority</b> control
the association priority of the separator among other separators. It is the left
association priority when <b>Class</b> is <i> Sublist_Close</i> or <i>Sublist_Separator</i>. It
is the right priority if Class is <i> Sublist_Open</i> or <i>Sublist_Separator</i>.</p>
<p>Additionally the package defines:</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Token.Link"></a>function</font> Link (<b>List</b> : Arguments.Frame) 
<font color="#0000FF">return</font> Location_Type;</tt></p>
</blockquote>
<p>This function merges the locations of all arguments in <b>List</b>. The 
result is a minimal contiguous location containing locations of all arguments 
from <b>List</b>.</p>
<H4><a name="12.5.1"></a>12.5.1. Table-driven lexers</H4>
<p><a name="Parsers.Generic_Token.Generic_Token_Lexer"></a>The child generic package
<a href="#Parsers.Generic_Token.Generic_Token_Lexer">
Parsers.Generic_Token.Generic_Token_Lexer</a> an abstract type for table driven
infix expression lexers:</p>
<blockquote>
<p><tt><font color="#0000FF">generic<br>
</font>&nbsp;&nbsp; <font color="#0000FF">type</font> Argument_Stack
<font color="#0000FF">is new</font> Arguments.Stack <font color="#0000FF">with 
private</font>;<br>
<font color="#0000FF">&nbsp;&nbsp; with package </font>Operations
<font color="#0000FF">is new</font> Descriptors.Generic_Stack (&lt;&gt;);<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Operation_Stack
<font color="#0000FF">is abstract new</font> Operations.Stack
<font color="#0000FF">with private</font>;<br>
<font color="#0000FF">package</font> Parsers.Generic_Token.Generic_Token_Lexer
<font color="#0000FF">is</font> ...</tt></p>
</blockquote>
<p>The package has the following formal parameters:</p>
<ul>
<li>Argument_Stack implements <a href="#argument_stack">argument stack</a>. It
is a descendant of Stack defined in the package
<a href="#Parsers.Generic_Token.Arguments">Arguments</a>;</li>
<li>Operations is an implementation of <a href="#operation_stack">operation
stacks</a>. It is an instance of
<a href="#Parsers.Generic_Operation.Generic_Stack">
Parsers.Generic_Operation.Generic_Stack</a> based on the package
<a href="#Parsers.Generic_Token.Descriptors">Descriptors</a>;</li>
<li>Operation_Stack is the operation stack type, a descendant of the abstract 
type defined in Operations.</li>
</ul>
<p>The package instantiates <a href="#Parsers.Generic_Lexer">
Parsers.Generic_Lexer</a> to provide lexers operating on the Argument_Stack and 
Operation_Stack:</p>
<blockquote>
<p><tt><font color="#0000FF">package</font> Implementation <font color="#0000FF">
is</font> <br>
&nbsp;&nbsp; <font color="#0000FF">new</font> Parsers.Generic_Lexer<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Arguments&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
=&gt; Arguments,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Descriptors&nbsp;&nbsp;&nbsp;&nbsp; 
=&gt; Descriptors,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Operations&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
=&gt; Operations,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Argument_Stack&nbsp; =&gt; 
Argument_Stack,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Operation_Stack =&gt; 
Operation_Stack,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Sources&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; Sources<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The obtained lexer type is then extended:</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Parsers.Generic_Token.Generic_Token_Lexer.Lexer"></a>type</font> Lexer<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Prefixes&nbsp; : <font color="#0000FF">access</font> 
Vocabulary.Table'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Infixes&nbsp;&nbsp; :
<font color="#0000FF">access</font> Vocabulary.Table'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Postfixes : <font color="#0000FF">
access</font> Vocabulary.Table'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is abstract new</font> 
Implementation.Lexer <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The type Lexer has the following discriminants:</p>
<ul>
<li>Prefixes is the table of prefix operations. It contains prefix
<a href="#operator">operators</a> and left order and aggregate
<a href="#brackets">brackets</a>;</li>
<li>Infixes is the table of infix operations. It contains binary infix 
operators, left array index and function call brackets, commas and
<a href="#ligature">ligatures</a>. The infix table may contain an operator with
  empty name. This operator serves as a default as multiplication does in
  mathematical notation like 2<i>x</i> + 4<i>y</i>. This operator is implied
  everywhere an infix operation is expected. The lexer automatically discards it
  at the expression end, which is recognized by absence of an operand. Note that
  <a href="#Parsers.Generic_Lexer.On_Missing_Operand">On_Missing_Operand</a> is
  not called if lexer discards an implied operator;</li>
<li>Postfixes is the table of postfix operations. It contains postfix operators 
and right brackets.</li>
</ul>
<p>A type derived from Lexer has to implement the following abstract subroutines 
defined for the base type in <a href="#Parsers.Generic_Lexer">
Parsers.Generic_Lexer</a>:</p>
<ul>
<li><a href="#Parsers.Generic_Lexer.Call">Call</a> to evaluate an
<a href="#operator">operator</a> or <a href="#ligature">ligature</a>;</li>
<li><a href="#Parsers.Generic_Lexer.Enclose">Enclose</a> to evaluate a function, 
index, aggregate, <a href="#brackets">brackets</a> or a sublist;</li>
<li><a href="#Parsers.Generic_Lexer.Get_Blank">Get_Blank</a> to skip blanks and 
comments in the source;</li>
<li><a href="#Parsers.Generic_Lexer.Get_Operand">Get_Operand</a> to recognize an 
operand in the source.</li>
</ul>
<p>The following error handlers can be overridden if other behavior required: </p>
<ul>
<li><a href="#Parsers.Generic_Lexer.On_Association_Error">On_Association_Error</a> 
raises Syntax_Error;</li>
<li><a href="#Parsers.Generic_Lexer.On_Missing_Operand">On_Missing_Operand</a> 
raises Syntax_Error;</li>
<li><a href="#Parsers.Generic_Lexer.On_Missing_Operand">On_Missing_Operation</a> 
raises Syntax_Error;</li>
<li><a href="#Parsers.Generic_Lexer.On_Missing_Right_Bracket">
On_Missing_Right_Bracket</a> raises Syntax_Error;</li>
<li><a href="#Parsers.Generic_Lexer.On_Postmodifier">On_Postmodifier</a> returns the 
reserved word back and finishes parsing;</li>
<li><a href="#Parsers.Generic_Lexer.On_Premodifier">On_Premodifier</a> returns 
the operation following it back and ignores the modifier;</li>
<li><a href="#Parsers.Generic_Lexer.On_Unexpected">On_Unexpected</a> returns the 
unexpected operation, comma or bracket back and finishes parsing;</li>
<li><a href="#Parsers.Generic_Lexer.On_Wrong_Comma">On_Wrong_Comma</a> raises 
Syntax_Error;</li>
<li><a href="#Parsers.Generic_Lexer.On_Wrong_Right_Bracket">
On_Wrong_Right_Bracket</a> raises Syntax_Error.</li>
</ul>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Parse<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Context</b> :
<font color="#0000FF">in out</font> Implementation.Lexer'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Code</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out </font>Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Result</b>&nbsp; : <font color="#0000FF">out</font> Argument_Token<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">renames</font> Implementation.Parse;</tt></p>
</blockquote>
<p>This class-wide procedure renames <a href="#Parsers.Generic_Lexer.Parse">
Parsers.Generic_Lexer.Parse</a>. Upon successful completion <b>Result</b> is one 
of the expression. Note that <b>Result</b> is of Argument_Token type. So it 
contains both the expression result and its location, which is usually the 
expression location. The state of <b>Code</b> indicates how far the expression 
parsing advanced even in case of an exception. Parse is recursive-call safe as 
long as implementations of the abstract operations do not change <b>Context</b> 
and <b>Code</b> in an inappropriate way.</p>
<H4><a name="12.5.2"></a>12.5.2. Table-driven segmented lexers</H4>
<p><a name="Parsers.Generic_Token.Segmented_Lexer"></a>The child generic package
<a href="#Parsers.Generic_Token.Segmented_Lexer">
Parsers.Generic_Token.Segmented_Lexer</a> provides table driven infix expression 
lexers based on segmented stack implementations:</p>
<blockquote>
<p><tt><font color="#0000FF">generic</font><br>
&nbsp;&nbsp; Argument_Frame_Segment_Size : Positive := <font color="#800000">128</font>;<br>
&nbsp;&nbsp; Argument_Frame_Minimal_Size : Positive := <font color="#800000">64</font>;<br>
&nbsp;&nbsp; Argument_Frame_Increment&nbsp;&nbsp;&nbsp; : Natural&nbsp; :=
<font color="#800000">50</font>;<br>
&nbsp;&nbsp; Argument_Stub_Minimal_Size&nbsp; : Positive :=
<font color="#800000">64</font>;<br>
&nbsp;&nbsp; Argument_Stub_Increment&nbsp;&nbsp;&nbsp;&nbsp; : Natural&nbsp; :=
<font color="#800000">50</font>;<br>
&nbsp;&nbsp; Operation_Segment_Size&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Positive :=
<font color="#800000">128</font>;<br>
&nbsp;&nbsp; Operation_Minimal_Size&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Positive :=
<font color="#800000">64</font>;<br>
&nbsp;&nbsp; Operation_Increment&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Natural&nbsp; := <font color="#800000">50</font>;<br>
<font color="#0000FF">package</font> Parsers.Generic_Token.Segmented_Lexer
<font color="#0000FF">is</font> ...</tt></p>
</blockquote>
<p>The formal parameters Argument_* control argument stack allocation policy, 
see <a href="#Parsers.Generic_Argument.Segmented_Stack">
Parsers.Generic_Argument.Segmented_Stack</a>. The formal parameters Operation_* 
control operation stack allocation policy, see
<a href="#Parsers.Generic_Operation.Segmented_Stack">
Parsers.Generic_Operation.Segmented_Stack</a>.</p>
<p>The package instantiates <a href="#Parsers.Generic_Token.Generic_Token_Lexer">
Parsers.Generic_Token.Generic_Lexer</a> under the name Token_Lexer. The type
<a href="#Parsers.Generic_Token.Generic_Token_Lexer.Lexer">Lexer</a> defined 
there is used as an abstract base:</p>
<blockquote>
<p><tt><font color="#0000FF">subtype</font> Lexer <font color="#0000FF">is</font> 
Token_Lexer.Lexer;</tt></p>
</blockquote>
<p>A type derived from Lexer has to implement the following abstract subroutines 
defined for the base type in <a href="#Parsers.Generic_Lexer">
Parsers.Generic_Lexer</a>:</p>
<ul>
<li><a href="#Parsers.Generic_Lexer.Call">Call</a> to evaluate an
<a href="#operator">operator</a>, <a href="#ligature">ligature</a> or
<a href="#semicolons">semicolon</a>;</li>
<li><a href="#Parsers.Generic_Lexer.Enclose">Enclose</a> to evaluate a function, 
index, aggregate or <a href="#brackets">brackets</a>;</li>
<li><a href="#Parsers.Generic_Lexer.Get_Blank">Get_Blank</a> to skip blanks and 
comments in the source;</li>
<li><a href="#Parsers.Generic_Lexer.Get_Operand">Get_Operand</a> to recognize an 
operand in the source.</li>
</ul>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Parse<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Context :
<font color="#0000FF">in out</font> Token_Lexer.Implementation.Lexer'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Code&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result&nbsp; 
: <font color="#0000FF">out</font> Argument_Token<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">renames</font> Token_Lexer.Implementation.Parse;</tt></p>
</blockquote>
<p>This class-wide procedure renames <a href="#Parsers.Generic_Lexer.Parse">
Parsers.Generic_Lexer.Parse</a>. Upon successful completion <b>Result</b> is one 
of the expression. Note that <b>Result</b> is of Argument_Token type. So it 
contains both the expression result and its location, which is usually the 
expression location. The state of <b>Code</b> indicates how far the expression 
parsing advanced even in case of an exception. Parse is recursive-call safe as 
long as implementations of the abstract operations do not change <b>Context</b> 
and <b>Code</b> in an inappropriate way.</p>
<p align="right">
  <A name="12.6"></A><a href="#12.5"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#12.7"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>12.6. Lexers</H3>
<p><a name="Parsers.Generic_Lexer"></a>The package
<a href="#Parsers.Generic_Lexer">Parsers.Generic_Lexer</a> provides abstract 
infix expression lexer. A lexer scans the source for an expression. It stops scanning 
at the expression end. As it scans the source it uses two stacks to arrange the 
operands and operations it recognizes. Operands are stored on the
<a href="#argument_stack">argument stack</a>, operations are pushed onto the
<a href="#operation_stack">operation stack</a>. To recognize the expression
tokens abstract subroutines are used to be implemented by concrete derived
types.</p>
<blockquote>
<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; with package </font>Arguments <font color="#0000FF">is new</font> 
Generic_Argument (&lt;&gt;);<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Argument_Stack
<font color="#0000FF">is new</font> Arguments.Stack <font color="#0000FF">with 
private</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">with package </font>Descriptors
<font color="#0000FF">is new</font> Generic_Operation (&lt;&gt;); <br>
&nbsp;&nbsp; <font color="#0000FF">with package</font> Operations
<font color="#0000FF">is new</font> Descriptors.Generic_Stack (&lt;&gt;);<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Operation_Stack
<font color="#0000FF">is abstract new</font> Operations.Stack
<font color="#0000FF">with private</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">with package</font>  Sources <font color="#0000FF">is new</font> Generic_Source (&lt;&gt;);<br>
<font color="#0000FF">package</font> Parsers.Generic_Lexer <font color="#0000FF">
is</font> ...</tt></p>
</blockquote>
<p>The package generic parameters: </p>
<ul>
<li>Arguments is an instance of <a href="#Parsers.Generic_Argument">
Parsers.Generic_Argument</a> providing an implementation of argument stacks;</li>
<li>Argument_Stack is a concrete argument stack type. It is a descendant of the 
base type defined in the package Arguments. So the type provided by Arguments 
can be additionally specialized if necessary;</li>
<li>Descriptors is the parent of an implementation of operation stacks. It is an 
instance of the package <a href="#Parsers.Generic_Operation">Parsers.Generic_Operation</a> 
defining the expression operations;</li>
<li>Operations is an implementation of operation stacks based on Descriptors. It is an 
instance of <a href="#Parsers.Generic_Operation.Generic_Stack">Parsers.Generic_Operation.Generic_Stack</a>; </li>
<li>Operation_Stack is the operation stack type, a descendant of the abstract type defined in Operations;</li>
<li>Code is an instance of <a href="#Parsers.Generic_Source">Parsers.Generic_Source</a>, defining the type Source_Type.</li>
</ul>
<p>The package defines the abstract type <a href="#Parsers.Generic_Lexer.Lexer">Lexer</a>:</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Lexer.Lexer"></a>type</font> Lexer <font color="#0000FF">is abstract<br>
&nbsp;&nbsp; new</font> Ada.Finalization.Limited_Controlled
<font color="#0000FF">with private</font>; </tt></p>
</blockquote>
<p>and the type of lexical tokens used to communicate with lexical callbacks:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Lexical_Token (Class : Token_Class := 
Operator) <font color="#0000FF">is record</font><br>
&nbsp;&nbsp; Operation : Operation_Type;<br>
&nbsp;&nbsp; <font color="#0000FF">case</font> Class <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> Operator =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Left&nbsp; : Priority_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Right : Priority_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> Index | 
Semicolon_Class'Range =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Priority : Priority_Type;<br>
<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when</font> Bracket | Comma 
| Ligature | Modifier_Class'Range =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p><u><b>Class-wide operations</b></u>:</p>
<blockquote>
<p>
<tt><a name="Parsers.Generic_Lexer.Parse"></a><font color="#0000FF">procedure</font> Parse<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; <b>Context</b> : <font color="#0000FF">in out</font> Lexer'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<b>Code</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Result</b>&nbsp; : 
<font color="#0000FF">out</font> Argument_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);</tt></p>
</blockquote>
<p>is used to scan the source <b>Code</b>. Upon successful completion <b>Result</b> is one of the expression. 
In any outcome the source cursor indicates how far the expression parsing has 
managed to proceed. <a href="#Parsers.Generic_Lexer.Parse">Parse</a> is recursive-call safe as long as implementations of the abstract operations do not change 
<b>Context</b> and <b>Code</b> in an inappropriate way. It means that an implementation of an operation may in turn call 
<a href="#Parsers.Generic_Lexer.Parse">Parse</a> to get a subexpression from source if that necessary.</p>
<p><u><b>Abstract primitive operations</b></u>: A type derived from Lexer has to implement the following abstract 
operations:</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Lexer.Call"></a>function</font> Call<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Context</b>&nbsp;&nbsp; 
: <font color="#0000FF">access</font> Lexer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Operation</b> 
: Operation_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>List</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Frame<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Argument_Type <font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This procedure is called to execute an <a href="#operator">operator</a> when 
all its arguments become known. <a href="#ligature">Ligatures</a> and
<a href="#semicolons">semicolons</a> are also 
executed by making a call to this procedure. The parameter <b>Operation</b> 
identifies the operator being called. <b>List</b> is the list of the 
arguments. The first element of <b>List</b> is the first argument for <b>
Operation</b>. The result is one of the operation. Any exception raised in Call 
will abort parsing and propagate out of <a href="#Parsers.Generic_Lexer.Parse">
Parse</a>. Note that binary commutative operations for 
which <a href="#Parsers.Generic_Operation.Is_Commutative">Is_Commutative</a> 
returns <i><font color="#800000">true</font></i> are optimized, may have <b>List</b> 
larger than of just two arguments. For example: for a commutative <tt>&quot;+&quot;</tt> 
the expression <tt>A+B+C</tt> will result in one call <tt>&quot;+&quot;(A,B,C)</tt> instead of 
two: <tt>&quot;+&quot;(&quot;+&quot;(A,B),C)</tt>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Lexer.Enclose"></a>function</font> Enclose<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; <b>Context</b> : <font color="#0000FF">access</font> Lexer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Left</b>&nbsp;&nbsp;&nbsp; : Operation_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Right</b>&nbsp;&nbsp; : Operation_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>List</b>&nbsp;&nbsp;&nbsp; : Frame<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">return</font> Argument_Type <font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This procedure is called to execute <a href="#brackets">brackets</a>. 
Brackets could be  order, aggregate, array index or function calls. In the 
latter two cases the first argument in <b>List</b> is the array to be indexed or the function 
to be called. The parameter <b>Left</b> identifies the left bracket. The 
parameter <b>Right</b> does the right one. The result is one of the bracket 
operation. Any exception raised in Enclose will abort parsing and propagate out 
of <a href="#Parsers.Generic_Lexer.Parse">Parse</a>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Lexer.Get_Blank"></a>procedure</font> Get_Blank<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; <b>Context</b> : <font color="#0000FF">in out</font> Lexer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Code</b>&nbsp;&nbsp;&nbsp; : 
<font color="#0000FF">in out</font> Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Got_It</b>&nbsp; : 
<font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p align="left">An implementation should skip everything till the next valid 
lexeme in the source <b>Code</b>. It starts from the current source position 
(see <a href="#Parsers.Generic_Source.Get_Line">Get_Line</a> and <a href="#Parsers.Generic_Source.Get_Pointer">Get_Pointer</a>) and advances 
it to the first non-blank character (see
<a href="#Parsers.Generic_Source.Set_Pointer">Set_Pointer</a>). The parameter <b>Got_It</b> is set to 
<i><font color="#800000">false</font></i> when the end of expression reached. This could be the end of file or a reserved keyword. 
Usually Get_Blank skips spaces, tabs, linefeeds and comments. Get_Blank may 
raise an exception to be propagated out of
<a href="#Parsers.Generic_Lexer.Parse">Parse</a> on an error, like unclosed 
comment etc. There are child packages implementing different variants of 
Get_Blank: see
<a href="#Parsers.Generic_Lexer.Blanks">
Parsers.Generic_Lexer.Blanks</a> /
<a href="#Parsers.Generic_Lexer.Ada_Blanks">
Ada_Blanks</a> / <a href="#Parsers.Generic_Lexer.Cpp_Blanks">Cpp_Blanks</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Get_Infix<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; <b>Context</b> : <font color="#0000FF">in out</font> Lexer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<b>Code</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<b>Token</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Lexical_Token;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<b>Got_It</b>&nbsp; : <font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>An implementation should recognize a valid infix token and skip it in the source
<b>Code</b> by advancing the source cursor (see
<a href="#Parsers.Generic_Source.Set_Pointer">Set_Pointer</a>). <b>Got_It</b> indicates success. 
When <b>Got_It</b> is set to <font color="#800000"><i>true</i></font>, <b>Token</b> contains a valid infix token. That is either of:</p>
<ul>
<li>A binary infix <a href="#operator">operator</a>: <b>Token</b>.Class = 
Operator, other components specify the operation associated with the operator 
and <a href="#operation_association">operator's priorities</a>;</li>
<li>A left index brackets: <b>Token</b>.Class = Index, other components are the 
bracket operation and its <a href="#left_bracket_priority">left priority</a>;</li>
<li>A commas: <b>Token</b>.Class = Comma and the operation associated with.</li>
</ul>
<p>When <b> Got_It</b> is <i><font color="#800000">false</font></i>, it means that no 
infix operation was detected. Get_Infix may 
raise an exception to be propagated out of
<a href="#Parsers.Generic_Lexer.Parse">Parse</a> on an unrecoverable error. <a href="#Parsers.Generic_Lexer.Lexer">Lexer</a>
automatically processes assumed infix operations. When it is necessary to parse
expressions like 5<i>a</i>+1, then the multiplication is an implied operator. <a href="#Parsers.Generic_Lexer.Lexer">Lexer</a>
recognizes this case when the source pointers are equal. Implied operators are
discarded at the expression end without call to <a href="#Parsers.Generic_Lexer.On_Missing_Operand">On_Missing_Operand</a>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Lexer.Get_Operand"></a>procedure</font> Get_Operand<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; <b>Context</b>&nbsp; : <font color="#0000FF">in out</font> Lexer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Code</b>&nbsp;&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">in out</font> Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Argument</b> :
<font color="#0000FF">out</font> Argument_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Got_It</b>&nbsp;&nbsp; : 
<font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
) <font color="#0000FF">&nbsp;is abstract</font>;</tt></p>
</blockquote>
<p>An implementation should recognize a valid operand token and skip it in the source
<b>Code</b>. <b>Got_It</b> indicates success. If <b>Got_It</b> is <i>
<font color="#800000">true</font></i> then <b>Argument</b> contains or 
references to the operand such as literal, name etc. Otherwise, it means that no 
operand was recognized in the source. Get_Operand may raise an exception to be 
propagated out of
<a href="#Parsers.Generic_Lexer.Parse">Parse</a> on an unrecoverable error. Note 
that syntax errors in operands should not necessarily be fatal. <b>Argument</b> 
can be set into a special value indicating a syntactically wrong operand, which 
would allow to continue parsing.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Get_Postfix<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; <b>Context</b> : <font color="#0000FF">in out</font> Lexer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Code</b>&nbsp;&nbsp;&nbsp; : 
<font color="#0000FF">in out</font> Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Token</b>&nbsp;&nbsp; : 
<font color="#0000FF">out</font> Lexical_Token;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Got_It</b>&nbsp; : 
<font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>An implementation should recognize a valid postfix token and skip it in the source
<b>Code</b>. <b>Got_It</b> indicates success. When Got_It is <i>
<font color="#800000">true</font></i> then <b>Token</b> contains a valid postfix token. That is either of:</p>
<ul>
<li>Postfix <a href="#operator">operators</a>: <b>Token</b>.Class = Operator, 
other components specify the operation associated with the operator and
<a href="#operation_association">operator's priorities</a>;</li>
<li>Right <a href="#brackets">brackets</a>: <b>Token</b>.Class = Bracket, <b>
Token</b>.Operation indicates the operation associated with the bracket.</li>
</ul>
<p>When Got_It is <i><font color="#800000">false</font></i>, it means that no 
postfix operation was detected. Get_Postfix may 
raise an exception to be propagated out of
<a href="#Parsers.Generic_Lexer.Parse">Parse</a> on an unrecoverable error.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Get_Prefix<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; <b>Context</b> : <font color="#0000FF">in out</font> Lexer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Code</b>&nbsp;&nbsp;&nbsp; : 
<font color="#0000FF">in out</font> Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Token</b>&nbsp;&nbsp; : 
<font color="#0000FF">out</font> Lexical_Token;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Got_It</b>&nbsp; : 
<font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>An implementation should recognize a valid prefix token and skip it in the source
<b>Code</b>. <b>Got_It</b> indicates success. When Got_It is <i>
<font color="#800000">true</font></i> then <b>Token</b> contains a valid prefix token. That is either of:</p>
<ul>
<li>Prefix <a href="#operator">operators</a>: <b>Token</b>.Class = Operator, 
other components specify the operation associated with the operator and
<a href="#operation_association">operator's priorities</a>;</li>
<li>Left <a href="#brackets">brackets</a>: <b>Token</b>.Class = Bracket, <b>
Token</b>.Operation indicates the operation associated with the bracket.</li>
</ul>
<p>When Got_It is <i><font color="#800000">false</font></i>, it means that no 
postfix operation was detected. Get_Prefix may 
raise an exception to be propagated out of
<a href="#Parsers.Generic_Lexer.Parse">Parse</a> on an unrecoverable error.</p>
<p>The following procedures are used for error handling. They are called from
<a href="#Parsers.Generic_Lexer.Parse">Parse</a> to handle an exceptional state 
detected during expression parsing.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Parsers.Generic_Lexer.On_Association_Error"></a>procedure</font> On_Association_Error<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; <b>Context</b> : <font color="#0000FF">in out</font> Lexer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Code</b>&nbsp;&nbsp;&nbsp; : 
<font color="#0000FF">in out</font> Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Left</b>&nbsp;&nbsp;&nbsp; : 
<font color="#0000FF">in out</font> Operation_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Right</b>&nbsp;&nbsp; : 
<font color="#0000FF">in out</font> Operation_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This procedure is called when two operators sharing or associated in an 
argument are <a href="#association_checks">incompatible</a>. The handler may modify any of the parameters
<b>Left</b> and <b>Right</b> to make them compatible. In this case upon return 
the operation <b>Right</b> will be pushed onto the operation stack again with 
all association checks suppressed. Alternatively it may raise an exception which would then abort parsing 
and propagate out of
<a href="#Parsers.Generic_Lexer.Parse">Parse</a>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Lexer.On_Missing_Operand">
</a>procedure</font> On_Missing_Operand<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; <b>Context</b>&nbsp;&nbsp; : <font color="#0000FF">in out</font> Lexer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Code</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
<font color="#0000FF">in out</font> Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Operation</b> 
: Operation_Type; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Argument</b>&nbsp; :
<font color="#0000FF">out</font> Argument_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This procedure is called when an operand is expected. That is either when no expression was recognized 
at all or when an infix operation or comma is not followed by an operand. The 
handler can return the default operand into the parameter <b>Argument</b>. This 
could be a special kind of Argument_Type reserved for such cases. The expression 
parsing will be then continued. In some languages, like C++ it is legal to omit 
operands in some cases. For example by calling parameterless functions. Alternatively 
<a href="#Parsers.Generic_Lexer.On_Missing_Operand">On_Missing_Operand</a> may raise an exception which would then abort parsing and 
propagate out of
<a href="#Parsers.Generic_Lexer.Parse">Parse</a>. The parameter <b>Operation</b> 
is optional. It is passed when there is an operation expecting the argument on 
the stack top. The implementation may inspect the operation and decide which 
argument may fit it.</p>
<blockquote>
<p><tt><a name="Parsers.Generic_Lexer.On_Missing_Operation"></a><font color="#0000FF">procedure</font> On_Missing_Operation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Context</b>&nbsp; 
: <font color="#0000FF">in out</font> Lexer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Code</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Modifier</b> : Operation_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Token</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">out</font> Lexical_Token;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Got_It</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Boolean <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This procedure is called when an operation expected after a
<a href="#modifier">premodifier</a> was not found there. The parameter <b>
Modifier</b> identifies it. The handler may ignore the modifier and continue 
parsing the expression as if there where no modifier by setting <b>Got_It</b> to
<font color="#800000"><i>false</i></font>. It may simulate an operation by 
setting it to <i><font color="#800000">true</font></i> and placing the operation 
token into <b>Token</b>. 
Alternatively it may raise an exception which would then abort parsing 
propagating out of
<a href="#Parsers.Generic_Lexer.Parse">Parse</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Parsers.Generic_Lexer.On_Missing_Right_Bracket"></a>procedure</font> On_Missing_Right_Bracket<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; <b>Context</b> : <font color="#0000FF">in out </font>Lexer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Code</b>&nbsp;&nbsp;&nbsp; : 
<font color="#0000FF">in out</font> Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Left</b>&nbsp;&nbsp;&nbsp; : 
<font color="#0000FF">in out </font>Operation_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Right</b>&nbsp;&nbsp; : 
<font color="#0000FF">out</font> Operation_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This procedure is called when the lexer detects an unclosed left bracket by finishing expression parsing. 
The handler can modify the left bracket specified by the parameter <b>Left</b> and should specify a suggested right one 
in the parameter <b>Right</b>. Alternatively it may raise an exception which would then 
abort parsing and propagate out of
<a href="#Parsers.Generic_Lexer.Parse">Parse</a>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Lexer.On_Wrong_Comma"></a>procedure</font> On_Wrong_Comma<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; <b>Context</b> : <font color="#0000FF">in out</font> Lexer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Code</b>&nbsp;&nbsp;&nbsp; : 
<font color="#0000FF">in out</font> Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Left</b>&nbsp;&nbsp;&nbsp; : 
<font color="#0000FF">in out</font> Operation_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Comma</b>&nbsp;&nbsp; : 
<font color="#0000FF">in out</font> Operation_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">is abstract</font>; </tt></p>
</blockquote>
<p>This procedure is called when the lexer finds <a href="#association_checks">incompatible</a> comma,
<a href="#ligature">ligature</a> or <a href="#semicolons">semicolon</a>. It can modify the left bracket
(the parameter <b>Left</b>), the delimiter (the parameter <b>Comma</b>) or both to make them 
compatible. Upon return <b>Comma</b> will be pushed onto the
<a href="#operation_stack">operation stack</a> again with all checks suppressed. Alternatively it may raise an exception which would then abort
and propagate out of
<a href="#Parsers.Generic_Lexer.Parse">Parse</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Parsers.Generic_Lexer.On_Wrong_Right_Bracket"></a>procedure</font> On_Wrong_Right_Bracket<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; <b>Context</b> : <font color="#0000FF">in out</font> Lexer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Code</b>&nbsp;&nbsp;&nbsp; : 
<font color="#0000FF">in out</font> Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Left</b>&nbsp;&nbsp;&nbsp; : 
<font color="#0000FF">in out</font> Operation_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Right</b>&nbsp;&nbsp; : 
<font color="#0000FF">in out</font> Operation_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Got_It</b>&nbsp; : <font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This procedure is called when the lexer finds <a href="#association_checks">incompatible</a>
brackets. There are three possibilities the implementation may choose from:</p>
<ul>
	<li>Set <b>Got_It</b> to <i><font color="#800000">true</font></i> and modify the left bracket (the parameter
	<b>Left</b>), the right 
one (the parameter <b>Right</b>) or both to make them compatible. Upon return <b>Right</b> will be pushed onto the 
	<a href="#operation_stack">operation stack</a> again with all checks 
	suppressed;</li>
	<li>Set <b>Got_It</b> to <i><font color="#800000">false</font></i> and 
	usually call to <a href="#Parsers.Generic_Source.Reset_Pointer">
	Reset_Pointer</a>. The parser will switch to the infix context and if
	<a href="#Parsers.Generic_Source.Reset_Pointer">Reset_Pointer</a> was called 
	it will reinterpret the bracket using the table of infix operations;</li>
	<li>Raise an exception which would then abort parsing and 
propagate out of <a href="#Parsers.Generic_Lexer.Parse">Parse</a>.</li>
</ul>
<p><u><b>Primitive operations having an implementation</b></u>:</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Is_Expected<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Context</b>&nbsp; : Lexer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Operator</b> 
: Operation_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean; </tt></p>
</blockquote>
<p>The default implementation returns <i><font color="#800000">true</font></i>. 
It can be overridden to make certain <a href="#operator">operators</a> disallowed outside brackets, 
e.g. ones having special meaning inside brackets like <a href="#ligature">
ligatures</a>, when for certain reason it is impossible to declare the operator 
a <a href="#ligature">ligature</a>. For such <a href="#operator">operators</a> this function 
may return <font color="#800000"> <i>false</i></font>. This will cause a call to <a href="#Parsers.Generic_Lexer.On_Unexpected">
On_Unexpected</a>, which then will decide what to do about it. Note that
<a href="#operator">operators</a> with higher association priorities can be 
safely disallowed only if all <a href="#operator">operators</a> with the right 
association priority lower than the left association priority of <b>Operator</b> 
are disallowed as well, or else association with them is illegal. 
This is because a lower priority <a href="#operator">operator</a> may hide the higher priority 
one from being detected, e.g. as <tt>+</tt> would do <tt>*</tt> in <tt>A+B*C</tt>. 
Thus either <tt>+</tt> should be disallowed too, or else the <tt>+-*</tt> 
association should be.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Parsers.Generic_Lexer.On_Postmodifier"></a>procedure</font> 
On_Postmodifier<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; <b>Context</b>&nbsp;&nbsp; : <font color="#0000FF">in out </font>Lexer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Code</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
<font color="#0000FF">in out</font> Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Operation</b> : 
<font color="#0000FF">in out </font>Operation_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Modifier</b>&nbsp; : Operation_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Got_It</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">
procedure</font> 
On_Postmodifier<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; <b>Context</b>&nbsp;&nbsp; : <font color="#0000FF">in out </font>Lexer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Code</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
<font color="#0000FF">in out</font> Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Argument </b>&nbsp;: 
<font color="#0000FF">in out </font>Argument_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Modifier</b>&nbsp; : Operation_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Got_It</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures are called to process <a href="#modifier">postmodifiers</a>. The parameter <b>Modifier</b> 
is the operation associated with the modifier. A <a href="#modifier">postmodifier</a>
can be applied 
to either an operation or an argument it follows. The parameter <b>Operation</b> /
<b>Argument</b> refers to the thing to modify. The procedure may observe it and 
change it. The parameter <b>Got_It</b> is set to <font color="#800000"><i>true</i></font> 
to indicate that the modifier was successfully processed. It is set to <i>
<font color="#800000">false</font></i> to finish parsing in which case it
recommended to call <a href="#Parsers.Generic_Source.Reset_Pointer">Reset_Pointer</a>
(<b>Code</b>) to bring source back to the position before the modifier. For an operation 
modifier this will cause a call to the
<a href="#Parsers.Generic_Lexer.On_Missing_Operand">On_Missing_Operand</a> 
handler if that is not a postfix operation.
<a href="#Parsers.Generic_Lexer.On_Postmodifier">On_Postmodifier</a> may raise an 
exception which would then abort parsing. The default implementation returns the 
modifier back and sets <b>Got_It</b> to <i><font color="#800000">false</font></i>. </p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Parsers.Generic_Lexer.On_Premodifier"></a>procedure</font> 
On_Premodifier<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; <b>Context</b>&nbsp;&nbsp; : <font color="#0000FF">in out </font>Lexer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Code</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
<font color="#0000FF">in out</font> Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Token</b>&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> 
Lexical_Token;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Modifier</b>&nbsp; : Operation_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Got_It</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to process a <a href="#modifier">premodifier</a>. The parameter <b>Modifier</b> 
is the operation associated with the modifier. A <a href="#modifier">premodifier</a> is applied to the 
operation it precedes. The operation is specified by the parameter <b>Token</b>. 
The handler sets <b>Got_It</b> to <i><font color="#800000">true</font></i> to 
indicate that <b>Token</b> was modified as necessary. When <b>Got_It</b> is set 
to
<font color="#800000"><i>false</i></font> then the operation is discarded and 
parsing proceeds either to the next context allowing the modifier to be applied to 
an operation of another class or by discarding the modifier. That means:</p>
<ul>
<li>For a postfix operation, an attempt is made to apply the modifier to an infix 
one which may follow.</li>
<li>In case of a prefix operation the modifier is discarded, which has the 
effect of ignoring it.</li>
<li>For an infix operation, it is discarded and parsing is finished.</li>
</ul>
<p>
<a href="#Parsers.Generic_Lexer.On_Premodifier">On_Premodifier</a> may raise an 
exception which would then abort parsing. The default implementation returns the 
modifier back and sets <b>Got_It</b> to <i><font color="#800000">false</font></i>. </p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Lexer.On_Unexpected"></a>procedure</font> On_Unexpected<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; <b>Context</b> : <font color="#0000FF">in out</font> Lexer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Code</b>&nbsp;&nbsp;&nbsp; : 
<font color="#0000FF">in out</font> Source_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Right</b>&nbsp;&nbsp; : Operation_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);</tt></p>
</blockquote>
<p>This procedure is called when the lexer meets an unexpected operation, comma, right bracket,
<a href="#ligature">ligature</a> or <a href="#semicolons">semicolon</a> 
specified by the parameter <b>Right</b>. The default implementation returns the unexpected delimiter back and then tries to complete the expression evaluation, 
so that the lexer will stop at the delimiter and return the expression 
result. This behaviour is useful when expressions bounded by commas or brackets 
are parsed in case of nested expressions or descending code parsers. An 
operation is unexpected when
<a href="#Parsers.Generic_Operation.Generic_Stack.Is_Expected">
Is_Expected</a> returns <i><font color="#800000">false</font></i>. An override 
may raise an exception which would then abort parsing and propagate out of
<a href="#Parsers.Generic_Lexer.Parse">Parse</a>.</p>
<p><u><b>Informational operations</b></u>:</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Operation_Stack_Depth (<b>Context</b> 
: Lexer) <font color="#0000FF">return</font> Natural; </tt></p>
</blockquote>
<p>This function returns the number of items on the operations stack. Note that 
the context may keep several parsing sessions separated by stubs. The result of 
this operation is the total depth of the stack, which includes all sessions and 
stubs between then.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Operation_Stack_Item<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Context</b> : Lexer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Depth</b>&nbsp;&nbsp; 
: Natural := <font color="#800000">0</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Descriptor; </tt></p>
</blockquote>
<p>This function returns an operation descriptor at the stack depth specified by 
the parameter <b>Depth</b>. The topmost item has depth 0. Constraint_Error is 
propagated when there no requested operation on the stack. Note that the context 
may keep several parsing sessions separated by stubs.</p>
<H4><a name="12.6.1"></a>12.6.1. Blank skipping</H4>
<p>There are three child packages of
<a href="#Parsers.Generic_Lexer">Parsers.Generic_Lexer</a> providing lexers with 
<a href="#Parsers.Generic_Lexer.Get_Blank">Get_Blank</a> defined to skip the following blanks and comments:</p>
<ul>
<li><a name="Parsers.Generic_Lexer.Blanks"></a>
<a href="#Parsers.Generic_Lexer.Blanks">
Parsers.Generic_Lexer.Blanks</a> skips spaces, HT, LF, CR, VT, FF 
and requests <a href="#Parsers.Generic_Source.Next_Line">new source lines</a> 
when necessary;</li>
<li><a name="Parsers.Generic_Lexer.Ada_Blanks"></a>
<a href="#Parsers.Generic_Lexer.Ada_Blanks">
Parsers.Generic_Lexer.Ada_Blanks</a> acts like
<a href="#Parsers.Generic_Lexer.Blanks">
Parsers.Generic_Lexer.Blanks</a> and also skips Ada 95 comments starting from 
double hyphen and ending in the line end. Note that an Ada comment may end 
before physical line end (<a href="#Ada_comments">see</a>);</li>
<li><a name="Parsers.Generic_Lexer.Ada_2005_Blanks"></a>
<a href="#Parsers.Generic_Lexer.Ada_2005_Blanks">
Parsers.Generic_Lexer.Ada_2005_Blanks</a> is like above with Ada 2005 
extensions;</li>
<li><a name="Parsers.Generic_Lexer.Cpp_Blanks"></a>
<a href="#Parsers.Generic_Lexer.Cpp_Blanks">Parsers.Generic_Lexer.Cpp_Blanks</a> 
acts like
<a href="#Parsers.Generic_Lexer.Blanks">
Parsers.Generic_Lexer.Blanks</a> and also skips C++ comments. A C++ 
comment either starts with <tt>//</tt> (double forward slash) and continues to 
the end of the current line or with <tt>/*</tt> (forward slash, asterisk) and 
continues to the first appearance of closing <tt>*/</tt>. In the latter case 
nested <tt>/*</tt>..<tt>*/</tt> comments are not recognized. Further when no 
closing <tt>*/</tt> matched till the source end, Syntax_Error is propagated and 
thus aborts parsing. A handler may look into the field Unclosed_Commend of the 
lexer object to determine the location of <tt>/*</tt> in the source. </li>
</ul>
<p>These packages are generic:</p>
<blockquote>
<p><tt><font color="#0000FF">generic</font><br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Lexer_Type (&lt;&gt;)
<font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">abstract new</font> 
Parsers.Generic_Lexer.Lexer <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">package</font> Parsers.Generic_Lexer...
<font color="#0000FF">is</font> ...</tt></p>
</blockquote>
<p>The generic parameter Lexer_Type is a descendant of the type Lexer defined in 
the parent package (an instance of
<a href="#Parsers.Generic_Lexer">Parsers.Generic_Lexer</a>). They derive from 
this type a new type and override Get_Blank as described above:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Lexer <font color="#0000FF">is abstract 
new </font>Lexer_Type <font color="#0000FF">with</font> ...</tt></p>
</blockquote>
<p align="right">
  <A name="12.7"></A><a href="#12.6"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#12.8"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>12.7. Operations</H3>
<p><a name="Parsers.Generic_Operation"></a>Operations are <a href="#operator">
operators</a>, <a href="#brackets">brackets, commas and ligatures</a>. Each operation 
denotes some action to be executed. The parser uses several data 
structures based operations. These are defined using the generic package
<a href="#Parsers.Generic_Operation">Parsers.Generic_Operation</a> as the base 
package:</p>
<blockquote>
<p><tt><font color="#0000FF">generic</font><br>
<font color="#0000FF">&nbsp;&nbsp; type</font> Operation_Type
<font color="#0000FF">is private</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Priority_Type
<font color="#0000FF">is private</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">with function</font> &quot;<font color="#FF0000">and</font>&quot; 
(Left, Right : Operation_Type)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Boolean
<font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with function</font> Is_Commutative (Left, 
Right : Operation_Type)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Boolean
<font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with function</font> Is_Inverse (Operation : 
Operation_Type)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Boolean
<font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with function</font> Group_Inverse (Operation 
: Operation_Type)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> 
Operation_Type <font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with function</font> &quot;<font color="#FF0000">&lt;</font>&quot; 
(Left, Right : Priority_Type)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Boolean
<font color="#0000FF">is</font> &lt;&gt;;<br>
<font color="#0000FF">package</font> Parsers.Generic_Operation<font color="#0000FF"> 
is</font> ...</tt></p>
</blockquote>
<p>The formal generic parameters define the set of operations and their 
priorities:</p>
<blockquote>
<p><tt>
<font color="#0000FF">type</font> Operation_Type
<font color="#0000FF">is private</font>;</tt></p>
</blockquote>
<p>Objects of Operation_Type identify an appearance of an operation in the 
source. Usually it is the operation identifier with the source location attached 
to it. If no error diagnostic required Operation_Type can directly represent 
operations. The following operations should be defined on Operation_Type:</p>
<blockquote>
<p><tt> <font color="#0000FF"><a name="Parsers.Generic_Operation.and"></a>function</font> &quot;<font color="#FF0000">and</font>&quot; 
(<b>Left</b>, <b>Right</b> : Operation_Type) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function is used to check operation compatibility. The parameters is one 
in which the corresponding operations appear in the source. The result is
<font color="#800000"><i>true</i></font> if <b>Left</b> and be associated with
<b>Right</b>. It is safe to return <i><font color="#800000">true</font></i> if all <a href="#operator">operators</a> 
are compatible and there is only one pair of <a href="#brackets">brackets</a>. 
See <a href="#association_checks">association checks</a> for further
information.</p>
<blockquote>
<p><tt> <font color="#0000FF"><a name="Parsers.Generic_Operation.Is_Commutative">
</a>function</font> Is_Commutative (<b>Left</b>, 
<b>Right</b> : Operation_Type)<br>
&nbsp; <font color="#0000FF">&nbsp;return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Left</b> 
and <b>Right</b> are either the same commutative operation or either the group 
or inverse operation of the same group. See <a href="#commutative_operators">
commutative operators</a> for further information. It is safe to define this 
function as <font color="#800000"><i>false</i></font> for any pair of operations 
if no commutative operator optimization required.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Operation.Is_Inverse"></a>function</font> Is_Inverse (<b>Binary_Operator</b> 
: Operation_Type)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Boolean; </tt></p>
</blockquote>
<p>For binary operators on which Is_Commutative is <font color="#800000"><i>true</i></font>, 
this function returns <i><font color="#800000">true</font></i> if <b>
Binary_Operator</b> is an inverse operation of the corresponding commutative 
group. For example, for addition it should be <font color="#800000"><i>false</i></font>, 
for subtraction it should be <font color="#800000"><i>true</i></font>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Operation.Group_Inverse">
</a>function</font> Group_Inverse (<b>Binary_Operator</b> 
: Operation_Type)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Operation_Type; </tt></p>
</blockquote>
<p>For the binary operators on which Is_Commutative is <i><font color="#800000">
true</font></i> this function returns the unary inverse operation of the 
corresponding commutative group. For example for either addition or subtraction 
it should return unary minus.</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Priority_Type<font color="#0000FF"> is 
private</font>;</tt></p>
</blockquote>
<p>This is the operation priority type. Higher priority operations have higher
<a href="#operation_association">association</a> with the operands. Priorities
are ordered using &quot;<font color="#FF0000">&lt;</font>&quot;:</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> &quot;<font color="#FF0000">&lt;</font>&quot; (<b>Left</b>,
<b>Right</b> : Priority_Type) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>The package
<a href="#Parsers.Generic_Operation">Parsers.Generic_Operation</a> also defines 
the type Descriptor used for <a href="#operation_stack">operation stack</a>
items:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Descriptor_Class <font color="#0000FF">
is</font> (Stub, Operator, Default, Sublist, Tuple, Ligature);<br>
<font color="#0000FF">type</font> Descriptor (Class : Descriptor_Class := Stub)
<font color="#0000FF">is record<br>
&nbsp;&nbsp; case </font>Class <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when </font>Operator..Ligature =&gt; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Operation : Operation_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">case</font> 
Class <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when </font>
Operator..Tuple =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Count : Natural;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">case</font> Class <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
when </font>Operator..Sublist =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Right : Priority_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">when others</font> =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">end case</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">when others</font> =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when others</font> =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<H4><a name="12.7.1"></a>12.7.1. Operation stack</H4>
<p><a name="operation_stack"></a><a name="Parsers.Generic_Operation.Generic_Stack"></a>Operation stack is one of the basic data
structures used while parsing. It is used to store operations as they are 
recognized and rearrange them according to the precedence rules. When an 
operator is recognized in the source, it is pushed onto the stack. Before that 
all operators with right priorities higher or equal to the left priority of the 
new operator are popped. They get their arguments from another stack and push 
the result there. Left brackets are treated as stack stubs. They are popped when 
a right bracket appears. This simple algorithm allows to parse infix expressions 
without resorting to grammars.</p>
<p>The operation stack is provided by the generic 
child package <a href="#Parsers.Generic_Operation.Generic_Stack">Parsers.Generic_Operation.Generic_Stack</a>:</p>
<blockquote>
<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp;
type </font>Descriptor_Stack<font color="#0000FF"> is limited private</font>;</tt></p>
<table border="0" cellpadding="0" cellspacing="0">
<tr>
<td bgcolor="#FFFF99"><tt>&nbsp;&nbsp; <font color="#0000FF">type</font> Index_Type
<font color="#0000FF">is</font> (&lt;&gt;);<br>
&nbsp;&nbsp; <font color="#0000FF">with function</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Container : Descriptor_Stack;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Index&nbsp;&nbsp;&nbsp;&nbsp; : Index_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">return</font> Descriptor <font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">with</font>&nbsp;<font color="#0000FF">function</font>&nbsp;Is_Empty&nbsp;(Container&nbsp;:&nbsp;Descriptor_Stack)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Boolean 
<font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with function</font> Mark (Container : Descriptor_Stack)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Index_Type
<font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with procedure</font> Pop<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;Container&nbsp;:&nbsp;<font color="#0000FF">in</font>&nbsp;<font color="#0000FF">out</font>&nbsp;Descriptor_Stack;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Count&nbsp;&nbsp;&nbsp;&nbsp; : Natural := <font color="#800000">1</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with procedure</font> Push<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Container : <font color="#0000FF">in out</font> Descriptor_Stack;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Item&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Descriptor<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Container : <font color="#0000FF">in out</font> Descriptor_Stack;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Index&nbsp;&nbsp;&nbsp;&nbsp; : Index_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Element&nbsp;&nbsp; : Descriptor<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">is</font> &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with function</font> Top (Container : Descriptor_Stack)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Descriptor 
<font color="#0000FF">is</font> &lt;&gt;;</tt></td>
</tr>
</table>
<p><tt><font color="#0000FF">package</font> Parsers.Generic_Operation.Generic_Stack
<font color="#0000FF">is</font> ...</tt></p>
</blockquote>
<p>The generic parameters of the package define interface of a raw stack of 
Descriptor items.&nbsp;The type Descriptor is defined in the parent package. The 
stack interface is same as one of <a href="#Generic_Stack">Generic_Stack</a>. In 
the code snippet above it is highlighted. To 
instantiate of <a href="#Parsers.Generic_Operation.Generic_Stack">Parsers.Generic_Operation.Generic_Stack</a> 
one could first instantiate <a href="#Generic_Stack">Generic_Stack</a> (or else
<a href="#Generic_Segmented_Stack">Generic_Segmented_Stack</a>) using Descriptor 
for the stack item (Object_Type), then use the instance package, and finally 
instantiate <a href="#Parsers.Generic_Operation.Generic_Stack">Parsers.Generic_Operation.Generic_Stack</a> 
in this context with Descriptor_Stack parameter set to the raw stack type. The 
result package provides higher level operation stack interface:</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Parsers.Generic_Operation.Generic_Stack.Stack"></a>type</font> Stack <font color="#0000FF">is abstract</font><br>
&nbsp;&nbsp; <font color="#0000FF">new</font> 
Ada.Finalization.Limited_Controlled <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The operation stack type is an abstract controlled type. The following 
primitive operations has to be implemented by derived types:</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Parsers.Generic_Operation.Generic_Stack.Call"></a>procedure</font> Call<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out </font>Stack;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Operation</b> : Operation_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Count</b>&nbsp;&nbsp;&nbsp;&nbsp; : Natural<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This procedure is called to execute an <a href="#operator">operator</a> when 
all its arguments become known. <a href="#ligature">Ligatures</a> are also 
executed by making a call to this procedure. The parameter <b>Operation</b> 
identifies the operator being called. <b>Count</b> is the number of the 
arguments. It is not specified where arguments are located. However, it is 
assumed that they are accessed in LIFO order. Binary commutative operations for 
which <a href="#Parsers.Generic_Operation.Is_Commutative">Is_Commutative</a> 
returns <i><font color="#800000">true</font></i> are optimized, so that one Call 
is used instead of a sequence of calls in cases like <tt>A+B+C</tt>. Which will 
result in <tt>&quot;+&quot;(A,B,C)</tt> instead of <tt>&quot;+&quot;(&quot;+&quot;(A,B),C)</tt>. </p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Parsers.Generic_Operation.Generic_Stack.Enclose"></a>procedure</font> Enclose<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> Stack;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Left</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Operation_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Right</b>&nbsp;&nbsp;&nbsp;&nbsp; : Operation_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Count</b>&nbsp;&nbsp;&nbsp;&nbsp; : Natural<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This procedure is called to execute <a href="#brackets">brackets</a> and
sublists. 
Brackets could be  order, aggregate, array index or function calls. In the 
latter two cases the first argument is the array to be indexed or the function 
to be called. The parameter <b>Left</b> identifies the left bracket or sublist
separator. The 
parameter <b>Right</b> does the right one. <b>Count</b> is the number of the 
arguments. Note one extra argument for array indices and function calls.</p>
<p>The following operations are defined on operation stacks:</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get (<b>Container</b> : Stack; <b>
Depth</b> : Natural) <font color="#0000FF">return</font> Descriptor;</tt></p>
</blockquote>
<p>This function can be used to inspect the stack contents. It returns the stack 
item corresponding to the parameter <b>Depth</b>. The topmost item is accessed 
using <b>Depth</b>=0. Constraint_Error is propagated when there no such item on 
the stack.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Depth (<b>Container</b> : 
Stack) <font color="#0000FF">return</font> Natural;</tt></p>
</blockquote>
<p>This function returns the number of items on the stack.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Parsers.Generic_Operation.Generic_Stack.Is_Expected"></a>function</font> Is_Expected<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> : 
Stack;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Operator</b>&nbsp; 
: Operation_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>This function is called to confirm that the <b>Operator</b> 
is allowed outside brackets. The default implementation returns <i>
<font color="#800000">true</font></i>. When <font color="#800000"><i>false</i></font> 
is returned <a href="#Parsers.Unexpected_Operation">Unexpected_Operation</a> 
will propagate. Note that this check not necessarily disallows the
<a href="#operator">operator</a> outside of brackets if there exists another 
<a href="#operator">operator</a> of some lower association priority which is allowed. For example, if <tt>*</tt> is disallowed, 
while <tt>+</tt> is allowed, then <tt>A+B*C</tt> would be legal. Thus to 
disallow an <a href="#operator">operator</a> outside the brackets its left association priority should 
be greater than the right priority of any allowed <a href="#operator">operator</a>. The program can 
still be made illegal making association check failed from such pairs of 
<a href="#operator">operators</a>, e.g. by having the association <tt>+B*</tt> illegal.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Is_Empty (<b>Container</b> : 
Stack)
<font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if the raw 
stack is empty.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Parsers.Generic_Operation.Generic_Stack.Push_Abort"></a>procedure</font> 
Push_Abort (<b>Container</b> : <font color="#0000FF">in out</font> Stack'Class);</tt></p>
</blockquote>
<p>This procedure cleans the stack to remove the side-effects of a call to
<a href="#Parsers.Generic_Operation.Generic_Stack.Push_Start">Push_Start</a>. It 
is used upon an unrecoverable expression evaluation errors.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Parsers.Generic_Operation.Generic_Stack.Push_End"></a>procedure</font> 
Push_End (<b>Container</b> : <font color="#0000FF">in out</font> Stack'Class);</tt></p>
</blockquote>
<p>This procedure is called when the right margin of the expression reached. 
This can be a source end or a reserved keyword. It also can be an extra 
delimiter (see <a href="#Parsers.Unexpected_Comma">Unexpected_Comma</a>, 
<a href="#Parsers.Unexpected_Right_Bracket">Unexpected_Right_Bracket</a> exceptions). After 
successful completion the stack is returned to its state before the call to
<a href="#Parsers.Generic_Operation.Generic_Stack.Push_Start">Push_Start</a>. 
<a href="#Parsers.Missing_Right_Bracket">Missing_Right_Bracket</a> is propagated when some left brackets of the expression 
remain open. A handler should either close them using Push_Right_Bracket and 
then try <a href="#Parsers.Generic_Operation.Generic_Stack.Push_End">Push_End</a> 
again or call <a href="#Parsers.Generic_Operation.Generic_Stack.Push_Abort">
Push_Abort</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Parsers.Generic_Operation.Generic_Stack.Push_Start"></a>procedure</font> 
Push_Start (<b>Container</b> : <font color="#0000FF">in out</font> Stack'Class);</tt></p>
</blockquote>
<p>This procedure pushes a stub onto the stack. A stub is removed by either a 
successful call to <a href="#Parsers.Generic_Operation.Generic_Stack.Push_End">
Push_End</a> or by a call to
<a href="#Parsers.Generic_Operation.Generic_Stack.Push_Abort">Push_Abort</a>. 
Parsing an expression starts with a call to
<a href="#Parsers.Generic_Operation.Generic_Stack.Push_Start">Push_Start</a> and 
ends by either <a href="#Parsers.Generic_Operation.Generic_Stack.Push_End">
Push_End</a> (normal completion) or
<a href="#Parsers.Generic_Operation.Generic_Stack.Push_Abort">Push_Abort</a> 
(abnormal completion). The operation stack is safe for recursive calls, so the 
same stack can be used for parsing nested expressions.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Push_Binary<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> Stack'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Operation</b> : Operation_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Left</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Priority_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Right</b>&nbsp;&nbsp;&nbsp;&nbsp; : Priority_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Unchecked</b> : Boolean := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Explicit</b>&nbsp;
: Boolean := True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when a binary infix <a href="#operator">operator</a> 
is recognized in the source. The parameter <b>Operation</b> identifies the 
operator. <b>Left</b> and <b>Right</b> are the operator's
<a href="#operation_association">priorities</a>. 
<a href="#Parsers.Association_Error">Association_Error</a> is propagated
on an incompatible operator on the left. See <a href="#association_checks">association checks</a> for further
information. No checks made if the parameter <b>Unchecked</b> is set to <i>
<font color="#800000">true</font></i>. The parameter <b> Explicit</b> should  be
<font color="#800000"><i>false</i></font>  if  the operator was assumed in place of a missing one.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Push_Comma<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> Stack'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Operation</b> : Operation_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Comma</b>&nbsp;&nbsp;&nbsp;&nbsp; : Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Unchecked</b> : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when either a comma or a <a href="#ligature">
ligature</a> is recognized in the source. When a plain comma matches the left 
bracket, it increases the number of arguments the list in the brackets has. A 
ligature does not increase the number of arguments, but binds two arguments it 
separates. <a href="#ligature">Ligatures</a> can be viewed as binary 
non-commutative operations which may appear only within brackets and have no 
priority. <a href="#Parsers.Generic_Operation.Generic_Stack.Call">Call</a> is 
applied to to execute a ligature. The parameter <b>Comma</b> is <i>
<font color="#800000">true</font></i> when <b>
Operation</b> identifies a comma, and <i><font color="#800000">false</font></i> if it does a ligature. 
<a href="#Parsers.Unexpected_Comma">Unexpected_Comma</a> is propagated if there is no any left bracket to match.
<a href="#Parsers.Wrong_Comma_Type">Wrong_Comma_Type</a> is propagated when the left bracket does not match. See <a href="#association_checks">association checks</a> for further
information. No checks made if the parameter <b>Unchecked</b> is set to <i>
<font color="#800000">true</font></i>.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Push_Left_Bracket<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> Stack'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Operation</b> : Operation_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when a left order bracket or a left bracket of an 
aggregate is detected. <b>Operation</b> identifies the bracket. Do not confuse 
them with the left brackets of array indices and function calls.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Push_Left_Bracket<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out </font>Stack'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Operation</b> : Operation_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Left</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
: Priority_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Unchecked</b> : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when a left bracket of an array index or a function 
call is recognized in the source. Operation identifies the bracket. Left is the
<a href="#left_bracket_priority">left priority of the bracket</a>.
<a href="#Parsers.Association_Error">Association_Error</a> is propagated upon an incompatible operator on the left. See <a href="#association_checks">association checks</a> for further
information. No checks made if the parameter <b>Unchecked</b> is set to <i>
<font color="#800000">true</font></i>.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Push_Right_Bracket<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> Stack'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Operation</b> : Operation_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Unchecked</b> : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to process a right bracket of any kind. The 
parameter <b>Operation</b> specifies the bracket. 
<a href="#Parsers.Unexpected_Right_Bracket">Unexpected_Right_Bracket</a> is 
propagated when there is no any left bracket to match. 
<a href="#Parsers.Wrong_Right_Bracket_Type">Wrong_Right_Bracket_Type</a> 
is propagated when the left bracket does not match.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Push_Postfix<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> Stack'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Operation</b> : Operation_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Left</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Priority_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Right</b>&nbsp;&nbsp;&nbsp;&nbsp; : Priority_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Unchecked</b> : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when a postfix unary <a href="#operator">operator</a> 
is detected. The parameter <b>Operation</b> identifies the operator. <b>Left</b> 
and <b>Right</b> are the operator's <a href="#operation_association">priorities</a>.
<a href="#Parsers.Association_Error">Association_Error</a> is propagated on an incompatible operator on the left. No 
checks made if the parameter <b>Unchecked</b> is set to <i>
<font color="#800000">true</font></i>.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Push_Prefix<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> Stack'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Operation</b> : Operation_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Left</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Priority_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Right</b>&nbsp;&nbsp;&nbsp;&nbsp; : Priority_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Unchecked</b> : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when a prefix unary <a href="#operator">operator</a> 
is detected. The parameter <b>Operation</b> identifies the operator. <b>Left</b> 
and <b>Right</b> are the operator's <a href="#operation_association">priorities</a>.
<a href="#Parsers.Association_Error">Association_Error</a> is propagated on an incompatible operator on the left. No 
checks made if the parameter <b>Unchecked</b> is set to <i>
<font color="#800000">true</font></i>.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Push_Semicolon <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> Stack'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Operation</b> : Operation_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Class</b>&nbsp;&nbsp;&nbsp;&nbsp; : Semicolon_Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Priority</b>&nbsp; : Priority_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Unchecked</b> : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is used to process a sublist separator (<a href="#semicolons">semicolon</a>). 
The paramter <b>Operation</b> identifies the semicolon and is used in
<a href="#Parsers.Generic_Operation.Generic_Stack.Call">Call</a> when the 
operands: items of a sublist become all known. The parameter <b>Class</b> 
specifies the <a href="#Parsers.Semicolon_Class">semicolon type</a>. <b> Priority</b> is 
the association priority. <a href="#Parsers.Unexpected_Comma">Unexpected_Comma</a> is propagated if there is no any left bracket to match.
<a href="#Parsers.Association_Error">Association_Error</a> is propagated on an operation association error, 
<a href="#Parsers.Wrong_Comma_Type">Wrong_Comma_Type</a>
does on bracket error. See <a href="#association_checks">association checks</a> for further
information. No checks made if the parameter <b>Unchecked</b> is set to <i>
<font color="#800000">true</font></i>.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Replace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out </font>Stack'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Replacement</b> : Descriptor<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure can be used to replace an item (operation descriptor) on the 
stack top. Immediately after a call to
<a href="#Parsers.Generic_Operation.Generic_Stack.Push_Start">Push_Start</a>, the 
stack is semantically empty and contains a stub, which should never be replaced 
by any descriptor of other type. Constraint_Error is propagated when <b>
Container</b> is physically empty.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Top (<b>Container</b> : Stack)
<font color="#0000FF">return</font> Descriptor;</tt></p>
</blockquote>
<p>This function returns the stack top. Constraint_Error is propagated when the 
raw stack is empty.</p>
<H4><a name="12.7.2"></a>12.7.2. Segmented operation stack</H4>
<p><a name="Parsers.Generic_Operation.Segmented_Stack"></a>The child generic 
package <a href="#Parsers.Generic_Operation.Segmented_Stack">
Parsers.Generic_Operation.Segmented_Stack</a> instantiates <a href="#Parsers.Generic_Operation.Generic_Stack">Parsers.Generic_Operation.Generic_Stack</a> 
using the segmented stacks from the package
<a href="#Generic_Segmented_Stack">Generic_Segmented_Stack</a>. The package has 
the following generic parameters:</p>
<blockquote>
<p><tt><font color="#0000FF">generic</font><br>
&nbsp;&nbsp; Segment_Size : Positive := <font color="#800000">128</font>;<br>
&nbsp;&nbsp; Minimal_Size : Positive := <font color="#800000">64</font>;<br>
&nbsp;&nbsp; Increment&nbsp;&nbsp;&nbsp; : Natural&nbsp; :=
<font color="#800000">50</font>;<br>
<font color="#0000FF">package</font> Parsers.Generic_Operation.Segmented_Stack
<font color="#0000FF">is</font> ...</tt></p>
</blockquote>
<p>These parameters controls stack allocation (<a href="#Generic_Segmented_Stack_parameters">see</a>).
The package instantiates <a href="#Parsers.Generic_Operation.Generic_Stack">Parsers.Generic_Operation.Generic_Stack</a> 
under the name Operation:</p>
<blockquote>
<p><tt><font color="#0000FF">package</font> Operation <font color="#0000FF">is 
new </font>Generic_Stack (...);</tt></p>
</blockquote>
<p>So the stack type can be denoted as <i>instance-name</i>.Operation.Stack, 
where <i>instance-name</i> is the name of under which
<a href="#Parsers.Generic_Operation.Segmented_Stack">
Parsers.Generic_Operation.Segmented_Stack</a> is instantiated.</p>
<H4><a name="12.7.3"></a>12.7.3. Example of direct usage of the operation stack</H4>
<p><a name="operation_stack_example"></a>The following example illustrates direct usage of the operation stack without 
source parsing. That is when an external lexer is used for lexical analysis. In 
this case the operation stack can be used as part of syntax analysis dealing 
with operation association. The example starts from defining the operations, their 
priorities and finally instantiates
<a href="#Parsers.Generic_Operation.Segmented_Stack">
Parsers.Generic_Operation.Segmented_Stack</a> providing operation stacks.</p>
File <i>operation_stack_expressions.ads</i>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#0000FF">with</font> 
Generic_Segmented_Stack;<br>
<font color="#0000FF">with</font> Parsers.Generic_Operation.Segmented_Stack;<br>
<br>
<font color="#0000FF">package</font> Operation_Stack_Expressions
<font color="#0000FF">is</font><br>
<font color="#008000">&nbsp;&nbsp; --<br>
&nbsp;&nbsp; -- Integer_Stack -- Stacks of integers to keep arguments<br>
&nbsp;&nbsp; --<br>
</font><font color="#0000FF">&nbsp;&nbsp; package</font> Integer_Stack
<font color="#0000FF">is</font><br>
<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new</font> 
Generic_Segmented_Stack<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Index_Type&nbsp;&nbsp; 
=&gt; Integer,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Object_Type&nbsp; =&gt; Integer,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Null_Element =&gt; <font color="#800000">0</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ); <br>
<font color="#008000">&nbsp;&nbsp; --<br>
&nbsp;&nbsp; -- Operations -- The set of operations<br>
&nbsp;&nbsp; --<br>
&nbsp;&nbsp; </font><font color="#0000FF">type</font> Operations
<font color="#0000FF">is</font> (Add, Mul, Inc, Left_Bracket, Right_Bracket);<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> &quot;<font color="#FF0000">and</font>&quot; 
(Left, Right : Operations) <font color="#0000FF">return</font> Boolean;<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">function</font>&nbsp;Is_Commutative&nbsp;(Left,&nbsp;Right&nbsp;:&nbsp;Operations)&nbsp;<font color="#0000FF">return</font>&nbsp;Boolean;<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Is_Inverse (Operation : 
Operations) <font color="#0000FF">return</font> Boolean;<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Group_Inverse (Operation : 
Operations) <font color="#0000FF">return</font> Operations;<br>
<font color="#008000">&nbsp;&nbsp; --<br>
&nbsp;&nbsp; -- Priorities -- The operation priorities<br>
&nbsp;&nbsp; --<br>
&nbsp;&nbsp; </font><font color="#0000FF">type</font> Priorities
<font color="#0000FF">is range</font> <font color="#800000">1</font>..<font color="#800000">10</font>;<br>
<font color="#008000">&nbsp;&nbsp; --<br>
&nbsp;&nbsp; -- Raw_Descriptors -- The raw operation stack descriptors<br>
&nbsp;&nbsp; --<br>
</font>&nbsp;&nbsp; <font color="#0000FF">package</font> Raw_Descriptors
<font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">new</font> 
Parsers.Generic_Operation (Operations, Priorities);<br>
<font color="#008000">&nbsp;&nbsp; --<br>
&nbsp;&nbsp; -- Descriptor_Stacks -- Operation stack based on raw descriptors<br>
&nbsp;&nbsp; --<br>
</font>&nbsp;&nbsp; <font color="#0000FF">package</font> Descriptor_Stacks
<font color="#0000FF">is</font> <font color="#0000FF">new</font> 
Raw_Descriptors.Segmented_Stack;<br>
<font color="#008000">&nbsp;&nbsp; --<br>
&nbsp;&nbsp; -- Use the package of operation stacks deployed there<br>
&nbsp;&nbsp; --<br>
</font>&nbsp;&nbsp; <font color="#0000FF">use</font> Descriptor_Stacks.Operation;<br>
<font color="#008000">&nbsp;&nbsp; --<br>
&nbsp;&nbsp; -- Expression_Stack -- Derived from abstract operation stack to<br>
&nbsp;&nbsp; -- provide implementation of operation calls. <br>
&nbsp;&nbsp; --<br>
</font>&nbsp;&nbsp; <font color="#0000FF">type</font> Expression_Stack
<font color="#0000FF">is new</font> Stack <font color="#0000FF">with record</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Data : Integer_Stack.Segmented_Stack.Stack;<br>
&nbsp;&nbsp; <font color="#0000FF">end record</font>;<br>
<font color="#008000">&nbsp;&nbsp; --<br>
&nbsp;&nbsp; -- Call -- Overrides to implement operators<br>
&nbsp;&nbsp; --<br>
</font>&nbsp;&nbsp; <font color="#0000FF">procedure</font> Call<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Stack&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> 
Expression_Stack;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Operation : Operations;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Count&nbsp;&nbsp;&nbsp;&nbsp; : Natural<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#008000">&nbsp;&nbsp; --<br>
&nbsp;&nbsp; -- Enclose -- Overrides to implement brackets<br>
&nbsp;&nbsp; --<br>
</font>&nbsp;&nbsp; <font color="#0000FF">procedure</font> Enclose<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Stack : <font color="#0000FF">in out</font> Expression_Stack;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Left&nbsp; : Operations;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Right : Operations;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Count : Natural<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">end</font> Operation_Stack_Expressions;</tt></TD>
  </TR>
</TABLE>
<p>Here Integer_Stack is an instance of <a href="#Generic_Segmented_Stack">
Generic_Segmented_Stack</a> to keep arguments (integers). The type Operations is 
the set of defined operations: addition, multiplication, post-increment, left 
and right order brackets. The function &quot;<font color="#FF0000">and</font>&quot; is 
provided for association checks. Is_Commutative and Is_Inverse always return
<font color="#800000"><i>false</i></font>. Group_Inverse may return anything, it 
will never be called. The type Priorities defines the operation priorities. 
Raw_Descriptors is an instance of
<a href="#Parsers.Generic_Operation">Parsers.Generic_Operation</a> based on 
Operation and Priority. At this point
<a href="#Parsers.Generic_Operation.Segmented_Stack">
Parsers.Generic_Operation.Segmented_Stack</a> can be instantiated. 
Desciptor_Stacks is the instance which provides the abstract operation stack. 
Expression_Stack is derived from it. It has one additional data member of 
Integer_Stack type, that will keep the arguments of the operations. The abstract 
procedures <a href="#Parsers.Generic_Operation.Generic_Stack.Call">Call</a> and 
<a href="#Parsers.Generic_Operation.Generic_Stack.Enclose">Enclose</a> are overridden to implement the operations semantic.</p>
File<i> operation_stack_expressions.adb</i>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">with</font> Ada.Text_IO;&nbsp;
<font color="#0000FF">use</font> Ada.Text_IO;<br>
<br>
<font color="#0000FF">package body </font>Operation_Stack_Expressions
<font color="#0000FF">is</font><br>
&nbsp;&nbsp; <font color="#0000FF">use</font> Integer_Stack.Segmented_Stack;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> &quot;<font color="#FF0000">and</font>&quot; 
(Left, Right : Operations) <font color="#0000FF">return</font> Boolean
<font color="#0000FF">is</font><br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> True;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> &quot;<font color="#FF0000">and</font>&quot;;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Is_Commutative (Left, Right : 
Operations)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Boolean<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return </font>False;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Is_Commutative;<br>
<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">function</font>&nbsp;Is_Inverse&nbsp;(Operation&nbsp;:&nbsp;Operations)&nbsp;<font color="#0000FF">return</font>&nbsp;Boolean&nbsp;<font color="#0000FF">is<br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return </font>False;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Is_Inverse;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Group_Inverse (Operation : 
Operations)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Operations<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; raise </font>Program_Error; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Inc;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Group_Inverse;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Call<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Stack&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> 
Expression_Stack;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Operation : Operations;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Count&nbsp;&nbsp;&nbsp;&nbsp; : Natural<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; L, R : Integer;<br>
&nbsp;&nbsp; <font color="#0000FF">begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if </font>Count &gt; <font color="#800000">0</font>
<font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R := Top (Stack.Data);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pop (Stack.Data);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">if</font> Count &gt;
<font color="#800000">1</font> <font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; L := Top (Stack.Data);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pop (Stack.Data);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">case</font> Operation
<font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when</font> Add =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Push (Stack.Data, 
L + R);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> 
Mul =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Push (Stack.Data, 
L * R);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> 
Inc =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Push (Stack.Data, 
R + <font color="#800000">1</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when 
others</font> =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">raise</font> Constraint_Error;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Call;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Enclose<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Stack : <font color="#0000FF">in out</font> Expression_Stack;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Left&nbsp; : Operations;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Right : Operations;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Count : Natural<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; 
<font color="#0000FF">is</font><br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Enclose;<br>
<br>
<font color="#0000FF">end</font> Operation_Stack_Expressions;</tt></TD>
  </TR>
</TABLE>
<p>Implementation of <a href="#Parsers.Generic_Operation.Generic_Stack.Call">Call</a> is straightforward it gets arguments from the stack
evaluates the operation and pushes the result back. 
<a href="#Parsers.Generic_Operation.Generic_Stack.Enclose">Enclose</a> need nothing to do 
because order brackets is do not change the argument. Now the operation stack is 
ready to use:</p>
File <i>test_operation_expressions.adb</i>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">with</font> 
Operation_Stack_Expressions;<br>
<font color="#0000FF">use</font>&nbsp; Operation_Stack_Expressions;<br>
<br>
<font color="#0000FF">procedure</font> Test_Operation_Stack
<font color="#0000FF">is<br>
&nbsp;&nbsp; use</font> Operation_Stack_Expressions.Raw_Descriptors;<br>
&nbsp;&nbsp; <font color="#0000FF">use</font> 
Operation_Stack_Expressions.Descriptor_Stacks.Operation;<br>
<font color="#0000FF">&nbsp;&nbsp; use</font> 
Operation_Stack_Expressions.Integer_Stack.Segmented_Stack;<br>
<br>
&nbsp;&nbsp; Expression : Expression_Stack;<br>
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp; <font color="#008000">-- 1 + (2 + 3 + 4 * 5)++ + 6 * 7 + 8++</font><br>
&nbsp;&nbsp; Push_Start (Expression);<br>
&nbsp;&nbsp; Push (Expression.Data, <font color="#800000">1</font>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- 1</font><br>
&nbsp;&nbsp; Push_Binary (Expression, Add, <font color="#800000">5</font>,
<font color="#800000">6</font>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- +</font><br>
&nbsp;&nbsp; Push_Left_Bracket (Expression, Left_Bracket);&nbsp;&nbsp;
<font color="#008000">-- (</font><br>
&nbsp;&nbsp; Push (Expression.Data, <font color="#800000">2</font>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- 2</font><br>
&nbsp;&nbsp; Push_Binary (Expression, Add, <font color="#800000">5</font>,
<font color="#800000">6</font>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- +</font><br>
&nbsp;&nbsp; Push (Expression.Data, <font color="#800000">3</font>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- 3</font><br>
&nbsp;&nbsp; Push_Binary (Expression, Add, <font color="#800000">5</font>,
<font color="#800000">6</font>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- +</font><br>
&nbsp;&nbsp; Push (Expression.Data, <font color="#800000">4</font>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- 4</font><br>
&nbsp;&nbsp; Push_Binary (Expression, Mul, <font color="#800000">7</font>,
<font color="#800000">8</font>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- *</font><br>
&nbsp;&nbsp; Push (Expression.Data, <font color="#800000">5</font>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- 5</font><br>
&nbsp;&nbsp; Push_Right_Bracket (Expression, Right_Bracket);
<font color="#008000">-- )</font><br>
&nbsp;&nbsp; Push_Postfix (Expression, Inc, <font color="#800000">9</font>,
<font color="#800000">10</font>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- ++</font><br>
&nbsp;&nbsp; Push_Binary (Expression, Add, <font color="#800000">5</font>,
<font color="#800000">6</font>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- +</font><br>
&nbsp;&nbsp; Push (Expression.Data, <font color="#800000">6</font>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- 6</font><br>
&nbsp;&nbsp; Push_Binary (Expression, Mul, <font color="#800000">7</font>,
<font color="#800000">8</font>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- *</font><br>
&nbsp;&nbsp; Push (Expression.Data, <font color="#800000">7</font>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- 7</font><br>
&nbsp;&nbsp; Push_Binary (Expression, Add, <font color="#800000">5</font>,
<font color="#800000">6</font>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- +</font><br>
&nbsp;&nbsp; Push (Expression.Data, <font color="#800000">8</font>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- 8</font><br>
&nbsp;&nbsp;&nbsp;Push_Postfix&nbsp;(Expression,&nbsp;Inc,&nbsp;<font color="#800000">9</font>,&nbsp;<font color="#800000">10</font>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#008000">-- ++</font><br>
&nbsp;&nbsp; Push_End (Expression);<br>
&nbsp;&nbsp; <font color="#0000FF">if</font> Top (Expression.Data) /=
<font color="#800000">78</font> <font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">raise</font>
Constraint_Error;<br>
&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
<font color="#0000FF">end</font> Test_Operation_Stack;</tt></TD>
  </TR>
</TABLE>
<p>This procedure evaluates <tt>1 + (2 + 3 + 4 * 5)++ + 6 * 7 + 8++ </tt>just by
pushing arguments and the operations onto the corresponding stacks.
<a href="#Parsers.Generic_Operation.Generic_Stack.Push_End">Push_End</a> finishes 
the expression evaluation and the stack of arguments contains the only one item, 
the expression result.</p>
<p align="right">
  <A name="12.8"></A><a href="#12.7"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#12.9"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>12.8. Arguments</H3>
<p><a name="argument_stack"></a>The argument stack is the basic data structure used for parsing. It contains
the expression arguments, that is the operands of operations and their results. 
When expression is interpreted to immediately obtain its result, arguments are 
usually just values. When expression is compiled into some intermediate 
representation, arguments are leaves and nodes of the parsing tree.</p>
<H4><a name="12.8.1"></a>12.8.1. Argument stack</H4>
<p><a name="Parsers.Generic_Argument"></a>The generic package 
<a href="#Parsers.Generic_Argument">Parsers.Generic_Argument</a> defines the base abstract type for argument stacks:</p>
<blockquote>
<p><tt><font color="#0000FF">generic</font><br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Argument_Type i<font color="#0000FF">s 
private</font>;<br>
<font color="#0000FF">package</font> Parsers.Generic_Argument
<font color="#0000FF">is</font> ...</tt></p>
</blockquote>
<p>The generic parameter Argument_Type identifies appearance of an argument in 
the source. Usually it is the argument and a source location link. The package 
defines:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Argument_No <font color="#0000FF">is 
new </font>Positive;<br>
<font color="#0000FF">type</font> Frame <font color="#0000FF">is array</font> (Argument_No
<font color="#0000FF">range</font> &lt;&gt;) <font color="#0000FF">of</font> 
Argument_Type;</tt></p>
</blockquote>
<p>The type Frame is used to pass argument lists to the expression operations.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Argument.Stack"></a>type</font> Stack <font color="#0000FF">is abstract<br>
&nbsp;&nbsp; new </font>Ada.Finalization.Limited_Controlled
<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The abstract base type of argument stacks. An implementation should provide 
the following abstract subprograms:</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Is_Empty (<b>Container</b> : Stack)
<font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if the current 
stack fragment is empty.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Argument.Mark"></a>procedure</font> Mark (<b>Container</b> : <font color="#0000FF">in out</font> 
Stack) <font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This procedure creates a new stack fragment. A stack fragment represents an 
independent argument stack. No arguments below mark can be accessed in any way 
until <a href="#Parsers.Generic_Argument.Release">Release</a> is called. </p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Pop<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> Stack;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>List</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Frame<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This procedure pops an argument frame from the stack. The arguments fill the 
list provided by the parameter List. The number of arguments is defined by <b>
List</b>'Length. Constraint_Error is propagated when <b>Container</b> does not 
contain enough arguments in the current fragment (above the last
<a href="#Parsers.Generic_Argument.Mark">mark</a>).</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Push<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> 
: <font color="#0000FF">in out</font> Stack;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Argument</b>&nbsp; : Argument_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This procedure pushes one argument onto the stack.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Parsers.Generic_Argument.Release"></a>procedure</font> Release (<b>Container</b> : <font color="#0000FF">in out</font> 
Stack) <font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This procedure should be called for each call to
<a href="#Parsers.Generic_Argument.Mark">Mark</a> to remove the stack fragment 
created by the mark. If there are any arguments on the stack pushed after the
mark, they are removed. Constraint_Error is propagated when the stack does not 
contain any mark.</p>
<H4><a name="12.8.2"></a>12.8.2. Segmented argument stack</H4>
<p><a name="Parsers.Generic_Argument.Segmented_Stack"></a>The generic child 
package <a href="#Parsers.Generic_Argument.Segmented_Stack">
Parsers.Generic_Argument.Segmented_Stack</a> provides an implementation of 
argument stack using segmented stacks from the package
<a href="#Generic_Segmented_Stack">Generic_Segmented_Stack</a>. The package has 
the following generic parameters:</p>
<blockquote>
<p><tt><font color="#0000FF">generic</font><br>
&nbsp;&nbsp; Frame_Segment_Size : Positive := <font color="#800000">128</font>;<br>
&nbsp;&nbsp; Frame_Minimal_Size : Positive := <font color="#800000">64</font>;<br>
&nbsp;&nbsp; Frame_Increment&nbsp;&nbsp;&nbsp; : Natural&nbsp; :=
<font color="#800000">50</font>;<br>
&nbsp;&nbsp; Stub_Minimal_Size&nbsp; : Positive := <font color="#800000">64</font>;<br>
&nbsp;&nbsp; Stub_Increment&nbsp;&nbsp;&nbsp;&nbsp; : Natural&nbsp; :=
<font color="#800000">50</font>;<br>
<font color="#0000FF">package</font> Parsers.Generic_Argument.Segmented_Stack
<font color="#0000FF">is</font> ...</tt></p>
</blockquote>
<p>The parameters Frame_Segment_Size, Frame_Minimal_Size and Frame_Increment 
controls <a href="#Generic_Segmented_Stack_parameters">allocation of stack
segments</a>. The parameters Stub_Minimal_Size and Stub_Increment controls a
<a href="#Generic_Unbounded_Array">Generic_Unbounded_Array</a> used to keep 
stack stubs (fragments bounds). The type Stack defined in the package: </p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Stack <font color="#0000FF">is new
</font>Parsers.Generic_Argument.Stack <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p align="right">
  <A name="12.9"></A><a href="#12.8"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#13"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>12.9. Parsing tree example. Ada 95 expression parser</H3>
<p><a name="Parsers.Ada"></a>The package <a href="#Parsers.Ada">Parsers.Ada</a> provides a full Ada 95 expression analyzer. The 
analyzer has the type Ada_Expression defined in the package. The analyzer 
recognizes an Ada expression in the source and stops at its end. The type 
Operations defines the Ada operations:</p>
<TABLE border="5" cellpadding="3" cellspacing="0">
  <TR>
    <TD bgcolor="#008080" height="19" valign="top" align="center"><FONT color="#FFFFFF"><B>Name<br>
    (Operation)</B></FONT></TD>
    <TD bgcolor="#008080" height="19" valign="top" align="center">
    <p align="center"><font color="#FFFFFF"><b>Ada 95<br>
    notation</b></font></P></TD>
    <TD bgcolor="#008080" height="19" valign="top"><font color="#FFFFFF"><b>Comment. 
    References to the corresponding sections of <i>Ada 95 Reference Manual</i> are 
    given in round brackets where appropriate</b></font></TD>
  </TR>
  <TR>
    <TD height="19">Logical_And</TD>
    <TD height="19" align="center"><font color="#0000FF"><tt>and</tt></font></TD>
    <TD rowspan="5" height="127" valign="top">Logical operators and short-circuit 
    control 
    forms (<a href="http://www.adaic.com/standards/05rm/html/RM-4-5-1.html">4.5.1</a>). Logical and/or are implemented as <a href="#modifier">
    premodifiers</a> turning into infix operators when no short-circuit suffix 
    defined as a <a href="#modifier">postmodifier</a> follows. As the operators 
    all of them are declared
    commutative in the sense that the adjacent operators of same type will be 
    merged into one as in the case of<blockquote>
    <tt>A<font color="#0000FF">&nbsp;and&nbsp;then&nbsp;</font>B<font color="#0000FF">&nbsp;and&nbsp;then&nbsp;</font>C</tt>
    </blockquote>
    Parsed to And_Then (A, B, C). All these operators have the priority level
    2 (both the left and the right ones).</TD>
  </TR>
  <TR>
    <TD height="19">Logical_Or</TD>
    <TD height="19" align="center"><font color="#0000FF"><tt>or</tt></font></TD>
  </TR>
  <TR>
    <TD height="19">Logical_Xor</TD>
    <TD height="19" align="center"><font color="#0000FF"><tt>xor</tt></font></TD>
  </TR>
  <TR>
    <TD height="19">And_Then</TD>
    <TD height="19" align="center"><font color="#0000FF"><tt>and&nbsp;then</tt></font></TD>
  </TR>
  <TR>
    <TD height="19">Or_Else</TD>
    <TD height="19" align="center"><font color="#0000FF"><tt>or&nbsp;else</tt></font></TD>
  </TR>
  <TR>
    <TD height="19">EQ</TD>
    <TD height="19" align="center"><tt>=</tt></TD>
    <TD rowspan="8" height="208" valign="top">Relational operators and membership 
    tests (<a href="http://www.adaic.com/standards/05rm/html/RM-4-5-2.html">4.5.2</a>). The operator <tt><font color="#0000FF">not&nbsp;in</font></tt> is 
    implemented as a <a href="#modifier">premodifier</a> <tt>
	<font color="#0000FF">not</font></tt> 
    applied to the following operator <tt><font color="#0000FF">in</font></tt>. 
    Both membership tests are defined as an infix operators. All these operators 
    have the priority level 3.</TD>
  </TR>
  <TR>
    <TD height="19">NE</TD>
    <TD height="19" align="center"><tt>/=</tt></TD>
  </TR>
  <TR>
    <TD height="19">LT</TD>
    <TD height="19" align="center"><tt>&lt;</tt></TD>
  </TR>
  <TR>
    <TD height="19">LE</TD>
    <TD height="19" align="center"><tt>&lt;=</tt></TD>
  </TR>
  <TR>
    <TD height="19">GE</TD>
    <TD height="19" align="center"><tt>&gt;</tt></TD>
  </TR>
  <TR>
    <TD height="19">GT</TD>
    <TD height="19" align="center"><tt>&gt;=</tt></TD>
  </TR>
  <TR>
    <TD height="19">Member</TD>
    <TD height="19" align="center"><tt><font color="#0000FF">in</font></tt></TD>
  </TR>
  <TR>
    <TD height="19">Not_Member</TD>
    <TD height="19" align="center"><tt><font color="#0000FF">not&nbsp;in</font></tt></TD>
  </TR>
  <TR>
    <TD height="19">Add</TD>
    <TD height="19" align="center"><tt>+</tt></TD>
    <TD rowspan="3" height="73" valign="top">Binary adding operators (<a href="http://www.adaic.com/standards/05rm/html/RM-4-5-3.html">4.5.3</a>). 
    The operators <tt>+</tt> and <tt>-</tt> are declared commutative with the 
    group inverse Add_Inv. The infix adding operators have the priority level 4.</TD>
  </TR>
  <TR>
    <TD height="19">Sub</TD>
    <TD height="19" align="center"><tt>-</tt></TD>
  </TR>
  <TR>
    <TD height="19">Concatenate</TD>
    <TD height="19" align="center"><tt>&amp;</tt></TD>
  </TR>
  <TR>
    <TD height="19">Plus</TD>
    <TD height="19" align="center"><tt>+</tt></TD>
    <TD rowspan="2" height="46" valign="top">Unary adding operators (<a href="http://www.adaic.com/standards/05rm/html/RM-4-5-4.html">4.5.4</a>). 
    Association checks prevent multiple unary operations association with 
    themselves, adding, multiplying and highest precedence operators. The 
    priority level is 5.</TD>
  </TR>
  <TR>
    <TD height="19">Minus</TD>
    <TD height="19" align="center"><tt>-</tt></TD>
  </TR>
  <TR>
    <TD height="19">Mul</TD>
    <TD height="19" align="center"><tt>*</tt></TD>
    <TD rowspan="4" height="100" valign="top">Multiplying operators (<a href="http://www.adaic.com/standards/05rm/html/RM-4-5-5.html">4.5.5</a>). 
    The operators <tt>*</tt> and <tt>/</tt> are declared commutative with the 
    group inverse Mul_Inv.&nbsp; The priority level is 6.</TD>
  </TR>
  <TR>
    <TD height="19">Div</TD>
    <TD height="19" align="center"><tt>/</tt></TD>
  </TR>
  <TR>
    <TD height="19">Modulus</TD>
    <TD height="19" align="center"><tt><font color="#0000FF">mod</font></tt></TD>
  </TR>
  <TR>
    <TD height="19">Remainder </TD>
    <TD height="19" align="center"><tt><font color="#0000FF">rem</font></tt></TD>
  </TR>
  <TR>
    <TD height="19">Pow</TD>
    <TD height="19" align="center"><tt>**</tt></TD>
    <TD rowspan="3" height="73" valign="top">Highest precedence operators (<a href="http://www.adaic.com/standards/05rm/html/RM-4-5-6.html">4.5.6</a>). 
    These cannot be associated with themselves. They have the priority 7.</TD>
  </TR>
  <TR>
    <TD height="19">Abs_Value</TD>
    <TD height="19" align="center"><tt><font color="#0000FF">abs</font></tt></TD>
  </TR>
  <tr>
    <TD height="19">Logical_Not</TD>
    <TD height="19" align="center"><tt><font color="#0000FF">not</font></tt></TD>
  </tr>
  <TR>
    <TD height="17">Allocator</TD>
    <TD height="17" align="center"><tt><font color="#0000FF">new</font></tt></TD>
    <TD height="17" valign="top">Allocator (<a href="http://www.adaic.com/standards/05rm/html/RM-4-8.html">4.8</a>). An allocator is treated as a prefix 
    operator&nbsp;with priority 8.</TD>
  </TR>
  <TR>
    <TD height="19">Attribute</TD>
    <TD height="19" align="center"><tt>'</tt></TD>
    <TD height="19" valign="top">Attribute is treated as an infix operator with 
    the priority 9.</TD>
  </TR>
  <TR>
    <TD height="19">Alternative</TD>
    <TD height="19" align="center"><tt>|</tt></TD>
    <TD height="19" valign="top">Separates choices in aggregates, treated as an infix 
    operator. The operator is defined commutative to keep lists of alternatives 
    whole. The operator has the priority 0.</TD>
  </TR>
  <TR>
    <TD height="19">Ellipsis</TD>
    <TD height="19" align="center"><tt>..</tt></TD>
    <TD height="19" valign="top">Used in slices (<a href="http://www.adaic.com/standards/05rm/html/RM-4-1-2.html">4.1.2</a>), treated as an infix operator 
    with the priority 1.</TD>
  </TR>
  <TR>
    <TD height="19">Component </TD>
    <TD height="19" align="center"><tt>.</tt></TD>
    <TD height="19" valign="top">Component selector (<a href="http://www.adaic.com/standards/05rm/html/RM-4-1-3.html">4.1.3</a>), treated as an infix 
    operator. The operator is defined commutative to merge nested component 
    selectors in one list.</TD>
  </TR>
  <TR>
    <TD height="19">Left_Bracket</TD>
    <TD height="19" align="center"><tt>(</tt></TD>
    <TD height="19" valign="top">Order and aggregate brackets (<a href="http://www.adaic.com/standards/05rm/html/RM-4-3.html">4.3</a>)</TD>
  </TR>
  <TR>
    <TD height="19">Left_Index</TD>
    <TD height="19" align="center"><tt>(</tt></TD>
    <TD height="19" valign="top">Indexed components (<a href="http://www.adaic.com/standards/05rm/html/RM-4-1-1.html">4.1.1</a>) and function calls (<a href="http://www.adaic.com/standards/05rm/html/RM-6-4.html">6.4</a>). 
    It has the left priority 9, lower than one of component selector and same as 
    one of attributes.</TD>
  </TR>
  <TR>
    <TD height="19">Right_Bracket</TD>
    <TD height="19" align="center"><tt>)</tt></TD>
    <TD height="19" valign="top">Right bracket</TD>
  </TR>
  <TR>
    <TD height="19">Comma</TD>
    <TD height="19" align="center"><tt>,</tt></TD>
    <TD height="19" valign="top">In brackets of all sorts</TD>
  </TR>
  <TR>
    <TD height="19">Associate </TD>
    <TD height="19" align="center"><tt>=&gt;</tt></TD>
    <TD height="19" valign="top">Named association, treated as a ligature</TD>
  </TR>
  <TR>
    <TD height="19">Extend</TD>
    <TD height="19" align="center"><tt><font color="#0000FF">with</font></tt></TD>
    <TD height="19" valign="top">Extension aggregate separator, treated as a semicolon 
    introducing a sublist</TD>
  </TR>
</TABLE>
<p>The identifiers are not checked against the reserved keywords. That can be
done on 
later stages when necessary. Similarly the attributes names can be any 
expressions. The association checks can be relaxed by overriding corresponding 
error handlers. One might also wish to override the handlers to provide a more 
advanced error messaging mechanism than exception information.</p>
<p>The package defines the type Node a tagged abstract base type of all parsing 
tree nodes:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Node<font color="#0000FF"> is abstract 
tagged limited null record</font>;<br>
<font color="#0000FF">function</font> Image (Item : Node) <font color="#0000FF">
return</font> String <font color="#0000FF">is abstract</font>;<br>
<font color="#0000FF">type</font> Node_Ptr <font color="#0000FF">is access</font> 
Node'Class;<br>
<font color="#0000FF">for</font> Node_Ptr'Storage_Pool <font color="#0000FF">use</font> 
Tree_Pool;</tt></p>
</blockquote>
<p>The nodes of the tree are allocated on a stack. The stack is 
provided by a stack pool. This allows to remove the whole tree by deallocating 
its first allocated node or any other pool object allocated before it. Tree_Pool 
is the stack storage pool used for this. Nodes have the primitive operation 
Image used for dumping a parsing tree. The following concrete types are derived
from Node:</p>
<TABLE border="5" cellpadding="3" cellspacing="0">
  <TR>
    <TD bgcolor="#008080" height="19"><FONT color="#FFFFFF"><B>Parsing tree 
    nodes</B></FONT></TD>
    <TD bgcolor="#008080" height="19" align="left">
    <font color="#FFFFFF"><b>Comment</b></font></TD>
  </TR>
  <tr>
    <TD height="19">Character_Literal</TD>
    <TD height="19" align="left">Character expression term</TD>
  </tr>
  <tr>
    <TD height="19">Expression</TD>
    <TD height="19" align="left">An non-terminal node. The dicriminant Count 
    identifies the number of successors. The field Operation is the operation 
    associated with the node. The field Operands is the list of successors.</TD>
  </tr>
  <tr>
    <TD height="19">Identifier</TD>
    <TD height="19" align="left">Identifier expression term</TD>
  </tr>
  <tr>
    <TD height="19">Integer_Literal</TD>
    <TD height="19" align="left">Universal_Integer expression term</TD>
  </tr>
  <TR>
    <TD height="19">Mark</TD>
    <TD height="19" align="left">Used as a stub for the stack pool to mark its 
    state for future stack release</TD>
  </TR>
  <TR>
    <TD height="19">Missing_Operand</TD>
    <TD height="19" align="left">An expression term used where no operand was 
    found</TD>
  </TR>
  <TR>
    <TD height="19">Real_Literal</TD>
    <TD height="19" align="left">Universal_Real expression term</TD>
  </TR>
  <TR>
    <TD height="19">String_Literal</TD>
    <TD height="19" align="left">String expression term</TD>
  </TR>
</TABLE>
<p>All expression nodes have the field Location specifying its source location.</p>
<hr>
<p align="right">
<a name="13"></a><a href="#12.9"><IMG src="prev.gif" alt="[Back]" width="29" height="29"></a><A href="#20"><IMG src="index.gif"
 alt="[TOC]" width="29" height="29"></A><a href="#13.1"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>13. <a name="Cryptography"></a>Cryptography</H2>
<p align="right">
  <A name="13.1"></A><a href="#13"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#13.2"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>13.1. Sequences of non-repeating pseudo-random numbers</H3>
<p><a name="Generic_Random_Sequence"></a>The package
<a href="#Generic_Random_Sequence">Generic_Random_Sequence</a> provides means 
for generation of pseudo-random sequences of non-repeating numbers. The package 
is generic:</p>
<blockquote>
<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type </font>Item_Type <font color="#0000FF">is mod</font> &lt;&gt;;<br>
<font color="#0000FF">package</font> Generic_Random_Sequence
<font color="#0000FF">is</font> ...</tt></p>
</blockquote>
<p>The generic parameter Item_Type is a modular subtype which base type is used 
for the sequence items. The package declares it as:</p>
<blockquote>
<p><tt><font color="#0000FF">subtype </font>Element<font color="#0000FF"> is
</font>Item_Type'Base;</tt></p>
</blockquote>
<p>The sequence items ignore any constrains the subtype Item_Type might have.</p>
<blockquote>
<p><tt><font color="#0000FF">type </font>Sequence<font color="#0000FF"> is 
limited private</font>;</tt></p>
</blockquote>
<p>This is the type of a sequence of non-repeating items of Element. </p>
<table border="1" cellspacing="0" cellpadding="5">
	<tr>
		<td>Note that the implementation requires O(<i>m</i>) memory where <i>
		m</i> is the modulus of Element. For this reason it is not recommended 
		to instantiate this package with large modular types. </td>
	</tr>
</table>
<p>The following subprograms are provided:</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Generic_Random_Sequence.Length"></a>function </font>Length (<b>Sequencer</b> : 
Sequence) <font color="#0000FF">return</font> Element;</tt></p>
</blockquote>
<p>This function returns the number of elements already generated by <b>
Sequencer</b>. The sequence wraps at Element'Last. That is when Element'Modulus 
items were generated. This function can be used in order to check whether a call 
to <a href="#Generic_Random_Sequence.Next">Next</a> would yield an unique item. 
When the result is 0, <a href="#Generic_Random_Sequence.Next">Next</a> will 
start to return repeating items. </p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Generic_Random_Sequence.Next"></a>function</font> 
Next (<b>Sequencer</b> : Sequence; <b>Dice</b> : Element)<br>
&nbsp;<font color="#0000FF">&nbsp; return</font> Element;</tt></p>
</blockquote>
<p>This function returns the next sequence item. The parameter <b>Dice</b> is an 
input used in order to randomize the sequence. When <b>Dice</b> is 0 then 
consequent calls to <b>Next</b> will return the sequence of 0,1,2,3,... of 
Element. Typically <b>Dice</b> is an output of some pseudo-random generator of 
Element (or Item_Type'Base). In this case the sequence becomes pseudo-random as 
well. One can also use the parameter <b>Dice</b> for block cipher operation 
modes such as chaining and feedback. The first Element'Modulus items returned by 
the function are non-repeating. After that the next Element'Modulus items do not 
repeat more than once. I.e. in each cycle of Element'Modulus items no item 
repeats. The order in which items repeat depends on <b>Dice</b>. Note that even 
if <b>Dice</b> has a cycle of Element'Modulus outputs, that does not necessary 
imply sequence repetition.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Next<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Sequencer</b> 
: <font color="#0000FF">in out</font> Sequence;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Dice</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Element;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Item</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Element<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This is a variant of the function above shaped as a procedure.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Start (<b>Sequencer</b> :
<font color="#0000FF">in out</font> Sequence);</tt></p>
</blockquote>
<p>This procedure starts a new sequence. It resets <b>Sequencer</b> to its initial 
state, so that the first consequent call to
<a href="#Generic_Random_Sequence.Next">Next</a> will yield exactly the same 
item as it did first time, provided that the <b>Dice</b> parameter is same, and 
that a call to <a href="#Generic_Random_Sequence.Length">Length</a> will yield 
0.</p>
<p align="right">
  <A name="13.2"></A><a href="#13.1"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#14"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>13.1. Symmetric serialization</H3>
<p><a name="Strings_Edit.Symmetric_Serialization"></a>The package
<a href="#Strings_Edit.Symmetric_Serialization">
Strings_Edit.Symmetric_Serialization</a> provides a simple symmetric encryption 
and encoding for serializing plain strings. The main objective is saving 
and transporting user credentials in a mangled format. Note that this should be 
used only when deploying stronger asymmetric methods were 
impossible. For example when it is necessary to store user password as a string 
with an ability to restore it back. The encoding uses a 64-bit alphabet of 
digits, letters and characters '_' and '~'. Typically the key used for encryption 
is 
derived from the application name, registered user name etc. The package defines 
the following subtype:</p>
<blockquote>
<p><tt><font color="#0000FF">subtype</font> Encoded_String <font color="#0000FF">
is </font>String (<font color="#800000">1</font>..<i>implementation-defined</i>);</tt></p>
</blockquote>
<p>Objects of this subtype are encoded encrypted strings. The length is fixed because the 
source string is always padded to 256 characters.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Decode (<b>Data</b> : 
Encoded_String; <b>Key</b> : String)<br>
&nbsp;<font color="#0000FF">&nbsp; return</font> String;</tt></p>
</blockquote>
<p>This function decodes and decrypts a string. The parameter <b>Data</b> is the 
input. The parameter <b>Key</b> is the key used while encryption. The exception 
Data_Error is propagated when <b>Data</b> contains invalid characters.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Encode (<b>Text</b> : String; <b>
Key</b> : String)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Encoded_String;</tt></p>
</blockquote>
<p>This function encrypts and encodes <b>Text</b>. The parameter <b>Key</b> is 
the key used for encryption. The exception Constraint_Error is propagated when
<b>Text</b> is longer than 256 characters.</p>
<hr>
<p align="right">
<a name="14"></a><a href="#13.2"><IMG src="prev.gif" alt="[Back]" width="29" height="29"></a><A href="#20"><IMG src="index.gif"
 alt="[TOC]" width="29" height="29"></A><a href="#14.1"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>14. Numerics</H2>
<p align="right">
  <A name="14.1"></A><a href="#14"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#14.2"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>14.1. IEEE 754 representations</H3>
<p> <a href="http://grouper.ieee.org/groups/754/">IEEE 754</a> 
is a widely used standard for floating-point numbers computation&nbsp; The 
floating-point numeric types defined by the Ada language are not necessarily <a href="http://grouper.ieee.org/groups/754/">IEEE 754</a>. 
The choice depends on the target platform's hardware. Nevertheless an Ada 
program may need <a href="http://grouper.ieee.org/groups/754/">IEEE 754</a> 
numbers when it deals with the I/O devices, network protocols, and software 
libraries using <a href="http://grouper.ieee.org/groups/754/">IEEE 754</a>.</p>
<p> The library provides support for conversions between any Ada 
floating-point type and <a href="http://grouper.ieee.org/groups/754/">IEEE 754</a> 
representations. It is designed to work with the machine representations 
different from <a href="http://grouper.ieee.org/groups/754/">IEEE 754</a>, 
including those with non-binary machine radix. Note that it is not intended for
computations in <a href="http://grouper.ieee.org/groups/754/">IEEE 754</a> 
representations. When numeric computations are required a corresponding native 
Ada floating-point type should be used.</p>
<p><a name="IEEE_754"></a>The package
<a href="#IEEE_754">IEEE_754</a> is the parent of several children packages 
provided for handling <a href="http://grouper.ieee.org/groups/754/">IEEE 754</a> 
floating-point numbers. The package declares:</p>
<blockquote>
<p><tt><font color="#0000FF">subtype </font>Byte<font color="#0000FF"> is </font>
Interfaces.Unsigned_8;</tt></p>
</blockquote>
<p>The type Byte represents one byte of an
<a href="http://grouper.ieee.org/groups/754/">IEEE 754</a> floating-number data 
layout. The package also declares the following exceptions:</p>
<blockquote>
<p><tt>Not_A_Number_Error&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">
exception</font>;<br>
Positive_Overflow_Error : <font color="#0000FF">exception</font>;<br>
Negative_Overflow_Error : <font color="#0000FF">exception</font>;</tt></p>
</blockquote>
<h4><a name="14.1.1"></a>14.1.1. Single precision 32-bit floating-point numbers</h4>
<p><a name="IEEE_754.Generic_Single_Precision"></a>The generic child package
<a href="#IEEE_754.Generic_Single_Precision">IEEE_754.Generic_Single_Precision</a> 
provides single precision 32-bit floating point numbers. The package is generic:</p>
<blockquote>
<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type </font>Number<font color="#0000FF"> is digits</font> &lt;&gt;;<font color="#0000FF"><br>
package </font>IEEE_754.Generic_Single_Precision<font color="#0000FF"> is </font>
...</tt></p>
</blockquote>
<p>The formal parameter Number is the Ada floating-point type to use with the 
package. The type of the <a href="http://grouper.ieee.org/groups/754/">IEEE 754</a> 
numbers is:</p>
<blockquote>
<p><tt><font color="#0000FF">type </font>Float_32<font color="#0000FF"> is array </font>
(1..4) <font color="#0000FF">of</font> Byte;</tt></p>
</blockquote>
<p>The values of the type are 32-bit single-precision 
<a href="http://grouper.ieee.org/groups/754/">IEEE 754</a> floating-point 
numbers .The memory layout of encoding is big endian, i.e. the byte containing 
the number's sign and the most significant bits of the exponent is the first 
array element. The byte containing the least significant bits of the mantissa is 
the last array element. The following operations are defined in the package:</p>
<blockquote>
<p><tt><font color="#0000FF">function </font>From_IEEE (<b>Value</b> : Float_32)<font color="#0000FF"> 
return</font> Number;</tt></p>
</blockquote>
<p>This function converts <b>Value</b> to the corresponding Ada floating-point 
type. Negative zero is converted to zero. An exception is propagated when <b>
Value</b> is not a number or else cannot be converted to Number.</p>
<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I></CAPTION>
  <TR>
    <TD valign="top">Negative_Overflow_Error</TD>
    <TD> <b>Value</b> is less than Number'First or else is a negative infinity</TD>
  </TR>
  <tr>
    <TD valign="top">Not_A_Number_Error</TD>
    <TD> <b>Value</b> is not a number (NaN)</TD>
  </tr>
  <TR>
    <TD valign="top">Positive_Overflow_Error</TD>
    <TD> <b>Value</b> is greater than Number'Last or else is a positive infinity</TD>
  </TR>
</TABLE>
<blockquote>
<p><tt><font color="#0000FF">function </font>Is_NaN (<b>Value</b> : Float_32)<font color="#0000FF"> 
return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if <b>Value</b> 
is an
<a href="http://grouper.ieee.org/groups/754/">IEEE 754</a> NaN (not a number).</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Is_Negative (<b>Value</b> : 
Float_32)<font color="#0000FF"> return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if <b>Value</b> 
is an
<a href="http://grouper.ieee.org/groups/754/">IEEE 754</a> negative, Note that
<a href="http://grouper.ieee.org/groups/754/">IEEE 754</a> has negative zeros.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Is_Real (<b>Value</b> : Float_32)<font color="#0000FF"> 
return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if <b>Value</b> 
represents a real number. Both <a href="http://grouper.ieee.org/groups/754/">IEEE 754</a> 
zeros are considered numbers.</p>

<blockquote>
<p><tt><font color="#0000FF">function </font>To_IEEE (<b>Value</b> : Number)<font color="#0000FF"> 
return</font> Float_32;</tt></p>
</blockquote>
<p>This function converts Ada floating-point number to the corresponding
<a href="http://grouper.ieee.org/groups/754/">IEEE 754</a> number. The result 
can be an infinity if the value cannot be represented otherwise.</p>

<blockquote>
<p><tt>Positive_Infinity : <font color="#0000FF">constant</font> Float_32;<br>
Positive_Zero&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">constant</font> 
Float_32;<br>
Negative_Infinity : <font color="#0000FF">constant</font> Float_32;<br>
Negative_Zero&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">constant</font> 
Float_32;</tt></p>
</blockquote>
<p>These constants define some special
<a href="http://grouper.ieee.org/groups/754/">IEEE 754</a> representations.</p>
<p><a name="IEEE_754.Floats"></a>The package <a href="#IEEE_754.Floats">IEEE_754.Floats</a> is an instantiation of 
<a href="#IEEE_754.Generic_Single_Precision">IEEE_754.Generic_Single_Precision</a> 
with the standard type Float.</p>
<h4><a name="14.1.2"></a>14.1.2. Double precision 64-bit floating-point numbers</h4>
<p><a name="IEEE_754.Generic_Double_Precision"></a>The generic child package
<a href="#IEEE_754.Generic_Double_Precision">IEEE_754.Generic_Double_Precision</a> 
provides single precision 64-bit floating point numbers. The package is generic:</p>
<blockquote>
<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type </font>Number<font color="#0000FF"> is digits</font> &lt;&gt;;<font color="#0000FF"><br>
package </font>IEEE_754.Generic_Double_Precision<font color="#0000FF"> is </font>
...</tt></p>
</blockquote>
<p>The formal parameter Number is the Ada floating-point type to use with the 
package. The type of the <a href="http://grouper.ieee.org/groups/754/">IEEE 754</a> 
numbers is:</p>
<blockquote>
<p><tt><font color="#0000FF">type </font>Float_64<font color="#0000FF"> is array </font>
(1..8) <font color="#0000FF">of</font> Byte;</tt></p>
</blockquote>
<p>The memory layout of Float_64 is big endian. The rest of the package is 
identical to
<a href="#IEEE_754.Generic_Single_Precision">IEEE_754.Generic_Single_Precision</a> 
with Float_64 used instead of Float_32.</p>
<p><a name="IEEE_754.Long_Floats"></a>The package 
<a href="#IEEE_754.Long_Floats">IEEE_754.Long_Floats</a> is an instantiation of
<a href="#IEEE_754.Generic_Double_Precision">IEEE_754.Generic_Double_Precision</a> 
with the standard type Long_Float.</p>
<p align="right">
  <A name="14.2"></A><a href="#14.1"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#14.3"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>14.2. <a name="Chebyshev_series"></a>Chebyshev series</H3>
<p> <a name="Generic_Chebyshev_Polynomials"></a>The generic package
<a href="#Generic_Chebyshev_Polynomials">Generic_Chebyshev_Polynomials</a> 
provides functions to summation Chebyshev series:</p>
<blockquote>
<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type </font>Number<font color="#0000FF"> is digits</font> &lt;&gt;;<font color="#0000FF"><br>
package </font>Generic_Chebyshev_Polynomials<font color="#0000FF"> is </font>...</tt></p>
</blockquote>
<p>The package provides the following functions:</p>
<blockquote>
<p><tt><font color="#0000FF">function </font>Sum_T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
(<b>X</b> : Number'Base; <b>A</b> : Coefficients)<font color="#0000FF"> return </font>
Number'Base;<font color="#0000FF"><br>
function </font>Sum_Even_T&nbsp;&nbsp;&nbsp; (<b>X</b> : Number'Base; <b>A</b> : 
Coefficients)<font color="#0000FF"> return </font>Number'Base;<font color="#0000FF"><br>
function </font>Sum_Odd_T&nbsp;&nbsp;&nbsp;&nbsp; (<b>X</b> : Number'Base; <b>A</b> 
: Coefficients)<font color="#0000FF"> return </font>Number'Base;<font color="#0000FF"><br>
function </font>Sum_Shifted_T (<b>X</b> : Number'Base; <b>A</b> : Coefficients)<font color="#0000FF"> 
return </font>Number'Base;</tt></p>
</blockquote>
<p>The parameter X is the argument of the series. The parameter A is the list of 
coefficients. Its type is declared in the package:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Coefficients <font color="#0000FF">is 
array</font> (Natural <font color="#0000FF">range</font> &lt;&gt;)
<font color="#0000FF">of</font> Number'Base;</tt></p>
</blockquote>
<p>These functions sum first kind Chebyshev series:</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <TR>
    <TD valign="top" bgcolor="#008080"><b><font color="#FFFFFF">Function</font></b></TD>
    <TD bgcolor="#008080"> <b><font color="#FFFFFF">Result</font></b></TD>
    <TD bgcolor="#008080"> <font color="#FFFFFF"><b>Definition</b></font></TD>
  </TR>
  <tr>
    <TD valign="top">Sum_T</TD>
    <TD> <table border="0" cellspacing="0" cellpadding="0">
		<tr>
			<td align="center" valign="bottom"><small><i>N</i></small></td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td align="center"><big><big>&Sigma;</big></big></td>
			<td><i>a<sub>n</sub>T<sub>n</sub></i>(<i>x</i>)</td>
		</tr>
		<tr>
			<td align="center" valign="top"><small><i>n</i>=0</small></td>
			<td>&nbsp;</td>
		</tr>
	</table>
	</TD>
    <TD rowspan="3" valign="top"> 
	<table border="0" width="100%" cellspacing="0" cellpadding="0">
		<tr>
			<td align="right"><i>T</i><sub>0</sub>(<i>x</i>)</td>
			<td>&nbsp;=&nbsp;</td>
			<td>1</td>
		</tr>
		<tr>
			<td align="right"><br>
			<i>T</i><sub>1</sub>(<i>x</i>)<br>
&nbsp;</td>
			<td>&nbsp;=&nbsp;</td>
			<td><i>x</i></td>
		</tr>
		<tr>
			<td align="right"><i>T</i><sub><i>n</i>+1</sub>(<i>x</i>)</td>
			<td>&nbsp;=&nbsp;</td>
			<td>2<i>xT</i><sub><i>n</i></sub>(<i>x</i>)-<i>T</i><sub><i>n-</i>1</sub>(<i>x</i>)</td>
		</tr>
	</table>
	</TD>
  </tr>
  <TR>
    <TD valign="top">Sum_Even_T</TD>
    <TD><table border="0" cellspacing="0" cellpadding="0">
		<tr>
			<td align="center" valign="bottom"><small><i>N</i></small></td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td align="center"><big><big>&Sigma;</big></big></td>
			<td><i>a<sub>n</sub>T</i><sub>2<i>n</i></sub>(<i>x</i>)</td>
		</tr>
		<tr>
			<td align="center" valign="top"><small><i>n</i>=0</small></td>
			<td>&nbsp;</td>
		</tr>
	</table>
	</TD>
  </TR>
  <TR>
    <TD valign="top">Sum_Odd_T</TD>
    <TD> <table border="0" cellspacing="0" cellpadding="0">
		<tr>
			<td align="center" valign="bottom"><small><i>N</i></small></td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td align="center"><big><big>&Sigma;</big></big></td>
			<td><i>a<sub>n</sub>T</i><sub>2<i>n</i>+1</sub>(<i>x</i>)</td>
		</tr>
		<tr>
			<td align="center" valign="top"><small><i>n</i>=0</small></td>
			<td>&nbsp;</td>
		</tr>
	</table>
	</TD>
  </TR>
  <TR>
    <TD valign="top">Sum_Shifted_T</TD>
    <TD> <table border="0" cellspacing="0" cellpadding="0">
		<tr>
			<td align="center" valign="bottom"><small><i>N</i></small></td>
			<td>&nbsp;</td>
		</tr>
		<tr>
			<td align="center"><big><big>&Sigma;</big></big></td>
			<td><i>a<sub>n</sub>T</i><sup>*</sup><i><sub>n</sub></i>(<i>x</i>)</td>
		</tr>
		<tr>
			<td align="center" valign="top"><small><i>n</i>=0</small></td>
			<td>&nbsp;</td>
		</tr>
	</table>
	</TD>
    <TD valign="top"> <i>T</i>*<sub><i>n</i></sub>(<i>x</i>) = <i>T<sub>n</sub></i>(2<i>x</i>-1)</TD>
  </TR>
</TABLE>

<p><a name="Long_Chebyshev_Polynomials"></a>The package 
<a href="#Long_Chebyshev_Polynomials">Long_Chebyshev_Polynomials</a> is an instantiation of
<a href="#Generic_Chebyshev_Polynomials">Generic_Chebyshev_Polynomials</a> 
with the standard type Long_Float.</p>
<p align="right">
  <A name="14.3"></A><a href="#14.2"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#14.4"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>14.3. Gamma function</H3>
<p>The function Gamma is an approximation of &Gamma;(<i>x</i>):</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gamma"></a>function</font> Gamma (<b>X</b> : Float)
<font color="#0000FF">return</font> Float;</tt></p>
</blockquote>
<p>The implementation has relative accuracy under 5<font face="Times New Roman">&#903;</font>10<sup>-8</sup>. 
It uses Chebyshev series approximation coefficients from <i>Mathematical 
functions and their approximations</i> by Yudell L. Luke, 1975.</p>

<p align="right">
  <A name="14.4"></A><a href="#14.3"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#15"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>14.4. Normal cubic spline interpolation</H3>
<p>A cubic spline is a piecewise polynomial 
function. On each interval it is represented by a 3<sup>rd</sup> order polynom S<sub><i>i</i></sub>(<i>x</i>):</p>
<blockquote>
	<p>S<sub><i>i</i></sub>(<i>x</i>) =<i> a<sub>i </sub></i>+<i> b<sub>i</sub></i>(<i>x</i>-<i>x</i><sub>i</sub>) 
	+<i> c<sub>i</sub></i>(<i>x</i>-<i>x</i><sub>i</sub>)<sup>2 </sup>+<i> d<sub>i</sub></i>(<i>x</i>-<i>x</i><sub>i</sub>)<sup>3</sup></p>
</blockquote>
<p>Cubic spline can be used to interpolate a function defined by a set of <i>n
</i>pairs (<i>x<sub>i</sub></i>,<i>y<sub>i</sub></i>). The conditions are that the spline 
takes the value <i>y<sub>i</sub></i> in the interpolation point <i>x<sub>i</sub></i>, i.e. that:</p>
<blockquote>
	<p>&forall;<i>i </i>1&le;<i>i</i>&#8804;<i>n</i>-1&nbsp; S<i><sub>i</sub></i>(<i>x<sub>i</sub></i>) =<i> y<sub>i&nbsp; </sub></i>
	and&nbsp; S<i><sub>i</sub></i>(<i>x<sub>i</sub></i><sub>+1</sub>) =<i> y<sub>i</sub></i><sub>+1</sub></p>
</blockquote>
<p>That its 1st and 2nd differentials are equal in the inner points, i.e. that:</p>
<blockquote>
	<p>&forall;<i>i </i>1&le;<i>i</i>&lt;<i>n-2</i>&nbsp;&nbsp; S<i>'<sub>i</sub></i>(<i>x<sub>i</sub></i>) =<i> </i>S<i>'<sub>i</sub></i><sub>+1</sub>(<i>x<sub>i</sub></i>)&nbsp;&nbsp; S<i>''<sub>i</sub></i>(<i>x<sub>i</sub></i>) =<i> </i>S<i>''<sub>i</sub></i><sub>+1</sub>(<i>x<sub>i</sub></i>)</p>
</blockquote>
<p>Additionally the normal spline is such that the second differential is 0 in 
the end points: S<i>''</i><sub>1</sub>(<i>x</i><sub>1</sub>) =<i> </i>S<i>''<sub>n</sub></i><sub>-1</sub>(<i>x<sub>n</sub></i>) 
= 0. Such interpolations have the advantage of being numerically stable and 
efficient to compute.</p>
<p><a name="Generic_Cubic_Spline"></a>The generic package
<a href="#Generic_Cubic_Spline">Generic_Cubic_Spline</a> provides an 
implementation of normal cubic splines. </p>
<blockquote>
	<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type</font> Number <font color="#0000FF">is digits</font> &lt;&gt;;<br>
	<font color="#0000FF">package</font> Generic_Cubic_Spline
	<font color="#0000FF">is</font></tt></p>
</blockquote>
<p>The package provides the type</p>

<blockquote>
	<p><tt><font color="#0000FF">type</font> Cubic_Spline <font color="#0000FF">
	is new</font> Abstract_Pairs_Container
	<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The objects of the type are splines. The parent type is<a href="#Generic_Cubic_Spline.Abstract_Pairs_Container"> 
abstract container of pairs</a> (<i>x<sub>i</sub></i>,<i>y<sub>i</sub></i>) 
corresponding to the interpolation points. The following operations are provided 
for the type:</p>

<blockquote>
	<p><tt><font color="#0000FF">function</font> Acceleration<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Spline</b>&nbsp;&nbsp; : 
	Cubic_Spline;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Argument</b> : Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> Number;</tt></p>
</blockquote>
<p>This function returns the value of the 2<sup>nd</sup> <b>Spline</b>'s differential in <b>
Argument</b>. Outside the interval [<i>x</i><sub>1</sub>, <i>x<sub>n</sub></i>] 
the result is 0. It is also 0 when the spline is defined by less than 3 
interpolation points. Constraint_Error is propagated when the spline is undefined (no 
points set) or upon numeric errors.</p>

<blockquote>
	<p><tt><font color="#0000FF">function</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Spline</b> : Cubic_Spline;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;&nbsp;<font color="#0000FF">return</font> Pair;</tt></p>
</blockquote>
<p>This function returns a pair corresponding to the interpolation point 
specified by Index. Constraint_Error is propagated when <b>Index</b> is wrong. 
The function is the implementation of the abstract operation of the base type.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Size (Spline : Cubic_Spline)
	<font color="#0000FF">return</font> Natural;</tt></p>
</blockquote>
<p>This function returns the number of interpolation points. The function is the 
implementation of the abstract operation of the base type.</p>

<blockquote>
	<p><tt><font color="#0000FF">function</font> Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Spline</b>&nbsp;&nbsp; : 
	Cubic_Spline;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Argument</b> : Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> Number;</tt></p>
</blockquote>
<p>This function returns the value of <b>Spline</b> in <b>Argument</b>. Outside 
the interval [<i>x</i><sub>1</sub>, <i>x<sub>n</sub></i>] the result is 
extrapolated using the linear functions <i>y</i><sub>1</sub>+S<i>'</i><sub>1</sub>(<i>x</i><sub>1</sub>)(<i>x</i>-<i>x</i><sub>1</sub>) 
and <i>y<sub>n</sub></i>+S<i>'<sub>n</sub></i><sub>-1</sub>(<i>x<sub>n</sub></i>)(<i>x</i>-<i>x<sub>n</sub></i>) 
correspondingly. When the spline is defined by only one point, the result is 
constant value in that point. When the spline is defined by two points, linear 
interpolation is used. Constraint_Error is propagated when the spline is undefined (no 
points set) or upon numeric errors.</p>

<blockquote>
	<p><tt><font color="#0000FF">function</font> Velocity<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Spline</b>&nbsp;&nbsp; : 
	Cubic_Spline;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Argument</b> : Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> Number;</tt></p>
</blockquote>
<p>This function returns the value of the 1<sup>st</sup> <b>Spline</b>'s differential in <b>
Argument</b>. Outside the interval [<i>x</i><sub>1</sub>, <i>x<sub>n</sub></i>] 
the result is constant S<i>'</i><sub>1</sub>(<i>x</i><sub>1</sub>) or S<i>'<sub>n</sub></i><sub>-1</sub>(<i>x<sub>n</sub></i>) 
correspondingly. Constraint_Error is propagated when the spline is undefined (no 
points set) or upon numeric errors.</p>

<blockquote>
	<p><tt><font color="#0000FF"><a name="Generic_Cubic_Spline.Set"></a>procedure</font> Set (<b>Spline</b> :<font color="#0000FF"> 
	in out </font>Cubic_Spline; <b>Pairs</b> : Pairs_Array);</tt></p>
</blockquote>
<p>This procedure is used to define <b>Spline</b>. The parameter <b>Pairs</b> is 
the array of pairs (<i>x<sub>i</sub></i>,<i>y<sub>i</sub></i>) to interpolate. 
The type of the parameter is declared in the package as:</p>
<blockquote>
	<p><tt><font color="#0000FF">type</font> Pair <font color="#0000FF">is 
	record</font><br>
&nbsp;&nbsp; X : Number;<br>
&nbsp;&nbsp; Y : Number;<br>
	<font color="#0000FF">end record</font>;<br>
	<font color="#0000FF">type</font> Pairs_Array <font color="#0000FF">is array</font> 
	(Positive <font color="#0000FF">range</font> &lt;&gt;) <font color="#0000FF">of</font> 
	Pair;</tt></p>
</blockquote>
<p>The array need not to be sorted. If the values <i>x<sub>i</sub></i> in the 
array repeat, they shall have equal corresponding values <i>y<sub>i</sub></i>. Otherwise 
Constraint_Error is propagated. It is also propagate on numeric errors. Upon an 
exception propagation the argument <b>Spline</b> remains unmodified.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Set_From_Container<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Spline</b> :<font color="#0000FF"> 
	in out </font>Cubic_Spline;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Pairs</b>&nbsp; : Abstract_Pairs_Container'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is similar to <a href="#Generic_Cubic_Spline.Set">Set</a>. It uses an abstract container of 
pairs (<i>x<sub>i</sub></i>,<i>y<sub>i</sub></i>) to interpolate as the 
parameter. The type of 
the parameter is declared in the package as:</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Generic_Cubic_Spline.Abstract_Pairs_Container"></a>type</font> Abstract_Pairs_Container
	<font color="#0000FF">is<br>
&nbsp;&nbsp; abstract new </font>Ada.Finalization.Limited_Controlled
	<font color="#0000FF">with null record</font>;</tt></p>
</blockquote>
<p>The type is abstract with the following primitive operation to override:</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> : Abstract_Pairs_Container;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Pair<font color="#0000FF"> is abstract</font>;</tt></p>
</blockquote>
<p>This function is used to query the pairs enumerated by the index 1... 
Constraint_Error is propagated when <b>Index</b> is wrong.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Size (<b>Container</b> : Abstract_Pairs_Container)<br>
&nbsp;&nbsp; <font color="#0000FF">
	return</font> Natural<font color="#0000FF"> is abstract</font>;</tt></p>
</blockquote>
<p>This function is used to get the number of pairs in the container.</p>
<p>If the values <i>x<sub>i</sub></i> 
returned by this function repeat, they shall have the corresponding values <i>y<sub>i </sub></i>
equal. 
Otherwise Constraint_Error is propagated. It is also propagated on numeric 
errors. Upon an exception propagation the argument <b>Spline</b> remains 
unmodified.</p>
<p>The package Long_Float_Cubic_Spline is an instantiation of
<a href="#Generic_Cubic_Spline">Generic_Cubic_Spline</a> with the type 
Long_Float.</p>

<hr>
<p align="right">
<a name="15"></a><a href="#14.3"><IMG src="prev.gif" alt="[Back]" width="29" height="29"></a><A href="#20"><IMG src="index.gif"
 alt="[TOC]" width="29" height="29"></A><a href="#15.1"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>15. Miscellany</H2>
<p align="right">
  <A name="15.1"></A><a href="#15"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#15.2"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>15.1. Address order</H3>

<p><a name="Generic_Address_Order"></a>The generic package 
<a href="#Generic_Address_Order">Generic_Address_Order</a> 
provides implementation of comparison operations performed by comparing 
addresses:</p>
<blockquote>
<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type</font> Item_Type (&lt;&gt;) <font color="#0000FF">is limited private</font>;<br>
<font color="#0000FF">package</font> Generic_Address_Order <font color="#0000FF">
is</font> ...</tt></p>
</blockquote>
<p>The package provides operations:</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Equal (<b>Left</b>, <b>Right</b> :
<font color="#0000FF">access</font> Item_Type) <font color="#0000FF">return</font> 
Boolean;<br>
<font color="#0000FF">function</font> Less&nbsp; (<b>Left</b>, <b>Right</b> :
<font color="#0000FF">access</font> Item_Type) <font color="#0000FF">return</font> 
Boolean;</tt></p>
</blockquote>

<p align="right">
  <A name="15.2"></A><a href="#15.1"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#15.3"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>15.2. SQLite bindings</H3>

<p><a name="SQLite"></a>The package <a href="#SQLite">SQLite</a> provides bindings to <a href="http://www.sqlite.org/index.html">SQLite</a>. 
The bindings are native and intended for static linking with the data base engine, 
which is distributed in sources. The corresponding C files are typically incorporated into 
the project. The subdirectory s<i>qlite-sources</i> contains the official 
distribution of <a href="http://www.sqlite.org/index.html">SQLite</a> called &quot;amalgamation.&quot; 
When compiled manually the object file sqlite3.o should be linked with the 
project.</p>
<p>The 
bindings provide the following types:</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="SQLite.Data_Base"></a>type </font>Data_Base<font color="#0000FF"> is 
tagged private</font>;</tt></p>
</blockquote>
<p>This type is a handle to a data base connection. The connection is held until 
at least one handle to it exists. Handles can be copied.</p>
<blockquote>
<p><tt><font color="#0000FF">function </font>Open<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>File_Name</b> : 
String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Flags</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Open_Flags := READWRITE <font color="#0000FF">or </font>CREATE<font color="#0000FF"> 
or </font>FULLMUTEX<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Data_Base;</tt></p>
</blockquote>
<p>This function returns a handle to the connection. The parameter <b>File_Name</b> 
is the data base file name. <b>Flags</b> is the connection flags as defined by <a href="http://www.sqlite.org/index.html">SQLite</a>.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I></CAPTION>
  <TR>
    <TD valign="top">Data_Error</TD>
    <TD> Data base file open error related to the contents of the file</TD>
  </TR>
  <tr>
    <TD valign="top">Use_Error</TD>
    <TD> An open error related to the file existence and accessibility rights</TD>
  </tr>
  </TABLE>

<blockquote>
<p><tt><font color="#0000FF">type </font>Statement<font color="#0000FF"> is 
tagged private</font>;</tt></p>
</blockquote>
<p>This type is a handle to a statement, an SQL command to execute. The 
statement is held until 
at least one handle to it exists. Handles can be copied. Handle to statement 
also holds a reference to the data base connection. A statement is need to be 
prepared, then its non literal parameters are bound, then the statement is 
executed step by step per each row of the result. After that the statement can 
be reset, parameters rebound and the statement executed again. The following 
code snippet illustrates use of statements:</p>
<blockquote>
<p><tt><font color="#0000FF">declare</font><br>
&nbsp;&nbsp; Command : Statement := Prepare (DB, &quot;<i>some SQL command</i>&quot;);<br>
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp; Bind (Command, ...); <font color="#008000">-- Binding parameters</font><br>
&nbsp;&nbsp; <font color="#0000FF">while</font> Step (Command)
<font color="#0000FF">loop&nbsp;&nbsp; </font><font color="#008000">-- Getting 
one row of the result set</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ... Column (Command) ... <font color="#008000">-- 
Taking the results out</font><br>
&nbsp;&nbsp; <font color="#0000FF">end loop</font>;<br>
&nbsp;&nbsp; Reset (Command); <font color="#008000">&nbsp;&nbsp;&nbsp; -- Clean 
up, if we want to execute again</font><br>
&nbsp;&nbsp; Bind (Command, ...); <font color="#008000">-- Binding other 
parameters</font><br>
&nbsp;&nbsp; ...</tt></p>
</blockquote>
<p>The operations defined on statements are:</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="SQLite.Bind"></a>procedure</font> Bind<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b>&nbsp;&nbsp; 
: Statement;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Parameter</b> : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp;&nbsp;&nbsp; : double / int / Integer_64 / String / 
Stream_Element_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> Bind<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b>&nbsp;&nbsp; 
: Statement;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Parameter</b> : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">access </font>String / <font color="#0000FF">access </font>
Stream_Element_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> Bind<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b>&nbsp;&nbsp; 
: Statement;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Parameter</b> : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The parameters to be bound are usually specified as ? in the command text 
(see <a href="#SQLite.Prepare">Prepare</a>). Each such parameter has to be bound 
to a value. The position of a parameter is specified by its index, i.e. by the 
position of ? in the command text. The first parameter has the position 1. The 
variants with <b>Value</b> of <font color="#0000FF">access</font> String or 
Stream_Element_Array types are 
used when the caller takes the responsibility not to destroy the array all the time 
the binding is used. In this case an attempt is made to prevent extra copying of 
the array contents. Otherwise the bound value is copied by the database engine. 
The copy is kept until the command object exists or else the parameter is 
rebound. The variant without the parameter <b>Value</b> binds the 
parameter to SQL NULL. The following example illustrates use of
<a href="#SQLite.Bind">Bind</a> with an <font color="#0000FF">access</font> 
parameter:</p>

<blockquote>
<p><tt><font color="#0000FF">declare</font><br>
&nbsp;&nbsp; Command : Statement := Prepare (DB, &quot;<font color="#FF0000">SELECT 
address FROM customers WHERE name = ?</font>&quot;);<br>
&nbsp;&nbsp; Name&nbsp;&nbsp;&nbsp; : <font color="#0000FF">aliased</font> 
String := ...<br>
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp; Bind (Command, 1, Name'Access); <font color="#008000">-- Bind name 
(will not be copied)<br>
</font>&nbsp;&nbsp; <font color="#0000FF">if</font> Step (Command)
<font color="#0000FF">then&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; </font><font color="#008000">-- 
Here is the address<br>
</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put_Line (Name &amp; &quot;<font color="#FF0000"> 
has the address </font>&quot; &amp; Column (Command, 1));<br>
&nbsp;&nbsp; <font color="#0000FF">else</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put_Line (Name &amp; &quot;<font color="#FF0000"> is not 
registered</font>&quot;);<br>
&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
<font color="#0000FF">end</font>;</tt></p>
</blockquote>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I></CAPTION>
  <TR>
    <TD valign="top">Constraint_Error</TD>
    <TD> <b>Command</b> or <b>Parameter</b> is invalid or else
	<a href="http://www.sqlite.org/index.html">SQLite</a> return code 
	SQLITE_RANGE.</TD>
  </TR>
  <TR>
    <TD valign="top">Data_Error</TD>
    <TD> Data base error. The following <a href="http://www.sqlite.org/index.html">SQLite</a> 
	return codes are mapped to this exception: SQLITE_INTERNAL, 
	SQLITE_NOMEM, SQLITE_INTERRUPT, SQLITE_IOERR, SQLITE_CORRUPT, SQLITE_FULL, 
	SQLITE_PROTOCOL, SQLITE_EMPTY, SQLITE_SCHEMA, SQLITE_TOOBIG, 
	SQLITE_CONSTRAINT, SQLITE_MISMATCH, SQLITE_MISUSE, SQLITE_NOLFS, 
	SQLITE_FORMAT, SQLITE_NOTADB, SQLITE_ROW,<br>
	SQLITE_DONE.</TD>
  </TR>
  <TR>
    <TD valign="top">End_Error</TD>
    <TD> Not found error (usually related to a non-existent table or data base) (<a href="http://www.sqlite.org/index.html">SQLite</a> 
	return codes: SQLITE_ERROR, SQLITE_NOTFOUND)</TD>
  </TR>
  <TR>
    <TD valign="top">Status_Error</TD>
    <TD> Access error (<a href="http://www.sqlite.org/index.html">SQLite</a> 
	return codes: SQLITE_ABORT, SQLITE_BUSY, SQLITE_LOCKED, SQLITE_READONLY, 
	SQLITE_AUTH)</TD>
  </TR>
  <tr>
    <TD valign="top">Use_Error</TD>
    <TD> File existence and accessibility rights related errors (<a href="http://www.sqlite.org/index.html">SQLite</a> 
	return codes: SQLITE_PERM | SQLITE_CANTOPEN)</TD>
  </tr>
  </TABLE>

<blockquote>
<p><tt><font color="#0000FF"><a name="SQLite.Column"></a>procedure</font> Column<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b>&nbsp; 
: Statement;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Position</b> : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">return</font> double / int / Integer_64 / String / 
Stream_Element_Array;</tt></p>
</blockquote>
<p>This function returns <b>Position</b> column of the result set of <b>Command</b>, 
when it is executed. The function <a href="#SQLite.Column">Column</a> is used 
after <a href="#SQLite.Step">Step</a>. The columns are counted from 1. 
Constraint_Error is propagated when <b>Command</b> is invalid. Note that
<a href="http://www.sqlite.org/index.html">SQLite</a> checks virtually nothing. 
Therefore this function must be used with great care.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Column_Count (<b>Command</b> : 
Statement) <font color="#0000FF">return</font> Natural;</tt></p>
</blockquote>
<p>This function returns the number of columns of the result set of <b>Command</b>, 
when it is executed. This function is used after <a href="#SQLite.Step">Step</a>. 
Constraint_Error is propagated when <b>Command</b> is invalid.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Column_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b>&nbsp; 
: Statement;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Position</b> : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">return</font> Datatype;</tt></p>
</blockquote>
<p>This function returns the type of column <b>Position</b> in the result set of <b>Command</b>. 
The columns are counted from 1. Constraint_Error is propagated when <b>Command</b> 
is invalid.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Exec (<b>Base</b> : Data_Base; <b>
Command</b> : String);</tt></p>
</blockquote>
<p>This function is a combination of <a href="#SQLite.Prepare">Prepare</a> and 
iterated <a href="#SQLite.Step">Step</a>. The exceptions propagated by this 
function are same as in <a href="#SQLite.Bind">Bind</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Is_Null<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b>&nbsp; : 
Statement;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Position</b> : 
Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if the <b>
Position</b> column of the result set of <b>Command</b>, when it is executed. 
This function is used after <a href="#SQLite.Step">Step</a>. Constraint_Error is 
propagated when <b>Command</b> is invalid.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Is_Valid (<b>Command</b> : 
Statement) <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if <b>Command</b> 
refers to a valid command.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Last_Insert_Row (<b>Base</b> : 
Data_Base'Class) <font color="#0000FF">return</font> Row_ID;</tt></p>
</blockquote>
<p>This function returns the last inserted row identification. Note that
<a href="http://www.sqlite.org/index.html">SQLite</a> does not cache anything in 
order to prevent race condition of this function in presence of multiple tasks.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="SQLite.Prepare"></a>function</font> 
Prepare<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Base</b>&nbsp;&nbsp;&nbsp; 
: Data_Base'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Command</b> 
: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Statement;</tt></p>
</blockquote>
<p>This function translates an SQL query and returns a handle to the statement 
ready to execute using <a href="#SQLite.Step">Step</a>. The exceptions 
propagated by this function are same as in <a href="#SQLite.Bind">Bind</a>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="SQLite.Reset"></a>procedure</font> Reset (<b>Command</b> 
: Statement);</tt></p>
</blockquote>
<p>This procedure ends execution of a statement initiated by
<a href="#SQLite.Step">Step</a>. After that the statement can be executed again. 
Constraint_Error is propagated when <b>Command</b> is invalid.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="SQLite.Step"></a>procedure</font> Step (<b>Command</b> 
: Statement);<br>
<font color="#0000FF">function</font> Step (<b>Command</b> : Statement)
<font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>These subprograms execute a statement prepared by <a href="#SQLite.Prepare">
Prepare</a> with parameters bound by <a href="#SQLite.Bind">Bind</a>. The 
function <a href="#SQLite.Step">Step</a> returns <font color="#800000"><i>true</i></font> 
if there is a row of the result set to use in <a href="#SQLite.Column">Column</a>. 
When the result is <i><font color="#800000">false</font></i>, there is no row 
and this indicates completion of the command execution. The exceptions 
propagated by these subprograms are same as in <a href="#SQLite.Bind">Bind</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Table_Exists (<b>Base</b> : Data_Base; <b>Name</b> : 
String) <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if there is 
the table <b>Name</b>. The exceptions propagated by this function are same as in
<a href="#SQLite.Bind">Bind</a>.</p>
<table border="1" cellpadding="5" cellspacing="0">
	<tr>
		<td>The performance of <a href="http://www.sqlite.org/index.html">SQLite</a> 
		can be significantly improved when explicit transactions are used. If 
		you have a sequence of statements to perform always put them in the 
		transaction brackets like:<blockquote>
<p><tt>Exec (DB, &quot;<font color="#FF0000">BEGIN</font>&quot;);<br>
... <font color="#008000">-- Individual requests</font><br>
Exec (DB, &quot;<font color="#FF0000">COMMIT</font>&quot;);</tt></p>
</blockquote></td>
	</tr>
</table>

<p align="right">
  <A name="15.3"></A><a href="#15.2"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#15.4"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>15.3. Block streams</H3>

<p><a name="Streams"></a><a name="Block_Streams"></a>The package <a href="#Block_Streams">
Block_Streams</a> provides a stream built upon a stream of blocks transported 
over another stream:</p>
<blockquote>
	<p><img border="0" src="block-stream.png" width="704" height="269" alt="block stream"></p>
</blockquote>
The motivation behind 
a block stream is when binary data are sent over or stored by an unreliable transport. For example, when using Ada.Streams.Stream_IO 
to read/write binary file or when sending 
over a socket using either TCP or UDP protocols, there is no guarantee that the 
file will be consistently read back or that the network peer would receive the 
stream data uncorrupted. The block stream adds a safety layer above an unsafe 
transport stream exposing itself as a stream which can be safely 
accessed. The data written or read from the block stream are grouped into blocks 
of fixed size. Each block is supplied with the sequence number and the check sum 
(Fletcher-16). When read the block number and the check sum are verified.
<h4><a name="15.3.1"></a>15.3.1. Input block stream</h4>
<p>The package defines the input block stream as follows:</p>
<blockquote>
<p><tt><font color="#0000FF">type </font>Input_Block_Stream<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Transport : <font color="#0000FF">access </font>
Root_Stream_Type'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Size&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
Stream_Element_Count<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is new </font>
Root_Stream_Type<font color="#0000FF"> with private</font>;</tt></p>
</blockquote>
<p>The discriminant <b>Transport</b> is the stream used to read blocks from. <b>
Size</b> is the block size in Stream_Element units. Writing into an input stream 
propagates Use_Error exception. Failed checks cause Data_Error propagation. The following operations are defined 
additionally:</p>
<blockquote>
<p><tt><font color="#0000FF">function </font>Get_Block_No<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Stream</b> : 
Input_Block_Stream<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return </font>Unsigned_32;</tt></p>
</blockquote>
<p>This function returns the number of the block being read. It is the sequence 
number + 1. Note that block numbers wrap at 2<sup>32</sup>.</p>
<blockquote>
<p><tt><font color="#0000FF">function </font>Get_Element_No<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Stream</b> : 
Input_Block_Stream<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return </font>Stream_Element_Count;</tt></p>
</blockquote>
<p>This function returns the number of the next stream element of the block to 
read. The first element has the number 1. The last element has the number Size - 
6.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Skip (<b>Stream</b> :
<font color="#0000FF">in out</font> Input_Block_Stream);</tt></p>
</blockquote>
<p>This procedure reads all blocks with the non-zero sequence numbers. It can be 
used to resynchronize the consumer (stream reader) with the producer (stream 
writer) connected peer to peer. This assumes that the producer starts each 
series of output data with the sequence number 0.</p>
<h4><a name="15.3.2"></a>15.3.2. Output block stream</h4>
<p>The package defines the input block stream as follows:</p>
<blockquote>
<p><tt><font color="#0000FF">type </font>Output_Block_Stream<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Transport : <font color="#0000FF">access </font>
Root_Stream_Type'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Size&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
Stream_Element_Count<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is new </font>
Root_Stream_Type<font color="#0000FF"> with private</font>;</tt></p>
</blockquote>
<p>The discriminant <b>Transport</b> is the stream used to write blocks to. <b>
Size</b> is the block size in Stream_Element units. Reading from an output 
stream propagates Use_Error exception. The following operations are defined 
additionally:</p>
<blockquote>
<p><tt><font color="#0000FF">function </font>Get_Block_No<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Stream</b> : 
Output_Block_Stream<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return </font>Unsigned_32;</tt></p>
</blockquote>
<p>This function returns the number of the block being written. It is the 
sequence number + 1. Note that block numbers wrap at 2<sup>32</sup>.</p>
<blockquote>
<p><tt><font color="#0000FF">function </font>Get_Element_No<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Stream</b> : 
Output_Block_Stream<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return </font>Stream_Element_Count;</tt></p>
</blockquote>
<p>This function returns the number of the next stream element of the block to 
write. The first element has the number 1. The last element has the number Size 
- 6.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Flush (<b>Stream</b> :
<font color="#0000FF">in out</font> Output_Block_Stream);</tt></p>
</blockquote>
<p>This procedure is called to write the last block if there is any pending 
output. After that writing the stream will start at the sequence number 0.</p>

<p align="right">
  <A name="15.4"></A><a href="#15.3"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#15.5"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>15.4. Storage streams</H3>

<p><a name="Storage_Streams"></a>The package <a href="#Storage_Streams">Storage_Streams</a> provides streams 
allocated in the memory. The stream can be read and written.</p>
<blockquote>
<p><tt><font color="#0000FF">type </font>Storage_Stream<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Block_Size : Stream_Element_Count<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is new </font>
Root_Stream_Type<font color="#0000FF"> with private</font>;</tt></p>
</blockquote>
<p>The discriminant <b>Block_Size</b> is block size in stream elements. When the 
stream is written the memory is allocated by blocks of this size. The blocks 
read out of the stream are kept allocated and reused as necessary. Additionally 
to the standard operations, the following operations are provided:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure </font>Erase (<b>Stream</b> :
<font color="#0000FF">in out</font> Storage_Stream);</tt></p>
</blockquote>
<p>This procedure erases all written contents of <b>Stream</b>.</p>
<blockquote>
<p><tt><font color="#0000FF">function </font>Get_Size (<b>Stream</b> : 
Storage_Stream)<font color="#0000FF"> return </font>Stream_Element_Count;</tt></p>
</blockquote>
<p>This function returns the number of stream elements available for read.</p>

<p align="right">
  <A name="15.5"></A><a href="#15.4"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#15.6"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>15.5. String streams</H3>

<p>The package 
<a href="http://www.dmitry-kazakov.de/ada/strings_edit.htm#Strings_Edit.Streams">
Strings_Edit.Streams</a> provides streams 
backed by a string. A string can be set into the stream object and then its 
contents accessed through the stream interface. An object can also be written as 
a stream and then the written contents taken as a string.</p>

<p align="right">
  <A name="15.6"></A><a href="#15.5"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#15.7"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>15.6. ODBC bindings</H3>

<p><a name="ODBC_Bindings"></a>ODBC stands for <b>O</b>pen <b>D</b>ata<b>B</b>ase
<b>C</b>onnectivety, an interface to access database management systems is a 
more or less vendor-independent way. The DBMS such as MySQL or PostgreSQL is 
contacted using an ODBC driver which is responsible to abstract DBMS specific 
details. An ODBC driver can also be used to access spreadsheet applications, 
e.g. MS Excel has an ODBC driver. A database in ODBC is represented by so called 
data source. A data source is configured by specifying the ODBC driver 
responsible for the source and parameters specific to the driver. Typically it 
is the IP address of the server, port, user credentials etc. In other cases it 
could be the data base file name. Each data source has a unique name (DSN) 
assigned when it is configured. In order to access a data base the application 
must know the DSN and optionally the user name and password.</p>
<h4><a name="15.6.1"></a>15.6.1. Thin bindings</h4>
<p><a name="ODBC.Thin"></a>The package <a href="#ODBC.Thin">ODBC.Thin</a> 
provides thin bindings to ODBC, which closely follows C API. As such it should 
be somewhat inconvenient to use. Where possible, plain string types like 
char_array and wchar_array are used instead of access SQLCHAR (SQLCHAR *).</p>
<p><a name="ODBC.SQLTypes"></a>The ODBC data types and constants are defined in 
the package <a href="#ODBC.SQLTypes">ODBC.SQLTypes</a>.</p>
<p><a name="ODBC.Driver_Dependent"></a>The packages named
<a href="#ODBC.Driver_Dependent">ODBC.Driver_Dependent</a> encapsulate driver 
manager specific parts of thin bindings. Presently two driver managers are 
supported:</p>
<ul>
	<li>ODBC32 is the native Microsoft ODBC driver manager used across Windows 
	(see Microsoft Open Database Connectivity);</li>
	<li><a href="http://www.unixodbc.org">unixODBC</a> is a driver manager 
	available on UNIX platforms.</li>
</ul>
<p><a name="odbc_scenario"></a>When GNAT projects are used the scenario variable <i>odbc</i>  
selects the driver manager:</p>
<TABLE border="5" cellpadding="3" cellspacing="0" style="border-left-width: 0px">
  <TR>
    <TD bgcolor="#008080" valign="top"><font color="#FFFFFF"><b>odbc value</b></font></TD>
    <TD bgcolor="#008080" valign="top"><font color="#FFFFFF"><b>Description</b></font></TD>
  </TR>
  <tr>
    <TD valign="top">
ODBC32</TD>
    <TD valign="top">Used with Microsoft ODBC driver manager</TD>
  </tr>
  <tr>
    <TD valign="top">
unixODBC</TD>
    <TD valign="top">Used with <a href="http://www.unixodbc.org">unixODBC</a> 
	driver manager</TD>
  </tr>
  </TABLE>
<p><a name="ODBC.Architecture_Dependent"></a>The packages named
<a href="#ODBC.Architecture_Dependent">ODBC.Architecture_Dependent</a> define 
data types depending on the machine architecture. The differences in ODBC 
interface for 64- and 32-bit systems are described in the document: <i>INFO: 
ODBC 64-Bit API Changes in MDAC 2.7</i> (<a href="http://support.microsoft.com/kb/298678">see</a>).</p>
<p><a name="arch_scenario"></a>When GNAT projects are used the scenario variable <i>arch</i> 
selects the architecture:</p>
<TABLE border="5" cellpadding="3" cellspacing="0" style="border-left-width: 0px">
  <TR>
    <TD bgcolor="#008080" valign="top"><font color="#FFFFFF"><b>arch value</b></font></TD>
    <TD bgcolor="#008080" valign="top"><font color="#FFFFFF"><b>Description</b></font></TD>
  </TR>
  <tr>
    <TD valign="top">
i686</TD>
    <TD valign="top">32-bit architecture</TD>
  </tr>
  <tr>
    <TD valign="top">
x86_64</TD>
    <TD valign="top">64-bit architecture</TD>
  </tr>
  </TABLE>
<h4><a name="15.6.2"></a>15.6.2. Thick bindings</h4>
<p><a name="ODBC.API"></a>The package <a href="#ODBC.API">ODBC.API</a> provides 
higher level ODBC bindings. The ODBC handles are encapsulated into controlled 
types to ensure their safe allocation and deallocation:</p>
<ul>
	<li><a href="#ODBC.API.ODBC_Environment">ODBC_Environment</a> is the type 
	used to deal with an ODBC environment;</li>
	<li><a href="#ODBC.API.ODBC_Connection">ODBC_Connection</a> is the type to deal with a database connection;</li>
	<li><a href="#ODBC.API.ODBC_Command">ODBC_Command</a> is the type of a SQL statement.</li>
</ul>
<p>The operations provided by the package check the ODBC return code and 
propagate following exceptions instead:</p>
<ul>
	<li>End_Error is propagated when no data requested is available;</li>
	<li>Data_Error exception with the message obtained from the ODBC diagnostic 
	fields indicates a general error;</li>
	<li>Status_Error is propagated upon a statement execution when no table is 
	present;</li>
	<li>Use_Error is propagated when the operation requested is not allowed in 
	the current context. In certain cases in may indicate lack of support at the 
	driver side.</li>
</ul>
<h4><a name="15.6.3"></a>15.6.3. ODBC environments</h4>
<p>The package <a href="#ODBC.API">ODBC.API</a> declares the type 
<a href="#ODBC.API.ODBC_Environment">ODBC_Enviroment</a>:</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="ODBC.API.ODBC_Environment"></a>type </font>
ODBC_Environment<font color="#0000FF"> is<br>
&nbsp;&nbsp; new </font>Ada.Finalization.Limited_Controlled
<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The environment defines general properties shared between connections to the 
data sources. It is usually the ODBC driver manager to stand behind an 
environment. Though there could be multiple instances of ODBC environment, normally 
there should be only one. The following primitive operations are defined on ODBC environment 
objects:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure </font>Finalize (<b>Environment</b> :
<font color="#0000FF">in out</font> ODBC_Environment);</tt></p>
</blockquote>
<p>This procedure frees the environment handle. When a new type is derived from
<a href="#ODBC.API.ODBC_Environment">ODBC_Environment</a> and this operation is 
overridden the new implementation must call it from its body.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_&lt;<i>attribute-name</i>&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Environment</b> : 
ODBC_Environment<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> &lt;<i>attribute-value</i>&gt;;<br>
<font color="#0000FF">procedure</font> Set_&lt;<i>attribute-name</i>&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Environment</b> 
: <font color="#0000FF">in out</font> ODBC_Environment;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : &lt;<i>attribute-value</i>&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These operations are used to get and set environment attributes, e.g. 
Get_Connection_Pooling, Set_Connection_Pooling. The operation name follows the 
attribute name. Refer to SQL_ATTR_&lt;<i>attribute-name</i>&gt; for further 
information. Usually the attributes must be set before first connection using 
the environment is created. The following table lists the functions:</p>
<TABLE border="5" cellpadding="3" cellspacing="0" style="border-left-width: 0px">
  <TR>
    <TD bgcolor="#008080" valign="top"><FONT color="#FFFFFF"><B>Attribute name</B></FONT></TD>
    <TD bgcolor="#008080" align="center" valign="top"><b><font color="#FFFFFF">Result type</font></b></TD>
    <TD bgcolor="#008080" valign="top"><font color="#FFFFFF"><b>Attribute description</b></font></TD>
  </TR>
  <tr>
    <TD valign="top">
Connection_Pooling</TD>
    <TD align="center" valign="top">SQL_CB</TD>
    <TD valign="top">The level of connection pooling support</TD>
  </tr>
  <tr>
    <TD valign="top">
CP_Match</TD>
    <TD align="center" valign="top">SQL_CP_MATCH</TD>
    <TD valign="top">The way a connection is chosen from a connection pool</TD>
  </tr>
  <tr>
    <TD valign="top">
<a name="ODBC_Version_attribute"></a>ODBC_Version</TD>
    <TD align="center" valign="top">SQL_OV</TD>
    <TD valign="top">The ODBC version</TD>
  </tr>
  <tr>
    <TD valign="top">
Output_NTS</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top">True if the driver returns NUL-terminated strings</TD>
  </tr>
  </TABLE>
<blockquote>
<p><tt><font color="#0000FF"><a name="ODBC.API.Get_First_DSN"></a>function</font> 
Get_First_DSN<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Environment</b>&nbsp;&nbsp; 
: ODBC_Environment;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>DSN</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: DSN_Type;<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Buffer_Length</b> : Positive := Default_Block_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
DSN_Description;</tt></p>
</blockquote>
<p>This function returns a description of the first data source of the type 
specified by the parameter <b>DSN</b>. The data type is defined as:</p>
<blockquote>
	<p><tt><font color="#0000FF">type</font> DSN_Type <font color="#0000FF">is</font> 
	(Any_DSN, System_DSN, User_DSN);</tt></p>
</blockquote>
<p>The result has the type:</p>
<blockquote>
	<p><tt><font color="#0000FF">type</font> DSN_Description<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Name_Length&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Natural;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Description_Length : Natural<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is record</font><br>
&nbsp;&nbsp; Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : String (<font color="#800000">1</font>..Name_Length);<br>
&nbsp;&nbsp; Description : String (<font color="#800000">1</font>..Description_Length);<br>
	<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>The parameter <b>Buffer_Length</b> specifies the maximum length of the data 
source description. Constraint_Error is propagated when the actual length 
exceeds that limit. End_Error is propagated when there is no data sources of the 
requested type. The next data source of this type can be obtained using
<a href="#ODBC.API.Get_Next_DSN">Get_Next_DSN</a>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="ODBC.API.Get_Next_DSN"></a>function</font> 
Get_Next_DSN<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Environment</b>&nbsp;&nbsp; 
: ODBC_Environment;<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Buffer_Length</b> : Positive := Default_Block_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
DSN_Description;</tt></p>
</blockquote>
<p>This function returns a description of the next data source of the type 
specified by the parameter <b>DSN</b> of the last call to
<a href="#ODBC.API.Get_First_DSN">Get_First_DSN</a>. The parameter <b>
Buffer_Length</b> specifies the maximum length of the data source description. 
Constraint_Error is propagated when the actual length exceeds that limit. I this 
case the enumeration of data sources should likely be restarted because it is 
not guaranteed that a consequent call with a larger value of the parameter will 
fetch the same data source again. End_Error is propagated when there is no data 
sources of the requested type.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_&lt;<i>record-field</i>&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Environment</b>&nbsp;&nbsp; : 
ODBC_Environment;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Record_Number</b> : Positive := <font color="#800000">1</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> &lt;<i>field-value</i>&gt;;</tt></p>
</blockquote>
<p>These operations are used to get diagnostic record fields, e.g. 
Get_Message_Text. The operation name record field name. Refer to SQL_DIAG_&lt;<i>record-field</i>&gt; for further 
information. The parameter <b>Record_Number</b> indicates the record for which 
the field is requested. The following table lists the functions:</p>
<TABLE border="5" cellpadding="3" cellspacing="0" style="border-left-width: 0px">
  <TR>
    <TD bgcolor="#008080" valign="top"><font color="#FFFFFF"><b>Diagnostic field name</b></font></TD>
    <TD bgcolor="#008080" align="center" valign="top"><b><font color="#FFFFFF">Result type</font></b></TD>
    <TD bgcolor="#008080" valign="top"><font color="#FFFFFF"><b>Field description</b></font></TD>
  </TR>
  <tr>
    <TD valign="top">
Class_Origin</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">A string that indicates the document that defines the class 
	portion of the SQLSTATE value in this record</TD>
  </tr>
  <tr>
    <TD valign="top">
Column_Number</TD>
    <TD align="center" valign="top">SQLINTEGER</TD>
    <TD valign="top">The value that represents the column number in the result 
	set or the parameter number in the set of parameters</TD>
  </tr>
  <tr>
    <TD valign="top">
Connection_Name</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">The name of the connection that the diagnostic record 
	relates to</TD>
  </tr>
  <tr>
    <TD valign="top">
Message_Text</TD>
    <TD align="center" valign="top">String,<br>
	Wide_String</TD>
    <TD valign="top">An informational message on the error or warning</TD>
  </tr>
  <tr>
    <TD valign="top">
Native</TD>
    <TD align="center" valign="top">SQLINTEGER</TD>
    <TD valign="top">A driver/data source-specific native error code. If there 
	is no native error code, the driver returns 0</TD>
  </tr>
  <tr>
    <TD valign="top">
Number</TD>
    <TD align="center" valign="top">SQLINTEGER</TD>
    <TD valign="top">The number of status records available</TD>
  </tr>
  <tr>
    <TD valign="top">
Returncode</TD>
    <TD align="center" valign="top">SQLRETURN</TD>
    <TD valign="top">Return code returned by the function</TD>
  </tr>
  <tr>
    <TD valign="top">
Row_Number</TD>
    <TD align="center" valign="top">SQLLEN</TD>
    <TD valign="top">The row number in the rows set, or the parameter number in 
	the set of parameters, with which the status record is associated</TD>
  </tr>
  <tr>
    <TD valign="top">
Server_Name</TD>
    <TD align="center" valign="top">String,<br>
	Wide_String</TD>
    <TD valign="top">A string that indicates the server name that the diagnostic 
	record relates to</TD>
  </tr>
  <tr>
    <TD valign="top">
SQLSTATE</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">A five-character SQLSTATE diagnostic code. For more 
	information</TD>
  </tr>
  <tr>
    <TD valign="top">
Subclass_Origin</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">Identifies the defining portion of the subclass portion of 
	the SQLSTATE code</TD>
  </tr>
  </TABLE>
<blockquote>
<p><tt><font color="#0000FF">procedure </font>Initialize (<b>Environment</b> :
<font color="#0000FF">in out</font> ODBC_Environment);</tt></p>
</blockquote>
<p>This procedure allocates an environment handle and sets the ODBC version to 
the value defined by the constant Used_ODBC_Version declared in the package
<a href="#ODBC.API">ODBC.API</a>. However the version can be changed before any 
connection objects created using <a href="#ODBC_Version_attribute">
Set_ODBC_Version</a> with an appropriate version value. When a new type is derived from
<a href="#ODBC.API.ODBC_Environment">ODBC_Environment</a> and this operation is 
overridden the new implementation must call it from its body.</p>
<h4><a name="15.6.4"></a>15.6.4. ODBC connections</h4>
<p><a name="ODBC.API.ODBC_Connection"></a>The package <a href="#ODBC.API">
ODBC.API</a> declares the type <a href="#ODBC.API.ODBC_Connection">
ODBC_Connection</a>:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> ODBC_Connection<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Environment : <font color="#0000FF">access</font> 
ODBC_Environment'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is new </font>
Ada.Finalization.Limited_Controlled<font color="#0000FF"> with private</font>;</tt></p>
</blockquote>
<p>A connection object represents a data source such as a data base. It refers to its environment object through 
the access discriminant <b>Environment</b>. Data sources 
are configured system-wide or on user basis. Refer to the ODBC documentation for 
the configuration issues. The following primitive operations are defined on ODBC 
connection objects:</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="ODBC.API.Connect"></a>procedure </font>Connect<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Connection</b>&nbsp; 
: <font color="#0000FF">in out</font> ODBC_Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Server_Name</b> : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
User_Name</b>&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Password</b>&nbsp;&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Auto_Commit</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> Connect<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Connection</b>&nbsp; 
: <font color="#0000FF">in out</font> ODBC_Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Server_Name</b> : Wide_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
User_Name</b>&nbsp;&nbsp; : Wide_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Password</b>&nbsp;&nbsp;&nbsp; : Wide_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Auto_Commit</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure should be called once immediately after the object 
construction in order to establish a connection to the data base, though possibly after 
setting some connection attributes. The parameter <b>Server_Name</b> refers to a 
configured data source (DSN). The parameters <b>User_Name</b> and <b>Password</b> 
specify DBMS user credentials required to access the data source. The parameter <b>Auto_Commit</b> specifies automatic 
vs. manual commit mode of the connection.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="ODBC.API.Disable_Tracing"></a>procedure</font> 
Disable_Tracing (<b>Connection</b> 
: <font color="#0000FF">in out</font> ODBC_Connection);</tt></p>
</blockquote>
<p>This procedure stops tracing previously enabled by
<a href="#ODBC.API.Enable_Tracing">Enable_Tracing</a>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="ODBC.API.Drop"></a>procedure</font> Drop<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Connection</b> 
: <font color="#0000FF">in out</font> ODBC_Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Table_Name</b> : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> Drop<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Connection</b> 
: <font color="#0000FF">in out</font> ODBC_Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Table_Name</b> : Wide_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures delete the specified table. Nothing happens if no such table 
exists. Note that the names of tables can be case sensitive. Furthermore the 
driver may change the case upon table creation. This behavior can be queried as
<a href="#ODBC.API.Get_information_token">connection information</a>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="ODBC.API.Enable_Tracing"></a>procedure </font>
Enable_Tracing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Connection</b> 
: <font color="#0000FF">in out</font> ODBC_Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
File_Name</b>&nbsp; : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">procedure</font> Enable_Tracing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( <b>&nbsp;Connection</b> 
: <font color="#0000FF">in out</font> ODBC_Connection;<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
File_Name&nbsp; </b>: Wide_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure enables tracing into the file which name is specified by the 
parameter <b>File_Name</b>. The way and format of tracing depends on the ODBC 
driver servicing the connection. Note that tracing can be extremely resource 
consuming. It should be used with great care.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="ODBC.API.End_Transaction"></a>procedure </font>
End_Transaction (<b>Connection</b> :
<font color="#0000FF">in out</font> ODBC_Connection);</tt></p>
</blockquote>
<p>This procedure commits transaction. See <a href="#odbc_transactions">
transactions</a> for further information.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure </font>Finalize (<b>Connection</b> :
<font color="#0000FF">in out</font> ODBC_Connection);</tt></p>
</blockquote>
<p>This procedure closes the connection and frees the connection handle. When a new type is derived from
<a href="#ODBC.API.ODBC_Connection">ODBC_Connection</a> and this operation is 
overridden the new implementation must call it from its body.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_&lt;<i>attribute-name</i>&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Connection</b> : 
ODBC_Connection<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> &lt;<i>attribute-value</i>&gt;;<br>
<font color="#0000FF">procedure</font> Set_&lt;<i>attribute-name</i>&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Connection</b> 
: <font color="#0000FF">in out</font> ODBC_Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: &lt;<i>attribute-value</i>&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These operations are used to get and set connection attributes, e.g. Get_Access_Mode, Set_Access_Mode. The operation name follows the 
attribute name. Refer to SQL_ATTR_&lt;<i>attribute-name</i>&gt; for further 
information. It is attribute-dependent whether it can be set before or after the 
connection is established. Use_Error is propagated when the attribute is not 
supported by the driver, however for some drivers Data_Error may be propagated 
instead of Use_Error. The following table lists the functions:</p>
<TABLE border="5" cellpadding="3" cellspacing="0" style="border-left-width: 0px" id="table2">
  <TR>
    <TD bgcolor="#008080" valign="top"><FONT color="#FFFFFF"><B>Attribute name</B></FONT></TD>
    <TD bgcolor="#008080" align="center" valign="top"><b><font color="#FFFFFF">Result type</font></b></TD>
    <TD bgcolor="#008080" valign="top"><font color="#FFFFFF"><b>Attribute description</b></font></TD>
  </TR>
  <tr>
    <TD valign="top">
<a name="ODBC.API.Get_Access_Mode"></a>Access_Mode</TD>
    <TD align="center" valign="top">SQL_MODE<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">The connection mode: read or read-write</TD>
  </tr>
  <tr>
    <TD valign="top">
Async_DBC_Enable</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> if asynchronous 
	execution of selected functions enabled</TD>
  </tr>
  <tr>
    <TD valign="top">
Async_Enable</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> if a function 
	called with a statement on the specified connection is executed 
	asynchronously</TD>
  </tr>
  <tr>
    <TD valign="top">
Auto_IPD</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> if automatic 
	population of the IPD after a call to Prepare is supported</TD>
  </tr>
  <tr>
    <TD valign="top">
Autocommit</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> if the driver uses 
	auto-commit mode</TD>
  </tr>
  <tr>
    <TD valign="top">
Login_Timeout</TD>
    <TD align="center" valign="top">Duration</TD>
    <TD valign="top">Login timeout. The attribute has 1 second resolution</TD>
  </tr>
  <tr>
    <TD valign="top">
Metadata_ID</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> if the string 
	argument of catalogue functions are treated as identifiers</TD>
  </tr>
  <tr>
    <TD valign="top">
Packet_Size</TD>
    <TD align="center" valign="top">Positive</TD>
    <TD valign="top">The network packet size in bytes</TD>
  </tr>
  <tr>
    <TD valign="top">
Trace</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> if tracing is on</TD>
  </tr>
  <tr>
    <TD valign="top">
Tracefile</TD>
    <TD align="center" valign="top">String,<br>
	Wide_String</TD>
    <TD valign="top">The trace file name or empty string</TD>
  </tr>
  <tr>
    <TD valign="top">
Translate_Lib</TD>
    <TD align="center" valign="top">String,<br>
	Wide_String</TD>
    <TD valign="top">The name of a library containing the functions that the 
	driver accesses to perform tasks such as character set translation</TD>
  </tr>
  <tr>
    <TD valign="top">
Translate_Option</TD>
    <TD align="center" valign="top">SQLUINTEGER<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A 32-bit flag value that is passed to the translation 
	library</TD>
  </tr>
  <tr>
    <TD valign="top">
TXN_Isolation</TD>
    <TD align="center" valign="top">SQL_TXN<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">The bitmask that sets the transaction isolation level</TD>
  </tr>
  </TABLE>
<blockquote>
<p><tt><font color="#0000FF"><a name="ODBC.API.Get_information_token"></a>function</font> Get_&lt;<i>information-token-name</i>&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Connection</b> : 
ODBC_Connection<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> &lt;<i>information-token-value</i>&gt;;</tt></p>
</blockquote>
<p>These operations are used to get information, e.g. Get_Accessible_Procedures. The operation name follows the 
information type of the function SQLGetInfo. Refer to SQL_&lt;<i>information-token-name</i>&gt; for further 
information. The following table lists the functions:</p>
<TABLE border="5" cellpadding="3" cellspacing="0" style="border-left-width: 0px" id="table3">
  <TR>
    <TD bgcolor="#008080" valign="top"><font color="#FFFFFF"><b>Information 
	token name</b></font></TD>
    <TD bgcolor="#008080" align="center" valign="top"><b><font color="#FFFFFF">Result type</font></b></TD>
    <TD bgcolor="#008080" valign="top"><font color="#FFFFFF"><b>Description</b></font></TD>
  </TR>
  <tr>
    <TD valign="top" colspan="3" bgcolor="#C0C0C0"><BIG><b>A</b></BIG></TD>
  </tr>
  <tr>
    <TD valign="top">
Accessible_Procedures</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> if all procedures 
	returned by Get_Procedures can be executed</TD>
  </tr>
  <tr>
    <TD valign="top">
Accessible_Tables</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> if the user is 
	guaranteed SELECT privileges to all tables returned by Get_Tables</TD>
  </tr>
  <tr>
    <TD valign="top">
Active_Environments</TD>
    <TD align="center" valign="top">Natural</TD>
    <TD valign="top">The maximum number of active environments that the driver 
	can support, zero if there is no limit or the limit is unknown</TD>
  </tr>
  <tr>
    <TD valign="top">
Aggregate_Functions</TD>
    <TD align="center" valign="top">SQL_AF<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating support for aggregation functions</TD>
  </tr>
  <tr>
    <TD valign="top">
Alter_Domain</TD>
    <TD align="center" valign="top">SQL_AD<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the clauses in the ALTER DOMAIN 
	statement</TD>
  </tr>
  <tr>
    <TD valign="top">
Alter_Table</TD>
    <TD align="center" valign="top">SQL_AT<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the clauses in the ALTER TABLE 
	statement supported by the data source</TD>
  </tr>
  <tr>
    <TD valign="top">
Async_DBC_Functions</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> if the driver can 
	execute connection functions asynchronously</TD>
  </tr>
  <tr>
    <TD valign="top">
Async_Mode</TD>
    <TD align="center" valign="top">SQL_AM<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">The level of asynchronous support in the driver, e.g. at 
	the connection level, statement level or none</TD>
  </tr>
  <tr>
    <TD valign="top" bgcolor="#C0C0C0" colspan="3">
<BIG><b>B</b></BIG></TD>
  </tr>
  <tr>
    <TD valign="top">
Batch_Row_Count</TD>
    <TD align="center" valign="top">SQL_BRC<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask that enumerates the behaviour of 
	the driver with respect to the availability of row counts</TD>
  </tr>
  <tr>
    <TD valign="top">
Batch_Support</TD>
    <TD align="center" valign="top">SQL_BS<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask that enumerating the driver's 
	support for batches</TD>
  </tr>
  <tr>
    <TD valign="top">
Bookmark_Persistence</TD>
    <TD align="center" valign="top">SQL_BP<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask that enumerating the operations 
	through which bookmarks persist</TD>
  </tr>
  <tr>
    <TD valign="top" colspan="3" bgcolor="#C0C0C0">
<BIG><b>C</b></BIG></TD>
  </tr>
  <tr>
    <TD valign="top">
Catalog_Location</TD>
    <TD align="center" valign="top">SQL_CL<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">The position of the catalogue in a qualified table name</TD>
  </tr>
  <tr>
    <TD valign="top">
Catalog_Name</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> if the server 
	supports catalogue names</TD>
  </tr>
  <tr>
    <TD valign="top">
Catalog_Name_Separator</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">Characters that the data source defines as the separator 
	between a catalogue name and the qualified name element that follows or 
	precedes it</TD>
  </tr>
  <tr>
    <TD valign="top">
Catalog_Term</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">A character string with the data source vendor's name for a 
	catalogue; for example, &quot;database&quot; or &quot;directory&quot;. This string can be in 
	upper, lower, or mixed case</TD>
  </tr>
  <tr>
    <TD valign="top">
Catalog_Usage</TD>
    <TD align="center" valign="top">SQL_CU<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the statements in which catalogues can 
	be used</TD>
  </tr>
  <tr>
    <TD valign="top">
Collation_Seq</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">The name of the collation sequence</TD>
  </tr>
  <tr>
    <TD valign="top">
Column_Alias</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> if the data source 
	supports column aliases</TD>
  </tr>
  <tr>
    <TD valign="top">
Concat_Null_Behavior</TD>
    <TD align="center" valign="top">SQL_CB<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">Describes handling the concatenation of NULL valued 
	character data type columns with non-NULL valued character data type columns</TD>
  </tr>
  <tr>
    <TD valign="top">
Connection_Dead</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> if the connection 
	was lost</TD>
  </tr>
  <tr>
    <TD valign="top">
Connection_Timeout</TD>
    <TD align="center" valign="top">Duration</TD>
    <TD valign="top">This function returns a value corresponding to the number 
	of seconds to wait for any request on the connection to complete before 
	returning to the application</TD>
  </tr>
  <tr>
    <TD valign="top">
Convert_Functions</TD>
    <TD align="center" valign="top">SQL_FN_CVT<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the scalar conversion functions 
	supported</TD>
  </tr>
  <tr>
    <TD valign="top">
Correlation_Name</TD>
    <TD align="center" valign="top">SQL_CN<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">Indicates whether table correlation names are supported</TD>
  </tr>
  <tr>
    <TD valign="top">
Create_Assertion</TD>
    <TD align="center" valign="top">SQL_CA<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the clauses in the CREATE ASSERTION 
	statement</TD>
  </tr>
  <tr>
    <TD valign="top">
Create_Character_Set</TD>
    <TD align="center" valign="top">SQL_CCS<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the clauses in the CREATE CHARACTER SET 
	statement</TD>
  </tr>
  <tr>
    <TD valign="top">
Create_Collation</TD>
    <TD align="center" valign="top">SQL_CCOL<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the clauses in the CREATE COLLATION 
	statement</TD>
  </tr>
  <tr>
    <TD valign="top">
Create_Domain</TD>
    <TD align="center" valign="top">SQL_CDO<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the clauses in the CREATE DOMAIN 
	statement</TD>
  </tr>
  <tr>
    <TD valign="top">
Create_Schema</TD>
    <TD align="center" valign="top">SQL_CS<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the clauses in the CREATE SCHEMA 
	statement</TD>
  </tr>
  <tr>
    <TD valign="top">
Create_Table</TD>
    <TD align="center" valign="top">SQL_CT<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the clauses in the CREATE TABLE 
	statement</TD>
  </tr>
  <tr>
    <TD valign="top">
Create_Translation</TD>
    <TD align="center" valign="top">SQL_CTR<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the clauses in the CREATE TRANSLATION 
	statement</TD>
  </tr>
  <tr>
    <TD valign="top">
Create_View</TD>
    <TD align="center" valign="top">SQL_CV<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the clauses in the CREATE VIEW 
	statement</TD>
  </tr>
  <tr>
    <TD valign="top">
Current_Catalog</TD>
    <TD align="center" valign="top">String,<br>
	Wide_String</TD>
    <TD valign="top">The name of the catalogue to be used by the data source</TD>
  </tr>
  <tr>
    <TD valign="top">
Cursor_Commit_Behavior</TD>
    <TD align="center" valign="top">SQL_CCB<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">How a COMMIT operation affects cursors and prepared 
	statements</TD>
  </tr>
  <tr>
    <TD valign="top">
Cursor_Rollback_Behavior</TD>
    <TD align="center" valign="top">SQL_CCB<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">How a ROLLBACK operation affects cursors and prepared 
	statements</TD>
  </tr>
  <tr>
    <TD valign="top">
Cursor_Sensitivity</TD>
    <TD align="center" valign="top">SQL_SENSITIVITY<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">Value that indicates the support for cursor sensitivity</TD>
  </tr>
  <tr>
    <TD valign="top" bgcolor="#C0C0C0" colspan="3">
<BIG><b>D</b></BIG></TD>
  </tr>
  <tr>
    <TD valign="top">
Data_Source_Name</TD>
    <TD align="center" valign="top">String,<br>
	Wide_String</TD>
    <TD valign="top">The data source name that was used during 
	connection</TD>
  </tr>
  <tr>
    <TD valign="top">
Data_Source_Readonly</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> 
	if the data source is set to READ ONLY mode</TD>
  </tr>
  <tr>
    <TD valign="top">
Database_Name</TD>
    <TD align="center" valign="top">String,<br>
	Wide_String</TD>
    <TD valign="top">The name of the current database in use</TD>
  </tr>
  <tr>
    <TD valign="top">
Datetime_Literals</TD>
    <TD align="center" valign="top">SQL_DL<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the SQL-92 datetime 
	literals supported</TD>
  </tr>
  <tr>
    <TD valign="top">
DBMS_Name</TD>
    <TD align="center" valign="top">String,<br>
	Wide_String</TD>
    <TD valign="top">The name of the DBMS product accessed by 
	the driver</TD>
  </tr>
  <tr>
    <TD valign="top">
DBMS_Version</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">The version of the DBMS product accessed 
	by the driver. The result has the format ##.##.####</TD>
  </tr>
  <tr>
    <TD valign="top">
DDL_Index</TD>
    <TD align="center" valign="top">SQL_DI<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">Value that indicates support for creation 
	and dropping of indexes</TD>
  </tr>
  <tr>
    <TD valign="top">
Default_TXN_Isolation</TD>
    <TD align="center" valign="top">SQL_TXN<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">The default transaction isolation level 
	supported by the driver or data source</TD>
  </tr>
  <tr>
    <TD valign="top">
Describe_Parameter</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> 
	if parameters can be described</TD>
  </tr>
  <tr>
    <TD valign="top">
DM_Version</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">The driver manager version in the form 
	##.##.####.####</TD>
  </tr>
  <tr>
    <TD valign="top">
Driver_Name</TD>
    <TD align="center" valign="top">String,<br>
	Wide_String</TD>
    <TD valign="top">The file name of the driver used to 
	access the data source</TD>
  </tr>
  <tr>
    <TD valign="top">
Driver_ODBC_Ver</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">The version of ODBC that the driver 
	supports in the form ##.##</TD>
  </tr>
  <tr>
    <TD valign="top">
Driver_Ver</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">A character string with the version of 
	the driver and optionally, a description of the driver</TD>
  </tr>
  <tr>
    <TD valign="top">
Drop_Assertion</TD>
    <TD align="center" valign="top">SQL_DA<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the clauses in the 
	DROP ASSERTION statement</TD>
  </tr>
  <tr>
    <TD valign="top">
Drop_Character_Set</TD>
    <TD align="center" valign="top">SQL_DCS<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask bitmask enumerating the clauses 
	in the DROP CHARACTER SET statement</TD>
  </tr>
  <tr>
    <TD valign="top">
Drop_Collation</TD>
    <TD align="center" valign="top">SQL_DC<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the clauses in the 
	DROP COLLATION statement</TD>
  </tr>
  <tr>
    <TD valign="top">
Drop_Domain</TD>
    <TD align="center" valign="top">SQL_DD<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the clauses in the 
	DROP DOMAIN statement</TD>
  </tr>
  <tr>
    <TD valign="top">
Drop_Schema</TD>
    <TD align="center" valign="top">SQL_DS<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the clauses in the 
	DROP SCHEMA statement</TD>
  </tr>
  <tr>
    <TD valign="top">
Drop_Table</TD>
    <TD align="center" valign="top">SQL_DT<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the clauses in the 
	DROP SCHEMA statement</TD>
  </tr>
  <tr>
    <TD valign="top">
Drop_Translation</TD>
    <TD align="center" valign="top">SQL_DTR<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the clauses in the 
	DROP TRANSLATION statement</TD>
  </tr>
  <tr>
    <TD valign="top">
Drop_View</TD>
    <TD align="center" valign="top">SQL_DV<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the clauses in the 
	DROP VIEW statement</TD>
  </tr>
  <tr>
    <TD valign="top">
Dynamic_Cursor_Attributes</TD>
    <TD align="center" valign="top">SQL_CA1,<br>
	SQL_CA2<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask that describes the attributes of 
	a dynamic cursor</TD>
  </tr>
  <tr>
    <TD valign="top" colspan="3" bgcolor="#C0C0C0">
<BIG><b>E</b></BIG></TD>
  </tr>
  <tr>
    <TD valign="top">
Expressions_In_Orderby</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> if the data source 
	supports expressions in the ORDER BY list</TD>
  </tr>
  <tr>
    <TD valign="top" colspan="3" bgcolor="#C0C0C0">
<BIG><b>F</b></BIG></TD>
  </tr>
  <tr>
    <TD valign="top">
File_Usage</TD>
    <TD align="center" valign="top">SQL_FILE<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">The result specifies how a single-tier driver directly 
	treats files in a data source</TD>
  </tr>
  <tr>
    <TD valign="top">
Forward_Only_Cursor_Attributes</TD>
    <TD align="center" valign="top">SQL_CA1,<br>
	SQL_CA2<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask that describes the attributes of a forward-only 
	cursor</TD>
  </tr>
  <tr>
    <TD valign="top" colspan="3" bgcolor="#C0C0C0">
<BIG><b>G</b></BIG></TD>
  </tr>
  <tr>
    <TD valign="top">
Getdata_Extensions</TD>
    <TD align="center" valign="top">SQL_GD<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating extensions to Get_Data</TD>
  </tr>
  <tr>
    <TD valign="top">
Group_By</TD>
    <TD align="center" valign="top">SQL_GR<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">The result describes the relationship between the columns 
	in the GROUP BY clause and the non-aggregated columns in the select list</TD>
  </tr>
  <tr>
    <TD valign="top" colspan="3" bgcolor="#C0C0C0">
<BIG><b>I</b></BIG></TD>
  </tr>
  <tr>
    <TD valign="top">
Identifier_Case</TD>
    <TD align="center" valign="top">SQL_IC<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">Identifier case</TD>
  </tr>
  <tr>
    <TD valign="top">
Identifier_Quote_Char</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">The character string that is used as the starting and 
	ending delimiter of a quoted (delimited) identifier in SQL statements</TD>
  </tr>
  <tr>
    <TD valign="top">
Index_Keywords</TD>
    <TD align="center" valign="top">SQL_IE<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask that enumerates keywords in the CREATE INDEX 
	statement that are supported by the driver</TD>
  </tr>
  <tr>
    <TD valign="top">
Info_Schema_Views</TD>
    <TD align="center" valign="top">SQL_ISV<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the views in the INFORMATION_SCHEMA 
	that are supported by the driver</TD>
  </tr>
  <tr>
    <TD valign="top">
Insert_Statement</TD>
    <TD align="center" valign="top">SQL_IS<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask that indicates support for INSERT statements</TD>
  </tr>
  <tr>
    <TD valign="top">
Integrity</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> if the data source 
	supports the Integrity Enhancement Facility</TD>
  </tr>
  <tr>
    <TD valign="top" colspan="3" bgcolor="#C0C0C0">
<BIG><b>K</b></BIG></TD>
  </tr>
  <tr>
    <TD valign="top">
Keyset_Cursor_Attributes</TD>
    <TD align="center" valign="top">SQL_CA1,<br>
	SQL_CA2<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask that describes the attributes of a keyset cursor</TD>
  </tr>
  <tr>
    <TD valign="top">
Keywords</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">A comma-separated list of all data source-specific keywords</TD>
  </tr>
  <tr>
    <TD valign="top" colspan="3" bgcolor="#C0C0C0">
<BIG><b>L</b></BIG></TD>
  </tr>
  <tr>
    <TD valign="top">
Like_Escape_Clause</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> if the data source 
	supports an escape character for the percent character (%) and underscore 
	character (_) in a LIKE predicate and the driver supports the ODBC syntax 
	for defining a LIKE predicate escape character</TD>
  </tr>
  <tr>
    <TD valign="top" colspan="3" bgcolor="#C0C0C0">
<BIG><b>M</b></BIG></TD>
  </tr>
  <tr>
    <TD valign="top">
Max_Async_Concurrent_Statements</TD>
    <TD align="center" valign="top">Natural</TD>
    <TD valign="top">The maximum number of active concurrent statements in 
	asynchronous mode, zero if there is no known limit</TD>
  </tr>
  <tr>
    <TD valign="top">
Max_Binary_Literal_Len</TD>
    <TD align="center" valign="top">Natural</TD>
    <TD valign="top">This function returns the maximum length (number of 
	hexadecimal characters, excluding the literal prefix and suffix returned by 
	Get_Type_Info) of a binary literal in an SQL statement. For example, the 
	binary literal 0xFFAA has a length of 4. If there is no maximum length or 
	the length is unknown, this value is set to zero</TD>
  </tr>
  <tr>
    <TD valign="top">
Max_Catalog_Name_Len</TD>
    <TD align="center" valign="top">Natural</TD>
    <TD valign="top">The maximum length of a catalogue name in the data source, 
	zero if there is no known limit</TD>
  </tr>
  <tr>
    <TD valign="top">
Max_Char_Literal_Len</TD>
    <TD align="center" valign="top">Natural</TD>
    <TD valign="top">The maximum length (number of characters, excluding the 
	literal prefix and suffix of a character literal in an SQL statement, zero 
	if there is no known limit</TD>
  </tr>
  <tr>
    <TD valign="top">
Max_Column_Name_Len</TD>
    <TD align="center" valign="top">Natural</TD>
    <TD valign="top">The maximum length of a column name in the data source, 
	zero if there is no known limit</TD>
  </tr>
  <tr>
    <TD valign="top">
Max_Columns_In_Group_By</TD>
    <TD align="center" valign="top">Natural</TD>
    <TD valign="top">The maximum number of columns allowed in a GROUP BY clause, 
	zero if there is no known limit</TD>
  </tr>
  <tr>
    <TD valign="top">
Max_Columns_In_Index</TD>
    <TD align="center" valign="top">Natural</TD>
    <TD valign="top">The maximum number of columns allowed in an index, zero if 
	there is no known limit</TD>
  </tr>
  <tr>
    <TD valign="top">
Max_Columns_In_Order_By</TD>
    <TD align="center" valign="top">Natural</TD>
    <TD valign="top">The maximum number of columns allowed in an ORDER BY 
	clause, zero if there is no known limit</TD>
  </tr>
  <tr>
    <TD valign="top">
Max_Columns_In_Select</TD>
    <TD align="center" valign="top">Natural</TD>
    <TD valign="top">The maximum number of columns allowed in a select list, 
	zero if there is no known limit</TD>
  </tr>
  <tr>
    <TD valign="top">
Max_Columns_In_Table</TD>
    <TD align="center" valign="top">Natural</TD>
    <TD valign="top">The maximum number of columns allowed in a table, zero if 
	there is no known limit</TD>
  </tr>
  <tr>
    <TD valign="top">
Max_Concurrent_Activities</TD>
    <TD align="center" valign="top">Natural</TD>
    <TD valign="top">The maximum number of active statements that the driver can 
	support for a connection. A statement is defined as active if it has results 
	pending, with the term &quot;results&quot; meaning rows from a SELECT operation or 
	rows affected by an INSERT, UPDATE, or DELETE operation (such as a row 
	count), or if it is in a NEED_DATA state. This value can reflect a 
	limitation imposed by either the driver or the data source. If there is no 
	specified limit or the limit is unknown, this value is set to zero</TD>
  </tr>
  <tr>
    <TD valign="top">
Max_Cursor_Name_Len</TD>
    <TD align="center" valign="top">Natural</TD>
    <TD valign="top">The maximum length of a cursor name in the data source, 
	zero if there is no known limit</TD>
  </tr>
  <tr>
    <TD valign="top">
Max_Driver_Connections</TD>
    <TD align="center" valign="top">Natural</TD>
    <TD valign="top">The maximum number of active connections supported, zero if 
	there is no known limit</TD>
  </tr>
  <tr>
    <TD valign="top">
Max_Identifier_Len</TD>
    <TD align="center" valign="top">Natural</TD>
    <TD valign="top">The maximum size in characters for user-defined names, zero 
	if there is no known limit</TD>
  </tr>
  <tr>
    <TD valign="top">
Max_Index_Size</TD>
    <TD align="center" valign="top">Natural</TD>
    <TD valign="top">The maximum number of bytes in the combined fields of an 
	index, zero if there is no known limit</TD>
  </tr>
  <tr>
    <TD valign="top">
Max_Procedure_Name_Len</TD>
    <TD align="center" valign="top">Natural</TD>
    <TD valign="top">The maximum length of a procedure name in the data source, 
	zero if there is no known limit</TD>
  </tr>
  <tr>
    <TD valign="top">
Max_Row_Size</TD>
    <TD align="center" valign="top">Natural</TD>
    <TD valign="top">The maximum length of a single row in a table, zero if 
	there is no known limit</TD>
  </tr>
  <tr>
    <TD valign="top">
Max_Row_Size_Includes_Long</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> if the maximum row 
	size returned for the Get_Max_Row_Size information type includes the length 
	of all SQL_LONGVARCHAR and SQL_LONGVARBINARY columns in the row</TD>
  </tr>
  <tr>
    <TD valign="top">
Max_Schema_Name_Len</TD>
    <TD align="center" valign="top">Natural</TD>
    <TD valign="top">The maximum length of a schema name in the data source, 
	zero if there is no known limit</TD>
  </tr>
  <tr>
    <TD valign="top">
Max_Statement_Len</TD>
    <TD align="center" valign="top">Natural</TD>
    <TD valign="top">The maximum length (number of characters, including white 
	space) of an SQL statement, zero if there is no known limit</TD>
  </tr>
  <tr>
    <TD valign="top">
Max_Table_Name_Len</TD>
    <TD align="center" valign="top">Natural</TD>
    <TD valign="top">The maximum length of a table name in the data source, zero 
	if there is no known limit</TD>
  </tr>
  <tr>
    <TD valign="top">
Max_Tables_In_Select</TD>
    <TD align="center" valign="top">Natural</TD>
    <TD valign="top">The maximum number of tables allowed in the FROM clause of 
	a SELECT statement, zero if there is no known limit</TD>
  </tr>
  <tr>
    <TD valign="top">
Max_User_Name_Len</TD>
    <TD align="center" valign="top">Natural</TD>
    <TD valign="top">The maximum length of a user name in the data source, zero 
	if there is no known limit</TD>
  </tr>
  <tr>
    <TD valign="top">
Multiple_Result_Sets</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> if the driver 
	supports multiple result sets</TD>
  </tr>
  <tr>
    <TD valign="top">
Multiple_Active_TXN</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> if the driver 
	supports more than one active transaction at the same time</TD>
  </tr>
  <tr>
    <TD valign="top" colspan="3" bgcolor="#C0C0C0">
<BIG><b>N</b></BIG></TD>
  </tr>
  <tr>
    <TD valign="top">
Need_Long_Data_Len</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> if the data source 
	needs the length of a long data value</TD>
  </tr>
  <tr>
    <TD valign="top">
Non_Nullable_Columns</TD>
    <TD align="center" valign="top">SQL_NNC<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A value the specifies whether the data source supports NOT 
	NULL in columns</TD>
  </tr>
  <tr>
    <TD valign="top">
Null_Collation</TD>
    <TD align="center" valign="top">SQL_NC<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A value that specifies where NULLs are sorted in a result 
	set</TD>
  </tr>
  <tr>
    <TD valign="top">
Numeric_Functions</TD>
    <TD align="center" valign="top">SQL_FN_NUM<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the scalar numeric functions 
	supported by the driver and associated data source</TD>
  </tr>
  <tr>
    <TD valign="top" colspan="3" bgcolor="#C0C0C0">
<BIG><b>O</b></BIG></TD>
  </tr>
  <tr>
    <TD valign="top">
ODBC_Interface_Conformance</TD>
    <TD align="center" valign="top">SQL_OIC<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A value that indicates the level of the ODBC 3.x interface 
	that the driver complies with</TD>
  </tr>
  <tr>
    <TD valign="top">
ODBC_Ver</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">A character string with the version of ODBC to which the 
	Driver Manager conforms. The format is ##.##.0000</TD>
  </tr>
  <tr>
    <TD valign="top">
OJ_Capabilities</TD>
    <TD align="center" valign="top">SQL_OJ<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the types of outer joins supported</TD>
  </tr>
  <tr>
    <TD valign="top">
Order_By_Columns_In_Select</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> if the columns in 
	the ORDER BY clause must be in the select list</TD>
  </tr>
  <tr>
    <TD valign="top" colspan="3" bgcolor="#C0C0C0">
<BIG><b>P</b></BIG></TD>
  </tr>
  <tr>
    <TD valign="top">
Param_Array_Row_Count</TD>
    <TD align="center" valign="top">SQL_PARC<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A value enumerating the driver's properties regarding the 
	availability of row counts in a parameterized execution</TD>
  </tr>
  <tr>
    <TD valign="top">
Param_Array_Selects</TD>
    <TD align="center" valign="top">SQL_PAS<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A value enumerating the driver's properties regarding the 
	availability of result sets in a parameterized execution</TD>
  </tr>
  <tr>
    <TD valign="top">
Procedure_Term</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">A character string with the data source vendor's name for a 
	procedure</TD>
  </tr>
  <tr>
    <TD valign="top">
Procedures</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> if the data source 
	supports procedures and the driver supports the ODBC procedure invocation 
	syntax</TD>
  </tr>
  <tr>
    <TD valign="top">
Pos_Operations</TD>
    <TD align="center" valign="top">SQL_POS<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the support operations in Set_Pos</TD>
  </tr>
  <tr>
    <TD valign="top" colspan="3" bgcolor="#C0C0C0">
<BIG><b>Q</b></BIG></TD>
  </tr>
  <tr>
    <TD valign="top">
Quoted_Identifier_Case</TD>
    <TD align="center" valign="top">SQL_IC<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">The case used for quoted identifiers</TD>
  </tr>
  <tr>
    <TD valign="top" colspan="3" bgcolor="#C0C0C0">
<BIG><b>R</b></BIG></TD>
  </tr>
  <tr>
    <TD valign="top">
Row_Updates</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> if a keyset-driven 
	or mixed cursor maintains row versions or values for all fetched rows</TD>
  </tr>
  <tr>
    <TD valign="top" colspan="3" bgcolor="#C0C0C0">
<BIG><b>S</b></BIG></TD>
  </tr>
  <tr>
    <TD valign="top">
Schema_Term</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">A character string with the data source vendor's name for a 
	schema</TD>
  </tr>
  <tr>
    <TD valign="top">
Schema_Usage</TD>
    <TD align="center" valign="top">SQL_SU<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the statements in which schemas can 
	be used</TD>
  </tr>
  <tr>
    <TD valign="top">
Scroll_Options</TD>
    <TD align="center" valign="top">SQL_SO<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating scroll options</TD>
  </tr>
  <tr>
    <TD valign="top">
Search_Pattern_Escape</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">A character string specifying what the driver supports as 
	an escape character that allows the use of the pattern match metacharacters 
	underscore (_) and percent sign (%) as valid characters in search patterns</TD>
  </tr>
  <tr>
    <TD valign="top">
Server_Name</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">A character string with the actual data source-specific 
	server name</TD>
  </tr>
  <tr>
    <TD valign="top">
Special_Characters</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">A character string that contains all special characters</TD>
  </tr>
  <tr>
    <TD valign="top">
SQL_Conformance</TD>
    <TD align="center" valign="top">SQL_SC<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A value that indicates the level of SQL-92 supported by the 
	driver</TD>
  </tr>
  <tr>
    <TD valign="top">
SQL92_Datetime_Functions</TD>
    <TD align="center" valign="top">SQL_SDF<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the datetime scalar functions that 
	are supported by the driver</TD>
  </tr>
  <tr>
    <TD valign="top">
SQL92_Foreign_Key_Delete_Rule</TD>
    <TD align="center" valign="top">SQL_SFKD<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the rules supported for a foreign key 
	in a DELETE statement</TD>
  </tr>
  <tr>
    <TD valign="top">
SQL92_Foreign_Key_Update_Rule</TD>
    <TD align="center" valign="top">SQL_SFKU<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the rules supported for a foreign key 
	in an UPDATE statement</TD>
  </tr>
  <tr>
    <TD valign="top">
SQL92_Grant</TD>
    <TD align="center" valign="top">SQL_SG<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the clauses supported in the GRANT 
	statement</TD>
  </tr>
  <tr>
    <TD valign="top">
SQL92_Numeric_Value_Functions</TD>
    <TD align="center" valign="top">SQL_SNVF<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the numeric value scalar functions 
	that are supported by the driver and the associated data source, as defined 
	in SQL-92</TD>
  </tr>
  <tr>
    <TD valign="top">
SQL92_Predicates</TD>
    <TD align="center" valign="top">SQL_SP<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the numeric value scalar functions 
	that are supported by the driver and the associated data source</TD>
  </tr>
  <tr>
    <TD valign="top">
SQL92_Relational_Join_Operations</TD>
    <TD align="center" valign="top">SQL_SRJO<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the relational join operators 
	supported in a SELECT statement, as defined in SQL-92</TD>
  </tr>
  <tr>
    <TD valign="top">
SQL92_Revoke</TD>
    <TD align="center" valign="top">SQL_SR<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the clauses supported in the REVOKE 
	statement, as defined in SQL-92</TD>
  </tr>
  <tr>
    <TD valign="top">
SQL92_Row_Value_Constructor</TD>
    <TD align="center" valign="top">SQL_SRVC<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the row value constructor expressions 
	supported in a SELECT statement, as defined in SQL-92</TD>
  </tr>
  <tr>
    <TD valign="top">
SQL92_String_Functions</TD>
    <TD align="center" valign="top">SQL_SSF<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the string scalar functions that are 
	supported by the driver and the associated data source, as defined in SQL-92</TD>
  </tr>
  <tr>
    <TD valign="top">
SQL92_Value_Expressions</TD>
    <TD align="center" valign="top">SQL_SVE<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the value expressions supported, as 
	defined in SQL-92</TD>
  </tr>
  <tr>
    <TD valign="top">
Standard_CLI_Conformance</TD>
    <TD align="center" valign="top">SQL_SCC<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the CLI standard or standards to 
	which the driver conforms</TD>
  </tr>
  <tr>
    <TD valign="top">
Static_Cursor_Attributes</TD>
    <TD align="center" valign="top">SQL_CA1,<br>
	SQL_CA2<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask that describes the attributes of a static cursor 
	supported</TD>
  </tr>
  <tr>
    <TD valign="top">
Subqueries</TD>
    <TD align="center" valign="top">SQL_SQ<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the predicates that support 
	subqueries</TD>
  </tr>
  <tr>
    <TD valign="top">
String_Functions</TD>
    <TD align="center" valign="top">SQL_FN_STR<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the scalar string functions supported 
	by the driver and associated data source</TD>
  </tr>
  <tr>
    <TD valign="top">
System_Functions</TD>
    <TD align="center" valign="top">SQL_FN_SYS<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the scalar system functions supported 
	by the driver and associated data source</TD>
  </tr>
  <tr>
    <TD valign="top" colspan="3" bgcolor="#C0C0C0">
<BIG><b>T</b></BIG></TD>
  </tr>
  <tr>
    <TD valign="top">
Table_Term</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">A character string with the data source vendor's name for a 
	table</TD>
  </tr>
  <tr>
    <TD valign="top">
Timedate_Add_Intervals</TD>
    <TD align="center" valign="top">SQL_FN_TSI<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the timestamp intervals supported by 
	the driver and associated data source for the TIMESTAMPADD scalar function</TD>
  </tr>
  <tr>
    <TD valign="top">
Timedate_Diff_Intervals</TD>
    <TD align="center" valign="top">SQL_FN_TSI<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the timestamp intervals supported by 
	the driver and associated data source for the TIMESTAMPDIFF scalar function</TD>
  </tr>
  <tr>
    <TD valign="top">
Timedate_Functions</TD>
    <TD align="center" valign="top">SQL_FN_TSI<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the scalar date and time functions 
	supported by the driver and associated data source</TD>
  </tr>
  <tr>
    <TD valign="top">
TXN_Capable</TD>
    <TD align="center" valign="top">SQL_TC<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">Describes the transaction support in the driver or data 
	source</TD>
  </tr>
  <tr>
    <TD valign="top">
TXN_Isolation_Option</TD>
    <TD align="center" valign="top">SQL_TXN<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the transaction isolation levels 
	available from the driver or data source</TD>
  </tr>
  <tr>
    <TD valign="top" colspan="3" bgcolor="#C0C0C0">
<BIG><b>U</b></BIG></TD>
  </tr>
  <tr>
    <TD valign="top">
Union</TD>
    <TD align="center" valign="top">SQL_U<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask enumerating the support for the UNION clause</TD>
  </tr>
  <tr>
    <TD valign="top">
User_Name</TD>
    <TD align="center" valign="top">String,<br>
	Wide_String</TD>
    <TD valign="top">The name used in a particular database</TD>
  </tr>
  <tr>
    <TD valign="top" colspan="3" bgcolor="#C0C0C0">
<BIG><b>X</b></BIG></TD>
  </tr>
  <tr>
    <TD valign="top">
XOpen_CLI_Year</TD>
    <TD align="center" valign="top">String,<br>
	Wide_String</TD>
    <TD valign="top">A character string that indicates the year of publication 
	of the Open Group specification with which the version of the ODBC Driver 
	Manager fully complies</TD>
  </tr>
  <tr>
    <TD valign="top" colspan="3">
<sup><a name="odbc_attribute_footnote_1"></a>1</sup> Defined in the package
<a href="#ODBC.SQLTypes">ODBC.SQLTypes</a></TD>
  </tr>
  </TABLE>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Convert<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Connection</b> : 
ODBC_Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data_Type</b>&nbsp; 
: SQL_DATA_TYPE<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> SQL_CVT;</tt></p>
</blockquote>
<p>The result is the bitmask indicates the conversions supported by the data 
source with the CONVERT scalar function for data of the type specified. If the 
bitmask equals zero, the data source does not support any conversions from data 
of the named type, including conversion to the same data type.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="ODBC.API.Get_Execution_Mode"></a>function</font> 
Get_Execution_Mode (<b>Connection</b> 
: ODBC_Connection)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Execution_Mode;</tt></p>
</blockquote>
<p>This function returns current execution <a href="#ODBC.API.Execution_Mode">
mode</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Functions<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Connection</b>&nbsp; 
: ODBC_Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Function_ID</b> : SQL_API<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if the 
function specified by the parameter Function_ID is supported by the driver.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_&lt;<i>record-field</i>&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Connection</b>&nbsp;&nbsp;&nbsp; 
: ODBC_Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Record_Number</b> : Positive := <font color="#800000">1</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> &lt;<i>field-value</i>&gt;;</tt></p>
</blockquote>
<p>These operations are used to get diagnostic record fields, e.g. 
Get_Message_Text. The operation name record field name. Refer to SQL_DIAG_&lt;<i>record-field</i>&gt; for further 
information. The parameter <b>Record_Number</b> indicates the record for which 
the field is requested. The following table lists the functions:</p>
<TABLE border="5" cellpadding="3" cellspacing="0" style="border-left-width: 0px">
  <TR>
    <TD bgcolor="#008080" valign="top"><font color="#FFFFFF"><b>Diagnostic field name</b></font></TD>
    <TD bgcolor="#008080" align="center" valign="top"><b><font color="#FFFFFF">Result type</font></b></TD>
    <TD bgcolor="#008080" valign="top"><font color="#FFFFFF"><b>Field description</b></font></TD>
  </TR>
  <tr>
    <TD valign="top">
Class_Origin</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">A string that indicates the document that defines the class 
	portion of the SQLSTATE value in this record</TD>
  </tr>
  <tr>
    <TD valign="top">
Column_Number</TD>
    <TD align="center" valign="top">SQLINTEGER<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">The value that represents the column number in the result 
	set or the parameter number in the set of parameters</TD>
  </tr>
  <tr>
    <TD valign="top">
Connection_Name</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">The name of the connection that the diagnostic record 
	relates to</TD>
  </tr>
  <tr>
    <TD valign="top">
Message_Text</TD>
    <TD align="center" valign="top">String,<br>
	Wide_String</TD>
    <TD valign="top">An informational message on the error or warning</TD>
  </tr>
  <tr>
    <TD valign="top">
Native</TD>
    <TD align="center" valign="top">SQLINTEGER<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A driver/data source-specific native error code. If there 
	is no native error code, the driver returns 0</TD>
  </tr>
  <tr>
    <TD valign="top">
Number</TD>
    <TD align="center" valign="top">SQLINTEGER<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">The number of status records available</TD>
  </tr>
  <tr>
    <TD valign="top">
Returncode</TD>
    <TD align="center" valign="top">SQLRETURN<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">Return code returned by the function</TD>
  </tr>
  <tr>
    <TD valign="top">
Row_Number</TD>
    <TD align="center" valign="top">SQLLEN<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">The row number in the rows set, or the parameter number in 
	the set of parameters, with which the status record is associated</TD>
  </tr>
  <tr>
    <TD valign="top">
Server_Name</TD>
    <TD align="center" valign="top">String,<br>
	Wide_String</TD>
    <TD valign="top">A string that indicates the server name that the diagnostic 
	record relates to</TD>
  </tr>
  <tr>
    <TD valign="top">
SQLSTATE</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">A five-character SQLSTATE diagnostic code. For more 
	information</TD>
  </tr>
  <tr>
    <TD valign="top">
Subclass_Origin</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">Identifies the defining portion of the subclass portion of 
	the SQLSTATE code</TD>
  </tr>
  </TABLE>
<blockquote>
<p><tt><font color="#0000FF">procedure </font>Initialize (<b>Connection</b> :
<font color="#0000FF">in out</font> ODBC_Connection);</tt></p>
</blockquote>
<p>This procedure allocates a connection handle. When a new type is derived from
<a href="#ODBC.API.ODBC_Connection">ODBC_Connection</a> and this operation is 
overridden the new implementation must call it from its body.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="ODBC.API.Release"></a>procedure </font>
Release (<b>Connection</b> :
<font color="#0000FF">in out</font> ODBC_Connection);</tt></p>
</blockquote>
<p>This procedure is opposite to <a href="#ODBC.API.Seize">Seize</a>, it 
releases previously locked data base. See <a href="#odbc_transactions">
transactions</a> for further information.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="ODBC.API.Rollback"></a>procedure </font>Rollback (<b>Connection</b> :
in out ODBC_Connection);</tt></p>
</blockquote>
<p>This procedure discards the effect of current transaction. See
<a href="#odbc_transactions">transactions</a> for further information.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="ODBC.API.Seize"></a>procedure </font>Seize (<b>Connection</b> :
<font color="#0000FF">in out</font> ODBC_Connection);</tt></p>
</blockquote>
<p>This procedure is called to lock the data base. The access to the data base 
becomes serialized. This procedure may fail if the driver does not support 
serialized transactions (see <a href="#ODBC.API.Serializable">Serializable</a>). 
The database is unlocked by calling to <a href="#ODBC.API.Release">Release</a>. 
See <a href="#odbc_transactions">transactions</a> for further information.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="ODBC.API.Serializable"></a>procedure </font>
Serializable (<b>Connection</b> :
ODBC_Connection);</tt></p>
</blockquote>
<p>When this function returns <i><font color="#800000">false</font></i>, it is 
unsafe to access the data base concurrently, because the drives provides no 
interlocking. If the result is <font color="#800000"><i>true</i></font>,
<a href="#ODBC.API.Seize">Seize</a> can be called to start a safe transaction.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="ODBC.API.Set_Execution_Mode"></a>procedure </font>
Set_Execution_Mode<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Connection</b> 
: <font color="#0000FF">in out</font> ODBC_Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Mode</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Execution_Mode<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes current execution <a href="#ODBC.API.Execution_Mode">
mode</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Table_Exists<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Connection :
<font color="#0000FF">access</font> ODBC_Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Table_Name : 
String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;<font color="#0000FF"><br>
function</font> Table_Exists<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Connection :
<font color="#0000FF">access</font> ODBC_Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Table_Name : 
Wide_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>These functions return <i><font color="#800000">true</font></i> if a table 
with the specified name exists in the data base. Note that the driver may 
consider table names case-sensitive in some cases and case-insensitive in 
others. When searching for a table using this function, the table name must be 
in the canonic form, otherwise the driver may fail finding it.</p>
<h4><a name="15.6.5"></a>15.6.5. Transactions</h4>
<p><a name="odbc_transactions"></a>The package <a href="#ODBC.API">
ODBC.API</a> declares the type</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="ODBC.API.Execution_Mode"></a>type </font>Execution_Mode <font color="#0000FF">is
</font>(None, Read_Only, Read_Write);</tt></p>
</blockquote>
<p>The execution mode is get and set using
<a href="#ODBC.API.Get_Execution_Mode">Get_Execution_Mode</a> and
<a href="#ODBC.API.Set_Execution_Mode">Set_Execution_Mode</a>.</p>
<p>When the execution mode is set to <i>None</i> a call 
to <a href="#ODBC.API.Execute">Execute</a> causes propagation of Use_Error. The 
difference between <i>Read_Only</i> and <i>
Read_Write</i> modes is provided for convenience. Both <i>Read_Only</i> and <i>
Read_Write </i> actually allow <a href="#ODBC.API.Execute">Execute</a>. 
Note also that execution mode does not influence the connection attribute SQL_ATTR_ACCESS_MODE (see
<a href="#ODBC.API.Get_Access_Mode">Get_Access_Mode</a>). In fact, 
ODBC does not recommend changing this attribute on an established connection, 
anyway. 
Furthermore, setting this attribute does not necessarily prevent the driver from updating the data base.</p>
<p>The default execution mode is <i>Read_Write</i>. in which everything is 
supposed to be allowed. The execution mode <i>None</i> is useful 
in the transaction (manual-commit) mode to detect potential bugs caused by executing statements 
outside transactions, which is a very common source of errors.</p>
<p>Typically an application using transactions will set the execution mode to <i>None</i> 
between the transactions. A transaction could be performed as follows:</p>
<p><i><u>Read-only transaction</u></i>: The application calls <a href="#ODBC.API.Seize">Seize</a> 
and sets the mode to <i>Read_Only</i>. Upon transaction completion it calls
<a href="#ODBC.API.End_Transaction">End_Transaction</a>, then
<a href="#ODBC.API.Release">Release</a>, and, finally, sets the mode back to <i>
None</i>. Instead of <a href="#ODBC.API.End_Transaction">End_Transaction</a> it 
could also call <a href="#ODBC.API.Rollback">Rollback</a>. Assuming that no changes 
were made to the data base during a read-only transaction anyway, both should be 
equivalent.</p>
<p><i><u>Read-write transaction</u></i>: The application calls <a href="#ODBC.API.Seize">Seize</a> 
and sets the mode to <i>Read_Write</i>. Upon transaction completion it calls 
either <a href="#ODBC.API.End_Transaction">End_Transaction</a> in order to 
commit the changes made or else <a href="#ODBC.API.Rollback">Rollback</a> to 
drop the changes. After that <a href="#ODBC.API.Release">Release</a> is called, 
and, finally, the mode is set back to <i>None</i>.</p>
<p>Note that the ODBC drivers may support no transactions. Use the function
<a href="#ODBC.API.Serializable">Serializable</a> to check if the necessary 
transactions isolation level is provided.</p>
<h4><a name="15.6.6"></a>15.6.6. ODBC commands</h4>
<p>The package <a href="#ODBC.API">ODBC.API</a> declares the type 
<a href="#ODBC.API.ODBC_Command">ODBC_Command</a>:</p>
<blockquote>
<p><a name="ODBC.API.ODBC_Command"></a><tt><font color="#0000FF">type </font>
ODBC_Command<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Connection : <font color="#0000FF">access</font> 
ODBC_Connection'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp; )<font color="#0000FF">&nbsp; is new </font>Ada.Finalization.Limited_Controlled
<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The object represents an SQL statement and the result set associated with it. 
The access discriminant <a href="#ODBC.API.ODBC_Connection">ODBC_Connection</a> 
refers to the connection object to be used by the statement. A connection may 
have several statements associated with it. The following primitive operations 
are defined on <a href="#ODBC.API.ODBC_Command">ODBC_Command</a>:</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="ODBC.API.Bind_Parameter"></a>procedure</font> 
Bind_Parameter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> ODBC_Command;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Index</b>&nbsp;&nbsp;&nbsp;&nbsp; : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Parameter</b> : <font color="#0000FF">access</font> &lt;<i><a href="#ODBC.Bound_Parameters">parameter-data-type</a>&gt;</i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Data_Type</b> : SQL_DATA_TYPE := &lt;<i>data-type-specification</i>&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF"><a name="ODBC.API.Bind_Null"></a>procedure</font> 
Bind_Null<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b> :
<font color="#0000FF">in out</font> ODBC_Command;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Index</b>&nbsp;&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures bind a variable to a parameter to the command specified by 
the parameter <b>Command</b>. The command must be first prepared using 
<a href="#ODBC.API.Prepare">Prepare</a>. 
The parameters to be bound are specified in the statement as ?. Each such 
parameter has to be bound to a variable using a call to a
<a href="#ODBC.API.Bind_Parameter">Bind_Parameter</a>. The parameter <b>Index</b> 
specifies the position of the parameter, i.e. the number of ? counting from 1. 
The parameter <b>Parameter</b> specifies the object keeping the value and 
additional information required by the driver. The package
<a href="#ODBC.Bound_Parameters">ODBC.Bound_Parameter</a> provides such types 
declared for data types like SQLINTEGER etc. The variant
<a href="#ODBC.API.Bind_Null">Bind_Null</a> binds null value to the parameter.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="ODBC.API.Bind_Result"></a>procedure</font> 
Bind_Result<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b>&nbsp;&nbsp;&nbsp;: <font color="#0000FF">in out</font> ODBC_Command;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Column</b>&nbsp;&nbsp;&nbsp; : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Parameter</b> : <font color="#0000FF">access</font> &lt;<i>result-data-type&gt;</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures bind a variable to the result set's column of the command 
specified by the parameter <b>Command</b>. The command must be first prepared 
using <a href="#ODBC.API.Prepare">Prepare</a>. When a row of the result set is 
fetched the value of the column specified by the parameter <b>Column</b> is 
stored into the variable specified by <b>Parameter</b>. The following data types 
available for this parameter:</p>
<ul>
	<li>SQLTINYINT</li>
	<li>SQLUTINYINT</li>
	<li>SQLSMALLINT</li>
	<li>SQLUSMALLINT</li>
	<li>SQLINTEGER</li>
	<li>SQLUINTEGER</li>
	<li>SQLBIGINT</li>
	<li>SQLUBIGINT</li>
	<li>SQLDOUBLE</li>
	<li>SQLGUID</li>
	<li>SQL_TIMESTAMP_STRUCT</li>
</ul>
<blockquote>
<p><tt><font color="#0000FF"><a name="ODBC.API.Close_Cursor"></a>procedure</font> 
Close_Cursor (<b>Command</b> 
: <font color="#0000FF">in out</font> ODBC_Command);</tt></p>
</blockquote>
<p>This procedure explicitly closes cursor. All errors on closing cursor are 
ignored. When <a href="#ODBC.API.Execute">Execute</a> produces a result set, the 
cursor is placed to a row in this set. In order to execute command once more, 
the cursor must be closed. The variants of <a href="#ODBC.API.Execute">Execute</a> 
the statement specified as a parameter (direct execution) automatically close 
current cursor. The variants of <a href="#ODBC.API.Execute">Execute</a> using 
prepared statement may fail if the cursor is not closed. The operation
<a href="#ODBC.API.Get_Data">Get_Data</a> has cursor disposition parameter 
controlling when close the cursor.</p>
<blockquote>
<p><tt>
<font color="#0000FF"><a name="ODBC.API.Describe_Col"></a>function</font> 
Describe_Col<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b> : 
ODBC_Command;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Column</b>&nbsp; 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Column_Description;</tt></p>
</blockquote>
<p>This function returns a description of the column specified by the parameter <b>
Column</b>. The parameter <b>Command</b> specifies a prepared command of which 
result set column is requested. The number of columns can be obtained using
<a href="#ODBC.API.Num_Result_Cols">Num_Result_Cols</a>. The result of the function has the type declared as follows:</p>
<blockquote>
<p><tt>
<font color="#0000FF">type</font> Column_Description (Name_Length : Natural)
<font color="#0000FF">is record</font><br>
&nbsp;&nbsp; Data_Type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : SQL_DATA_TYPE;<br>
&nbsp;&nbsp; Column_Size&nbsp;&nbsp;&nbsp; : SQLULEN;<br>
&nbsp;&nbsp; Decimal_Digits : Natural;<br>
&nbsp;&nbsp; Nullable&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : SQL_NULLABLE_FIELD;<br>
&nbsp;&nbsp; Column_Name&nbsp;&nbsp;&nbsp; : String (<font color="#800000">1</font>..Name_Length);<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<blockquote>
<p><tt><font color="#0000FF"><a name="ODBC.API.Describe_Param"></a>function</font> 
Describe_Param<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b>&nbsp;&nbsp; 
: ODBC_Command;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Parameter</b> 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Param_Description;</tt></p>
</blockquote>
<p>This function returns description of a prepared statement parameter. The 
parameters are specified using ? mark (see <a href="#ODBC.API.Prepare">Prepare</a>). 
The result has the type declared as follows:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Param_Description <font color="#0000FF">
is record</font><br>
&nbsp;&nbsp; Data_Type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : SQL_DATA_TYPE;<br>
&nbsp;&nbsp; Parameter_Size : SQLULEN;<br>
&nbsp;&nbsp; Decimal_Digits : Natural;<br>
&nbsp;&nbsp; Nullable&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : SQL_NULLABLE_FIELD;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>Use_Error is propagated when the driver does not support parameter 
description. The function <a href="#ODBC.API.Num_Params">Num_Params</a> returns 
the number of parameters of a prepared statement.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Drop<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> ODBC_Command;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Table_Name</b> : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> Drop<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> ODBC_Command;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Table_Name</b> : Wide_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures delete the specified table. Nothing happens if no such table 
exists. The parameter <b>Command</b> is scratch command to use in the operation.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="ODBC.API.Execute"></a>procedure</font> 
Execute<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Command</b> :
<font color="#0000FF">in out</font> ODBC_Command<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">procedure</font> Execute<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b> :
<font color="#0000FF">in out</font> ODBC_Command;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Text</b>&nbsp;&nbsp;&nbsp; 
: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> Execute<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b> :
<font color="#0000FF">in out</font> ODBC_Command;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Text</b>&nbsp;&nbsp;&nbsp; 
: Wide_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures execute a command. When the parameter <b>Text</b> is omitted 
the command to be executed is one prepared before using 
<a href="#ODBC.API.Prepare">Prepare</a>. Otherwise it is 
prepared from the statement specified by the parameter <b>Text</b>. The effect 
of execution of a command could be a result set which is navigated using the 
procedure <a href="#ODBC.API.Fetch">Fetch</a>. A call to
<a href="#ODBC.API.Fetch">Fetch</a> gives access to a row of the result set. 
Columns of the row are accessed using <a href="#ODBC.API.Get_Data">Get_Data</a>. 
For prepared statements columns can be bound to variables using
<a href="#ODBC.API.Bind_Result">Bind_Result</a> to extract values automatically. 
Use_Error is propagated when current <a href="#ODBC.API.Execution_Mode">
execution mode</a> is set to <i>None</i>. Status_Error is propagated when a 
table specified in the statement does not exist. Data_Error has standard for the 
binding meaning: any other error reported by the driver.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Execute<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Command</b> :
<font color="#0000FF">access</font> ODBC_Command<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Natural;<br>
<font color="#0000FF">function</font> Execute<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b> :
<font color="#0000FF">access</font> ODBC_Command;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Text</b>&nbsp;&nbsp;&nbsp; 
: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Natural;<font color="#0000FF"><br>
function</font> Execute<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b> :
<font color="#0000FF">access</font> ODBC_Command;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Text</b>&nbsp;&nbsp;&nbsp; 
: Wide_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Natural;</tt></p>
</blockquote>
<p>These functions are provided for convenience. They first call the 
corresponding <a href="#ODBC.API.Execute">Execute</a> operation and then return 
the result of <a href="#ODBC.API.Row_Count">Row_Count</a>, indicating the number 
of rows affected by the statement execution. The affected rows are those 
inserted, modified, deleted by the statement executed.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="ODBC.API.Fetch"></a>procedure</font> Fetch 
(<b>Command</b> : <font color="#0000FF">in out </font>ODBC_Command);<font color="#0000FF"><br>
function</font> Fetch<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Command</b> :
<font color="#0000FF">access</font> ODBC_Command<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
SQLRETURN;</tt></p>
</blockquote>
<p>These operations fetch a new row from the result set obtained by a
<a href="#ODBC.API.Execute">Execute</a>. End_Error is propagated when there is 
no more rows in the result set. After a successful execution of
<a href="#ODBC.API.Fetch">Fetch</a>, the results bound by
<a href="#ODBC.API.Bind_Result">Bind_Result</a> are set. Other columns can be 
obtained using <a href="#ODBC.API.Get_Data">Get_Data</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure </font>Finalize (<b>Command</b> :
<font color="#0000FF">in out</font> ODBC_Command);</tt></p>
</blockquote>
<p>This procedure closes the connection and frees the statement handle. When a new type is derived from
<a href="#ODBC.API.ODBC_Command">ODBC_Command</a> and this operation is 
overridden the new implementation must call it from its body.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="ODBC.API.Get_Data"></a>function</font> 
Get_Data<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b> :
<font color="#0000FF">access</font> ODBC_Command;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Column</b>&nbsp; 
: Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Finish</b>&nbsp; 
: Cursor_Disposition<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> &lt;<i>result-data-type</i>&gt;;<font color="#0000FF"><br>
function</font> Get_Data<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">access</font> ODBC_Command;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Column</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Finish</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 
: Cursor_Disposition;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Null_As_Empty</b> : Boolean&nbsp; := True;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Block_Size</b>&nbsp;&nbsp;&nbsp; 
: Positive := Default_Block_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> String;<font color="#0000FF"><br>
function</font> Get_Data<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">access</font> ODBC_Command;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Column</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Finish</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Cursor_Disposition;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Null_As_Empty</b> : Boolean&nbsp; := True;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Block_Size</b>&nbsp;&nbsp;&nbsp; 
: Positive := Default_Block_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Wide_String;</tt></p>
</blockquote>
<p>The data of the specified column are read from the result of a command 
execution. The command is specified by the parameter <b>Command</b>. The row of 
the result set must be fetched first, using a call to <a href="#ODBC.API.Fetch">
Fetch</a>. When there is no row available End_Error is propagated. It is also 
propagated when the requested column value is NULL, unless suppressed by the 
parameter <b>Null_As_Empty</b>. The column in the result set is specified by the parameter <b>Column</b>. 
Note that some ODBC drivers might require accessing the result columns in their 
number order. When the cursor associated with the result set remains unclosed the command processing should be 
either continued using a new <a href="#ODBC.API.Fetch">Fetch</a> or finished 
calling <a href="#ODBC.API.Close_Cursor">Close_Cursor</a> explicitly. The 
parameter <b>Finish</b> determines whether <a href="#ODBC.API.Get_Data">Get_Data</a> 
should close the cursor. The type is defined as:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Cursor_Disposition
<font color="#0000FF">is</font> (Never, On_Error, On_No_Result, Always);</tt></p>
</blockquote>
<ul>
	<li><i>Never</i>, the cursor is never closed;</li>
	<li><i>On_Error</i>, the cursor is closed upon driver errors (Data_Error);</li>
	<li><i>On_No_Result</i>, the cursor is closed upon driver errors and NULL 
	data (Data_Error or End_Error);</li>
	<li><i>Always</i>, the cursor is always closed.</li>
</ul>
<p>Typically, the data from the columns of the last row are queried with the 
dispositions On_No_Result, On_No_Result...On_Error, On_No_Result...Always. The following result data types are supported:</p>
<ul>
	<li>SQLTINYINT</li>
	<li>SQLUTINYINT</li>
	<li>SQLSMALLINT</li>
	<li>SQLUSMALLINT</li>
	<li>SQLINTEGER</li>
	<li>SQLUINTEGER</li>
	<li>SQLBIGINT</li>
	<li>SQLUBIGINT</li>
	<li>SQLDOUBLE</li>
	<li>SQLGUID</li>
	<li>Time (from Ada.Calendar)</li>
	<li>String</li>
	<li>Wide_String</li>
</ul>
<p>Functions returning strings have additional parameters controlling memory 
allocation and treatment of NULL values. Note that some data bases do not support NULL values for some data types, 
these could for example return an empty string, and so the result of
<a href="#ODBC.API.Get_Data">Get_Data</a> will be an empty string rather than End_Error. 
The parameter <b>Null_As_Empty</b> additionally explicitly suppresses 
propagation of End_Error when the field is NULL. The parameter <b>Block_Size</b> specifies the character size in which 
string data are fetched. When the column value exceeds this size
<a href="#ODBC.API.Get_Data">Get_Data</a> first extracts all parts of the value and then 
assembles the result. See <a href="#ODBC.API.Prepare">Prepare</a> for sample 
code illustrating usage of
<a href="#ODBC.API.Get_Data">Get_Data</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Get_Data<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> ODBC_Command;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stream</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in 
out</font> Root_Stream_Type'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Column</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Finish</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Cursor_Disposition;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Null_As_Empty</b> : Boolean := True;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Block_Size</b>&nbsp;&nbsp;&nbsp; : Stream_Element_Count :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Default_Block_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is similar to the
<a href="#ODBC.API.Get_Data">Get_Data</a> returning a string with the difference 
that the pieces of string are written directly into the stream specified by the 
parameter <b>Stream</b>. The data are requested as a C char array (the target 
type is SQL_C_CHAR). Which is assumed equivalent to Stream_Element. The 
parameter <b>Block_Size</b> specifies the number of stream elements requested at 
a time. If the data length exceeds this number (excluding null terminator) the 
implementation extracts data in parts. For each part Write is called on <b>
Stream</b>. Note that the bounds of the data array are not written into the 
stream. The following code sample illustrates usage with a string stream (see 
<a href="http://www.dmitry-kazakov.de/ada/strings_edit.htm#Strings_Edit.Streams">
Strings_Edit.Streams</a>):</p>
<blockquote>
<p><tt>
<font color="#0000FF">declare</font><br>
&nbsp;&nbsp; Command : <font color="#0000FF">aliased</font> ODBC_Command (Connection'Access);<br>
&nbsp;&nbsp; Stream&nbsp; : String_Stream (<font color="#800000">100</font>);<br>
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp; Prepare<br>
&nbsp;&nbsp; (&nbsp; Command,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String'(&quot;<font color="#FF0000">SELECT * FROM 
test_table WHERE x1=10</font>&quot;)<br>
&nbsp;&nbsp; );<br>
&nbsp;&nbsp; Execute (Command);<br>
&nbsp;&nbsp; <font color="#0000FF">loop</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fetch (Command);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Get_Data (Command, Stream, <font color="#800000">
2</font>, Never); <font color="#008000">&nbsp; -- Write data into the stream</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put_Line (&quot;<font color="#FF0000">Column 2 =
</font>&quot; &amp; Get (Value)); <font color="#008000">-- Get stream contents</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Rewind (Stream); <font color="#008000">-- Erase 
data written into the stream</font><br>
&nbsp;&nbsp; <font color="#0000FF">end loop</font>;<br>
<font color="#0000FF">exception<br>
&nbsp;&nbsp; when</font> End_Error =&gt; <font color="#008000">-- No more rows</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">null</font>;<br>
<font color="#0000FF">end</font>;</tt></p>
</blockquote>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Get_Data<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> ODBC_Command;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Destination</b>&nbsp;&nbsp; : <font color="#0000FF">in out</font> String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> 
Integer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Column</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Finish</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Cursor_Disposition;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Null_As_Empty</b> : Boolean := True;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure places the string column data into the string <b>Destination</b> 
starting from the position indicated by <b>Pointer</b>. After successful 
completion <b>Pointer</b> is advanced to the first character following the data. 
Layout_Error is propagated when either <b>Pointer</b> is outside <b>Destination</b>'First..<b>Destination</b>'Last 
+ 1 or else there is no room in <b>Destination</b> for the column data.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_&lt;<i>attribute-name</i>&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
	<b>Command</b> : 
ODBC_Command<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; 
	<font color="#0000FF">return</font> &lt;<i>attribute-value</i>&gt;;<br>
	<font color="#0000FF">procedure</font> Set_&lt;<i>attribute-name</i>&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
	<b>Command</b> 
: <font color="#0000FF">in out</font> ODBC_Command;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>Value</b>&nbsp;&nbsp;&nbsp;: &lt;<i>attribute-value</i>&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These operations are used to get and set command attributes, e.g. Get_Access_Mode, Set_Access_Mode. The operation name follows the 
attribute name. Refer to SQL_ATTR_&lt;<i>attribute-name</i>&gt; for further 
information. Use_Error is propagated when the attribute is not 
supported by the driver, however for some drivers Data_Error may be propagated 
instead of Use_Error. The following table lists the functions:</p>
<TABLE border="5" cellpadding="3" cellspacing="0" style="border-left-width: 0px" id="table4">
  <TR>
    <TD bgcolor="#008080" valign="top"><FONT color="#FFFFFF"><B>Attribute name</B></FONT></TD>
    <TD bgcolor="#008080" align="center" valign="top"><b><font color="#FFFFFF">Result type</font></b></TD>
    <TD bgcolor="#008080" valign="top"><font color="#FFFFFF"><b>Attribute description</b></font></TD>
  </TR>
  <tr>
    <TD valign="top">
Async_Enable</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> if function called 
	with the specified statement is executed asynchronously</TD>
  </tr>
  <tr>
    <TD valign="top">
Concurrency</TD>
    <TD align="center" valign="top">SQL_CONCUR<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A bitmask that specifies the cursor concurrency support</TD>
  </tr>
  <tr>
    <TD valign="top">
Cursor_Scrollable</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> if cursor is 
	scrollable</TD>
  </tr>
  <tr>
    <TD valign="top">
Cursor_Sensitivity</TD>
    <TD align="center" valign="top">SQL_SENSITIVITY<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">Specifies whether cursors on the statement handle make 
	visible the changes made to a result set by another cursor</TD>
  </tr>
  <tr>
    <TD valign="top">
Cursor_Type</TD>
    <TD align="center" valign="top">SQL_CURSOR<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A value that specifies the cursor type</TD>
  </tr>
  <tr>
    <TD valign="top">
Enable_Auto_IPD</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> if automatic 
	population of the IPD is performed</TD>
  </tr>
  <tr>
    <TD valign="top">
Keyset_Size</TD>
    <TD align="center" valign="top">SQLULEN<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">The number of rows in the keyset for a keyset-driven cursor</TD>
  </tr>
  <tr>
    <TD valign="top">
Max_Length</TD>
    <TD align="center" valign="top">SQLULEN<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">The maximum amount of data that the driver returns from a 
	character or binary column</TD>
  </tr>
  <tr>
    <TD valign="top">
Max_Rows</TD>
    <TD align="center" valign="top">SQLULEN<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">The maximum number of rows to return to the application for 
	a SELECT statement. 0 indicates all rows to return</TD>
  </tr>
  <tr>
    <TD valign="top">
Metadata_ID</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><i><font color="#800000">true</font></i> if the string 
	argument of catalog functions are treated as identifiers</TD>
  </tr>
  <tr>
    <TD valign="top">
Noscan</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><font color="#800000"><i>true</i> </font>if the driver does 
	not scan SQL strings for escape sequences</TD>
  </tr>
  <tr>
    <TD valign="top">
Query_Timeout</TD>
    <TD align="center" valign="top">Duration</TD>
    <TD valign="top">Time to wait before returning to the application</TD>
  </tr>
  <tr>
    <TD valign="top">
Retrieve_Data</TD>
    <TD align="center" valign="top">Boolean</TD>
    <TD valign="top"><font color="#800000"><i>true</i></font> if fetching 
	retrieves data after it positions the cursor to the specified location</TD>
  </tr>
  <tr>
    <TD valign="top">
Row_Array_Size</TD>
    <TD align="center" valign="top">SQLULEN<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">The number of rows returned upon fetching</TD>
  </tr>
  <tr>
    <TD valign="top">
Row_Number</TD>
    <TD align="center" valign="top">SQLULEN<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">The number of the current row in the entire result set</TD>
  </tr>
  </TABLE>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_&lt;<i>record-field</i>&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: ODBC_Command;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Record_Number</b> : Positive := <font color="#800000">1</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> &lt;<i>field-value</i>&gt;;</tt></p>
</blockquote>
<p>These operations are used to get diagnostic record fields, e.g. 
Get_Message_Text. The operation name record field name. Refer to SQL_DIAG_&lt;<i>record-field</i>&gt; for further 
information. The parameter <b>Record_Number</b> indicates the record for which 
the field is requested. The following table lists the functions:</p>
<TABLE border="5" cellpadding="3" cellspacing="0" style="border-left-width: 0px">
  <TR>
    <TD bgcolor="#008080" valign="top"><font color="#FFFFFF"><b>Diagnostic field name</b></font></TD>
    <TD bgcolor="#008080" align="center" valign="top"><b><font color="#FFFFFF">Result type</font></b></TD>
    <TD bgcolor="#008080" valign="top"><font color="#FFFFFF"><b>Field description</b></font></TD>
  </TR>
  <tr>
    <TD valign="top">
Class_Origin</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">A string that indicates the document that defines the class 
	portion of the SQLSTATE value in this record</TD>
  </tr>
	<tr>
    <TD valign="top">
Column_Number</TD>
    <TD align="center" valign="top">SQLINTEGER<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">The value that represents the column number in the result 
	set or the parameter number in the set of parameters</TD>
  </tr>
	<tr>
    <TD valign="top">
Connection_Name</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">The name of the connection that the diagnostic record 
	relates to</TD>
  </tr>
  <tr>
    <TD valign="top">
Cursor_Row_Count</TD>
    <TD align="center" valign="top">SQLLEN<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">This field contains the count of rows in the cursor</TD>
  </tr>
  <tr>
    <TD valign="top">
Dynamic_Function</TD>
    <TD align="center" valign="top">String,<br>
	Wide_String</TD>
    <TD valign="top">Describes the SQL statement that the underlying function 
	executed</TD>
  </tr>
  <tr>
    <TD valign="top">
Message_Text</TD>
    <TD align="center" valign="top">String,<br>
	Wide_String</TD>
    <TD valign="top">An informational message on the error or warning</TD>
  </tr>
	<tr>
    <TD valign="top">
Native</TD>
    <TD align="center" valign="top">SQLINTEGER<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">A driver/data source-specific native error code. If there 
	is no native error code, the driver returns 0</TD>
  </tr>
  <tr>
    <TD valign="top">
Number</TD>
    <TD align="center" valign="top">SQLLEN<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">The number of status records that are available</TD>
  </tr>
  <tr>
    <TD valign="top">
Returncode</TD>
    <TD align="center" valign="top">SQLRETURN</TD>
    <TD valign="top">Return code returned by the function</TD>
  </tr>
	<tr>
    <TD valign="top">
Row_Count</TD>
    <TD align="center" valign="top">SQLLEN<sup><a href="#odbc_attribute_footnote_1">1</a></sup></TD>
    <TD valign="top">The number of rows affected by an insert, delete, or update</TD>
  </tr>
	<tr>
    <TD valign="top">
Server_Name</TD>
    <TD align="center" valign="top">String,<br>
	Wide_String</TD>
    <TD valign="top">A string that indicates the server name that the diagnostic 
	record relates to</TD>
  </tr>
	<tr>
    <TD valign="top">
SQLSTATE</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">A five-character SQLSTATE diagnostic code. For more 
	information</TD>
  </tr>
	<tr>
    <TD valign="top">
Subclass_Origin</TD>
    <TD align="center" valign="top">String</TD>
    <TD valign="top">Identifies the defining portion of the subclass portion of 
	the SQLSTATE code</TD>
  </tr>
  </TABLE>
<blockquote>
<p><tt>
<font color="#0000FF"><a name="ODBC.API.Get_Tables"></a>procedure</font> 
Get_Tables<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> ODBC_Command;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Table_Type</b> : String := &quot;<font color="#FF0000">TABLE</font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure enumerates tables. The effect is a result set containing a row 
per table. The result set can be navigated using usual means. The columns of the 
result are described in the driver manager documentation (see SQLTables). The 
parameter <b>Command</b> is the scratch command to use by the operation. The 
parameter <b>Table_Type</b> specifies the type of tables to enumerate. It is a 
list of comma separated values, possibly put in quotation marks each. The 
default value is used to enumerate only normal tables.
<a href="#ODBC.API.Row_Count">Row_Count</a> can be used immediately after
<a href="#ODBC.API.Get_Tables">Get_Tables</a> in order to determine the number 
of rows, which is same the number of tables found.</p>
<blockquote>
<p><tt>
<font color="#0000FF">function</font> Get_Type_Info<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b>&nbsp;&nbsp; 
: <font color="#0000FF">access</font> ODBC_Command;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data_Type</b> 
: SQL_DATA_TYPE<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Type_Info;</tt></p>
</blockquote>
<p>This function returns a description of the type specified by the parameter <b>
Data_Type</b>. The parameter <b>Command</b> specifies a scratch command to use. The result of the function has the type declared as follows:</p>
<blockquote>
<p><tt>
<font color="#0000FF">type</font> Type_Info<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Type_Name_Length&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Natural;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Literal_Prefix_Length&nbsp;&nbsp;&nbsp; 
: Natural;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Literal_Suffix_Length&nbsp;&nbsp;&nbsp; 
: Natural;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Create_Parameters_Length : Natural;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Local_Name_Length&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Natural<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is<br>
record</font><br>
&nbsp;&nbsp; Data_Type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
SQL_DATA_TYPE;<br>
&nbsp;&nbsp; Column_Size&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : SQLINTEGER;<br>
&nbsp;&nbsp; Searchable&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
SQL_COLUMN_SEARCHABLE;<br>
&nbsp;&nbsp; Nullable&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Boolean;<br>
&nbsp;&nbsp; Case_Sensitive&nbsp;&nbsp;&nbsp;&nbsp; : Boolean;<br>
&nbsp;&nbsp; Unsigned_Attribute : Boolean;<br>
&nbsp;&nbsp; Fixed_Prec_Scale&nbsp;&nbsp; : Boolean;<br>
&nbsp;&nbsp; Auto_Unique_Value&nbsp; : Boolean;<br>
&nbsp;&nbsp; Type_Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
String (<font color="#800000">1</font>..Type_Name_Length);<br>
&nbsp;&nbsp; Local_Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : String 
(<font color="#800000">1</font>..Local_Name_Length);<br>
&nbsp;&nbsp; Literal_Prefix&nbsp;&nbsp;&nbsp;&nbsp; : String (<font color="#800000">1</font>..Literal_Prefix_Length);<br>
&nbsp;&nbsp; Literal_Suffix&nbsp;&nbsp;&nbsp;&nbsp; : String (<font color="#800000">1</font>..Literal_Suffix_Length);<br>
&nbsp;&nbsp; Create_Parameters&nbsp; : String (<font color="#800000">1</font>..Create_Parameters_Length);<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>The fields of the record describe the type. Note that the type name may vary, 
i.e. be different from the name of the <b>Data_Type</b> constant. E.g. 
SQL_TINYINT may be named 'BYTE' etc. The choice depends on the driver. Note all 
data types defined by SQL_DATA_TYPE in the package <a href="#ODBC.SQLTypes">
ODBC.SQLTypes</a> are actually supported by the driver. Constraint_Error is 
propagated when the driver does not support the data type specified.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="ODBC.API.Num_Params"></a>function</font> Num_Params (<b>Command</b> : 
ODBC_Command) <font color="#0000FF">
return</font> Natural;</tt></p>
</blockquote>
<p>This function returns the number of parameters of a prepared command. The 
parameters are specified using ? mark. These parameters are bound to values 
using <a href="#ODBC.API.Bind_Parameter">Bind_Parameter</a>. See also
<a href="#ODBC.API.Describe_Param">Describe_Param</a> for parameter description.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="ODBC.API.Num_Result_Cols"></a>function</font> 
Num_Result_Cols (<b>Command</b> : 
ODBC_Command) <font color="#0000FF">
return</font> Natural;</tt></p>
</blockquote>
<p>This function returns the number of columns in the result set of a prepared 
command.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="ODBC.API.Prepare"></a>procedure</font> 
Prepare<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b> :
<font color="#0000FF">in out</font> ODBC_Command;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Request</b> : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">procedure</font> Prepare<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b> :
<font color="#0000FF">in out</font> ODBC_Command;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Request</b> : Wide_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures prepare an SQL statement which can be then executed several 
times. The parameter <b>Request</b> specifies the statement to prepare in <b>
Command</b>. 
Execution of a prepared statement is more efficient than direct execution. Both 
are done by calling to <a href="#ODBC.API.Execute">Execute</a>. (<a href="#ODBC.API.Execute">Execute</a> 
without SQL statement parameter executes a prepared command. <a href="#ODBC.API.Execute">Execute</a> 
with SQL statement parameter does direct execution) Carefully observe 
that prepared statements might get lost between transactions. A prepared 
statement may have parameters denoted using the ? mark in the statement's text. These parameters 
are 
bound to values using <a href="#ODBC.API.Bind_Parameter">Bind_Parameter </a>before calling to
<a href="#ODBC.API.Execute">Execute</a>. This allows statements to have varying 
parameters. Bound parameters are especially useful for passing binary data, 
which otherwise would require complex SQL escaping syntax if specified as 
literals in the statement text. The statement columns of the result set also can be bound using
<a href="#ODBC.API.Bind_Result">Bind_Result</a>. The following sample 
illustrates use of a prepared statement with parameters bound:</p>
<blockquote>
	<p><tt><font color="#0000FF">declare<br>
	</font>&nbsp;&nbsp; Command&nbsp; : <font color="#0000FF">aliased</font> 
	ODBC_Command (Connection'Access);<br>
&nbsp;&nbsp; ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">
	aliased</font> SQLINTEGER_Parameter;<br>
&nbsp;&nbsp; Customer : <font color="#0000FF">aliased</font> String_Parameter (<font color="#800000">100</font>);<font color="#0000FF"><br>
	begin</font><br>
&nbsp;&nbsp; Prepare<br>
&nbsp;&nbsp; (&nbsp; Command,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String'(&quot;<font color="#FF0000">INSERT INTO 
	my_table VALUES (?,?)</font>&quot;)<br>
&nbsp;&nbsp; );<br>
&nbsp;&nbsp; Bind_Parameter (Command, <font color="#800000">1</font>, ID'Access);<br>
&nbsp;&nbsp; Bind_Parameter (Command, <font color="#800000">2</font>, 
	Customer'Access);<br>
&nbsp;&nbsp; ID.Value := <font color="#800000">24</font>;<br>
&nbsp;&nbsp; Set (Customer, String'(&quot;<font color="#FF0000">John</font>&quot;);<br>
&nbsp;&nbsp; Execute (Command);<br>
&nbsp;&nbsp; ID.Value := <font color="#800000">25</font>;<br>
&nbsp;&nbsp; Set (Customer, String'(&quot;<font color="#FF0000">Judy</font>&quot;);<br>
&nbsp;&nbsp; Execute (Command);<font color="#0000FF"><br>
	end</font>;</tt></p>
</blockquote>
<p>The next sample illustrates getting results of a prepared statement using 
a variable bound to the first column and an explicit call to <a href="#ODBC.API.Get_Data">Get_Data</a> 
for the second column:</p>
<blockquote>
	<p><tt><font color="#0000FF">declare</font><br>
&nbsp;&nbsp; Command : <font color="#0000FF">aliased</font> ODBC_Command (Connection'Access);<br>
&nbsp;&nbsp; ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">aliased</font> 
	SQLINTEGER;<font color="#0000FF"><br>
	begin</font><br>
&nbsp;&nbsp; Execute (Command, String'(&quot;<font color="#FF0000">SELECT * FROM 
	my_table</font>&quot;));<br>
&nbsp;&nbsp; Bind_Result (Command, 1, ID'Access);<br>
	<font color="#0000FF">&nbsp;&nbsp; loop<br>
	</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fetch (Command);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put_Line<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; &quot;<font color="#FF0000">ID:</font>&quot; &amp; 
	SQLINTEGER'Image (ID)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&nbsp; &quot;<font color="#FF0000"> Name:</font>&quot; &amp; 
	Get_Data (Command'Access, 2, On_No_Result)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp; <font color="#0000FF">end loop</font>;<font color="#0000FF"><br>
	exception<br>
&nbsp;&nbsp; when</font> End_Error =&gt; <font color="#008000">-- No more rows</font><font color="#0000FF"><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; null</font>;<font color="#0000FF"><br>
	end</font>;</tt></p>
</blockquote>
<p align="left">An <a href="#ODBC.API.ODBC_Command">ODBC_Command</a> object can 
be reused by preparing another SQL statement in it or using it with operations 
requiring a scratch command, e.g. <a href="#ODBC.API.Get_Tables">Get_Tables</a> 
etc.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="ODBC.API.Row_Count"></a>function</font> 
Row_Count<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b> 
: ODBC_Command<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Natural;</tt></p>
</blockquote>
<p>This function returns the number of rows affected by the previously executed 
command such as INSERT, DELETE etc.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Pos<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Command</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> ODBC_Command;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Row</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Operation</b> : SQL_OPERATION;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Locking</b>&nbsp;&nbsp; : SQL_LOCKTYPE<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes position in the row set. <b>Row</b> specifies the row, 
when 0 operation applies to all rows. <b>Operation</b> is the operation to 
perform. <b>Locking</b> specifies how to lock the row after performing the 
operation.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Table_Exists<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Command&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">access</font> ODBC_Command;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Table_Name : 
String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;<font color="#0000FF"><br>
function</font> Table_Exists<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Command&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">access</font> ODBC_Command;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Table_Name : 
Wide_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>These functions return <i><font color="#800000">true</font></i> if a table 
with the specified name exists in the data base. The parameter <b>Command</b> is 
scratch command to use in the operation. Note that the driver may consider table 
names case-sensitive in some cases and case-insensitive in others. When 
searching for a table using this function, the table name must be in the canonic 
form, otherwise the driver may fail finding it.</p>

<h4><a name="15.6.7"></a>15.6.7. Binding parameters</h4>
<p><a name="ODBC.Bound_Parameters"></a>The package
<a href="#ODBC.Bound_Parameters">ODBC.Bound_Parameters</a> defines types used to 
pass values to prepared commands. Parameters of fixed-size values are bound 
using an object which type is declared in the package as follows:</p>

<blockquote>
<p><tt><font color="#0000FF">type</font> &lt;<i>parameter-type</i>&gt;_Parameter
<font color="#0000FF">is record</font><br>
&nbsp;&nbsp; Size&nbsp; : <font color="#0000FF">aliased</font> SQLLEN;<br>
&nbsp;&nbsp; Value : <font color="#0000FF">aliased</font> &lt;<i>parameter-type</i>&gt;;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>For example, for binding an SQLINTEGER a pointer to a SQLINTEGER_Parameter is 
passed to <a href="#ODBC.API.Bind_Parameter">Bind_Parameter</a>. The field <i>Value</i> 
must be set to the desired value before a call to <a href="#ODBC.API.Execute">
Execute</a>. The following data types (defined in the package
<a href="#ODBC.SQLTypes">ODBC.SQLTypes</a>) are supported:</p>
<ul>
	<li>SQLTINYINT</li>
	<li>SQLUTINYINT</li>
	<li>SQLSMALLINT</li>
	<li>SQLUSMALLINT</li>
	<li>SQLINTEGER</li>
	<li>SQLUINTEGER</li>
	<li>SQLBIGINT</li>
	<li>SQLUBIGINT</li>
	<li>SQLDOUBLE</li>
	<li>SQLGUID</li>
	<li>SQL_TIMESTAMP_STRUCT</li>
	<li>String</li>
	<li>Wide_String</li>
</ul>
<p>Parameters for string types are declared with the discriminant <b>Length</b> 
specifying the maxumum length of the contained string value:</p>
<blockquote>
	<p><tt><font color="#0000FF">type</font> String_Parameter (Length : size_t)
<font color="#0000FF">is record</font><br>
&nbsp;&nbsp; Size&nbsp; : <font color="#0000FF">aliased</font> SQLLEN := 
<font color="#800000">0</font>;<br>
&nbsp;&nbsp; Value : <font color="#0000FF">aliased</font> char_array 
(<font color="#800000">0</font>..Length);<br>
<font color="#0000FF">end record</font>;<br>
	<font color="#0000FF">type</font> Wide_String_Parameter (Length : size_t)
<font color="#0000FF">is record</font><br>
&nbsp;&nbsp; Size&nbsp; : <font color="#0000FF">aliased</font> SQLLEN := 
<font color="#800000">0</font>;<br>
&nbsp;&nbsp; Value : <font color="#0000FF">aliased</font> SQLWCHAR_Array 
(<font color="#800000">0</font>..Length);<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>For these types the following functions are defined:</p>

<blockquote>
<p><tt><font color="#0000FF">function</font> Create (<b>Value</b> : &lt;<i>parameter-type</i>&gt;)<br>
&nbsp;<font color="#0000FF">&nbsp; return</font> &lt;<i>parameter-type</i>&gt;_Parameter;</tt></p>
</blockquote>
<p>These functions return parameter type initialized by <b>Value</b>. For 
example, here is how bound parameters can be initialized:</p>
<blockquote>
	<p><tt><font color="#0000FF">declare<br>
	</font>&nbsp;&nbsp; Command&nbsp; : <font color="#0000FF">aliased</font> 
	ODBC_Command (Connection'Access);<br>
&nbsp;&nbsp; ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">
	aliased</font> SQLINTEGER_Parameter := Create (<font color="#800000">24</font>);<br>
&nbsp;&nbsp; Customer : <font color="#0000FF">aliased</font> String_Parameter&nbsp;&nbsp;&nbsp;&nbsp; 
	:= Create (&quot;<font color="#FF0000">John</font>&quot;);<font color="#0000FF"><br>
	begin</font><br>
&nbsp;&nbsp; Prepare<br>
&nbsp;&nbsp; (&nbsp; Command,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String'(&quot;<font color="#FF0000">INSERT INTO 
	my_table VALUES (?,?)</font>&quot;)<br>
&nbsp;&nbsp; );<br>
&nbsp;&nbsp; Bind_Parameter (Command, <font color="#800000">1</font>, ID'Access);<br>
&nbsp;&nbsp; Bind_Parameter (Command, <font color="#800000">2</font>, 
	Customer'Access);<br>
&nbsp;&nbsp; Execute (Command);<br>
	<font color="#0000FF">end</font>;</tt></p>
</blockquote>
<p>For the type SQL_TIMESTAMP_STRUCT_Parameter the following operation is 
defined:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Parameter</b> 
: <font color="#0000FF">in out</font> SQL_TIMESTAMP_STRUCT_Parameter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp;&nbsp;&nbsp; : Time<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the <b>Value</b> field of <b>Parameter</b> to a value 
corresponding to the time specified by the parameter <b>Value</b>.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Parameter</b> 
: <font color="#0000FF">in out</font> String_Parameter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp;&nbsp;&nbsp; : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the <b>Value</b> field of <b>Parameter</b> to a value 
corresponding to <b>Value</b>. Constraint_Error is propagated when <b>Value</b> 
is larger than the discriminant Length.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Parameter</b> 
: <font color="#0000FF">in out</font> Wide_String_Parameter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp;&nbsp;&nbsp; : Wide_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the <b>Value</b> field of <b>Parameter</b> to a value 
corresponding to <b>Value</b>. Constraint_Error is propagated when <b>Value</b> 
is larger than Length.</p>

<p align="right">
  <A name="15.7"></A><a href="#15.6"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#16"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>15.7. GNUTLS bindings</H3>

<p><a name="GNUTLS"></a>The package GNUTLS provides bindings to the
<a href="http://www.gnutls.org/">GNUTLS</a> library. The bindings are semi-thick. 
Where possible the objects requiring initialization and finalization are wrapped 
into controlled types. Thus there is no explicit calls to functions like gnutls_init because they are called automatically. The return codes are handled 
by the bindings and a TLS_Error exception is propagated with the corresponding 
message text. The original error code can be obtained from the exception 
occurrence using the function:</p>

<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Error_Code (<b>Error</b> : 
Exception_Occurrence) <font color="#0000FF">return</font> int;</tt></p>
</blockquote>
<p>The naming of bound subprograms and data types follows the rules:</p>
<ul>
	<li>The prefix <i>gnutls_</i> is removed, thus, for example, <i>
	Auth_Get_Type</i> is used instead of original function name <i>gnutls_auth_server_get_type</i>;</li>
	<li>Where possible, alternative variants of calls having numeric suffixex <i>
	_2</i>, <i>_3</i> etc are overloaded with the suffix removed. Thus <i>
	Certificate_Server_Set_OpenPGP_Key_File</i> is used instead of <i>
	gnutls_certificate_set_openpgp_key_file2</i>;</li>
	<li>Hungarian notation suffixes, like <i>_t </i>are consistently removed. 
	Thus, <i>Certificate_Credentials</i>, not <i>gnutls_certificate_credentials_t</i>.</li>
</ul>

<p>Where GNUTLS supports a user-defined void * data parameter, a controlled type 
is used with an abstract primitive operation instead of callbacks, i.e. the 
visitor pattern. Where GNUTLS does not have user data parameter, a generic 
package is used with a formal procedure used as a callback.</p>
<p>Where possible the parameters of the type <i>Datum_t</i> are replaced with 
Stream_Element_Array or String as appropriate.</p>

<hr>
<p align="right">
<a name="16"></a><a href="#15.6"><IMG src="prev.gif" alt="[Back]" width="29" height="29"></a><A href="#20"><IMG src="index.gif"
 alt="[TOC]" width="29" height="29"></A><a href="#16.1"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>16. Networking</H2>
<p align="right">
  <A name="16.1"></A><a href="#16"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#16.2"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>16.1. Multiple TCP connections servers</H3>

<p><a name="multiple_GNAT.Sockets.Servers"></a>A typical server implementation usually listens a socket for incoming 
connections. When a connection is accepted, a separate task is started to handle 
the connection. The task reads the socket in a blocking manner. This is a very 
simple, easy to implement and relatively efficient design when connections are 
few. The problems arise with large number of connections. The number of tasks the 
OS can handle is limited. Furthermore, with a large number of tasks, switching 
them would consume considerable resources. An alternative would be a single task 
handling a set of sockets, one socket per connection. The available number of sockets is considerably greater than the number of tasks. However, 
the design of 
a server working in this way is sufficiently more difficult because differently 
to blocking I/O, the server becomes driven by data. A connection would process as 
much data as available, remember its state and wait until more data become 
available. In essence the server must implement some light-weight version of 
multitasking. The described below set of packages is provided to ease design of 
such servers targeting heavy duty or small embedded solutions.</p>

<h4><a name="16.1.1"></a>16.1.1. Multiple connections servers</h4>
<p><a name="GNAT.Sockets.Server"></a>The package
<a href="#GNAT.Sockets.Server">GNAT.Sockets.Server</a> provides basic tools for 
implementation of multiple connection servers and clients. The implementation is based on 
GNAT sockets.</p>
<p><u><b>Connections server</b></u>.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Connections_Server"></a>type</font> 
Connections_Server<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Factory : <font color="#0000FF">access</font> 
Connections_Factory'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Port&nbsp;&nbsp;&nbsp; : Port_Type<br>
&nbsp;
&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is new </font>Ada.Finalization.Limited_Controlled
<font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Connections_Server_Ptr <font color="#0000FF">
is access all </font>Connections_Server'Class;<br>
&nbsp;</tt></p>
</blockquote>
<p>The type <a href="#GNAT.Sockets.Server.Connections_Server">Connections_Server</a> is the type 
a connections server. The discriminants are:</p>
<ul>
	<li><i>Factory</i> is the <a href="#GNAT.Sockets.Server.Connections_Factory">factory</a> 
	object used to create client <a href="#GNAT.Sockets.Server.Connection">connection objects</a>;</li>
	<li><i>Port</i> is the port the server will listen to. If zero server does 
	not listen any port.</li>
</ul>
<p>The&nbsp;server starts one task which does all socket I/O and services 
connected client requests. See also 
<a href="#GNAT.Sockets.Server.Pooled">GNAT.Sockets.Server.Pooled</a> package 
which provides a server backed by a pool of worker tasks. Note also that a 
server may run any TCP/IP-based protocols. It is up to the
<a href="#GNAT.Sockets.Server.Connection">connection objec</a>t it implement the 
protocol. The server can handle both incoming and outgoing connections. The only 
the latter is intended <i>Port</i> can be specified as 0.</p>
<p>The following primitive operations are defined on <a href="#GNAT.Sockets.Server.Connections_Server">Connections_Server</a>:</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Connect"></a>
procedure</font> Connect<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Listener</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Connections_Server;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Client</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Connection_Ptr;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Host</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 
: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Port</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; 
: Port_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Max_Connect_No</b> : Positive := Positive'Last;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<b>Overlapped</b>&nbsp;&nbsp;&nbsp;&nbsp; : Stream_Element_Count :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Stream_Element_Count'Last<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to make <b>Listener</b> connecting to a remove host 
and thus acting as a client. <b>Client</b> is a newly created <a href="#GNAT.Sockets.Server.Connection">
connection object</a> which will handle the connection when it becomes 
established. The server manages the object (see also
<a href="#memory-management-of-connection-objects">memory management of 
connection objects</a>). In particular the object will be 
finalized and deallocated by the server. <b>Host</b> is the name or IP address 
of the remote host. <b>Port</b> is the port to connect to. <b>Max_Connect_No</b> 
is the maximum number of consecutive attempts to connect. <b>Overlapped</b> is 
the amount of overlapped read to use (see
<a href="#GNAT.Sockets.Server.Set_Overlapped_Size">Set_Overlapped_Size</a>). The 
default value enables full-duplex exchange which is customary for clients. The 
procedure only initiates connecting, which is dealt asynchronously. Once 
connection is established <a href="#GNAT.Sockets.Server.Connected">Connected</a> 
is called, as usual. When connection is lost
<a href="#GNAT.Sockets.Server.Disconnected">Disconnected</a> is called. Note 
that differently to incoming connections, for an outgoing connection like this, 
the server attempts (<b>Max_Connect_No</b> times) to reconnect to the host if the connection is lost. In order 
to prevent this behavior <a href="#GNAT.Sockets.Server.Disconnected">
Disconnected</a> may propagate Connection_Error exception. One can use 
<a href="#GNAT.Sockets.Server.Shutdown">Shutdown</a> 
as well. Host_Error is propagated on errors resolving remove host name. Socket_Error 
is propagated on socket errors.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Connected_Server"></a>procedure</font> 
Connected<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Listener</b> :
<font color="#0000FF">in out</font> Connections_Server;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Client</b>&nbsp;&nbsp; : <font color="#0000FF">in out</font> Connection'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to notify the server <b>Listener</b> that the client 
is being connected. It is called after <b>Client</b>'s 
<a href="#GNAT.Sockets.Server.Connected">Connected</a>. The default implementation 
does nothing. The implementation may propagate Connection_Error 
to refuse connection.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Disconnected"></a>procedure</font> Disconnected<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Listener</b> :
<font color="#0000FF">in out</font> Connections_Server;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Client</b>&nbsp;&nbsp; : <font color="#0000FF">in out</font> Connection'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to notify the server <b>Listener</b> that the client 
is being disconnected. It is called before <b>Client</b>'s 
<a href="#GNAT.Sockets.Server.Disconnected_Client">Disconnected</a> operation is 
called. The implementation removes the client from the list of 
clients postponed for service. If overridden the new implementation should call 
the parent's one. The implementation may propagate Connection_Error 
to prevent further connection attempts for outgoing connections.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Finalize (<b>Listener</b> :
<font color="#0000FF">in out</font>  
Connections_Server);</tt></p>
</blockquote>
<p>This procedure is called upon object destruction. It closes all active 
connections and frees all other resources. When the derived type overrides this 
procedure it shall call it from its implementation.</p>

<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Clients_Count (<b>Listener</b> 
: Connections_Server)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Natural;</tt></p>
</blockquote>
<p>This function returns the number of clients currently connected to the server
<b>Listener</b>.</p>

<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Server_Address (<b>Listener</b> 
: Connections_Server)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Sock_Addr_Type;</tt></p>
</blockquote>
<p>This function is called before the server starts listening its socket. The 
result is the address to listen. The default implementation returns an address 
of the AF INET family with any address the host has and the port taken from the
<b>Listener</b>'s discriminant Port. It can be overridden in order to limit the 
addresses listened.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize (<b>Listener</b> :
<font color="#0000FF">in out</font>  
Connections_Server);</tt></p>
</blockquote>
<p>This procedure is called upon object construction. It closes all active 
connections and frees all other resources. When the derived type overrides this 
procedure it shall call it from its implementation.</p>

<blockquote>
<p><tt><font color="#0000FF">function</font> Is_Unblock_Send_Queued (<b>Listener</b> 
: Connections_Server)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if a request 
to unblock send is queued (see <a href="#GNAT.Sockets.Server.Unblock_Send">Unblock_Send</a>).</p>

<p><u><b>Connection objects factory</b></u>.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Connections_Factory"></a>type</font> 
Connections_Factory<font color="#0000FF"> is abstract<br>
&nbsp;&nbsp; new </font>Ada.Finalization.Limited_Controlled
<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The type <a href="#GNAT.Sockets.Server.Connections_Factory">Connections_Factory</a> is the type 
of a factory object that the server uses to create connection objects. The following 
primitive operations defined on the factory:</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Create"></a>function</font> 
Create<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b>&nbsp; :
<font color="#0000FF">access</font> Connections_Factory;<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Listener</b> :
<font color="#0000FF">access</font>  
Connections_Server;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Sock_Addr_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Connection_Ptr;</tt></p>
</blockquote>
<p>This function is called when the server is about to accept an incoming 
connection from a client. The implementation may refuse connection in which case 
it returns <i><font color="#0000FF">null</font></i>. When connection is accepted 
the implementation allocates a new <a href="#GNAT.Sockets.Server.Connection">
connection object</a> and returns a pointer to it. After this it is the server's responsibility to free the object. Thus there is no need to care about 
the objects returned from <a href="#GNAT.Sockets.Server.Create">Create</a>, they will 
be freed automatically (see also
<a href="#memory-management-of-connection-objects">memory management of 
connection objects</a>). The implementation may deploy client filtering based on 
the address <b>From</b> and/or the number of active connections. The default 
implementation returns <i><font color="#0000FF">null</font></i>.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Get_IO_Timeout"></a>function</font> 
Get_IO_Timeout (<b>Factory</b> : Connections_Factory)<br>
<font color="#0000FF">&nbsp;&nbsp; return</font> Duration;</tt></p>
</blockquote>
<p>When the connections server waits for a socket to become readable or writable 
this value specifies the waiting timeout. Upon the timeout expiration the server re-enters the 
waiting. Some actions may require timeout expiration if there is no active 
socket I/O. For example enabling polling of the sockets for being writable is 
such an action. The default value of 20 ms is returned by this function, which can be 
overridden in order to change it.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Get_Polling_Timeout"></a>function</font> 
Get_Polling_Timeout (<b>Factory</b> : Connections_Factory)<br>
<font color="#0000FF">&nbsp;&nbsp; return</font> Duration;</tt></p>
</blockquote>
<p>The connections server stops polling a socket for being writable for no 
longer than the value returned by this function. The server stops polling the 
socket for being writable when there is nothing to send in order to reduce 
overhead. The polling is automatically resumed when some data are sent. This is 
normally happens in response to some data sent from by the client. In some cases 
socket must be unblocked regardless the client. The value returned by this 
function specifies the duration after which all sockets are unblocked. If there is still nothing to 
send they will be blocked again. The default implementation returns 0.5 s. Note 
that in absence of socket I/O, unblocking cannot happen earlier than I/O timeout 
expiration as defined by <a href="#GNAT.Sockets.Server.Get_IO_Timeout">Get_IO_Timeout</a>. This 
function can be overridden in order to change the value.</p>

<blockquote>
<p><tt><font color="#0000FF">function</font> 
Is_Trace_Received_On<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Factory</b> : Connections_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Encoded</b> 
: IO_Tracing_Mode<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )<font color="#0000FF">&nbsp; return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if tracing of 
received encoded/ciphered or plain data is enabled. See <a href="#GNAT.Sockets.Server.Trace_On">Trace_On</a>. 
The parameter <b>Encoded</b> 
specifies the content type to query tracing. It has the type
<a href="#GNAT.Sockets.Server.IO_Tracing_Mode">IO_Tracing_Mode</a>:</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.IO_Tracing_Mode"></a>
type</font> 
IO_Tracing_Mode <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Trace_None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Trace_Encoded,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Trace_Any,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Trace_Decoded<br>
&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The meaning of the values is as follows:</p>
<ul>
	<li><i>Trace_None</i> specifies no tracing;</li>
	<li><i>Trace_Encoded</i> specifies tracing of encoded or ciphered content;</li>
	<li><i>Trace_Any</i> specifies any content tracing,</li>
	<li><i>Trace_Decoded</i> specifiesp plain content tracing.</li>
</ul>

<blockquote>
<p><tt><font color="#0000FF">function</font> 
Is_Trace_Sent_On<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Factory</b> : 
Connections_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Encoded</b> 
: IO_Tracing_Mode<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )<font color="#0000FF">&nbsp; 
return</font> 
Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if tracing of 
sent data is enabled. The parameter <b>Encoded</b> 
specifies the content type to query tracing. It has the type
<a href="#GNAT.Sockets.Server.IO_Tracing_Mode">IO_Tracing_Mode</a>. See <a href="#GNAT.Sockets.Server.Trace_On">Trace_On</a>.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Trace"></a>procedure</font> 
Trace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b> : <font color="#0000FF">
in out</font> Connections_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Message</b> : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is used for tracing.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Trace_Error"></a>procedure</font> 
Trace_Error<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b>&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">in out</font> Connections_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Context</b>&nbsp;&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Occurrence</b> : Exception_Occurrence<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when an unanticipated exception is caught. <b>
Context</b> is a string describing the context where the exception occurred. <b>
Occurrence</b> is the exception occurrence. The default implementation uses
<a href="#GNAT.Sockets.Server.Trace">Trace</a> to report exception information.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Trace_On"></a>procedure</font> 
Trace_On<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Factory</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">in out</font> Connections_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Received&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </b> &nbsp;: Boolean := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Sent</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Boolean := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Encoded_Received</b> : Boolean := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Encoded_Sent</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure enables tracing into the standard output. The parameters <b>
Received</b> and <b>Sent</b> specify whether plain incoming and outgoing data 
should be traced as well. <b>
Encoded_Received</b> and <b>
Encoded_Sent</b> do whether encoded/ciphered incoming and outgoing data 
should be traced as well.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Trace_On<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Factory</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">in out</font> Connections_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Received&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </b> &nbsp;: Boolean := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Sent</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Boolean := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Encoded_Received</b> : Boolean := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Encoded_Sent</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure enables tracing into the specified file. When there is already 
trace file open, it is closed first. This procedure propagates exceptions upon 
errors on file closing and opening. The parameters <b>Received</b> and <b>Sent</b> 
specify whether the incoming and outgoing data should be traced as well. <b>
Encoded_Received</b> and <b>
Encoded_Sent</b> do whether encoded/ciphered incoming and outgoing data 
should be traced as well.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Trace_Off"></a>procedure</font> 
Trace_Off (<b>Factory</b> :
<font color="#0000FF">in out</font> Connections_Factory);</tt></p>
</blockquote>
<p>This procedure disables all tracing.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Trace_Received"></a>procedure</font> 
Trace_Received<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Factory</b>&nbsp;:
<font color="#0000FF">in out</font> Connections_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Client</b>&nbsp;&nbsp;: Connection'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp;&nbsp;: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp; 
: Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Encoded</b> : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to trace data received for a client. The data 
received are <b>Data</b> (<b>From</b>..<b>To</b>). Tracing is enabled or 
disabled by the <b>Received</b> parameter of
<a href="#GNAT.Sockets.Server.Trace_On">Trace_On</a>. <b>Encoded</b> is
<font color="#800000"><i>true</i></font> when <b>Data</b> contains encoded or 
ciphered data. The default 
implementation uses <a href="#GNAT.Sockets.Server.Trace">Trace</a> to report 
received data.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Trace_Sending"></a>procedure</font> 
Trace_Sending<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Factory</b>&nbsp;:
<font color="#0000FF">in out</font> Connections_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Client</b>&nbsp;&nbsp;: Connection'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Enabled</b> : Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reason</b>&nbsp; : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to trace enabling and disabling polling the client's 
socket. The parameter <b>Enabled</b> is <font color="#800000"><i>true</i></font> 
when polling is enabled and <i><font color="#800000">false</font></i> when 
disabled. <b>Reason</b> is the text describing the reason of enabling or 
disabling polling. When there output buffer becomes empty, polling the socket for being 
writable is stopped in order to reduce system load. When output buffer becomes 
written, polling is started again. Tracing is enabled or disabled by the <b>Sent</b> 
parameter of <a href="#GNAT.Sockets.Server.Trace_On">Trace_On</a>. The default 
implementation uses <a href="#GNAT.Sockets.Server.Trace">Trace</a> to report 
sent data.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Trace_Sent"></a>procedure</font> 
Trace_Sent<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Factory</b>&nbsp;:
<font color="#0000FF">in out</font> Connections_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Client</b>&nbsp;&nbsp;: Connection'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp;&nbsp;: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp; 
: Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Encoded</b> : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to trace data sent to a client. The data sent are <b>
Data</b> (<b>From</b>..<b>To</b>). Tracing is enabled or disabled by the <b>Sent</b> 
parameter of <a href="#GNAT.Sockets.Server.Trace_On">Trace_On</a>. <b>Encoded</b> 
is <font color="#800000"><i>true</i></font> when <b>Data</b> contains encoded or 
ciphered data.. The default 
implementation uses <a href="#GNAT.Sockets.Server.Trace">Trace</a> to report 
sent data.</p>

<blockquote>
<p><tt>Connection_Error : <font color="#0000FF">exception</font>;</tt></p>
</blockquote>
<p>The exception indicating connection errors.</p>

<blockquote>
<p><tt><font color="#0000FF">function</font> Image (<b>Code</b> : Error_Type)
<font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function returns text corresponding to a socket error code.</p>

<blockquote>
<p><tt><font color="#0000FF">function</font> To_Addr (<b>Host</b> : String)
<font color="#0000FF">return</font> Inet_Addr_Type;</tt></p>
</blockquote>
<p>This function returns the IP address corresponding to <b>Host</b>. <b>Host</b> 
can be name or a dotted address. Socket_Error is propagated on errors.</p>

<p><u><b>Transport layer</b></u></p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Encoder"></a>type</font> 
Encoder (Size : Buffer_Length)<font color="#0000FF"> is abstract<br>
&nbsp;&nbsp; new </font>Ada.Finalization.Limited_Controlled
<font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Encoder_Ptr <font color="#0000FF">is access all</font> Encoder'Class;</tt></p>
</blockquote>
<p>The type <a href="#GNAT.Sockets.Server.Encoder">Encoder</a> is the type 
of a transport layer object that the server uses to handle encoded or ciphered 
connections. Protocols like SSL/TSL decode incoming TCP/IP stream and encode the 
outgoing one. The package
<a href="#GNAT.Sockets.Server.Secure">GNAT.Sockets.Server.Secure</a> provides an 
implementation of a SSL/TSL encoder. The following primitive
<a href="#GNAT.Sockets.Server.Encoder">Encoder</a> operations are abstract:</p>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Encode<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Transport</b> 
: <font color="#0000FF">in out</font> Encoder;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Client</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> 
Connection'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Last</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Stream_Element_Offset<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This procedure is called to encode/cipher outgoing data. The implementation 
encodes a portion of <b>Data</b> and send it to the client. <b>Last</b> is set 
to the last encoded element.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Process<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Transport</b> 
: <font color="#0000FF">in out</font> Encoder;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Listener</b>&nbsp; : <font color="#0000FF">in out</font> 
Connections_Server'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Client</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> 
Connection'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Data_Left</b> : <font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This procedure is called to handle a portion of incoming encoded data. The 
output parameter <b>Data_Left</b> is <i><font color="#800000">false</font></i> 
when all data are processed. The implementation of the procedure must ultimately 
call to the client's <a href="#GNAT.Sockets.Server.Received">
Received</a> to feed the client with decoded data.</p>
<p>The primitive connection factory function is called to create transport 
layer:</p>

<blockquote>
<p><tt><font color="#0000FF">function</font> Create_Transport<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b>&nbsp; :
<font color="#0000FF">access</font> Connections_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Listener</b> 
: <font color="#0000FF">access</font> Connections_Server'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Client</b>&nbsp;&nbsp; 
: <font color="#0000FF">access</font> Connection'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Encoder_Ptr;</tt></p>
</blockquote>
<p>This function creates an instance of <a href="#GNAT.Sockets.Server.Encoder">
Encoder</a> used to handle encoding/ciphered transport. The result is
<font color="#0000FF">null</font>, which is the default implementation to 
indicate than the transport is not coded. The returned object is handled by the 
server, which finalizes and deallocates it when no more used. When transport 
acts differently for a server from a client, which is the case for SSL handshake 
the type of connection can be determined using
<a href="#GNAT.Sockets.Server.Is_Incoming">Is_Incoming</a>.</p>

<h4><a name="16.1.2"></a>16.1.2. Connection objects</h4>
<p>The package
<a href="#GNAT.Sockets.Server">GNAT.Sockets.Server</a> declares the abstract base 
type for objects corresponding a connection:</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Connection"></a>type</font> 
Connection<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Input_Size&nbsp; : Buffer_Length;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Output_Size : Buffer_Length<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is abstract new</font> 
Object.Entity
<font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Connection_Ptr <font color="#0000FF">is access 
all </font> 
Connection'Class;</tt></p>
</blockquote>
<p>For incoming connections objects of a type derived from <a href="#GNAT.Sockets.Server.Connection">Connection</a> 
are created and returned by the factory operation
<a href="#GNAT.Sockets.Server.Create">Create</a>. For outgoing connections the 
object are created by the caller of <a href="#GNAT.Sockets.Server.Connect">
Connect</a>. The discriminants are:</p>
<ul>
	<li><i>Input_Size</i> is the size of the input buffer used to read the 
	socket into. Note that even if the input buffer is larger than the packets 
	sent by the client, that does not secure that each packet will be completely 
	read when <a href="#GNAT.Sockets.Server.Received">Received</a> is called. The 
	implementation of <a href="#GNAT.Sockets.Server.Received">Received</a> must 
	always be prepared to handle fragmented packets. Therefore usually it does not make 
	much sense to have input buffer excessively large;</li>
	<li><i>Output_Size</i> is the size of the output buffer used to keep sent 
	data before the socket becomes available to write. The size of the buffer 
	determines how much data <a href="#GNAT.Sockets.Server.Send">Send</a> can 
	consume. Usually the output buffer should be large enough to accommodate all 
	outgoing packets of the response. Otherwise the connection object must 
	maintain a second level buffering to keep the parts of the response which do 
	not fit into the buffer. Note also that when the value set by
	<a href="#GNAT.Sockets.Server.Set_Overlapped_Size">Set_Overlapped_Size</a> 
	allows more than one incoming packets to be received the output buffer 
	should be increased accordingly to prevent need in secondary buffering.</li>
</ul>
<p><u><i><a name="memory-management-of-connection-objects"></a></i></u>
Connection objects are reference-counted. When
<a href="#GNAT.Sockets.Server.Create">Create</a> or
<a href="#GNAT.Sockets.Server.Connect">Connect</a> passes an object to the server 
this increases its reference count. When the server drops the object the 
reference count is decreased. Once the count reaches zero the object is 
finalized and deallocated. When a newly created object simply returned from
<a href="#GNAT.Sockets.Server.Create">Create</a> or passed to
<a href="#GNAT.Sockets.Server.Connect">Connect</a> there is nothing to worry 
about. The object will be collected when no more in use. If the object's creator 
wants to keep the object it should create a handle to it (see
<a href="#Object.Handle">Object.Handle</a>) and store the handle somewhere. This 
will increase the reference count and will hold the object so long the handle 
object exist.</p>
<p>Note that objects used to connect to a remote host, i.e. ones used in
<a href="#GNAT.Sockets.Server.Connect">Connect</a> continue to exist when the 
caller of
<a href="#GNAT.Sockets.Server.Connect">Connect</a> holds no handle to it because 
one last handle is still maintained by the connections server. Therefore if the 
caller wants to destroy the object it must call
<a href="#GNAT.Sockets.Server.Shutdown">Shutdown</a> before it drops its handle.
<a href="#GNAT.Sockets.Server.Shutdown">Shutdown</a> will drop the connection 
and since the connection server will not attempt to reconnect after
<a href="#GNAT.Sockets.Server.Shutdown">Shutdown</a> was called it will drop its 
handle as well, and that will destroy the object.</p>
<p>The handles to connection objects can be created this way:</p>

<blockquote>
<p><tt><font color="#0000FF">package </font>Connection_Handles
<font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> Object.Handle (Connection, Connection_Ptr);</tt></p>
</blockquote>
<p>The following primitive operations are defined on the <a href="#GNAT.Sockets.Server.Connection">Connection</a> 
type:</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Available_To_Process">
</a>function</font> Available_To_Process (<b>Client</b> : Connection)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Stream_Element_Count;</tt></p>
</blockquote>
<p>This function returns the number of received but not yet processed stream 
elements.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Available_To_Send"></a>function</font> 
Available_To_Send (<b>Client</b> : Connection)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Stream_Element_Count;</tt></p>
</blockquote>
<p>This function returns is the maximum number of stream elements which
<a href="#GNAT.Sockets.Server.Send">Send</a> is guaranteed to accept. Larger 
number may cause <a href="#GNAT.Sockets.Server.Send">Send</a> returning the 
parameter Pointer less or equal to Data'Last.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Connect_Error"></a>
procedure</font> Connect_Error<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Client</b> 
: <font color="#0000FF">in out</font> Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Error</b>&nbsp; 
: Error_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when the server fails to connect to the remote host. 
It may propagate Connection_Error in order to prevent further attempts to 
connect. The default implementation does nothing.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Connect_Parameters_Set"></a>
procedure</font> Connect_Parameters_Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Host</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Address</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Sock_Addr_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Max_Connect_No</b> : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when connection parameters are set for an outgoing 
connection. The default implementation does nothing. If overridden, the new 
implementation should probably call the parent's&nbsp; implementation.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Connected"></a>
procedure</font> Connected (<b>Client</b> : <font color="#0000FF">in out</font> 
Connection);</tt></p>
</blockquote>
<p>This is the first operation called on <b>Client</b> when connected to a 
remote host. If overridden, the parent's implementation must be called from the 
override. Typically the server may set some socket options 
here. The implementation may propagate Connection_Error if it decides to refuse 
connection this late.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Disconnected_Client"></a>
procedure</font> Disconnected (<b>Client</b> : <font color="#0000FF">in out</font> 
Connection);</tt></p>
</blockquote>
<p>This is procedure is called when connection is dropped. If overridden, the 
parent's implementation must be called from the override. The implementation may propagate Connection_Error 
to prevent reconnection if the object services an outgoing connection.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Finalize_Connection">
</a>procedure</font> Finalize (<b>Client</b> :
<font color="#0000FF">in out</font>  
Connection);</tt></p>
</blockquote>
<p>This procedure is called upon object destruction. It closes all active 
connections and frees all other resources. When the derived type overrides this 
procedure it shall call it from its implementation.</p>

<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Client_Address (<b>Client</b>  
: Connection) <font color="#0000FF">return</font> Sock_Addr_Type;</tt></p>
</blockquote>
<p>This function returns the client's address.</p>

<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Connections_Server (<b>Client</b>  
: Connection)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Connections_Server_Ptr;</tt></p>
</blockquote>
<p>This function returns the connections server handling the <b>Client</b> or
<font color="#0000FF">null</font>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Get_Occurrence"></a>procedure</font> 
Get_Occurrence<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Occurrence</b> : <font color="#0000FF">out</font> Exception_Occurrence<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure gets the error occurrence saved using
<a href="#GNAT.Sockets.Server.Save_Occurrence">Save_Occurence</a>.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Get_Overlapped_Size">
</a>function</font> Get_Overlapped_Size (<b>Client</b> : Connection)<br>
<font color="#0000FF">&nbsp;&nbsp; return</font> Stream_Element_Count;</tt></p>
</blockquote>
<p>This function returns the maximum number of elements queued to send before 
receiving is blocked. See <a href="#GNAT.Sockets.Server.Set_Overlapped_Size">
Set_Overlapped_Size</a> for detailed description.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Get_Socket"></a>function</font> Get_Socket (<b>Client</b> : 
Connection) <font color="#0000FF">return</font> Socket_Type;</tt></p>
</blockquote>
<p>This function returns the socket used by the connection. The socket shall not 
be read or written explicitly.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Get_Session_State"></a>function</font> Get_Session_State (<b>Client</b> : 
Connection) <font color="#0000FF">return</font> Session_State;</tt></p>
</blockquote>
<p>This function returns session state of the connection. It may have one of 
<a href="#GNAT.Sockets.Server.Session_State">Session_State</a> values.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Session_State"></a>
type</font> Session_State <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Session_Down,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Session_Disconnected,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Session_Connecting,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Session_Handshaking,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Session_Connected,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Session_Busy<br>
&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The values are:</p>
<ul>
	<li><i>Session_Down</i> indicates that the object is no more in use (it is 
	same as <a href="#GNAT.Sockets.Server.Is_Down">Is_Down</a>);</li>
	<li><i>Session_Disconnected</i> is of an object that is not connected to any 
	host and is not attempted to connect to any;</li>
	<li><i>Session_Connecting</i> indicates a pending connection to a remote 
	host;</li>
	<li><i>Session_Handshaking</i> is the state between transport being already 
	connected and the encrypted exchange is not yet started;</li>
	<li><i>Session_Connected</i> indicates an established connection;</li>
	<li><i>Session_Busy</i> is like <i>Session_Connected</i> and also indicated 
	that there is a modal operation is pending, e.g. a request is being sent to 
	the remote host and no new operation may start until this is complete.</li>
</ul>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Is_Connected"></a>function</font> 
Is_Connected (<b>Client</b> : 
Connection) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if <b>Client</b> 
is connected. This corresponds to the states <i>Session_Connected</i> and <i>Session_Busy</i>.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Is_Down"></a>function</font> 
Is_Down (<b>Client</b> : 
Connection) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if <b>Client</b> 
can be reused. Normally objects are collected when no more service a connection 
(see
<a href="#memory-management-of-connection-objects">memory management of 
connection objects</a>). An object for which this function returns
<font color="#800000"><i>true</i></font>, the object can be again returned from
<a href="#GNAT.Sockets.Server.Create">Create</a> or passed to
<a href="#GNAT.Sockets.Server.Connect">Connect</a>. Note that doing so, you 
should clean up the object's extension fields if any. Usually
<a href="#GNAT.Sockets.Server.Connected">Connected</a> is an appropriate place 
to do this.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Is_Incoming"></a>function</font> 
Is_Incoming (<b>Client</b> : 
Connection) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if <b>Client</b> 
handles an incoming connection and acts as a server. It returns
<font color="#800000"><i>false</i></font> if <b>Client</b> handles an outgoing 
connection (a client).</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Server.Keep_On_Sending"></a>procedure</font> 
Keep_On_Sending (<b>Client</b> : <font color="#0000FF">in 
out</font> Connection);</tt></p>
</blockquote>
<p>This procedure is called to hint the connections server that it should not 
stop polling the socket for being writable, because some content to send is 
about to come. See also <a href="#GNAT.Sockets.Server.Get_Polling_Timeout">
Get_Polling_Timeout</a>, which provides a less resource consuming alternative of 
resuming sending.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Process">
</a>procedure</font> Process<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Client&nbsp;&nbsp; </b> &nbsp;: <font color="#0000FF">in 
out</font> Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data_Left</b> 
: <font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is used internally to handle a portion of incoming data. <b>
Data_Left</b> is returned <font color="#800000"><i>true</i></font> if not all 
data were processed. It should not be called explicitly. Note that the 
implementation is aware of the transport layer and thus should not be called 
from an implementation of <a href="#GNAT.Sockets.Server.Encoder">Encoder</a>.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Process_Packet">
</a>procedure</font> Process_Packet (<b>Client</b> : <font color="#0000FF">in 
out</font> Connection);</tt></p>
</blockquote>
<p>This procedure is called when all fields of <b>Client</b>, e.g. ones with the types 
derived from <a href="#GNAT.Sockets.Connection_State_Machine.Data_Item">Data_Item</a> have 
been received from the client. The default implementation does nothing. 
Exceptions propagating from the procedure cause the server to close the 
connection.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Pull">
</a>procedure</font> Pull<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure can be used to extract input data skipping standard processing 
them. E.g. it can be called from an overridden implementation of 
<a href="#GNAT.Sockets.Server.Process">Process</a>. <b>
Pointer</b> is advanced to the first unused element in <b>Data</b>.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Queued_To_Send"></a>function</font> Queued_To_Send (<b>Client</b> : 
Connection)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Stream_Element_Count;</tt></p>
</blockquote>
<p>This function returns the number of stream elements pending to be sent in the 
output buffer.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Received"></a>procedure</font> 
Received<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when a portion of data is read from the socket. The 
parameter <b>Pointer</b> is initially set to <b>Data</b>'Last + 1. The 
implementation of <a href="#GNAT.Sockets.Server.Received">
Received</a> must modify it if it does not process all data. In that case it moves
<b>Pointer</b> backwards to indicate 
the first unprocessed element. The data in <b>Data</b> (<b>Pointer</b>..<b>Data</b>'Last) 
will stay in the buffer until a next call to <a href="#GNAT.Sockets.Server.Received">
Received</a>. Connection_Error is propagated to close the connection. Other 
exceptions also cause the server to close the connection, but also call to
<a href="#GNAT.Sockets.Server.Trace_Error">Trace_Error</a>. The default 
implementation raises Connection_Error.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Receive_Error<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Occurrence</b> : Exception_Occurrence<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called upon a socket receive error before the connection is 
dropped. The default implementation does nothing.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Released"></a>procedure</font> 
Released (<b>Client</b> 
: <font color="#0000FF">in out </font>Connection);</tt></p>
</blockquote>
<p>This procedure is called when <b>Client</b> is no more in use. The default 
implementation does nothing.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Save_Occurrence"></a>procedure</font> 
Save_Occurrence<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Occurrence</b> : Exception_Occurrence<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure saves error occurrence, which can be queried later using
<a href="#GNAT.Sockets.Server.Get_Occurrence">Get_Occurence</a>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Send"></a>procedure</font> 
Send<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> 
Send<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Integer<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures are used to send data to the client. The parameter <b>Pointer</b> 
specifies the first data item to send. When completed <b>Pointer</b> is advanced 
to the first unsent item. The procedures do not block. They 
queue as much data as possible for sending. The number of elements available for queuing is returned by
<a href="#GNAT.Sockets.Server.Available_To_Send">Available_To_Send</a>. The 
elements which cannot be queued are <b>Data</b> (<b>Pointer</b>..<b>Data</b>'Last). 
When this happens they should be kept by the caller until <a href="#GNAT.Sockets.Server.Send">
Send</a> is called again. Socket_Error is propagated on send errors. 
Layout_Error is propagated when <b>Pointer</b> is not in <b>Data</b>'First..<b>Data</b>'Last 
+ 1.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> 
Send<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> 
: <font color="#0000FF">in out</font> Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stream</b> : <font color="#0000FF">in out</font> Root_Stream_Type'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
End_Of_Stream</b> : <font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is used to send data from the 
stream specified by the parameter <b>Stream</b>. The procedure does not block, 
it reads as much data from <b>Stream</b> as possible to queue without waiting and return
<b>End_Of_Stream</b> set to <i><font color="#800000">false</font></i>. <b>
End_Of_Stream</b> set to <i><font color="#800000">true</font></i> when all <b>
Stream</b> is read and queued. The output buffer is used for reading out <b>Stream</b>. 
Thus the amount of data read depends on how much free space is the buffer.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> 
Send<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stream</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> Root_Stream_Type'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reserve</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Stream_Element_Count;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Get_Prefix</b>&nbsp;&nbsp;&nbsp; : Create_Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Get_Suffix</b>&nbsp;&nbsp;&nbsp; : Create_Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
End_Of_Stream</b> : <font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> 
Send<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stream</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> Root_Stream_Type'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reserve</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Natural;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Get_Prefix</b>&nbsp;&nbsp;&nbsp; : Create_String_Prefix;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
End_Of_Stream</b> : <font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures are used to send data read from a stream with each chunk of 
stream data prefixed and suffixed. The contents of the prefix and suffix may depend on the data in 
the chunk. For instance the prefix may contain the encoded length of the data 
chunk, the suffix may contain a checksum. The parameter <b>Reserve</b> specifies the maximum 
summary length of prefix and suffix. This amount of space is reserved in the 
output buffer prior to reading <b>Stream</b> into it. The 
parameter <b>Get_Prefix</b> is the function called to get the prefix once the 
chunk is read from <b>Stream</b>. The 
parameter <b>Get_Suffix</b> is the function called to get the suffix. These functions have the 
following type:</p>
<blockquote>
<p><tt><font color="#0000FF">type </font>Create_Stream_Element_Array
<font color="#0000FF">is access function</font><br>
&nbsp;&nbsp;&nbsp;&nbsp; ( <b>&nbsp;Client</b> : <font color="#0000FF">access</font> 
Connection'Class;<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Data&nbsp; </b>&nbsp;: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>End_Of_Stream</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
Stream_Element_Array;<font color="#0000FF"><br>
type </font>Create_String
<font color="#0000FF">is access function</font><br>
&nbsp;&nbsp;&nbsp;&nbsp; ( <b>&nbsp;Client</b> : <font color="#0000FF">access</font> 
Connection'Class;<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Data&nbsp; </b>&nbsp;: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>End_Of_Stream</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> String;</tt></p>
</blockquote>
<p>The parameter <b>Data</b> is the data chunk to be prefixed or suffixed by the 
result. The parameter <b>End_Of_Stream</b> is <i><font color="#800000">true</font></i> 
when this was the last chunk. Otherwise,
<b>End_Of_Stream</b> is set to <i><font color="#800000">false</font></i>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Send_Error"></a>procedure</font> Send_Error<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Occurrence</b> : Exception_Occurrence<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called upon a socket send error before the connection is 
dropped. The default implementation does nothing.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Sent"></a>procedure</font> Sent (<b>Client</b> :
<font color="#0000FF">in out</font> Connection);</tt></p>
</blockquote>
<p>This procedure is called when some portion of data was successfully sent 
leaving free space in the output buffer. The implementation may try to send data 
pending after the last call to <a href="#GNAT.Sockets.Server.Send">Send</a>, e.g. 
the contents of Data (Pointer..Data'Last). That is when the connection deploys a 
secondary buffering. The default implementation does nothing.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Set_Expected_Count">
</a>procedure</font> Set_Expected_Count<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">in out</font> Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Count</b>&nbsp; : Stream_Element_Count<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the number of elements to accumulate before calling
<a href="#GNAT.Sockets.Server.Received">Received</a>. When <b>Count</b> is 0 any 
number of read elements causes a call to <a href="#GNAT.Sockets.Server.Received">
Received</a>. When <b>Count</b> is larger than the input buffer size,
<a href="#GNAT.Sockets.Server.Received">Received</a> is called for each full 
buffer. Note that <a href="#GNAT.Sockets.Server.Set_Expected_Count">
Set_Expected_Count</a> has effect only once. When all elements are read the 
count is reset to 0 and <a href="#GNAT.Sockets.Server.Set_Expected_Count">
Set_Expected_Count</a> must be called again.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Set_Overlapped_Size">
</a>procedure</font> Set_Overlapped_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">in out</font> Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Size</b>&nbsp;&nbsp; 
: Stream_Element_Count<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the read socket policy when there are data pending to 
send. The parameter <b>Size</b> specifies the maximum amount of data queued for 
send without blocking receiving. The default value is 0 meaning strictly 
half-duplex behavior. That is, nothing is read before the client accepts all 
data. Typically for a packet-oriented protocol, the server reads a packet 
completely and then sends a response packet or a set of packets back. Doing that 
it stops reading new packets. To implement such policy
<a href="#GNAT.Sockets.Server.Set_Overlapped_Size">Set_Overlapped_Size</a> is set 
to 0 and the output buffer size is set to the maximum packet length. This would 
guarantee that <a href="#GNAT.Sockets.Server.Send">Send</a> called from
<a href="#GNAT.Sockets.Server.Received">Received</a> would always be able to 
queue a complete packet.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Shutdown">
</a>procedure</font> Shutdown (<b>Client</b> :
<font color="#0000FF">in out</font> Connection);</tt></p>
</blockquote>
<p>The connection object is removed when the client closes the connection. This procedure 
can be used to explicitly drop the connection. It can be used from any task. The 
object shall not be used afterwards because the server may finalize and 
deallocate it at any time. </p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Unblock_Send">
</a>procedure</font> Unblock_Send (<b>Client</b> :
<font color="#0000FF">in out</font> Connection);</tt></p>
</blockquote>
<p>This procedure explicitly unblocks socket polling for send. Normally it 
happens automatically when <a href="#GNAT.Sockets.Server.Send">Send</a> is 
called or when the timeout expires (see
<a href="#GNAT.Sockets.Server.Get_Polling_Timeout">Get_Polling_Timeout</a>).</p>

<h4><a name="16.1.3"></a>16.1.3. Secure servers</h4>
<p><a name="GNAT.Sockets.Server.Secure"></a>The package
<a href="#GNAT.Sockets.Server.Secure">GNAT.Sockets.Server.Secure</a> provides an implementation 
of the connection server with a secure SSL/TLS layer, e.g. HTTPS. The architecture of secure 
SSL/TLS communication is that the encryption layer sits on top of the TCP/IP 
stream. The original protocol (e.g. HTTP) exchange is not altered. The server's 
outgoing traffic goes to the SSL/TLS layer and gets encrypted before sending it over the 
socket. Correspondingly, the incoming traffic is first decrypted and then routed to 
the original protocol. The server supports both incoming and outgoing encrypted 
connections. Right after a connection is established a handshake is performed by 
the SSL/TLS layer. When the handshake is successful the exchange is started to 
proceed as described above.</p>
<p>The implementation of SSL/TLS layer in this package is based on the
<a href="http://www.gnutls.org/">GNUTLS</a> library. The following abstract data 
type implements an abstract SSL/TLS connections factory:</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Server.Secure.Abstract_GNUTLS_Factory"></a>type </font>
Abstract_GNUTLS_Factory<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Decoded_Size : Buffer_Length<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is abstract new </font>
<a href="#GNAT.Sockets.Server.Connections_Factory">Connections_Factory</a><font color="#0000FF"> 
with private</font>;</tt></p>
</blockquote>
<p>Custom factories must be derived from this base type. When a connection to 
the client is first established, the server using a factory derived from this 
type engages a handshaking which includes exchange of certificates. When the 
handshaking is successful the following exchange continues encrypted. There is 
no need to change anything in the original protocol implementation. Both secure 
and insecure factories may use same <a href="#GNAT.Sockets.Server.Connection">
client connection</a> objects.</p>
<p>Note that TLS encoding introduces per-record encoding overhead. Thus smaller 
portions of sent data have relatively higher overhead. In order to prevent 
excessive fragmentation the output buffer (discriminant Output_Size of
<a href="#GNAT.Sockets.Server.Connection">
Connection</a> object) should be reasonable large. </p>
<p>The following primitive operations are defined on
<a href="#GNAT.Sockets.Server.Secure.Abstract_GNUTLS_Factory">
Abstract_GNUTLS_Factory</a>:</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Secure.Handshake_Completed"></a>
procedure </font>Handshake_Completed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b> :
<font color="#0000FF">in out</font> Abstract_GNUTLS_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Client</b>&nbsp; : <font color="#0000FF">in out</font> Connection'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Session</b> : <font color="#0000FF">in out</font> Session_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called upon TLS handshake completion. The implementation 
may use it in order to check the session, e.g. verifying client's certificates. 
The default notifies the connection object that the connection has been 
established. In particular, <a href="#GNAT.Sockets.Server.Connected">Connected</a> 
is called. When overridden the new implementation should call the parent's one. When Connection_Error is propagated the 
connection is silently dropped. Other exceptions drop connection as well.</p>

<blockquote>
<p><tt><font color="#0000FF">function </font>Is_Trace_Decoded<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b> : 
Abstract_GNUTLS_Factory<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if tracing of 
original protocol output is enabled. See
<a href="#GNAT.Sockets.Server.Secure.Set_TLS_Tracing">Set_TLS_Tracing</a>.</p>

<blockquote>
<p><tt><font color="#0000FF">function </font>Is_Trace_Session<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b> : 
Abstract_GNUTLS_Factory<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if tracing of 
TLS session state changes is enabled. See
<a href="#GNAT.Sockets.Server.Secure.Set_TLS_Tracing">Set_TLS_Tracing</a>.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Secure.Prepare"></a>
procedure </font>Prepare<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b> :
<font color="#0000FF">in out</font> Abstract_GNUTLS_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Client</b>&nbsp; : <font color="#0000FF">in out</font> Connection'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Session</b> : <font color="#0000FF">in out</font> Session_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This abstract primitive operation is called when a connection is established.
<b>Client</b> is the <a href="#GNAT.Sockets.Server.Connection">client connection 
object</a>. Note that <a href="#GNAT.Sockets.Server.Secure.Prepare">Prepare</a> 
is called prior to <a href="#GNAT.Sockets.Server.Connected">Connected</a>. The 
objective of <a href="#GNAT.Sockets.Server.Secure.Prepare">Prepare</a> is to set 
up the TLS session specified by the <b>Session</b> parameter. This normally 
includes setting certificates and keys into <b>Session</b>.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Server.Secure.Set_TLS_Tracing"></a>procedure </font>
Set_TLS_Tracing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b> :
<font color="#0000FF">in out </font>Abstract_GNUTLS_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Session</b> : Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Decoded</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure enables or disables tracing of the decoded output and/or TLS 
session state changes.</p>

<p><u><b>X.509 authentication factory</b></u></p>
<p><a name="GNAT.Sockets.Server.Secure.X509"></a>The package
<a href="#GNAT.Sockets.Server.Secure">GNAT.Sockets.Server.Secure.X509</a> 
provides an implementation of connection factory for X.509 and OpenPGP 
certificates.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Server.Secure.X509.X509_Authentication_Factory"></a>type </font>X509_Authentication_Factory <font color="#0000FF">is abstract<br>
&nbsp;&nbsp; new </font>
<a href="#GNAT.Sockets.Server.Connections_Factory">Connections_Factory</a>
<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>Custom factories must be derived from this base type. When a connection to 
the client is first established, the server using a factory derived from this 
type engages a handshaking which includes exchange of certificates. When the 
handshaking is successful the following exchange continues encrypted. There is 
no need to change anything in the original protocol implementation. Both secure 
and insecure factories may use same <a href="#GNAT.Sockets.Server.Connection">
client connection</a> objects. The following primitive operations are defined 
subdivided into sections:</p>
<ul>
	<li><i>Certificate revocation list</i></li>
	<li><i>Public and private keys</i></li>
	<li><i>Trusted certificate list</i></li>
	<li><i>Diffie-Hellman parameters</i></li>
	<li><i>Online Certificate Status Protocol (OCSP)</i></li>
</ul>
<p><i><u>Certificate revocation list</u> </i>is specifying been revoked 
certificates, which thus should no longer be trusted.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure </font>Add_CRL<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b> :
<font color="#0000FF">in out</font> X509_Authentication_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>List</b>&nbsp;&nbsp;&nbsp; 
: X509_CRL_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure adds the trusted CRLs in order to verify client certificates.
<b>List</b> is the array containing CRL to add.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure </font>Add_CRL_DER<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b>&nbsp;&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">in out</font> X509_Authentication_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Certificate</b> : Stream_Element_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedures adds a trusted CRL in order to verify client certificates.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure </font>Add_CRL_From_<b>{</b>DER<b>|</b>PEM<b>}</b>_File<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b> :
<font color="#0000FF">in out</font> X509_Authentication_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>File</b>&nbsp;&nbsp;&nbsp; 
: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures add the trusted CRLs in order to verify client certificates 
from a file with the name <b>File</b>. The procedure name corresponds to the 
file format, <i>DER</i> for binary file format, <i>PEM</i> for text file format.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure </font>Add_CRL_PEM<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b>&nbsp;&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">in out</font> X509_Authentication_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Certificate</b> 
: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedures adds a trusted CRL in order to verify client certificates.</p>
<p><u><i>Public and private keys</i></u> are pairs used for encryption, 
decryption, and signing.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure </font>Add_Key<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> X509_Authentication_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Public_Key</b>&nbsp; : OpenPGP_Crt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Private_Key</b> : OpenPGP_Privkey<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure adds a certificate/private OpenPGP key pair. <b>Public_Key</b> 
is the public key, <b>Private_Key</b> is the private key. More than one keys 
pair can be added.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure </font>Add_Key_DER<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> X509_Authentication_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Certificate</b> : Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>[
Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Stream_Element_Array;<b> 
]</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>[ Encryption</b>&nbsp;&nbsp;: PKCS_Encrypt_Flags;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Password</b>&nbsp;&nbsp;&nbsp;&nbsp;: String <b>]</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures set a certificate/private key pair into factory. They may be 
called more than once. The key may be omitted if only certificate need to be 
added.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure </font>Add_Key_PEM<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> X509_Authentication_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Certificate</b> : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>[
Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : String;<b> ]</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>[ Encryption</b>&nbsp;&nbsp;: PKCS_Encrypt_Flags;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Password</b>&nbsp;&nbsp;&nbsp;&nbsp;: String <b>]</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures set a certificate/private key pair into factory. They may be 
called more than once. The key may be omitted if only certificate need to be 
added.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure </font>Add_Key_From_<b>{</b>DER<b>|</b>PEM<b>}</b>_File<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> X509_Authentication_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Certificate_File</b> : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Key_File</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>[ Encryption</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: PKCS_Encrypt_Flags;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Password</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : String <b>]</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures set a certificate/private key pair into factory. These 
procedures may be called more than once. These procedures can also accept URLs 
at <b>Certificate_File</b> and <b>Key_File</b>. In that case it will import the 
private key and certificate indicated by the URLs. The supported URLs are the 
ones indicated by URL_Is_Supported. In case the <b>Certificate_File</b> is 
provided as a PKCS 11 URL, then the certificate, and its present issuers in the 
token are are imported (i.e. the required trust chain). The procedure name 
corresponds to the file format, <i>DER</i> for binary file format, <i>PEM</i> 
for text file format.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure </font>Add_Key_From_<b>{</b>Base64<b>|</b>Raw<b>}</b>_File<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> X509_Authentication_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Public_Key</b>&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Private_Key</b>&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>[ Subkey_ID&nbsp; 
] </b>: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures add OpenPGP keys into the factory. <b>Public_Key</b> is the 
file name containing the public key, <b>Private_Key</b> is one of the private 
key. The files should contain at least one valid non-encrypted subkey. The 
procedure name corresponds to the file format, raw or else Base64.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure </font>Add_Key_From_<b>{</b>Base64<b>|</b>Raw<b>}</b>_File<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> X509_Authentication_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Public_Key</b>&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Private_Key</b>&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>[ Subkey_ID&nbsp; 
] </b>: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures add OpenPGP keys into the factory. <b>Public_Key</b> is the 
file name containing the public key, <b>Private_Key</b> is one of the private 
key. The files should contain at least one valid non-encrypted subkey. These 
procedures may be called more than once. The procedure name corresponds to the 
file encoding, raw or else Base64.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure </font>Add_Key_From_<b>{</b>Base64<b>|</b>Raw<b>}</b>_Ring<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b> :
<font color="#0000FF">in out</font> X509_Authentication_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>File
</b>&nbsp;&nbsp; : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures add OpenPGP keys the into the factory. The keys are taken 
from the keyring file <b>File</b>. The files should contain at least one valid 
non-encrypted subkey. These procedures may be called more than once. The 
procedure name corresponds to the keyring file format, raw or else Base64.</p>
<p><i><u>Trusted certificates list</u> </i>contains certificates issued by trusted 
certificate authority. All certificates should be tracked down to a trusted 
source.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure </font>Add_Trust<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b> :
<font color="#0000FF">in out</font> X509_Authentication_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>List
</b>&nbsp;&nbsp; : X509_Crt_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure adds the trusted CAs in order to verify client certificates. 
This procedure may be called more than once.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure </font>Add_Trust_DER<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b>&nbsp;&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">in out</font> X509_Authentication_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Certificate</b> : Stream_Element_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures add the trusted CA in order to verify client certificates. 
They may be called multiple times.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure </font>Add_Trust_From_<b>{</b>DER<b>|</b>PEM<b>}</b>_File<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b> :
<font color="#0000FF">in out</font> X509_Authentication_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>File</b>&nbsp;&nbsp;&nbsp; 
: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures add the trusted CAs in order to verify client certificates. 
They may be called multiple times. They can also accept URLs. In that case it 
will import all certificates that are marked as trusted. The procedure name 
corresponds to the file format, <i>DER</i> for binary file format, <i>PEM</i> 
for text file format.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure </font>Add_Trust_PEM<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b>&nbsp;&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">in out</font> X509_Authentication_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Certificate</b> : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures add the trusted CA in order to verify client certificates. 
They may be called multiple times.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure </font>Add_System_Trust<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b> :
<font color="#0000FF">in out</font> X509_Authentication_Factory<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure adds the system's default trusted CAs in order to verify 
client certificates.</p>
<p><i><u>Diffie-Hellman parameters</u> </i>of securely exchanged cryptographic keys 
over a public channel.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure </font>Generate_Diffie_Hellman_Parameters<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b> :
<font color="#0000FF">in out</font> X509_Authentication_Factory<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure generates Diffie-Hellman parameters. The operation is 
time-consuming. If not generated explicitly, parameters are generated on demand.</p>
<p><i>Online Certificate Status Protocol (OCSP) </i>is an Internet protocol used 
for obtaining the revocation status of an X.509 digital certificate.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure </font>Set_OCSP_Response_File<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b> :
<font color="#0000FF">in out</font> X509_Authentication_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>File</b>&nbsp;&nbsp;&nbsp; 
: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the filename of an OCSP response, that will be sent to 
the client if requests an OCSP certificate status.</p>
<p><u><i>General priorities</i></u>, parameters used for authentication.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure </font>Set_Priorities<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> X509_Authentication_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Priorities</b> : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets priorities for the authentication. If not set explicitly, 
&quot;NORMAL&quot; is used.</p>
<p>A minimal initialization of a X509 connection factory may set a keys pair 
generated by a tool like OpenSSL, e.g.</p>

<blockquote>
<p><tt>Add_Key_From_PEM_File<br>
(&nbsp; Factory&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; 
Factory,<br>
&nbsp;&nbsp; Certificate_File =&gt; &quot;<font color="#FF0000">cert.pem</font>&quot;,<br>
&nbsp;&nbsp; Key_File&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; &quot;<font color="#FF0000">key.pem</font>&quot;<br>
);</tt></p>
</blockquote>

<p><u><b>Anonymous authentication factory</b></u></p>
<p><a name="GNAT.Sockets.Server.Secure.Anonymous"></a>The package
<a href="#GNAT.Sockets.Server.Secure.Anonymous">GNAT.Sockets.Server.Secure.Anonymous</a> 
provides an implementation of connection factory for anonymous authentication.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Server.Secure.Anonymous.Anonymous_Authentication_Factory"></a>type </font>
Anonymous_Authentication_Factory <font color="#0000FF">is abstract<br>
&nbsp;&nbsp; new </font>
<a href="#GNAT.Sockets.Server.Connections_Factory">Connections_Factory</a>
<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>Custom factories must be derived from this base type. The following primitive 
operations are defined:</p>

<blockquote>
<p><tt><font color="#0000FF">procedure </font>Set_Priorities<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Factory</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Anonymous_Authentication_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Priorities</b> : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets priorities for the authentication. If not set explicitly, 
&quot;NORMAL&quot; is used.</p>
<h4><a name="16.1.4"></a>16.1.4. Simple echo server sample</h4>
<p>The following sample illustrates implementation of a simple echo server. The 
server sends back to the client what it receives from it. The package 
Test_Echo_Servers contains the implementation: </p>

File <i>test_echo_servers.ads</i>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#0000FF">with</font> 
Ada.Exceptions;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">use</font> 
Ada.Exceptions;<br>
<font color="#0000FF">with</font> Ada.Streams;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;
<font color="#0000FF">use</font> Ada.Streams;<br>
<font color="#0000FF">with</font> GNAT.Sockets;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> GNAT.Sockets;<br>
<font color="#0000FF">with</font> GNAT.Sockets.Server;&nbsp;
<font color="#0000FF">use</font> GNAT.Sockets.Server;<br>
<br>
<font color="#0000FF">package</font> Test_Echo_Servers <font color="#0000FF">is</font><br>
<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Echo_Factory<font color="#0000FF">
is new</font>  
Connections_Factory<font color="#0000FF"> with private</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Create<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Factory&nbsp; : <font color="#0000FF">access</font> Echo_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Listener : <font color="#0000FF">access</font> 
Connections_Server'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
From&nbsp;&nbsp;&nbsp;&nbsp; : Sock_Addr_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">return</font> Connection_Ptr;<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Trace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Factory&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> Echo_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Context&nbsp;&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Occurrence : Exception_Occurrence<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Echo_Connection
<font color="#0000FF">is new</font> Connection <font color="#0000FF">with 
private</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Finalize (Client :
<font color="#0000FF">in out</font> Echo_Connection);<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Received<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Client&nbsp; : <font color="#0000FF">in out</font> Echo_Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Data&nbsp;&nbsp;&nbsp; : Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Pointer : <font color="#0000FF">in out</font> Stream_Element_Offset<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">private<br>
&nbsp;&nbsp; type </font>Echo_Factory<font color="#0000FF"> is new</font> 
Connections_Factory<font color="#0000FF"> with null record</font>;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Echo_Connection
<font color="#0000FF">is new</font> Connection <font color="#0000FF">with record</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; From : Sock_Addr_Type;<br>
&nbsp;&nbsp; <font color="#0000FF">end record</font>;<br>
<font color="#0000FF">end</font> Test_Echo_Servers;</tt></TD>
  </TR>
</TABLE>
<p>Here Echo_Server is the server object. Echo_Connection is the corresponding 
connection object.</p>File<i> test_echo_servers.adb</i>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">with</font> Ada.Text_IO;&nbsp;
<font color="#0000FF">use</font> Ada.Text_IO;<br>
<br>
<font color="#0000FF">package body </font>Test_Echo_Servers
<font color="#0000FF">is<br>
</font>&nbsp;<font color="#0000FF">&nbsp; function</font> Create<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            (&nbsp; Factory&nbsp; : <font color="#0000FF">access</font> 
Echo_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Listener : <font color="#0000FF">access</font> 
Connections_Server'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
               From&nbsp;&nbsp;&nbsp;&nbsp; : Sock_Addr_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            )  <font color="#0000FF">&nbsp;return</font> Connection_Ptr <font color="#0000FF">is<br>
&nbsp; </font>
      &nbsp;&nbsp;&nbsp;
      Result : Connection_Ptr;<br>
&nbsp;&nbsp;
   <font color="#0000FF">begin<br>
&nbsp; </font>
      &nbsp;&nbsp;&nbsp;
      Put_Line (&quot;<font color="#FF0000">Connected client at </font>&quot; &amp; Image (From));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Result := <font color="#0000FF">new</font> Echo_Connection (<font color="#800000">80</font>,
                       <font color="#800000">120</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Echo_Connection (Result.all).From := From;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      <font color="#0000FF">return</font> Result;<br>
&nbsp;&nbsp;
   <font color="#0000FF">end</font> Admit;<br>
<br>
&nbsp;&nbsp;
   <font color="#0000FF">procedure</font> Finalize (Client : <font color="#0000FF">in out</font> Echo_Connection) <font color="#0000FF">is<br>
&nbsp;&nbsp;
   begin<br>
&nbsp;&nbsp;&nbsp; </font>
      &nbsp;
      Put_Line (&quot;<font color="#FF0000">Disconnected client </font>&quot; &amp; Image (Client.From));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Finalize (Connection (Client));<br>
&nbsp;&nbsp;
   <font color="#0000FF">end</font> Finalize;<br>
<br>
&nbsp;&nbsp;
   <font color="#0000FF">procedure</font> Received<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
             (&nbsp; Client&nbsp; : <font color="#0000FF">in out</font> Echo_Connection;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                Data&nbsp;&nbsp;&nbsp; : Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                Pointer : <font color="#0000FF">in out</font> Stream_Element_Offset<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
             )  <font color="#0000FF">&nbsp;is<br>
&nbsp; </font>
   &nbsp;<font color="#0000FF">begin<br>
&nbsp; </font>
      &nbsp;&nbsp;&nbsp;
      Pointer := Data'First;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      Send (Client, Data, Pointer);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      <font color="#0000FF">if</font> Pointer /= Data'Last + <font color="#800000">1</font> <font color="#0000FF">then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>
         &nbsp;Put_Line<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
         (&nbsp; &quot;<font color="#FF0000">Error sending</font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
         &amp;&nbsp; Stream_Element_Offset'Image (Data'Last - Pointer + <font color="#800000">1</font>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
         &amp;&nbsp; &quot;<font color="#FF0000"> elements</font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
         );<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      <font color="#0000FF">end if</font>;<br>
&nbsp;
   <font color="#0000FF">&nbsp;end</font> Received;<br>
<br>
&nbsp;&nbsp;
   <font color="#0000FF">procedure</font> Trace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Factory&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> Echo_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                Context&nbsp;&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                Occurrence : Exception_Occurrence<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
             )  <font color="#0000FF">is<br>
&nbsp;&nbsp;
   begin<br>
&nbsp; </font>
      &nbsp;&nbsp;&nbsp;
      Put_Line (Context &amp; '<font color="#FF0000">:</font>' &amp; Exception_Information (Occurrence));<br>
&nbsp;&nbsp;
   <font color="#0000FF">end</font> Trace;<br>
<font color="#0000FF">end</font> Test_Echo_Servers;</tt></TD>
  </TR>
</TABLE>
<p align="right">
  <A name="16.2"></A><a href="#16.1"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#16.3"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>16.2. Connection state machine</H3>

<p><a name="GNAT.Sockets.Connection_State_Machine"></a>The package
<a href="#GNAT.Sockets.Connection_State_Machine">GNAT.Sockets.Connection_State_Machine</a> provides an 
implementation of a server's side connection object that implements a state 
machine to receive packets from the client side. The structure of a packet is 
described by the contents of connection object itself. Fields of the object 
derived from a special abstract type (<a href="#GNAT.Sockets.Connection_State_Machine.Data_Item">Data_Item</a>) 
fed with the input received from the client in the order they are declared in 
the object. Once all fields are received a primitive operation is called to 
process the packet. After that the cycle repeats. Enumeration of the fields 
(introspection) is based on Ada stream attributes. See
<a href="http://www.adaic.org/resources/add_content/standards/05rm/html/RM-13-13-2.html">
Ada RM 13.13.2</a>(9) for the legality of the approach.</p>

<h4><a name="16.2.1"></a>16.2.1. State machine connection object</h4>
<p>The package <a href="#GNAT.Sockets.Connection_State_Machine">GNAT.Sockets.Connection_State_Machine</a> 
declares the state machine connection object:</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Connection_State_Machine.State_Machine">
</a>type</font> 
State_Machine <font color="#0000FF">is abstract<br>
&nbsp;&nbsp; new </font>Connection <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The connection object implements the operations of the base type:</p>
<ul>
	<li><i>Connected</i></li>
	<li><i>Disconnected</i></li>
	<li><i>Finalize</i></li>
	<li><i>Received</i></li>
</ul>

<h4><span style="font-weight: 400">When <a href="#GNAT.Sockets.Server.Connected">
Connected</a>, <a href="#GNAT.Sockets.Server.Disconnected">Disconnected</a> or 
Finalize are overridden the new implementation shall call them 
from its body. The implementation of
<a href="#GNAT.Sockets.Server.Received">Received</a></span>
<span style="font-weight: 400">inputs the fields of the derived type, which 
themselves are derived from <a href="#GNAT.Sockets.Connection_State_Machine.Data_Item">
Data_Item</a>. The fields can be direct members of the derived type or members 
of members. A derived type may override
<a href="#GNAT.Sockets.Server.Received">Received</a> in its turn if it wishes to 
process some parts of the input without sending it to the input fields.</span></h4>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Enumerate<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Stream</b> :
<font color="#0000FF">access</font> Root_Stream_Type'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Item</b>&nbsp;&nbsp; 
: State_Machine<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">for</font> State_Machine'Write <font color="#0000FF">use</font> 
Enumerate;</tt></p>
</blockquote>
<p>This procedure is used internally in order to enumerate the contents of the 
extension record type. The derived type shall not override either this procedure 
or the stream attribute write.</p>
<h4><a name="16.2.2"></a>16.2.2. State machine data items</h4>
<p>The package <a href="#GNAT.Sockets.Connection_State_Machine">GNAT.Sockets.Connection_State_Machine</a> 
declares the abstract base type of the items comprising a packet:</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Connection_State_Machine.Data_Item"></a>
type</font> Data_Item <font color="#0000FF">is abstract<br>
&nbsp;&nbsp; new</font> Ada.Finalization.Limited_Controlled
<font color="#0000FF">with null record</font>;</tt></p>
</blockquote>
<p>The packet is read by the implementation
<a href="#GNAT.Sockets.Server.Received">Received</a>. The data items are read in 
the order defined by the positional aggregate of the server object.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Connection_State_Machine.Feed"></a>
procedure</font> Feed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Item</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Data_Item;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Client</b>&nbsp; : <font color="#0000FF">in out</font> State_Machine'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
State</b>&nbsp;&nbsp; : <font color="#0000FF">in out</font> 
Stream_Element_Offset<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This procedure is called from <span style="font-weight: 400">
<a href="#GNAT.Sockets.Server.Received">Received</a> </span>when data become 
available to get the contents of <b>Item</b>. The stream elements are <b>Data</b> 
(<b>Pointer</b>..<b>Data</b>'Last). The procedure consumes data and advances <b>
Pointer</b> beyond consumed elements. The parameter <b>State</b> indicates 
processing state. It is initially 0. When <b>Item</b> contents is read in full
<b>State</b> is set to 0. When <b>State</b> is not 0 then <b>Pointer</b> must be 
set to Data'Last, which indicates that more data is required.
<a href="#GNAT.Sockets.Connection_State_Machine.Feed">Feed</a> will be called again on the 
item when new data come with the value of <b>State</b> returned from the last 
call.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Connection_State_Machine.Get_Size"></a>
function</font> Get_Size (<b>Item</b> : Data_Item) <font color="#0000FF">return</font> 
Positive;</tt></p>
</blockquote>
<p>This function returns the number of data items contained in <b>Item</b>, including 
it itself. For scalar data items the result is 1, which is the default 
implementation.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Enumerate<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Stream</b> :
<font color="#0000FF">access</font> Root_Stream_Type'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Item</b>&nbsp;&nbsp; 
: Data_Item<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">for</font> Data_Item'Write <font color="#0000FF">use</font> 
Enumerate;</tt></p>
</blockquote>
<p>This procedure is used internally in order to enumerate the contents of the 
record type, a descendant of <a href="#GNAT.Sockets.Connection_State_Machine.State_Machine">
State_Machine</a>. The derived type shall not override either this procedure or 
the stream attribute write.</p>
<h4><a name="16.2.3"></a>16.2.3. Block of data items</h4>
<p>The package <a href="#GNAT.Sockets.Connection_State_Machine">GNAT.Sockets.Connection_State_Machine</a> 
declares the container data type:</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Connection_State_Machine.Data_Block"></a>
type</font> Data_Block <font color="#0000FF">is abstract new</font> Data_Item
<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The data type is used by deriving a custom type and putting other data item 
types into the extension record: E.g.</p>

<blockquote>
<p><tt><font color="#0000FF">type</font> Four_Numbers <font color="#0000FF">is 
new</font> Data_Block <font color="#0000FF">with record</font><br>
&nbsp;&nbsp; N1 : Unsigned_8_Data_Item;<br>
&nbsp;&nbsp; N2 : Unsigned_16_Data_Item;<br>
&nbsp;&nbsp; N3 : Unsigned_16_Data_Item;<br>
&nbsp;&nbsp; N4 : Unsigned_16_Data_Item;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>The following primitive operation is additionally declared:</p>

<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Length (<b>Item</b> : 
Data_Block) <font color="#0000FF">return</font> Positive;</tt></p>
</blockquote>
<p>The function returns the number of direct items the block contains. Note that 
it is different from <a href="#GNAT.Sockets.Connection_State_Machine.Get_Size">Get_Size</a> 
which returns all data items.</p>
<h4><a name="16.2.4"></a>16.2.4. Null data item</h4>
<p>The package <a href="#GNAT.Sockets.Connection_State_Machine">GNAT.Sockets.Connection_State_Machine</a> 
declares:</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Connection_State_Machine.Data_Null"></a>type</font> Data_Null<font color="#0000FF"> is new</font> 
Data_Item <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>This data item can be used when an item is expected, e.g. as an alternative 
of a data item selector.</p>
<h4><a name="16.2.5"></a>16.2.5. Data items selector</h4>
<p>The package <a href="#GNAT.Sockets.Connection_State_Machine">GNAT.Sockets.Connection_State_Machine</a> 
declares:</p>

<blockquote>
<p><tt><font color="#0000FF">type</font> Data_Selector<font color="#0000FF"> is 
abstract new</font> Data_Item <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The data items of the extension are selected alternatively. A derived type 
has fields derived from <a href="#GNAT.Sockets.Connection_State_Machine.Data_Item">Data_Item</a>. 
One of the fields is used at a time. So the type acts as a variant record. The 
field to select is set by calling
<a href="#GNAT.Sockets.Connection_State_Machine.Set_Alternative">Set_Alternative</a>. Usually 
it is done from Feed of some descendant derived from
<a href="#GNAT.Sockets.Connection_State_Machine.Data_Item">Data_Item</a>, placed after the 
field controlling selection of the alternative. When an alternative should 
enclose several fields a <a href="#GNAT.Sockets.Connection_State_Machine.Data_Block">
Data_Block</a> descendant is used. An empty alternative contains
<a href="#GNAT.Sockets.Connection_State_Machine.Data_Null">Data_Null</a>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Connection_State_Machine.Get_Alternative">
</a>function</font> Get_Alternative (<b>Item</b> : Data_Selector)
<font color="#0000FF">return</font> Positive;</tt></p>
</blockquote>
<p>This function returns the currently selected alternative. The alternative is 
usually selected by the contents of the items preceding the selector using
<a href="#GNAT.Sockets.Connection_State_Machine.Set_Alternative">Set_Alternative</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Alternatives_Number (<b>Item</b> 
: Data_Selector)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Positive;</tt></p>
</blockquote>
<p>This function returns the total number of alternatives. Use_Error is 
propagated when the selector item was not initialized yet.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Connection_State_Machine.Set_Alternative">
</a>procedure</font> Set_Alternative<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Item</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Data_Selector;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Alternative</b> : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This function selects an alternative. Constraint_Error is propagated when <b>
Alternative</b> is invalid. Use_Error is 
propagated when the selector item was not initialized yet. The following sample 
illustrates usage of selector:</p>

<blockquote>
<p><tt><font color="#0000FF">type</font> Alternative_1 <font color="#0000FF">is 
new</font> Data_Block <font color="#0000FF">with record</font><br>
&nbsp;&nbsp; N : Integer_16_Data_Item;<br>
<font color="#0000FF">end record</font>;<br>
<font color="#0000FF">type </font>Alternative_2 <font color="#0000FF">is new</font> 
Data_Block <font color="#0000FF">with record</font><br>
&nbsp;&nbsp; L : Unsigned_32_Data_Item;<br>
&nbsp;&nbsp; M : Unsigned_32_Data_Item;<br>
<font color="#0000FF">end record</font>;<br>
<font color="#0000FF">type</font> Variant <font color="#0000FF">is new</font> 
Data_Selector <font color="#0000FF">with record</font><br>
&nbsp;&nbsp; A1&nbsp;&nbsp; : Alternative_1;<br>
&nbsp;&nbsp; A2&nbsp;&nbsp; : Alternative_2;<br>
&nbsp;&nbsp; Text : String_Data_Item (<font color="#800000">80</font>, 
Character'Val (<font color="#800000">0</font>));<br>
&nbsp;&nbsp; None : Data_Null;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>The above selector can be put into a connection object. The following snippet 
illustrates how to add a selection of the alternative controlled by an item 
preceding the selector:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Data_Connection;<br>
<font color="#0000FF">type</font> Setter<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Parent : <font color="#0000FF">access</font> 
Data_Connection<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is new</font> Data_Item
<font color="#0000FF">with null record</font>;<br>
<font color="#0000FF">procedure</font> Feed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Item&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Setter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Data&nbsp;&nbsp;&nbsp; 
: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pointer 
: <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Client&nbsp; 
: <font color="#0000FF">in out</font> State_Machine'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; State&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Stream_Element_Offset<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">type</font> Data_Connection <font color="#0000FF">is new</font> 
State_Machine <font color="#0000FF">with record</font><br>
&nbsp;&nbsp; Control : Unsigned_8_Data_Item;<br>
&nbsp;&nbsp; Fix&nbsp;&nbsp;&nbsp;&nbsp; : Setter (Data_Connection'Unchecked_Access);<br>
&nbsp;&nbsp; Tail&nbsp;&nbsp;&nbsp; : Variant;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>The implementation of 
<a href="#GNAT.Sockets.Connection_State_Machine.Feed">Feed</a> goes follows:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Feed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Item&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Setter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Data&nbsp;&nbsp;&nbsp; 
: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pointer 
: <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Client&nbsp; 
: <font color="#0000FF">in out</font> State_Machine'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; State&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Stream_Element_Offset<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )<font color="#0000FF">&nbsp; 
is</font><br>
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp; Set_Alternative<br>
&nbsp;&nbsp; (&nbsp; Setter.Parent.Tail,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Setter.Parent.Control.Value<br>
&nbsp;&nbsp; );<br>
&nbsp;&nbsp; State := <font color="#800000">0</font>;<br>
<font color="#0000FF">end</font> Feed;</tt></p>
</blockquote>
<p align="right">
  <A name="16.3"></A><a href="#16.2"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#16.4"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>16.3. Data items encoded big-endian</H3>
<p><a name="GNAT.Sockets.Connection_State_Machine.Big_Endian"></a>The package
<a href="#GNAT.Sockets.Connection_State_Machine.Big_Endian">GNAT.Sockets.Connection_State_Machine.Big_Endian</a> is the parent of the packages implementing 
data items which use big-endian encoding. </p>

<h4><a name="16.3.1"></a>16.3.1. Big-endian IEEE 754 double precision float numbers</h4>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.Big_Endian.Generic_Double_Precision_IEEE_754">
</a>The package 
<a href="#GNAT.Sockets.Connection_State_Machine.Big_Endian.Generic_Double_Precision_IEEE_754">GNAT.Sockets.Connection_State_Machine.Big_Endian.Generic_Double_Precision_IEEE_754</a> 
is a generic implementation of big-endian encoded double precision IEEE 754 
floats:</p>

<blockquote>
<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; with package</font> IEEE_Double_Precision<font color="#0000FF"> is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new</font> IEEE_754.Generic_Double_Precision 
(&lt;&gt;);<br>
<font color="#0000FF">package</font> GNAT.Sockets.Connection_State_Machine.Big_Endian.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Generic_Double_Precision_IEEE_754
<font color="#0000FF">is<br>
&nbsp;&nbsp; use </font>IEEE_Double_Precision;</tt></p>
</blockquote>
<p>The package defines the data item type: </p>

<blockquote>
<p><tt><font color="#0000FF">type </font>IEEE_754_Data_Item<font color="#0000FF"> 
is new </font>Data_Item<font color="#0000FF"> with record<br>
&nbsp;&nbsp; </font>Value : Float_64;<font color="#0000FF"><br>
end record</font>;</tt></p>
</blockquote>
<p>The component Value is the input data as declared in
<a href="#IEEE_754.Generic_Double_Precision">IEEE_754.Generic_Double_Precision</a>. 
The following operations are defined on the type:</p>

<blockquote>
<p><tt><font color="#0000FF">function </font>Get_Value (<b>Item</b> : 
IEEE_754_Data_Item) <font color="#0000FF">return</font> Number;</tt></p>
</blockquote>
<p>This function returns the value contained by the item. It propagates the 
following exceptions: Not_A_Number_Error, Positive_Overflow_Error, 
Negative_Overflow_Error.</p>
<p>Additionally the package provides:</p>

<blockquote>
<p><tt><font color="#0000FF">procedure </font>Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Float_64<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure </font>Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedure get a value from <b>Data</b> starting at <b>Data</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced beyond the input value. Layout_Error is propagated 
when <b>Pointer</b> is out of the range <b>Data</b>'First..<b>Data</b>'Last+1. 
End_Error is propagated when there is not enough data. The variant returning a 
floating-point number additionally raises Not_A_Number_Error, 
Positive_Overflow_Error, Negative_Overflow_Error.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : Float_64<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure </font>Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>Thes procedures put a value into <b>Data</b> starting at <b>Data</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced beyond the input value. Layout_Error is propagated 
when <b>Pointer</b> is out of the range <b>Data</b>'First..<b>Data</b>'Last+1. End_Error is propagated when there is no 
room for output.</p>
<p><a name="GNAT.Sockets.Connection_State_Machine.Big_Endian.IEEE_754_Long_Floats"></a>The 
package <a href="#GNAT.Sockets.Connection_State_Machine.Big_Endian.IEEE_754_Long_Floats">
GNAT.Sockets.Connection_State_Machine.Big_Endian.IEEE_754_Long_Floats</a> provides an 
instantiation of
<a href="#GNAT.Sockets.Connection_State_Machine.Big_Endian.Generic_Double_Precision_IEEE_754">Generic_Double_Precision_IEEE_754</a> 
with the type Long_Float.</p>

<h4><a name="16.3.2"></a>16.3.2. Big-endian IEEE 754 single precision float numbers</h4>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.Big_Endian.Generic_Single_Precision_IEEE_754">
</a>The package 
<a href="#GNAT.Sockets.Connection_State_Machine.Big_Endian.Generic_Single_Precision_IEEE_754">GNAT.Sockets.Connection_State_Machine.Big_Endian.Generic_Single_Precision_IEEE_754</a> 
is a generic implementation of big-endian encoded single precision IEEE 754 
floats:</p>

<blockquote>
<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; with package</font> IEEE_Single_Precision<font color="#0000FF"> is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new</font> IEEE_754.Generic_Single_Precision 
(&lt;&gt;);<br>
<font color="#0000FF">package</font> GNAT.Sockets.Connection_State_Machine.Big_Endian.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Generic_Single_Precision_IEEE_754
<font color="#0000FF">is<br>
&nbsp;&nbsp; use </font>IEEE_Single_Precision;</tt></p>
</blockquote>
<p>The package defines the data item type: </p>

<blockquote>
<p><tt><font color="#0000FF">type </font>IEEE_754_Data_Item<font color="#0000FF"> 
is new </font>Data_Item<font color="#0000FF"> with record<br>
&nbsp;&nbsp; </font>Value : Float_32;<font color="#0000FF"><br>
end record</font>;</tt></p>
</blockquote>
<p>The component Value is the input data as declared in
<a href="#IEEE_754.Generic_Single_Precision">IEEE_754.Generic_Single_Precision</a>. 
The following operations are defined on the type:</p>

<blockquote>
<p><tt><font color="#0000FF">function </font>Get_Value (<b>Item</b> : 
IEEE_754_Data_Item) <font color="#0000FF">return</font> Number;</tt></p>
</blockquote>
<p>This function returns the value contained by the item. It propagates the 
following exceptions: Not_A_Number_Error, Positive_Overflow_Error, 
Negative_Overflow_Error.</p>
<p>Additionally the package provides:</p>

<blockquote>
<p><tt><font color="#0000FF">procedure </font>Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Float_32<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure </font>Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedure get a value from <b>Data</b> starting at <b>Data</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced beyond the input value. Layout_Error is propagated 
when <b>Pointer</b> is out of the range <b>Data</b>'First..<b>Data</b>'Last+1. 
End_Error is propagated when there is not enough data. The variant returning a 
floating-point number additionally raises Not_A_Number_Error, 
Positive_Overflow_Error, Negative_Overflow_Error.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : Float_32<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure </font>Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures put a value into <b>Data</b> starting at <b>Data</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced beyond the input value. Layout_Error is propagated 
when <b>Pointer</b> is out of the range <b>Data</b>'First..<b>Data</b>'Last+1. End_Error is propagated when there is no 
room for output.</p>
<p><a name="GNAT.Sockets.Connection_State_Machine.Big_Endian.IEEE_754_Floats"></a>The package
<a href="#GNAT.Sockets.Connection_State_Machine.Big_Endian.IEEE_754_Floats">
GNAT.Sockets.Connection_State_Machine.Big_Endian.IEEE_754_Floats</a> provides an 
instantiation of
<a href="#GNAT.Sockets.Connection_State_Machine.Big_Endian.Generic_Single_Precision_IEEE_754">Generic_Single_Precision_IEEE_754</a> 
with the type Float.</p>

<h4><a name="16.3.3"></a>16.3.3. Big-endian signed integers</h4>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.Big_Endian.Integers"></a>The package 
<a href="#GNAT.Sockets.Connection_State_Machine.Big_Endian.Integers">
GNAT.Sockets.Connection_State_Machine.Big_Endian.Integers</a> provides data items of for 
big-endian 2's complement encoded integer types:</p>

<blockquote>
<p><tt><font color="#0000FF">type </font>Integer_<i>n</i>_Data_Item<font color="#0000FF"> 
is new </font>Data_Item<font color="#0000FF"> with private</font>;</tt></p>
</blockquote>
<p>where <i>n</i> = 8, 16, 32, 64. These types correspond to the integer types 
declared in the standard package Interfaces (Ada
<a href="http://www.adaic.org/resources/add_content/standards/95lrm/ARM_HTML/RM-B-2.html">
RM B.2</a>). For each type the following primitive operations are provided:</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Value (<b>Item</b> : Integer_<i>n</i>_Data_Item)
<font color="#0000FF">return</font> Integer_<i>n</i>;</tt></p>
</blockquote>
<p>This function returns the value contained by the item.</p>
<p>Additionally the package declares:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Integer_<i>n</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedure get a value from <b>Data</b> starting at <b>Data</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced beyond the input value. Layout_Error is propagated 
when <b>Pointer</b> is out of the range <b>Data</b>'First..<b>Data</b>'Last+1. 
End_Error is propagated when there is not enough data.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : Integer_<i>n</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>Thes procedures put a value into <b>Data</b> starting at <b>Data</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced beyond the input value. Layout_Error is propagated 
when <b>Pointer</b> is out of the range <b>Data</b>'First..<b>Data</b>'Last+1. End_Error is propagated when there is no 
room for output.</p>

<h4><a name="16.3.4"></a>16.3.4. Big-endian unsigned integers</h4>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.Big_Endian.Unsigneds"></a>The package 
<a href="#GNAT.Sockets.Connection_State_Machine.Big_Endian.Unsigneds">
GNAT.Sockets.Connection_State_Machine.Big_Endian.Unsigneds</a> provides data items of for 
big-endian encoded integer types:</p>

<blockquote>
<p><tt><font color="#0000FF">type </font>Unsigned_<i>n</i>_Data_Item<font color="#0000FF"> 
is new </font>Data_Item<font color="#0000FF"> with record<br>
</font>&nbsp;&nbsp; Value : Unsigned_<i>n</i>;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>where <i>n</i> = 8, 16, 32, 64. The types correspond to the integer types 
declared in the standard package Interfaces (Ada
<a href="http://www.adaic.org/resources/add_content/standards/95lrm/ARM_HTML/RM-B-2.html">
RM B.2</a>).</p>
<p>Additionally the package declares:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Unsigned_<i>n</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedure get a value from <b>Data</b> starting at <b>Data</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced beyond the input value. Layout_Error is propagated 
when <b>Pointer</b> is out of the range <b>Data</b>'First..<b>Data</b>'Last+1. 
End_Error is propagated when there is not enough data.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : Unsigned_<i>n</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures put a value into <b>Data</b> starting at <b>Data</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced beyond the input value. Layout_Error is propagated 
when <b>Pointer</b> is out of the range <b>Data</b>'First..<b>Data</b>'Last+1. End_Error is propagated when there is no 
room for output.</p>
<p align="right">
  <A name="16.4"></A><a href="#16.3"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#16.5"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>16.4. Data items encoded little-endian</H3>

<p><a name="GNAT.Sockets.Connection_State_Machine.Little_Endian"></a>The package
<a href="#GNAT.Sockets.Connection_State_Machine.Little_Endian">GNAT.Sockets.Connection_State_Machine.Little_Endian</a> is the parent of the packages implementing 
data items which use little-endian encoding. </p>

<h4><a name="16.4.1"></a>16.4.1. Little-endian IEEE 754 double precision float numbers</h4>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.Little_Endian.Generic_Double_Precision_IEEE_754">
</a>The package 
<a href="#GNAT.Sockets.Connection_State_Machine.Little_Endian.Generic_Double_Precision_IEEE_754">GNAT.Sockets.Connection_State_Machine.Little_Endian.Generic_Double_Precision_IEEE_754</a> 
is a generic implementation of little-endian encoded double precision IEEE 754 
floats:</p>

<blockquote>
<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; with package</font> IEEE_Double_Precision<font color="#0000FF"> is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new</font> IEEE_754.Generic_Double_Precision 
(&lt;&gt;);<br>
<font color="#0000FF">package</font> GNAT.Sockets.Connection_State_Machine.Little_Endian.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Generic_Double_Precision_IEEE_754
<font color="#0000FF">is<br>
&nbsp;&nbsp; use </font>IEEE_Double_Precision;</tt></p>
</blockquote>
<p>The package defines the data item type: </p>

<blockquote>
<p><tt><font color="#0000FF">type </font>IEEE_754_Data_Item<font color="#0000FF"> 
is new </font>Data_Item<font color="#0000FF"> with record<br>
&nbsp;&nbsp; </font>Value : Float_64;<font color="#0000FF"><br>
end record</font>;</tt></p>
</blockquote>
<p>The component Value is the input data as declared in
<a href="#IEEE_754.Generic_Double_Precision">IEEE_754.Generic_Double_Precision</a>. 
The following operations are defined on the type:</p>

<blockquote>
<p><tt><font color="#0000FF">function </font>Get_Value (<b>Item</b> : 
IEEE_754_Data_Item) <font color="#0000FF">return</font> Number;</tt></p>
</blockquote>
<p>This function returns the value contained by the item. It propagates the 
following exceptions: Not_A_Number_Error, Positive_Overflow_Error, 
Negative_Overflow_Error.</p>
<p>Additionally the package provides:</p>

<blockquote>
<p><tt><font color="#0000FF">procedure </font>Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Float_64<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure </font>Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedure get a value from <b>Data</b> starting at <b>Data</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced beyond the input value. Layout_Error is propagated 
when <b>Pointer</b> is out of the range <b>Data</b>'First..<b>Data</b>'Last+1. 
End_Error is propagated when there is not enough data. The variant returning a 
floating-point number additionally raises Not_A_Number_Error, 
Positive_Overflow_Error, Negative_Overflow_Error.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : Float_64<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure </font>Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>Thes procedures put a value into <b>Data</b> starting at <b>Data</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced beyond the input value. Layout_Error is propagated 
when <b>Pointer</b> is out of the range <b>Data</b>'First..<b>Data</b>'Last+1. End_Error is propagated when there is no 
room for output.</p>
<p><a name="GNAT.Sockets.Connection_State_Machine.Little_Endian.IEEE_754_Long_Floats"></a>The 
package <a href="#GNAT.Sockets.Connection_State_Machine.Little_Endian.IEEE_754_Long_Floats">
GNAT.Sockets.Connection_State_Machine.Little_Endian.IEEE_754_Long_Floats</a> provides an 
instantiation of
<a href="#GNAT.Sockets.Connection_State_Machine.Big_Endian.Generic_Double_Precision_IEEE_754">Generic_Double_Precision_IEEE_754</a> 
with the type Long_Float.</p>

<h4><a name="16.4.2"></a>16.4.2. Little-endian IEEE 754 single precision float numbers</h4>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.Little_Endian.Generic_Single_Precision_IEEE_754">
</a>The package 
<a href="#GNAT.Sockets.Connection_State_Machine.Little_Endian.Generic_Single_Precision_IEEE_754">GNAT.Sockets.Connection_State_Machine.Little_Endian.Generic_Single_Precision_IEEE_754</a> 
is a generic implementation of little-endian encoded single precision IEEE 754 
floats:</p>

<blockquote>
<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; with package</font> IEEE_Single_Precision<font color="#0000FF"> is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new</font> IEEE_754.Generic_Single_Precision 
(&lt;&gt;);<br>
<font color="#0000FF">package</font> GNAT.Sockets.Connection_State_Machine.Little_Endian.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Generic_Single_Precision_IEEE_754
<font color="#0000FF">is<br>
&nbsp;&nbsp; use </font>IEEE_Single_Precision;</tt></p>
</blockquote>
<p>The package defines the data item type: </p>

<blockquote>
<p><tt><font color="#0000FF">type </font>IEEE_754_Data_Item<font color="#0000FF"> 
is new </font>Data_Item<font color="#0000FF"> with record<br>
&nbsp;&nbsp; </font>Value : Float_32;<font color="#0000FF"><br>
end record</font>;</tt></p>
</blockquote>
<p>The component Value is the input data as declared in
<a href="#IEEE_754.Generic_Single_Precision">IEEE_754.Generic_Single_Precision</a>. 
The following operations are defined on the type:</p>

<blockquote>
<p><tt><font color="#0000FF">function </font>Get_Value (<b>Item</b> : 
IEEE_754_Data_Item) <font color="#0000FF">return</font> Number;</tt></p>
</blockquote>
<p>This function returns the value contained by the item. It propagates the 
following exceptions: Not_A_Number_Error, Positive_Overflow_Error, 
Negative_Overflow_Error.</p>
<p>Additionally the package provides:</p>

<blockquote>
<p><tt><font color="#0000FF">procedure </font>Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Float_32<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure </font>Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedure get a value from <b>Data</b> starting at <b>Data</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced beyond the input value. Layout_Error is propagated 
when <b>Pointer</b> is out of the range <b>Data</b>'First..<b>Data</b>'Last+1. 
End_Error is propagated when there is not enough data. The variant returning a 
floating-point number additionally raises Not_A_Number_Error, 
Positive_Overflow_Error, Negative_Overflow_Error.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : Float_32<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure </font>Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures put a value into <b>Data</b> starting at <b>Data</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced beyond the input value. Layout_Error is propagated 
when <b>Pointer</b> is out of the range <b>Data</b>'First..<b>Data</b>'Last+1. End_Error is propagated when there is no 
room for output.</p>
<p><a name="GNAT.Sockets.Connection_State_Machine.Little_Endian.IEEE_754_Floats"></a>The 
package <a href="#GNAT.Sockets.Connection_State_Machine.Little_Endian.IEEE_754_Floats">
GNAT.Sockets.Connection_State_Machine.Little_Endian.IEEE_754_Floats</a> provides an 
instantiation of
<a href="#GNAT.Sockets.Connection_State_Machine.Big_Endian.Generic_Single_Precision_IEEE_754">Generic_Single_Precision_IEEE_754</a> 
with the type Float.</p>

<h4><a name="16.4.3"></a>16.4.3. Little-endian signed integers</h4>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.Little_Endian.Integers"></a>The package 
<a href="#GNAT.Sockets.Connection_State_Machine.Little_Endian.Integers">
GNAT.Sockets.Connection_State_Machine.Little_Endian.Integers</a> provides data items of for 
little-endian 2's complement encoded integer types:</p>

<blockquote>
<p><tt><font color="#0000FF">type </font>Integer_<i>n</i>_Data_Item<font color="#0000FF"> 
is new </font>Data_Item<font color="#0000FF"> with private</font>;</tt></p>
</blockquote>
<p>where <i>n</i> = 8, 16, 32, 64. These types correspond to the integer types 
declared in the standard package Interfaces (Ada
<a href="http://www.adaic.org/resources/add_content/standards/95lrm/ARM_HTML/RM-B-2.html">
RM B.2</a>). For each type the following primitive operations are provided:</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Value (<b>Item</b> : Integer_<i>n</i>_Data_Item)
<font color="#0000FF">return</font> Integer_<i>n</i>;</tt></p>
</blockquote>
<p>This function returns the value contained by the item.</p>
<p>Additionally the package declares:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Integer_<i>n</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedure get a value from <b>Data</b> starting at <b>Data</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced beyond the input value. Layout_Error is propagated 
when <b>Pointer</b> is out of the range <b>Data</b>'First..<b>Data</b>'Last+1. 
End_Error is propagated when there is not enough data.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : Integer_<i>n</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures put a value into <b>Data</b> starting at <b>Data</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced beyond the input value. Layout_Error is propagated 
when <b>Pointer</b> is out of the range <b>Data</b>'First..<b>Data</b>'Last+1. End_Error is propagated when there is no 
room for output.</p>

<h4><a name="16.4.4"></a>16.4.4. Little-endian unsigned integers</h4>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.Little_Endian.Unsigneds"></a>The package 
<a href="#GNAT.Sockets.Connection_State_Machine.Little_Endian.Unsigneds">
GNAT.Sockets.Connection_State_Machine.Little_Endian.Unsigneds</a> provides data items of for 
little-endian encoded integer types:</p>

<blockquote>
<p><tt><font color="#0000FF">type </font>Unsigned_<i>n</i>_Data_Item<font color="#0000FF"> 
is new </font>Data_Item<font color="#0000FF"> with record<br>
</font>&nbsp;&nbsp; Value : Unsigned_<i>n</i>;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>where <i>n</i> = 8, 16, 32, 64. The types correspond to the integer types 
declared in the standard package Interfaces (Ada
<a href="http://www.adaic.org/resources/add_content/standards/95lrm/ARM_HTML/RM-B-2.html">
RM B.2</a>).</p>
<p>Additionally the package declares:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Unsigned_<i>n</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedure get a value from <b>Data</b> starting at <b>Data</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced beyond the input value. Layout_Error is propagated 
when <b>Pointer</b> is out of the range <b>Data</b>'First..<b>Data</b>'Last+1. 
End_Error is propagated when there is not enough data.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : Unsigned_<i>n</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures put a value into <b>Data</b> starting at <b>Data</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced beyond the input value. Layout_Error is propagated 
when <b>Pointer</b> is out of the range <b>Data</b>'First..<b>Data</b>'Last+1. End_Error is propagated when there is no 
room for output.</p>
<p align="right">
  <A name="16.5"></A><a href="#16.4"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#16.6"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>16.5. Data items encoded using chain code</H3>
<p><a name="GNAT.Sockets.Connection_State_Machine.Chain_Code"></a>The package
<a href="#GNAT.Sockets.Connection_State_Machine.Chain_Code">GNAT.Sockets.Connection_State_Machine.Chain_Code</a> is the parent of the packages implementing 
data items which use chain code encoding. Chain code is a variable length code. 
An item of the code sequence determines if another item follows. Chain code may 
have the advantage of lossless compression in the case of integers when lesser 
values are more frequent, because lesser values are encoded by shorter 
sequences.</p>

<h4><a name="16.5.1"></a>16.5.1. Chain-encoded signed integers</h4>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.Chain_Code.Generic_Integer"></a>The package 
<a href="#GNAT.Sockets.Connection_State_Machine.Chain_Code.Generic_Integer">GNAT.Sockets.Connection_State_Machine.Chain_Code.Generic_Integer</a> 
is a generic implementation of chain-encoded signed integer:</p>

<blockquote>
<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type </font>Number<font color="#0000FF"> is range</font> &lt;&gt;;<font color="#0000FF"><br>
package </font>GNAT.Sockets.Connection_State_Machine.Chain_Code.Generic_Integer<font color="#0000FF"> 
is</font> ...</tt></p>
</blockquote>
<p>The integer number is encoded as follows. The value is first converted to a 
sequence of bits. The first bit of the sequence is 0 when the value is positive 
or 1 when negative. The following bits is the little-endian sequence of the 
absolute value. The sequence ends with the last non-zero bit. Each seven bits of 
the sequence are packet into an octet. The most significant bit of the octet is 
0 for the last octet and 1 otherwise. The following example illustrates encoding 
principle:</p>

<blockquote>
<p><tt>-7512<sub>10<br>
</sub>&nbsp;7512<sub>10 </sub>= 1_1101_0101_1000<sub>2<br>
</sub>-7512<sub>10 </sub>-&gt; <font color="#0000FF">1</font>011_000<font color="#FF0000">1</font><sub>2</sub>,
<font color="#0000FF">0</font>001_1101<sub>2</sub></tt></p>
</blockquote>
<p>Bits colored blue indicate whether the octet end the sequence. The red bit 
encodes the sign. The package defines the data item type:</p>

<blockquote>
<p><tt><font color="#0000FF">type </font>Integer_Data_Item<font color="#0000FF"> 
is new </font>Data_Item<font color="#0000FF"> with record<br>
</font>&nbsp;&nbsp; Value : Number;<font color="#0000FF"><br>
end record</font>;</tt></p>
</blockquote>
<p>The implementation of
<a href="#GNAT.Sockets.Connection_State_Machine.Feed">Feed</a> propagates Data_Error when <i>
Number</i> cannot contain the value encoded. </p>
<p>Additionally the package declares:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure gets a value from <b>Data</b> starting at <b>Data</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced beyond the input value. Layout_Error is propagated 
when <b>Pointer</b> is out of the range <b>Data</b>'First..<b>Data</b>'Last+1. 
End_Error is propagated when there is not enough data. Data_Error is propagated 
when the encoded value is too large.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedures puts a value into <b>Data</b> starting at <b>Data</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced beyond the input value. Layout_Error is propagated 
when <b>Pointer</b> is out of the range <b>Data</b>'First..<b>Data</b>'Last+1. End_Error is propagated when there is no 
room for output.</p>
<p><a name="GNAT.Sockets.Connection_State_Machine.Chain_Code.Integers"></a>The package
<a href="#GNAT.Sockets.Connection_State_Machine.Chain_Code.Integers">GNAT.Sockets.Connection_State_Machine.Chain_Code.Integers</a> 
is an instance of <a href="#GNAT.Sockets.Connection_State_Machine.Chain_Code.Generic_Integer">
Generic_Integer</a> with Integer.</p>

<h4><a name="16.5.2"></a>16.5.2. Chain-encoded unsigned integers</h4>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.Chain_Code.Generic_Unsigned"></a>The package 
<a href="#GNAT.Sockets.Connection_State_Machine.Chain_Code.Generic_Unsigned">GNAT.Sockets.Connection_State_Machine.Chain_Code.Generic_Unsigned</a> 
is a generic implementation of chain-encoded signed integer:</p>

<blockquote>
<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type </font>Number<font color="#0000FF"> is range</font> &lt;&gt;;<font color="#0000FF"><br>
package </font>GNAT.Sockets.Connection_State_Machine.Chain_Code.Generic_Unsigned<font color="#0000FF"> 
is</font> ...</tt></p>
</blockquote>
<p>Note that the formal parameter <i>Number</i> is a signed integer type.</p>
<p>The unsigned integer number is encoded as follows. The value is first 
converted to a sequence of bits. The following bits is the little-endian 
sequence of the absolute value. The sequence ends with the last non-zero bit. 
Each seven bits of the sequence are packet into an octet. The most significant 
bit of the octet is 0 for the last octet and 1 otherwise. The following example 
illustrates encoding principle:</p>

<blockquote>
<p><tt>7512<sub>10 </sub>= 1_1101_0101_1000<sub>2<br>
</sub>7512<sub>10 </sub>-&gt; <font color="#0000FF">1</font>111_1000<sub>2</sub>,
<font color="#0000FF">0</font>011_1010<sub>2</sub></tt></p>
</blockquote>
<p>Bits colored blue indicate whether the octet end the sequence. The package defines the data item type:</p>
<blockquote>
<p><tt><font color="#0000FF">type </font>Unsigned_Data_Item<font color="#0000FF"> 
is new </font>Data_Item<font color="#0000FF"> with record<br>
</font>&nbsp;&nbsp; Value : Number;<font color="#0000FF"><br>
end record</font>;</tt></p>
</blockquote>
<p>The implementation of
<a href="#GNAT.Sockets.Connection_State_Machine.Feed">Feed</a> propagates Data_Error when <i>
Number</i> cannot contain the value encoded.</p>
<p>Additionally the package declares:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure gets a value from <b>Data</b> starting at <b>Data</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced beyond the input value. Layout_Error is propagated 
when <b>Pointer</b> is out of the range <b>Data</b>'First..<b>Data</b>'Last+1. 
End_Error is propagated when there is not enough data. Data_Error is propagated 
when the encoded value is too large.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure puts a value into <b>Data</b> starting at <b>Data</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced beyond the input value. Constraint_Error is 
propagated when <b>Value</b> is negative. Layout_Error is propagated 
when <b>Pointer</b> is out of the range <b>Data</b>'First..<b>Data</b>'Last+1. End_Error is propagated when there is no 
room for output.</p>
<p><a name="GNAT.Sockets.Connection_State_Machine.Chain_Code.Naturals"></a>The package
<a href="#GNAT.Sockets.Connection_State_Machine.Chain_Code.Naturals">GNAT.Sockets.Connection_State_Machine.Chain_Code.Naturals</a> 
is an instance of
<a href="#GNAT.Sockets.Connection_State_Machine.Chain_Code.Generic_Unsigned">Generic_Unsigned</a> 
with Natural.</p>

<p align="right">
  <A name="16.6"></A><a href="#16.5"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#16.7"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>16.6. Strings encoded using a terminator character</H3>

<p>
<a name="GNAT.Sockets.Connection_State_Machine.Terminated_Strings"></a>The package 
<a href="#GNAT.Sockets.Connection_State_Machine.Terminated_Strings">
GNAT.Sockets.Connection_State_Machine.Terminated_Strings</a> provides implementation of items 
to exchange strings terminated by a special character. The package declares the 
data item type:</p>

<blockquote>
<p><tt><font color="#0000FF">type </font>String_Data_Item<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Size&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Terminator : Character<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is new </font>Data_Item<font color="#0000FF"> 
with<br>
record</font><br>
&nbsp;&nbsp; Last&nbsp; : Natural := <font color="#800000">0</font>;<br>
&nbsp;&nbsp; Value : String (<font color="#800000">1</font>..Size);<font color="#0000FF"><br>
end record</font>;</tt></p>
</blockquote>
<p>The type discriminants are:</p>
<ul>
	<li><i>Size</i> is the maximum string length. The implementation of
<a href="#GNAT.Sockets.Connection_State_Machine.Feed">Feed</a> propagates Data_Error when the 
	string length exceeds the limit;</li>
	<li><i>Terminator</i> is the string terminator character.</li>
</ul>
<p>The actual string value contained by the data item is Item.Value (1..Item.Last). 
Or using the function:</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Value (<b>Item</b> : 
String_Data_Item) <font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>The package also provides a variant with dynamically allocated strings:</p>

<blockquote>
<p><tt><font color="#0000FF">type </font>Dynamic_String_Data_Item<font color="#0000FF"> 
is new </font>Data_Item<font color="#0000FF"> with record</font><br>
&nbsp;&nbsp; Last&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Natural&nbsp;&nbsp; :=
<font color="#800000">0</font>;<br>
&nbsp;&nbsp; Terminator : Character := Character'Val (<font color="#800000">0</font>);<br>
&nbsp;&nbsp; Value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : String_Ptr;<font color="#0000FF"><br>
end record</font>;</tt></p>
</blockquote>
<p>The following operations are provided:</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Maximum_Size (<b>Item</b> : 
Dynamic_String_Data_Item) <font color="#0000FF">return</font> Natural;</tt></p>
</blockquote>
<p>This function returns current maximal number of characters.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Value (<b>Item</b> : 
Dynamic_String_Data_Item) <font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function returns the current value.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Maximum_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Item</b> :
<font color="#0000FF">in out</font> Dynamic_String_Data_Item;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Size</b> 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes the maximum string size. The internally allocated 
string buffer is expanded if necessary.</p>
<p>Additionally the package declares:</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Pointer</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">access</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Terminator</b> 
: Character<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> String;</tt></p>
</blockquote>
<p>This function gets string value from <b>Data</b> starting at <b>Data</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced beyond the input value. Layout_Error is propagated 
when <b>Pointer</b> is out of the range <b>Data</b>'First..<b>Data</b>'Last+1. 
End_Error is propagated when no terminator was detected.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> 
Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Terminator</b> : Character<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure puts a value into <b>Data</b> starting at <b>Data</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced beyond the input value. Layout_Error is propagated 
when <b>Pointer</b> is out of the range <b>Data</b>'First..<b>Data</b>'Last+1. End_Error is propagated when there is no 
room for output. Data_Error is propagated when string contains the terminator.</p>

<p align="right">
  <A name="16.7"></A><a href="#16.6"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#16.8"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>16.7. Variable-length strings</H3>

<p>
<a name="GNAT.Sockets.Connection_State_Machine.Variable_Length_Strings"></a>The package 
<a href="#GNAT.Sockets.Connection_State_Machine.Variable_Length_Strings">
GNAT.Sockets.Connection_State_Machine.Variable_Length_Strings</a> provides implementation of 
items containing variable-length strings. The package declares the 
data item type:</p>

<blockquote>
<p><tt><font color="#0000FF">type </font>String_Data_Item (Size : Positive)
<font color="#0000FF">is new </font>Data_Item<font color="#0000FF"> with record</font><br>
&nbsp;&nbsp; Last&nbsp; : Natural := <font color="#800000">0</font>;<br>
&nbsp;&nbsp; Value : String (<font color="#800000">1</font>..Size);<font color="#0000FF"><br>
end record</font>;</tt></p>
</blockquote>
<p>The discriminant <i>Size</i> is the maximum string length. The implementation 
of <a href="#GNAT.Sockets.Connection_State_Machine.Feed">Feed</a> propagates Data_Error when 
the string length exceeds the limit. The actual string value contained by the 
data item is Item.Value (1..Item.Last).</p>
<p>Additionally the package declares:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure gets string value from <b>Data</b> starting at <b>Data</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced beyond the input value. Note that the input string 
length must be known in advance. Layout_Error is propagated 
when <b>Pointer</b> is out of the range <b>Data</b>'First..<b>Data</b>'Last+1. 
End_Error is propagated when there not enough data.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> 
Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure puts string into <b>Data</b> starting at <b>Data</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced beyond the input value. Layout_Error is propagated 
when <b>Pointer</b> is out of the range <b>Data</b>'First..<b>Data</b>'Last+1. End_Error is propagated when there is no 
room for output.</p>

<p align="right">
  <A name="16.8"></A><a href="#16.7"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#16.9"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>16.8. Variable-length arrays</H3>

<p>
<a name="GNAT.Sockets.Connection_State_Machine.Variable_Length_Arrays"></a>The package 
<a href="#GNAT.Sockets.Connection_State_Machine.Variable_Length_Arrays">GNAT.Sockets.Connection_State_Machine.Variable_Length_Arrays</a> provides implementation of 
items containing variable-length arrays. The package declares the 
data item type:</p>

<blockquote>
<p><tt><font color="#0000FF">type </font>Array_Data_Item<font color="#0000FF"> </font>(Size : 
Stream_Element_Count)
<font color="#0000FF">is new </font>Data_Item<font color="#0000FF"> with record</font><br>
&nbsp;&nbsp; Last&nbsp; : Stream_Element_Offset := <font color="#800000">0</font>;<br>
&nbsp;&nbsp; Value : Stream_Element_Array (<font color="#800000">1</font>..Size);<font color="#0000FF"><br>
end record</font>;</tt></p>
</blockquote>
<p>The discriminant <i>Size</i> is the maximum string length. The implementation 
of <a href="#GNAT.Sockets.Connection_State_Machine.Feed">Feed</a> propagates Data_Error when 
the string length exceeds the limit. The actual array value contained by the 
data item is Item.Value (1..Item.Last).</p>
<p>Additionally the package declares:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Stream_Element_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure gets arrays value from <b>Data</b> starting at <b>Data</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced beyond the input value. Note that the input array 
length must be known in advance. Layout_Error is propagated 
when <b>Pointer</b> is out of the range <b>Data</b>'First..<b>Data</b>'Last+1. 
End_Error is propagated when there not enough data.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> 
Stream_Element_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Stream_Element_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure puts array into <b>Data</b> starting at <b>Data</b> (<b>Pointer</b>).
<b>Pointer</b> is advanced beyond the input value. Layout_Error is propagated 
when <b>Pointer</b> is out of the range <b>Data</b>'First..<b>Data</b>'Last+1. End_Error is propagated when there is no 
room for output.</p>

<p align="right">
  <A name="16.9"></A><a href="#16.8"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#16.10"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>16.9. Expected sequence</H3>

<p>
<a name="GNAT.Sockets.Connection_State_Machine.Expected_Sequence"></a>The package 
<a href="#GNAT.Sockets.Connection_State_Machine.Expected_Sequence">GNAT.Sockets.Connection_State_Machine.Expected_Sequence</a> provides implementation of 
items containing a fixed sequence of stream elements expected from the client. When the client sends a 
sequence deviating from it, Data_Error is propagated from <a href="#GNAT.Sockets.Connection_State_Machine.Feed">Feed</a>. The  
data item type is:</p>

<blockquote>
<p><tt><font color="#0000FF">type </font>Expected_Item (Size : Stream_Element_Count)
<font color="#0000FF">is new </font>Data_Item<font color="#0000FF"> with record</font><br>
&nbsp;&nbsp; Value : Stream_Element_Array (<font color="#800000">1</font>..Size);<font color="#0000FF"><br>
end record</font>;</tt></p>
</blockquote>
<p>The discriminant <i>Size</i> is the maximum string length. Item.Value (1..Item.Last) 
is the expected sequence.</p>

<p align="right">
  <A name="16.10"></A><a href="#16.9"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#16.11"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>16.10. Server with a pool of worker tasks</H3>

<p>
<a name="GNAT.Sockets.Server.Pooled"></a>The package 
<a href="#GNAT.Sockets.Server.Pooled">GNAT.Sockets.Server.Pooled</a> provides an implementation of 
multiple connections server backed by a pool of worker tasks. The package declares the 
server's type:</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.Server.Pooled.Pooled_Server">
</a>type</font> Pooled_Server<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Factory&nbsp;&nbsp; : <font color="#0000FF">
access</font> Connections_Factory'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Port&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Port_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pool_Size : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is abstract new</font> 
Connections_Server <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The discriminants are</p>
<ul>
	<li><i>Factory </i>is the <a href="#GNAT.Sockets.Server.Connections_Factory">
	factory object</a> used to create connection objects;</li>
	<li><i>Port</i> is the TCP/IP port to listen;</li>
	<li><i>Pool_Size</i> is the number of worker tasks in the pool.</li>
</ul>
<p>The server queues received data to a worker task from the pool. Thus the 
procedures <a href="#GNAT.Sockets.Server.Received">Received</a> (and
<a href="#GNAT.Sockets.Server.Process_Packet">Process_Packet</a>) are performed 
by the worker tasks, while the server's task does only raw I/O. A worker task is 
not permanently assigned to a connection. A connection can migrate from one 
worker task to another. Note that
<a href="#GNAT.Sockets.Server.Pooled.Pooled_Server">Pooled_Server</a> and
<a href="#GNAT.Sockets.Server.Connections_Server">Connections_Server</a> are 
fully compatible with regard of connection objects, which can be used with both.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Disconnected<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Listener</b> :
<font color="#0000FF">in out</font>   
Pooled_Server;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Client</b>&nbsp;&nbsp; : <font color="#0000FF">in out</font> Connection'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to notify the server <b>Listener</b> that the client 
is being disconnected. It overrides the implementation of parent type (see
<a href="#GNAT.Sockets.Server.Disconnected">Disconnected</a>).</p>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Finalize (<b>Listener</b> :
<font color="#0000FF">in out</font>  
Pooled_Server);</tt></p>
</blockquote>
<p>This procedure is called upon object destruction. It closes all active 
connections and frees all other resources. When the derived type overrides this 
procedure it shall call it from its implementation.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize (<b>Listener</b> :
<font color="#0000FF">in out</font>  
Pooled_Server);</tt></p>
</blockquote>
<p>This procedure is called upon object construction. When the derived type overrides this 
procedure it shall call it from its implementation.</p>

<p align="right">
  <A name="16.11"></A><a href="#16.10"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#16.12"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>16.11. HTTP server protocol implementation</H3>

<p>
<a name="HTTP_implementation"></a>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server"></a>The package 
<a href="#HTTP_implementation">
GNAT.Sockets.Connection_State_Machine.HTTP_Server</a> provides an implementation of 
<a href="http://www.ietf.org/rfc/rfc2616.txt">HTTP 1.1</a> server protocol suitable for working with a
<a href="#GNAT.Sockets.Server.Connections_Server">multiple connections</a> 
server, e.g. with a single task handling multiple connections. It can also be 
used with a <a href="#GNAT.Sockets.Server.Pooled.Pooled_Server">server backed by 
a pool of tasks</a>. The implementation does not allocate memory dynamically 
otherwise than for request headers and can be used for applications working 
under memory constraint. The package declares the 
HTTP connection object type:</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.HTTP_Client"></a>type</font> 
HTTP_Client<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Listener&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">access</font> Connections_Server'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Request_Length : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Input_Size&nbsp;&nbsp;&nbsp;&nbsp; : Buffer_Length;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Output_Size&nbsp;&nbsp;&nbsp; : 
Buffer_Length<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is new</font> 
State_Machine <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The discriminants are</p>
<ul>
	<li><i>Listener</i> is the server object handling the connection;</li>
	<li><i>Request_Length</i> is the maximum length of a HTTP request line. This 
	limit applies to the request status line and the lines of the header fields. 
	It does not limit the request body;</li>
	<li><i>Input_Size</i> is the input buffer size. It is not required to be 
	especially large, e.g. to accommodate all request or all request line;</li>
	<li><i>Output_Size</i> is the output buffer size. The buffer must be large 
	to accommodate the response status line and its fields. The same buffer is 
	used for the response body when no chunked transfer is used. For chunked 
	transfer the buffer size determines the maximum size of the chunk.</li>
</ul>
<p>Other types declared in the package:</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.HTTP_Method"></a>type</font> 
HTTP_Method <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; HTTP_GET,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HTTP_HEAD,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HTTP_POST,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HTTP_PUT,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HTTP_DELETE,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HTTP_TRACE,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HTTP_OPTIONS,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HTTP_CONNECT,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HTTP_PATCH<br>
&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This type defines methods of HTTP requests.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Connection_Flags"></a>
type</font> Connection_Flags <font color="#0000FF">is mod</font>
<font color="#800000">2</font>**<font color="#800000">3</font>;<br>
Connection_Close&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Connection_Flags :=
<font color="#800000">1</font>;<br>
Connection_Persistent : Connection_Flags := <font color="#800000">2</font>;<br>
Connection_Upgrade&nbsp;&nbsp;&nbsp; : Connection_Flags := <font color="#800000">
4</font>;</tt></p>
</blockquote>
<p>This type defines values of the <i>Connection</i> header.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.HTTP_Allowed"></a>type</font> 
HTTP_Allowed <font color="#0000FF">is array </font>(HTTP_Method)
<font color="#0000FF">of </font>Boolean;</tt></p>
</blockquote>
<p>This type lists the methods of HTTP requests.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.HTTP_Version"></a>type</font> 
HTTP_Version <font color="#0000FF">is delta</font> <font color="#800000">0.1</font>
<font color="#0000FF">digits</font> <font color="#800000">6</font>
<font color="#0000FF">range</font> <font color="#800000">1.0</font>..<font color="#800000">1_000.0</font>;</tt></p>
</blockquote>
<p>This type is used to denote HTTP request version.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Range_Type"></a>type</font> 
Range_Type <font color="#0000FF">is</font> (Explicit_Range, Suffix_Range);</tt></p>
</blockquote>
<p>This type defines the range type:</p>
<ul>
	<li><i>Explicit_Range</i> is a range with definite upper and lower bounds;</li>
	<li><i>Suffix_Range</i> is a range with only lower bound specified. When the 
	lower bound is negative it is counted from the content end. E/g/ -1 is the 
	last item of the range.</li>
</ul>

<blockquote>
<p><tt><font color="#0000FF">package</font> Content_Ranges <font color="#0000FF">
is<br>
&nbsp;&nbsp; new </font>Generic_Discrete_Set (Stream_Element_Count);</tt></p>
</blockquote>
<p>This is an instantiation of the package <a href="#Generic_Discrete_Set">
Generic_Discrete_Set</a> which provides sets of content ranges indexed by 
Stream_Element_Count. The first item of content has the index 0.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Ranges_Set"></a>type </font>
Ranges_Set (Kind : Range_Type := Explicit_Range) <font color="#0000FF">
is record<br>
&nbsp;&nbsp; </font>Set : Content_Ranges.Set;<font color="#0000FF"><br>
&nbsp;&nbsp; case </font>Kind<font color="#0000FF">
is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when </font>Explicit_Range =&gt;<font color="#0000FF"><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; null</font>;<font color="#0000FF"><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when </font>Suffix_Range =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tail : Stream_Element_Offset;<font color="#0000FF"><br>
&nbsp;&nbsp; end case</font>;<font color="#0000FF"><br>
end record</font>;</tt></p>
</blockquote>
<p>This type a set content ranges. It may contain any number of definite ranges 
and up to one suffix range.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Status_Line_Type">
</a>type</font> 
Status_Line_Type <font color="#0000FF">is</font> (None, File, URI);</tt></p>
</blockquote>
<p>This type defines the status line format:</p>
<ul>
	<li><i>None</i> indicates a status line that does not contain a file path or 
	URI;</li>
	<li><i>File</i> indicates a status line that contains a file path;</li>
	<li><i>URI</i> indicates a status line with an URI.</li>
</ul>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Status_Line"></a>type</font> 
Status_Line<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Kind&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Status_Line_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Path_Length&nbsp; : Natural;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Host_Length&nbsp; : Natural;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Query_Length : Natural<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is<br>
record<br>
&nbsp;&nbsp; case </font>Kind <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when </font>None =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> File =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; File : String (<font color="#800000">1</font>..Path_Length);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> URI =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Scheme : Scheme_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Host&nbsp;&nbsp; : String (<font color="#800000">1</font>..Host_Length);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Port&nbsp;&nbsp; : Port_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Path&nbsp;&nbsp; : String (<font color="#800000">1</font>..Path_Length);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Query&nbsp; : String (<font color="#800000">1</font>..Query_Length);<br>
&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>Values of this type are used to store request's status line. The type 
Scheme_Type specified supported URI schemes (see
<a href="https://tools.ietf.org/html/rfc398">RFC 3986</a>):</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Scheme_Type"></a>type</font> 
Scheme_Type is<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; HTTP_Scheme,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HTTPS_Scheme,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WS_Scheme,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WSS_Scheme<br>
&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>A URI like:</p>

<blockquote>
<table border="0" cellspacing="0" cellpadding="0" style="border-left-width: 0px">
	<tr>
		<td colspan="2"><font color="#800080"><tt>http</tt></font></td>
		<td><tt>://</tt></td>
		<td colspan="2"><font color="#008000"><tt>tools.ietf.org</tt></font></td>
		<td><tt>:</tt></td>
		<td colspan="2"><font color="#800000"><tt>80</tt></font></td>
		<td><tt>/</tt></td>
		<td colspan="2"><font color="#0000FF"><tt>html/rfc3986</tt></font></td>
		<td><tt>#</tt></td>
		<td colspan="2"><font color="#FF0000"><tt>section-3.2.2</tt></font></td>
	</tr>
	<tr>
		<td style="border-left-style: none; border-left-width: medium">&nbsp;</td>
		<td style="border-left-style: solid; border-left-width: 1px; border-right-style: none; border-right-width: medium">&nbsp;</td>
		<td style="border-left-style: none; border-left-width: medium; border-right-style: none; border-right-width: medium">&nbsp;</td>
		<td style="border-left-style: none; border-left-width: medium">&nbsp;</td>
		<td style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
		<td style="border-right-style: none; border-right-width: medium">&nbsp;</td>
		<td style="border-left-style: none; border-left-width: medium">&nbsp;</td>
		<td style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
		<td style="border-right-style: none; border-right-width: medium">&nbsp;</td>
		<td style="border-left-style: none; border-left-width: medium">&nbsp;</td>
		<td style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
		<td style="border-right-style: none; border-right-width: medium">&nbsp;</td>
		<td style="border-left-style: none; border-left-width: medium">&nbsp;</td>
		<td style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
	</tr>
	<tr>
		<td style="border-left-style: none; border-left-width: medium">&nbsp;</td>
		<td style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
		<td style="border-right-style: none; border-right-width: medium">&nbsp;</td>
		<td style="border-left-style: none; border-left-width: medium; border-right-style: none; border-right-width: medium" colspan="2" align="center">
		<i>Host</i></td>
		<td style="border-left-style: none; border-left-width: medium; border-right-style: none; border-right-width: medium">&nbsp;</td>
		<td style="border-left-style: none; border-left-width: medium">&nbsp;</td>
		<td style="border-left-style: solid; border-left-width: 1px">&nbsp;</td>
		<td style="border-right-style: none; border-right-width: medium">&nbsp;</td>
		<td style="border-right-style: none; border-right-width: medium" colspan="2" align="center">
		<i>Path</i></td>
		<td>&nbsp;</td>
		<td colspan="2" align="center"><i>Query</i></td>
	</tr>
	<tr>
		<td colspan="3"><i>Scheme</i></td>
		<td colspan="6" align="right"><i>Port</i></td>
		<td colspan="2">&nbsp;</td>
		<td>&nbsp;</td>
		<td colspan="2">&nbsp;</td>
	</tr>
</table>
</blockquote>
<p>is parsed as follows:</p>
<ul>
	<li><i>Scheme</i> is <i> <font color="#800080">HTTP_Scheme</font></i>;</li>
	<li><i>Host</i> is &quot;<font color="#008000"><tt>tools.ietf.org</tt></font>&quot;;</li>
	<li><i>Port</i> is <font color="#800000">80</font>;</li>
	<li><i>Path</i> is &quot;<font color="#0000FF"><tt>html/rfc3986</tt></font>&quot;;</li>
	<li><i>Query</i> is &quot;<font color="#FF0000"><tt>section-3.2.2</tt></font>&quot;.</li>
</ul>
<h4><a name="16.11.1"></a>16.11.1. Common operations</h4>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Allowed (<b>Client</b> : 
HTTP_Client) <font color="#0000FF">return</font> HTTP_Allowed;</tt></p>
</blockquote>
<p>This function returns the
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.HTTP_Allowed">list 
of methods</a> supported by the server. The list is used to build the default 
response to the OPTIONS method.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Get_Name"></a>function</font> Get_Name (<b>Client</b> : 
HTTP_Client) <font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function returns the
official server name. Usually it is overridden to return something like &quot;<i>my_server/1.3</i>&quot;.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize (<b>Client</b> : 
<font color="#0000FF">in out </font> HTTP_Client);</tt></p>
</blockquote>
<p>This procedure shall be called from the new implementation of when 
overridden.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Received<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure overrides the standard implementation of
<a href="#GNAT.Sockets.Server.Received">Received</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Set_Allowed"></a>procedure</font> Set_Allowed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Allowed</b> : HTTP_Allowed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.HTTP_Allowed">list 
of methods</a> supported by the server. The list is used to build the default 
response to the OPTIONS method.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Trace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Message</b> : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure writes <b>Message</b> into the trace provided by the server 
object indicated by <b>Client</b>.Listener.</p>

<h4><a name="16.11.2"></a>16.11.2. Method callbacks</h4>
<p>The following procedures are called in response to the corresponding method, 
e.g. GET:</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Do_Connect"></a>procedure</font> Do_Connect&nbsp;&nbsp; (<b>Client</b> :
<font color="#0000FF">in out</font> HTTP_Client);<br>
<font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Do_Delete"></a>procedure</font> Do_Delete&nbsp;&nbsp;&nbsp; (<b>Client</b> :
<font color="#0000FF">in out</font> HTTP_Client);<br>
<font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Do_Get"></a>procedure</font> Do_Get&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; (<b>Client</b> 
: <font color="#0000FF">in out</font> HTTP_Client);<br>
<font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Do_Head"></a>procedure</font> Do_Head&nbsp;&nbsp;&nbsp; &nbsp; (<b>Client</b> 
: <font color="#0000FF">in out</font> HTTP_Client);<br>
<font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Do_Options"></a>procedure</font> Do_Options&nbsp;&nbsp; (<b>Client</b> :
<font color="#0000FF">in out</font> HTTP_Client);<br>
<font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Do_Patch"></a>procedure</font> Do_Patch&nbsp;&nbsp;&nbsp;&nbsp; (<b>Client</b> :
<font color="#0000FF">in out</font> HTTP_Client);<br>
<font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Do_Post"></a>procedure</font> Do_Post&nbsp;&nbsp;&nbsp; &nbsp; (<b>Client</b> 
: <font color="#0000FF">in out</font> HTTP_Client);<br>
<font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Do_Put"></a>procedure</font> Do_Put&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; (<b>Client</b> 
: <font color="#0000FF">in out</font> HTTP_Client);<br>
<font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Do_Trace"></a>procedure</font> Do_Trace&nbsp;&nbsp; &nbsp; (<b>Client</b> :
<font color="#0000FF">in out</font> HTTP_Client);<br>
<font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Do_WebSocket"></a>procedure</font> 
Do_WebSocket (<b>Client</b> : <font color="#0000FF">in out</font> HTTP_Client);</tt></p>
</blockquote>
<p>The implementation should send a response to the client. The default 
implementations of all methods except for GET, HEAD, OPTIONS respond with <i>501 
Not implemented</i>. OPTIONS is responded with the list set using
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Set_Allowed">
Set_Allowed</a>. GET is responded with <i>200 OK</i> and <i>Not implemented </i>
as the content. HEAD is responded with <i>200 OK</i>.</p>
<p>The following code snippet illustrates implementation of Do_Get:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Do_Get (Client :
<font color="#0000FF">in out</font> My_Client) <font color="#0000FF">is</font><br>
&nbsp;&nbsp; Status : Status_Line <font color="#0000FF">renames</font> 
Get_Status_Line (Client);<br>
<font color="#0000FF">begin<br>
&nbsp;&nbsp; case</font> Status.Kind <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when</font> None =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> File =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">if</font> 
Status.File = &quot;<font color="#FF0000">hello.htm</font>&quot; <font color="#0000FF">
then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Send_Status_Line (Client, <font color="#800000">200</font>, &quot;<font color="#FF0000">OK</font>&quot;);&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- Response status line</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Send_Date&nbsp;&nbsp; 
(Client);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- Date header line</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Send_Server 
(Client);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- Server name</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Send_Content_Type (Client, &quot;<font color="#FF0000">text/html</font>&quot;);&nbsp;
<font color="#008000">-- Content type</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Accumulate_Body (Client, &quot;<font color="#FF0000">&lt;html&gt;&lt;body&gt;</font>&quot;);
<font color="#008000">-- Begin content construction</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Accumulate_Body (Client, &quot;<font color="#FF0000">&lt;p&gt;Hello world!&lt;/p&gt;</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Accumulate_Body (Client, &quot;<font color="#FF0000">&lt;/body&gt;&lt;/html&gt;</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Send_Body 
(Client, Get);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- Evaluate total length, send length,</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">elsif</font> 
Status.File =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- then initiate sending the content</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> URI =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>
&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
<font color="#0000FF">end</font> Do_Get;</tt></p>
</blockquote>

<h4><a name="16.11.3"></a>16.11.3. Request header fields</h4>
<p>The header fields of the pending request are accumulated in the arena pool of 
the connection object and can be queried using the following operations:</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Closing (<b>Client</b> : 
HTTP_Client) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> the connection 
will be closed as soon as the last data are sent to the client.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Date (<b>Client</b> : 
HTTP_Client) <font color="#0000FF">return</font> Time;</tt></p>
</blockquote>
<p>This function returns the value specified by the header <i>Date</i> field. 
Time_Error is propagated when the request has no this field specified.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Header<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Header</b> 
: Text_Header<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> String;</tt></p>
</blockquote>
<p>This function returns the value specified by the header field indicated by 
the parameter Header. Empty string is returned when the request has no this 
field specified.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_If_Modified_Since (<b>Client</b> 
: HTTP_Client) <font color="#0000FF">return</font> Time;</tt></p>
</blockquote>
<p>This function returns the value specified by the header <i>If-Modified-Since</i> 
field. Time_Error is propagated when the request has no this field specified.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_If_Unmodified_Since (<b>Client</b> 
: HTTP_Client) <font color="#0000FF">return</font> Time;</tt></p>
</blockquote>
<p>This function returns the value specified by the header <i>
If-Unmodified-Since</i> field. Time_Error is propagated when the request has no 
this field specified.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Last_Modified (<b>Client</b> : 
HTTP_Client) <font color="#0000FF">return</font> Time;</tt></p>
</blockquote>
<p>This function returns the value specified by the header <i>Last-Modified</i> 
field. Time_Error is propagated when the request has no this field specified.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Method (<b>Client</b> : 
HTTP_Client) <font color="#0000FF">return</font> HTTP_Method;</tt></p>
</blockquote>
<p>This function returns the request's method.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Ranges (<b>Client</b> : 
HTTP_Client) <font color="#0000FF">return</font> Ranges_Set;</tt></p>
</blockquote>
<p>This function returns the value of the header <i>Range</i> field. The result 
has the type
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Ranges_Set">
Ranges_Set</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Get_Status_Line"></a>function</font> Get_Status_Line (<b>Client</b> : 
HTTP_Client) <font color="#0000FF">return</font> Status_Line;</tt></p>
</blockquote>
<p>This function returns the
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Status_Line">status 
line</a> of the request. The fields of the status line are converted from 
escaped format to plain 8-bit strings.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Version (<b>Client</b> : 
HTTP_Client) <font color="#0000FF">return</font> HTTP_Version;</tt></p>
</blockquote>
<p>This function returns
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.HTTP_Version">HTTP 
version</a> specified by the request, e.g. 1.1.</p>
<h4><a name="16.11.4"></a>16.11.4. Receiving request bodies</h4>
<p>The body of a request is potentially very large. Therefore differently to the 
request's header fields being cached, the server does not cache the body. Instead of that it 
uses an object provided by the user which accepts the body or several bodies in 
the case of a multipart content. For each body 
a primitive operation is called from which the server initiates body receipt:</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Do_Body"></a>
procedure</font> Do_Body (<b>Client</b> : <font color="#0000FF">in out </font>
HTTP_Client);</tt></p>
</blockquote>
<p>This procedure is called before the server starts receiving of the body of 
the pending request. The implementation, for instance, may create a file to write 
the body into here. It may use the 
information from the header fields and from the header of the body part for 
multipart content. The default implementation of this operation does nothing, 
which has the effect that the body is received but ignored. For multipart bodies
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Do_Body">Do_Body</a> 
is called for each part.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Get_Multipart_Header"></a>
function</font> Get_Multipart_Header<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Header</b> 
: Multipart_Header<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> String;</tt></p>
</blockquote>
<p>This function can be used in
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Do_Body">Do_Body</a> 
to determine the header fields of the body part. Multipart bodies are those with 
the content type specified as</p>
<blockquote>
	<pre><code class="text"><span class="line">Content-Type: multipart/form-data</span></code></pre>
</blockquote>
<p>Each part of the body may have header fields describing the content. These 
are queried using
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Get_Multipart_Header">
Get_Multipart_Header</a>.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Receive_Body_Tracing">
</a>procedure</font> Receive_Body_Tracing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Enable</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to enable or disable tracing of received bodies. 
When enabled the server traces parts of the received bodies as it decodes them.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Receive_Header_Tracing">
</a>procedure</font> Receive_Header_Tracing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Enable</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to enable or disable tracing of received headers. 
When enabled the server traces parts of the received headers and multipart 
headers.</p>
<p><u><b>Stream body receiver</b></u>. A body can be written into a stream. The body receipt is started by calling
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Receive_Body_stream">
Receive_Body</a> from
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Do_Body">Do_Body</a>. 
As the server receives parts of the body it writes them into the stream. The 
process is completed by either a call to
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Body_Received_stream">
Body_Received</a> or
to
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Body_Error_stream">
Body_Error</a>. Note that on communication errors, neither is called so that the 
side effects of
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Do_Body">Do_Body</a>, 
e.g. open files, must be removed upon finalization of the connection object (<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.HTTP_Client">HTTP_Client</a>).</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Body_Error_stream">
</a>procedure</font> Body_Error<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stream</b> : 
<font color="#0000FF">in out </font> Root_Stream_Type'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Error</b>&nbsp; : Exception_Occurrence<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called on an error occurred during writing the request's 
body into the <b>Stream</b>. If the implementation does not propagate exceptions 
the rest of the body is accepted but ignored. The 
default implementation raises Data_Error exception.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Body_Received_stream">
</a>procedure</font> Body_Received<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stream</b> : 
<font color="#0000FF">in out </font> Root_Stream_Type'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when all body is received. The default 
implementation does nothing. Typically when the stream is attached to a file, 
that file is closed in
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Body_Received_stream">
Body_Received</a> or
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Body_Error_stream">
Body_Error</a>.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Receive_Body_stream">
</a>procedure</font> Receive_Body<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stream</b> : <font color="#0000FF">access</font> Root_Stream_Type'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called from
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Do_Body">Do_Body</a> 
in order to start its receipt into <b>Stream</b>. The stream object specified in 
the call shall exist at least until a call to either
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Body_Received_stream">
Body_Received</a> or
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Body_Error_stream">
Body_Error</a>.</p>
<p><u><b>Custom body receiver</b></u>. A body can be received using a descendant 
of the abstract type declared in the package:</p>

<blockquote>
<p><tt><font color="#0000FF">type</font> Content_Destination
<font color="#0000FF">is abstract<br>
&nbsp;&nbsp; new </font>Ada.Finalization.Limited_Controlled<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">with null record</font>;</tt></p>
</blockquote>
<p>The following primitive operations are defined:</p>

<blockquote>
<p><tt><font color="#0000FF">
procedure</font> 
Close (<b>Source</b> :
<font color="#0000FF">in out</font> Content_Destination);</tt></p>
</blockquote>
<p>This procedure is when the body has been successfully received. The default 
implementation does nothing.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Put"></a>procedure</font> 
Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Source</b> :
<font color="#0000FF">in out</font> Content_Destination;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data</b>&nbsp;&nbsp; 
: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This procedure is called to store segments of the received body. The body receipt is started by calling
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Receive_Body_content">Receive_Body</a> from
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Do_Body">Do_Body</a>. 
It ends by calling either to
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Body_Received_content">Body_Received</a> or
to
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Body_Error_content">Body_Error</a> 
unless a communication error occurs. In the latter case the finalization of
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.HTTP_Client">
HTTP_Client</a> should perform necessary cleanup.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Body_Error_content">
</a>procedure</font> Body_Error<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Content</b> : 
<font color="#0000FF">in out </font> Content_Destination'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Error</b>&nbsp;&nbsp; : Exception_Occurrence<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Put">Put</a> 
propagates an exception. If the implementation does not propagate exceptions the rest of the body is accepted but ignored. The 
default implementation raises Data_Error exception.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Body_Received_content">
</a>procedure</font> Body_Received<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Content</b> : 
<font color="#0000FF">in out </font> Content_Destination'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when all body is received. The default 
implementation does nothing.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Receive_Body_content">
</a>procedure</font> Receive_Body<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Content</b> : 
<font color="#0000FF">in out </font> Content_Destination'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called from
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Do_Body">Do_Body</a> 
in order to start its receipt into <b>Content</b>. The object passed to the call 
shall exist at least until a call to either
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Body_Received_content">Body_Received</a> or&nbsp;
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Body_Error_content">Body_Error</a>.</p>
<p><u><b>CGI bodies</b></u>. The package provides support for CGI (Common 
Gateway Interface) forms posted using</p>

<blockquote>
<p><tt>Content-Type: application/x-www-form-urlencoded</tt></p>
</blockquote>
<p>which is the default. For example when the page contains forms 
like:</p>

<blockquote>
<div class="highlight">
	<pre><code class="html"><font color="#800080"><span class="nt">&lt;form</span> </font><span class="na"><font color="#FF0000">action=</font></span><span class="s">&quot;<font color="#0000FF">input.htm</font>&quot;</span> <font color="#FF0000"><span class="na">method=</span></font><span class="s">&quot;<font color="#0000FF">post</font>&quot;</span><font color="#800080"><span class="nt">&gt;</span>
   <span class="nt">&lt;input</span> </font><font color="#FF0000"><span class="na">type=</span></font><span class="s">&quot;<font color="#0000FF">text</font>&quot;</span> <font color="#FF0000"><span class="na">name=</span></font><span class="s">&quot;<font color="#0000FF">text</font>&quot;</span><font color="#800080"><span class="nt">&gt;</span>
   <span class="nt">&lt;input</span> </font><font color="#FF0000"><span class="na">type=</span></font><span class="s">&quot;<font color="#0000FF">submit</font>&quot;</span> <font color="#FF0000"><span class="na">name=</span></font><span class="s">&quot;<font color="#0000FF">submit</font>&quot;</span> <font color="#FF0000"><span class="na">value=</span></font><span class="s">&quot;<font color="#0000FF">Save</font>&quot;</span><font color="#800080"><span class="nt">&gt;</span>
<span class="nt">&lt;/form&gt;</span></font></code></pre>
</div>
</blockquote>
<p>The request's body posted by such a form consists of pairs key/value. In the 
above example it would be text/&lt;<i>some-user-input-text</i>&gt; and submit/save. 
Such bodies can be received and parsed using a
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Receive_Body_CGI">Receive_Body</a> 
that takes as an argument a table or a list of expected keys.</p>

<blockquote>
<p><tt><font color="#0000FF">type</font> String_Ptr <font color="#0000FF">is 
access all</font> String;<br>
<font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.CGI_Keys"></a>package</font> 
CGI_Keys <font color="#0000FF">is new </font>Tables (String_Ptr);</tt></p>
</blockquote>
<p>The package
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.CGI_Keys">CGI_Keys</a> 
provides tables to keep key/value pairs. The key is the table token. The table 
maps key tokens to pointers to the string containing the corresponding value. 
The values are allocated in the dynamic memory of the connection object. The 
memory used by the values is automatically reclaimed with each new request. The 
following operations are provided:</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Body_Error_CGI"></a>procedure</font> 
Body_Error<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Content</b> : <font color="#0000FF">in out</font> CGI_Keys.Table'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Error</b>&nbsp;&nbsp; : Exception_Occurrence<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called on body parsing errors. If the implementation does not propagate exceptions the rest of the body is accepted but ignored. The 
default implementation raises Data_Error exception.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Body_Received_CGI">
</a>procedure</font> Body_Received<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Content</b> : <font color="#0000FF">in out</font> CGI_Keys.Table'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when all body is received. The implementation may 
use <a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Get_CGI_Value">
Get_CGI_Value</a> in order to determine which keys were assigned to which 
values.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Get_CGI_Key"></a>
function</font> Get_CGI_Key<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> String;</tt></p>
</blockquote>
<p>This function returns the key by its position. The keys are enumerated from 1 
to <a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Get_CGI_Size">
Get_CGI_Size</a>. Constraint_Error is propagated when Index in not in the range 
1..<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Get_CGI_Size">Get_CGI_Size</a>.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Get_CGI_Size"></a>
function</font> Get_CGI_Size (<b>Client</b> : HTTP_Client) <font color="#0000FF">
return</font> Natural;</tt></p>
</blockquote>
<p>This function returns the number of acceptable keys. The keys are sets 
through a call for
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Receive_Body_CGI">Receive_Body</a>.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Get_CGI_Value"></a>
function</font> Get_CGI_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Client</b> : 
HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp; 
: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
String;</tt></p>
</blockquote>
<p>This function returns the value corresponding to the key specified by the 
parameter <b>Key</b>. When there is no such key or else no value was supplied 
the result is an empty string.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_CGI_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Client</b> : 
HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
String;</tt></p>
</blockquote>
<p>This function returns the value of a key by its position. The keys are 
enumerated from 1 to
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Get_CGI_Size">
Get_CGI_Size</a>. Constraint_Error is propagated when Index in not in the range 
1..<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Get_CGI_Size">Get_CGI_Size</a>. 
When no value for the key was supplied, the result is an empty string.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Receive_Body_CGI">
</a>procedure</font> Receive_Body<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Content</b> : <font color="#0000FF">access</font> CGI_Keys.Table'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called from
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Do_Body">Do_Body</a> 
in order to start its receipt into <b>Content</b>. The parameter <b>Content</b> 
is either a table of keys or a string. When a table is passed, the object  
shall exist at least until a call to either
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Body_Received_CGI">Body_Received</a> or&nbsp;
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Body_Error_CGI">Body_Error</a>. 
Note that key values are stored into the table object. Old values are erased 
before body receipt starts. The length of a key and a value is limited by the 
length of the request line specified by the discriminant <i>Request_Length</i> 
of <b>Client</b>. Only values of the keys present in Content are stored. Other 
values are ignored. When a key appears twice in the body only the first value is 
stored. All consequent appearances are ignored. Thus the maximum amount of 
memory needed to receive a body is limited by <b>Content</b>.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Receive_Body<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Content</b>&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Delimiter</b> : Character := '<font color="#FF0000">,</font>'<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This variant specifies keys using a string. The parameter <b>Content</b> 
lists expected keys. The keys in the string are separated using the character <b>
Delimiter</b>.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Receive_Body_CGI_Validated">
</a>procedure</font> Receive_Body (<b>Client</b> 
: <font color="#0000FF">in out</font> HTTP_Client);</tt></p>
</blockquote>
<p>This variant allows any key for which the primitive operation 
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Validate_Key">Validate_Key</a> 
returns <font color="#800000"><i>true</i></font>. Note that this behavior is 
potentially unsafe against attacks because the 
memory for each key/value pair is allocated dynamically. If this variant is used 
the default implementation of 
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Validate_Key">Validate_Key</a> should be overridden in order to 
limit the memory use.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Validate_Key">
</a>function</font> Validate_Key<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp; 
: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>This function is called when
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Receive_Body_CGI_Validated">
Receive_Body</a> is used in order to validate a <b>Key</b>. When
<font color="#800000"><i>true</i></font> is returned the value corresponding to 
the key is stored. Otherwise the key/value pair is discarded. The default 
implementation accepts all keys, which is potentially unsafe.</p>
<h4><a name="16.11.5"></a>16.11.5. Sending short responses</h4>
<p>The following procedures are used to send short responses, usually indicating 
errors:</p>

<blockquote>
<p><tt><font color="#0000FF">
procedure</font> Reply_HTML<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out </font>HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Code</b>&nbsp;&nbsp;&nbsp; 
: Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reason</b>&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Message</b> : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Get</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Boolean := True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sends a response with HTML content. The response has the 
format:</p>
<blockquote>
	<pre><code class="text"><span class="line">HTTP/1.1 &lt;<i>Code</i>&gt; &lt;<i>Reason</i>&gt;
Date: &lt;<i>Clock</i>&gt;
Content-Type: text/html
Connection: close
Content-Length: &lt;<i>Message'Length</i>&gt;

&lt;<i>Message</i>&gt;</span></code></pre>
</blockquote>
<p>The response shall fit into the output buffer. Otherwise Data_Error is 
propagated. When Get is <i><font color="#800000">false</font></i>, the response 
will not contain body, e.g. a response to a HEAD request. </p>

<blockquote>
<p><tt><font color="#0000FF">
procedure</font> Reply_Text<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out </font>HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Code</b>&nbsp;&nbsp;&nbsp; 
: Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reason</b>&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Message</b> : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Get</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Boolean := True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sends a response with plain text content. The response has the 
format:</p>
<blockquote>
	<pre><code class="text"><span class="line">HTTP/1.1 &lt;<i>Code</i>&gt; &lt;<i>Reason</i>&gt;
Date: &lt;<i>Clock</i>&gt;
Content-Type: text/plain
Connection: close
Content-Length: &lt;<i>Message'Length</i>&gt;

&lt;<i>Message</i>&gt;</span></code></pre>
</blockquote>
<p>The response shall fit into the output buffer. Otherwise Data_Error is 
propagated.</p>
<h4><a name="16.11.6"></a>16.11.6. Sending response header fields</h4>
<p>The following operations are used for sending the response header. The 
response should fit into the output buffer, otherwise the procedures propagate 
Data_Error. It is started with:</p>

<blockquote>
<p><tt><font color="#0000FF">
procedure</font> Send_Status_Line<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Code</b>&nbsp;&nbsp;&nbsp; 
: Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Text</b>&nbsp;&nbsp;&nbsp; 
: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Version</b> : String := &quot;<font color="#FF0000">HTTP/1.1</font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sends the status line with the code, reason text and protocol 
version, e.g.</p>

<blockquote>
	<pre><code class="text"><span class="line">HTTP/1.1 200 OK</span></code></pre>
</blockquote>
<p>Following the status line the response headers follow sent using the 
following operations:</p>

<blockquote>
<p><tt><font color="#0000FF">
procedure</font> Send_Accept_Ranges<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Accept_Ranges</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sends the <i>Accept-Ranges</i> header field with <i>bytes</i> 
when Accept_Ranges is <font color="#800000"><i>true</i></font>. or <i>none</i>, 
otherwise.</p>

<blockquote>
<p><tt><font color="#0000FF">
procedure</font> Send_Age<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Age</b>&nbsp;&nbsp;&nbsp; 
: Duration<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sends the <i>Age</i> header with the value specified by the 
parameter <b>Age</b>.</p>

<blockquote>
<p><tt><font color="#0000FF">
procedure</font> Send_Allow<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Allowed</b> : HTTP_Allowed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sends the <i>Allow</i> header with the
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.HTTP_Allowed">list 
of methods</a> specified by the parameter <b>Allowed</b>.</p>

<blockquote>
<p><tt><font color="#0000FF">
procedure</font> Send_Connection<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Persistent</b> : Boolean := True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sends the <i>Connection</i> header with the value <i>
keep-alive</i> when Persistent is <font color="#800000"><i>true</i></font> or <i>
close</i>, otherwise.</p>

<blockquote>
<p><tt><font color="#0000FF">
procedure</font> Send_Connection<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Persistent</b> : Boolean := True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sends the <i>Connection</i> header with the value <i>
keep-alive</i> when Persistent is <font color="#800000"><i>true</i></font> or <i>
close</i>, otherwise.</p>

<blockquote>
<p><tt><font color="#0000FF">
procedure</font> Send_Content_Range<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Content_Range</b> : String := &quot;<font color="#FF0000">none</font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sends the <i>Content-Range</i> header with the value of the 
parameter <b>Content_Range</b>.</p>

<blockquote>
<p><tt><font color="#0000FF">
procedure</font> Send_Content_Range<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp; 
: Stream_Element_Count;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Stream_Element_Count;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Length</b> : Stream_Element_Count<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sends the <i>Content-Range</i> header as <b>From</b>..<b>To</b> 
range followed by the total content length. For example when <b>From</b>=10, <b>
To</b>=300, <b>Length</b>=2300 the result is:</p>
<blockquote>
	<p><code class="text"><span class="line">Content-Range: 1<i>0</i>-300/2300</span></code></p>
</blockquote>

<blockquote>
<p><tt><font color="#0000FF">
procedure</font> Send_Content_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Media</b>&nbsp;&nbsp; : String := &quot;<font color="#FF0000">text/plain</font>&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Charset</b> : String := &quot;<font color="#FF0000">UTF-8</font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sends the <i>Content-Type</i> header.</p>

<blockquote>
<p><tt><font color="#0000FF">
procedure</font> Send_Date<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Date</b>&nbsp;&nbsp; 
: Time := Clock<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sends the <i>Date</i> header with the value set from the 
parameter <b>Date</b>.</p>

<blockquote>
<p><tt><font color="#0000FF">
procedure</font> Send_If_Modified_Since<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Date</b>&nbsp;&nbsp; 
: Time<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sends the <i>If-Modified-Since</i> header with the value set 
from the parameter <b>Date</b>.</p>

<blockquote>
<p><tt><font color="#0000FF">
procedure</font> Send_If_Unmodified_Since<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Date</b>&nbsp;&nbsp; 
: Time<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sends the <i>If-Unmodified-Since</i> header with the value set 
from the parameter <b>Date</b>.</p>

<blockquote>
<p><tt><font color="#0000FF">
procedure</font> Send_Last_Modified<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Date</b>&nbsp;&nbsp; 
: Time<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sends the <i>Last-Modified</i> header with the value set from 
the parameter <b>Date</b>.</p>

<blockquote>
<p><tt><font color="#0000FF">
procedure</font> Send_Length<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Length</b> : Natural<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> Send_Length<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Length</b> : Stream_Element_Count<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sends the <i>Content-Length</i> header with the value set from 
the parameter <b>Length</b>.</p>

<blockquote>
<p><tt><font color="#0000FF">
procedure</font> Send_Server (<b>Client</b> : <font color="#0000FF">in out</font> 
HTTP_Client);</tt></p>
</blockquote>
<p>This procedure sends the <i>Server</i> header with the value obtained through 
a dispatching call to
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Get_Name">Get_Name</a>.</p>

<blockquote>
<p><tt><font color="#0000FF">
procedure</font> Send<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Message</b> : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sends a short message, usually as a part of header response. 
The message shall fit into the output buffer.</p>

<h4><a name="16.11.7"></a>16.11.7. Sending response bodies</h4>
<p>A body can be taken from a stream, from a user-provided generator object, 
from the client's memory:</p>
<p><u><b>Short bodies</b></u>.</p>

<blockquote>
<p><tt><font color="#0000FF">
procedure</font> Send_Body<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; :
<font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Content</b> : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Get</b>&nbsp;&nbsp; &nbsp; 
: Boolean := True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>When the body is short, this procedure can be used to sent it. The parameter
<b>Content</b> specifies the body to send. The output buffer should be large 
enough to hold the body and the <i>
Content-Length</i> header which precedes it. Otherwise Data_Error is propagated. 
The parameter <b>Get</b> set to <font color="#800000"><i>false</i></font> for 
responses to a HEAD request, in which case no body is sent.</p>
<p><u><b>Stream contents</b></u>. To send a stream content as a body, 
one the following procedures is called:</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Send_Body_stream">
</a>procedure</font> Send_Body<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stream</b> : <font color="#0000FF">access</font> Root_Stream_Type'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Get</b>&nbsp;&nbsp;&nbsp; 
: Boolean := True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">procedure</font> Send_Body<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stream</b> : <font color="#0000FF">access</font> Root_Stream_Type'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Length</b> : Stream_Element_Count;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Get</b>&nbsp;&nbsp;&nbsp; 
: Boolean := True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The first variant uses chunked transfer, sending response header field <i>
Transfer-Encoding</i> with the value <i>chunked</i>. Before it starts 
transferring the body. This variant is used when the content length is unknown 
in advance. The second variant is used when the length is known. It sends <i>
Content-Length</i> before sending the body. The object specified by the 
parameter <b>Stream</b> shall exist until transfer completion, i.e. until 
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Body_Sent_stream">Body_Sent</a> is called, when the parameter <b>Get</b> is <font color="#800000"><i>
true</i></font>. When the parameter <b>Get</b> is set to <font color="#800000">
<i>false</i></font>, no body is sent. It is used when the response sent for a 
HEAD request.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Body_Sent_stream">
</a>procedure</font> Body_Sent<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stream</b> : 
<font color="#0000FF">in out </font> Root_Stream_Type'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Get</b>&nbsp;&nbsp;&nbsp; 
: Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when body was successfully sent. The default 
implementation does nothing. The implementation may close the streamed file. 
Note that on errors of reading the stream or sending the content the connection 
is dropped. Finalization of
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.HTTP_Client">
HTTP_Client</a> should perform necessary cleanup in this case.</p>
<p>The following sample code illustrates a response that sends a file back using
<a href="http://www.adaic.org/resources/add_content/standards/05aarm/html/AA-A-12-1.html">
Ada.Streams.Stream_IO</a>:</p>

<blockquote>
<p><tt>Open (File, In_File, &quot;<font color="#FF0000">my_file.txt</font>&quot;);<br>
Send_Status_Line (Client, <font color="#800000">200</font>, &quot;<font color="#FF0000">OK</font>&quot;, 
&quot;<font color="#FF0000">HTTP/1.1</font>&quot;);<br>
Send_Date (Client);<br>
Send_Server (Client);<br>
Send_Content_Type (Client, &quot;<font color="#FF0000">text/plain</font>&quot;);<br>
Send_Body (Client, Stream (File), Stream_Element_Count (Size (File)));</tt></p>
</blockquote>
<p>Note that <i>File</i> must be closed later, e.g. from the implementation of
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Body_Sent_stream">
Body_Sent</a>.
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Send_Body_stream">
Send_Body</a> only initiates file transfer, which the connection state machine 
takes care of.</p>
<p><u><b>Custom body provider</b></u>. A body can be obtained from an object which 
type is derived from the type:</p>
<blockquote>
<p><tt>Content_Not_Ready : <font color="#0000FF">exception</font>;<br>
<br>
<font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Content_Source"></a>type</font> Content_Source<font color="#0000FF"> is<br>
&nbsp;&nbsp; abstract new </font>Ada.Finalization.Limited_Controlled
<font color="#0000FF">with null record</font>;</tt></p>
</blockquote>
<p>The following primitive operation shall be defined:</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Get"></a>function</font> Get (<b>Source</b> :
<font color="#0000FF">access</font> Content_Source)<br>
<font color="#0000FF">&nbsp;&nbsp; return</font> String <font color="#0000FF">is 
abstract</font>;</tt></p>
</blockquote>
<p>This function is called to obtain next chunk of body. The length of returned 
piece should not exceed the capacity of the output buffer including prefix and 
suffix used for chunked transfer. The body end is indicated by
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Get">Get</a> 
returning an empty string. Note that
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Get">Get</a> shall 
not block, because this will block the server. If the content is not yet ready
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Get">Get</a> may 
propagate 
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Content_Not_Ready">Content_Not_Ready</a>. In this case
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Get">Get</a> will be 
called again when the server returns back to the socket some time later.</p>

<blockquote>
<p><tt><font color="#0000FF">
procedure</font> Send_Body<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; :
<font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Content</b> : <font color="#0000FF">access</font> Content_Source'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Get</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Boolean := True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">procedure</font> Send_Body<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; :
<font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Content</b> : <font color="#0000FF">access</font> Content_Source'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Length</b>&nbsp; : Stream_Element_Count;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Get</b>&nbsp;&nbsp;&nbsp;&nbsp; : Boolean := True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The first variant uses chunked transfer, sending response header field <i>
Transfer-Encoding</i> with the value <i>chunked</i>. Before it starts 
transferring the body. This variant is used when the content length is unknown 
in advance. The second variant is used when the length is known. It sends <i>
Content-Length</i> before sending the body. The object specified by the 
parameter <b>Content</b> shall exist until transfer completion. When the parameter <b>Get</b> is set to <font color="#800000">
<i>false</i></font>, no body is sent. It is used when the response sent for a 
HEAD request.</p>

<blockquote>
<p><font color="#0000FF">
<tt>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.Content_Not_Ready"></a></tt></font> 
<tt>Content_Not_Ready : <font color="#0000FF">exception</font>;</tt></p>
</blockquote>
<p>This is an exception
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Get">Get</a> may 
propagate to indicate that the content is not ready yet, but may become 
available in the future.</p>

<p><u><b>Accumulated body</b></u>. A body can be built in the dynamic memory of 
the connection object and then sent. The following operations are used to build 
the body:</p>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Accumulate_Body<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Content</b> : Stream_Element_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">procedure</font> Accumulate_Body<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Content</b> : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures add <b>Content</b> to the accumulated body. The memory 
allocated for the body is automatically reclaimed when the next request is 
received.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Accumulate_Body<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Content</b> : <font color="#0000FF">access</font> Stream_Element_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">procedure</font> Accumulate_Body<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Content</b> : <font color="#0000FF">access</font> String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures add a reference to <b>Content</b> to the accumulated body. 
The target shall exist at least until the response is sent. Usually this variant 
is used for statically allocated arrays.</p>

<blockquote>
<p><tt><font color="#0000FF">function</font> Accumulated_Body_Length (<b>Client</b> 
: HTTP_Client)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Stream_Element_Count;</tt></p>
</blockquote>
<p>This function returns the number of stream elements of the accumulated body.</p>

<blockquote>
<p><tt><font color="#0000FF">
procedure</font> Send_Body<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Get</b>&nbsp;&nbsp;&nbsp; 
: Boolean := True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sends the accumulated body. When the parameter <b>Get</b> is set to <font color="#800000">
<i>false</i></font>, no body is sent. It is used when the response sent for a 
HEAD request.</p>

<h4><a name="16.11.8"></a>16.11.8. WebSockets</h4>

<p>WebSockets is an upgrade protocol for HTTP defined in
<a href="http://tools.ietf.org/html/rfc6455">RFC 6455</a>. WebSockets allow 
full-duplex exchange of messages between the HTTP server and its client. 
Regardless its name it has little to do with network sockets. Here is a short 
summary of WebSockets:</p>
<ul>
	<li>The client requests the server to initiate exchange over WebSockets. If 
	the server accepts the request a WebSocket connection is established;</li>
	<li>The connection can be closed by either the server or the client;</li>
	<li>Only one connection can be used between the server and the client;</li>
	<li>Once connection is established the HTTP protocol cannot be used until 
	the connection is closed;</li>
	<li>The logical unit of the WebSocket protocol is message. A message can be split into 
	frames transparently to the endpoints;</li>
	<li>WebSocket messages exchange is full-duplex. The client and the server can send 
	and receive messages independently on each other.</li>
</ul>
<p>A WebSocket connection in
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.HTTP_Client">
HTTP_Client</a> is opened at the client's request which causes the function 
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Open">WebSocket_Open</a> 
called. When the implementation of 
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Open">WebSocket_Open</a> 
decides to accept the request, the procedure 
	<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Initialize">
	WebSocket_Initialize</a> is called before messages exchange starts. After 
this for each 
incoming message from the client the procedure 
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Received">WebSocket_Received</a> is called. The server uses 
the procedure 
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Send">WebSocket_Send</a> to send messages to the client. 
The connection can be closed by the 
server by calling
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Close">
WebSocket_Close</a>. Or it can be closed at the client request, in which case 
the procedure
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Closed">WebSocket_Closed</a> is called. On 
errors 
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Error">WebSocket_Error</a> is called 
before closing the connection. Thus upon closing the connection either
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Closed">WebSocket_Closed</a> 
or 
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Error">WebSocket_Error</a> 
is called. Finally the procedure 
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Finalize">WebSocket_Finalize</a> 
is called, which is the last operation performed on a connection.</p>
<p>Here is the list of WebSocket operations defined on
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.HTTP_Client">
HTTP_Client</a>:</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Close"></a>
procedure</font> WebSocket_Close<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Status</b>&nbsp; : WebSocket_Status := WebSocket_Normal_Closure;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Message</b> : String := &quot;&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when the server decides to close the current WebSocket 
connection. The parameter <b>Status</b> is the status code sent to the client.
<b>Message</b> is the reason text. It is UTF-8 encoded. Constraint_Error is 
propagated when Message is longer than 123 octets. End_Error is propagated when 
the connection is already closed. Note that when the client requests connection 
close, the server need not to call to
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Close">
WebSocket_Close</a> from the
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Closed">WebSocket_Closed</a> notification.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Closed">
</a>procedure</font> WebSocket_Closed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Status</b>&nbsp; : WebSocket_Status;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Message</b> : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when the client closes the connection. The parameter
<b>Status</b> is the status code received from the client and <b>Message</b> is 
the UTF-8 encoded reason text. The default implementation of this procedure does 
nothing.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Error">
</a>procedure</font> WebSocket_Error<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Error</b>&nbsp; : Exception_Occurrence<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called on errors which lead to connection closing. The parameter
<b>Error</b> describes the error. The default implementation of this procedure does 
nothing.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Finalize">
</a>procedure</font> WebSocket_Finalize (<b>Client</b> 
: <font color="#0000FF">in out</font> HTTP_Client);</tt></p>
</blockquote>
<p>This is the last procedure called on connection closing. The default implementation of this procedure does 
nothing.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Initialize">
</a>procedure</font> WebSocket_Initialize (<b>Client</b> 
: <font color="#0000FF">in out</font> HTTP_Client);</tt></p>
</blockquote>
<p>This is the first procedure called after 
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Open">WebSocket_Open</a> 
when the connection is established. The default implementation of this procedure does 
nothing.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Open">
</a>function</font> WebSocket_Open<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">access</font> HTTP_Client<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> WebSocket_Accept;</tt></p>
</blockquote>
<p>This function is called when the client requests a WebSocket connection. The 
implementation should verify the header fields and the URI in order to decide to 
accept or reject the request. Custom initialization of the WebSocket exchange 
should happen later in the implementation of
	<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Initialize">WebSocket_Initialize</a>. 
The purpose of 
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Open">WebSocket_Open</a> 
is only to decide if the connection request is to be accepted or rejected. The result's type is:</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Accept">
</a>type</font> WebSocket_Accept<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Accepted : Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Length&nbsp;&nbsp; : Natural<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is<br>
record<br>
&nbsp;&nbsp; case</font> Accepted <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when</font> True =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Size&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: WebSocket_Message_Size;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Duplex&nbsp;&nbsp;&nbsp; : 
Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Chunked&nbsp;&nbsp; : 
Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Protocols : String (<font color="#800000">1</font>..Length);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> False =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Code&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Reason&nbsp;&nbsp;&nbsp; : 
String (<font color="#800000">1</font>..Length);<br>
&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>The discriminant <i>Accepted</i> specifies if the server accepts the connection 
request. 
When <i><font color="#800000">true</font></i>, the connection is accepted and 
further record members specify:</p>
<ul>
	<li><i>Size</i> determines the maximal length in octets of an incoming 
	message. The client may split the message into several frames. The value 
	specifies the maximal integral length of the message or the maximal length 
	of the message chunk if chunked message receipt allowed (<i>Chunked</i> set
	<i><font color="#800000">true</font></i>) ;</li>
	<li><i>Duplex</i> specifies full-duplex operating mode when <font color="#800000"><i>
	true</i></font>;</li>
	<li><i>Chunked</i>, when <font color="#800000"><i>
	true, </i></font>allows messages larger than <i>Size</i> received in chunks 
	(see
	<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Received_Part">WebSocket_Received_Part</a>);</li>
	<li><i>Protocols</i> is the list of protocols reported to the client as 
	supported. If this string is empty the contents of <i>Sec-WebSocket-Protocol</i> 
	is taken.</li>
</ul>
<p>When <i>Accepted</i> is set to <i><font color="#800000">false</font></i> the 
connection is rejected and record members are:</p>
<ul>
	<li><i>Code</i> is the status code reported, e.g. 400;</li>
	<li><i>Reason</i> is the reason text, e.g. <i>Bad Request</i>.</li>
</ul>
<p>The value of the field <i>Duplex</i> enables or disables full-duplex messages 
exchange:</p>
<ul>
	<li>In the full-duplex mode the messages can be sent to the client 
	asynchronously to receiving messages from the client. The message can be 
	sent from one or several several independent tasks and also from the server's worker task. Typically the server implementation 
	would start a task sending messages from
	<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Initialize">WebSocket_Initialize</a> 
	and dispose it in 
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Finalize">WebSocket_Finalize</a>. On the context of an 
	independent task calls to
	<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Send">WebSocket_Send</a> 
	are blocking. When
	<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Send">WebSocket_Send</a> 
	is called on the context of the server's working task this causes the 
	message queueing without blocking. Therefore sending messages on the worker's task context may 
	allocate dynamic memory. In the full-duplex mode the server continues reading from the socket even if there is 
	pending output (<a href="#GNAT.Sockets.Server.Set_Overlapped_Size">Set_Overlapped_Size</a> 
	is called to allow this).</li>
	<li>In the half-duplex mode, the socket 
	exchange remains half-duplex as it is for normal HTTP exchange. That is, the server responds only when the client sends 
	a message. The communication is strictly client-server. The server 
	implementation runs on the context of the same task. The server does not 
	read from the socket until the client receives all pending output. Sending 
	messages may allocate dynamic memory when the output buffer is less than the 
	message length including WebSocket framing.</li>
</ul>
<p>The default implementation of 
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Open">WebSocket_Open</a> 
rejects all incoming connections.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Received">
</a>procedure</font> WebSocket_Received<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Message</b> : Stream_Element_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> WebSocket_Received<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Message</b> : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures are called on a message receipt. The parameter <b>Message</b> 
is the message body. It is a Stream_Element_Array if the client has sent a binary 
message or else a String (UTF-8 encoded) if the message was a text message. Note 
that <b>Message</b> is not checked for being a correctly encoded UTF-8 text. The default 
implementations do nothing.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Received_Part">
</a>procedure</font> WebSocket_Received_Part<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Message</b> : Stream_Element_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> WebSocket_Received_Part<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Message</b> : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures are called when a message part is received. It is used only 
when 
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Open">WebSocket_Open</a> 
returns the <i>Chunked</i> field of
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Accept">WebSocket_Accept</a>
<font color="#800000"><i>true</i></font> and the message payload data exceeds 
the message buffer (the field <i>Size</i>). In this case the message may be 
delivered in chunks. Each time the message payload data buffer becomes full
	<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Received_Part">WebSocket_Received_Part</a> 
is called.
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Received">WebSocket_Received</a> 
is called for the last message part indicating that the receipt is completed. The parameter <b>Message</b> 
is the message body. It is a Stream_Element_Array if the client has sent a binary 
message or else a String (UTF-8 encoded) if the message was a text message. Note 
that <b>Message</b> is not checked for being a correctly encoded UTF-8 text. The default 
implementations do nothing.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Send">
</a>procedure</font> WebSocket_Send<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Message</b> : Stream_Element_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> WebSocket_Send<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Message</b> : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures send a message to the client. The parameter <b>Message</b> 
is the message body. It is a Stream_Element_Array when a binary 
message must be sent or else a String (UTF-8 encoded) if the message is a text 
message. Note that
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Send">WebSocket_Send</a> 
does not check validity of UTF-8 encoding. End_Error is propagated when there is no connection.</p>
<p><u><b>WebSocket chat sample</b></u>. The following is a complete example of 
WebSocket based chat. We start with the package providing an implementation of 
the server:</p>File <i>test_websocket_servers.ads</i>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#0000FF">with</font> 
Ada.Exceptions; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; use</font> 
Ada.Exceptions;<br>
<font color="#0000FF">with</font> Ada.Streams; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
use</font> Ada.Streams;<br>
<font color="#0000FF">with</font> GNAT.Sockets; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
use</font> GNAT.Sockets;<br>
<font color="#0000FF">with</font> GNAT.Sockets.Server; <font color="#0000FF">&nbsp;use</font> 
GNAT.Sockets.Server;<br>
<br>
<font color="#0000FF">with</font> 
GNAT.Sockets.Connection_State_Machine.HTTP_Server;<br>
<font color="#0000FF">use</font>&nbsp; 
GNAT.Sockets.Connection_State_Machine.HTTP_Server;<br>
<br>
<font color="#0000FF">package</font> Test_WebSocket_Servers
<font color="#0000FF">is</font><br>
<font color="#008000">&nbsp;&nbsp; --<br>
&nbsp;&nbsp; -- Chat_Factory -- Creates chat connection objects<br>
&nbsp;&nbsp; --</font><br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Chat_Factory<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Request_Length&nbsp; : 
Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Output_Size&nbsp;&nbsp;&nbsp;&nbsp; 
: Buffer_Length;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Max_Connections : 
Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is new</font> 
Connections_Factory <font color="#0000FF">with null record</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Create<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Factory&nbsp; : <font color="#0000FF">access</font> Chat_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Listener : <font color="#0000FF">access</font> Connections_Server'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
From&nbsp;&nbsp;&nbsp;&nbsp; : Sock_Addr_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">return</font> Connection_Ptr;</tt></TD>
  </TR>
</TABLE>
<p>The type Chat_Factory is used to create a connection instance. It is derived 
from <a href="#GNAT.Sockets.Server.Connections_Factory">Connections_Factory</a> 
and overrides <a href="#GNAT.Sockets.Server.Create">Create</a>.</p>File <i>
test_websocket_servers.ads</i> (continuation):
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#008000">&nbsp;&nbsp; --<br>
&nbsp;&nbsp; -- Chat_Client -- Chat HTTP site<br>
&nbsp;&nbsp; --<br>
</font>&nbsp;&nbsp; <font color="#0000FF">type</font> Chat_Client
<font color="#0000FF">is new</font> HTTP_Client <font color="#0000FF">with null 
record</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Do_Get (Client :
<font color="#0000FF">in out</font> Chat_Client);<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Do_Head (Client :
<font color="#0000FF">in out</font> Chat_Client);</tt></TD>
  </TR>
</TABLE>
<p>The type Chat_Client is an implementation of a connection to the chat server. 
We override <a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Do_Get">
Do_Get</a> and
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Do_Head">Do_Head</a> 
which will handle HTTP requests.</p>
File <i>test_websocket_servers.ads</i> (continuation):
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt>&nbsp;&nbsp; <font color="#0000FF">function</font> 
WebSocket_Open<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Client : <font color="#0000FF">access</font> Chat_Client<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">return</font> WebSocket_Accept;<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> WebSocket_Received<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Client&nbsp; : <font color="#0000FF">in out</font> Chat_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Message : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">end</font> Test_WebSocket_Servers;</tt></TD>
  </TR>
</TABLE>
<p>Next we override
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Open">WebSocket_Open</a> 
and 
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.WebSocket_Received">WebSocket_Received</a>, 
the only WebSocket operations needed.</p>
<p>The implementation of the package is as follows:</p>
File<i> test_websocket_servers.adb</i>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">with</font> Ada.Calendar;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Ada.Calendar;<br>
<font color="#0000FF">with</font> Strings_Edit.Quoted;&nbsp;
<font color="#0000FF">use</font> Strings_Edit.Quoted;<br>
<br>
<font color="#0000FF">package body </font>Test_WebSocket_Servers<font color="#0000FF"> 
is</font><br>
<br>
&nbsp;&nbsp; CRLF : <font color="#0000FF">constant</font> String := 
Character'Val (<font color="#800000">13</font>) &amp; Character'Val (<font color="#800000">10</font>);<br>
&nbsp;&nbsp; Page : <font color="#0000FF">constant</font> String :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&lt;!DOCTYPE html&gt;</font>&quot; &amp; 
CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&lt;html lang=&quot;&quot;en&quot;&quot;&gt;</font>&quot; 
&amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&lt;head&gt;</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp; &lt;meta charset=&quot;&quot;utf-8&quot;&quot;&gt;</font>&quot; 
&amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp; &lt;title&gt;WebSockets 
Test&lt;/title&gt;</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&lt;/head&gt;</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&lt;body&gt;</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp; &lt;div 
id=&quot;&quot;page-wrapper&quot;&quot;&gt;</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&lt;h1&gt;WebSockets Test&lt;/h1&gt;</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&lt;div id=&quot;&quot;status&quot;&quot;&gt;Connecting...&lt;/div&gt;</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&lt;ul id=&quot;&quot;messages&quot;&quot;&gt;&lt;/ul&gt;</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&lt;form id=&quot;&quot;message-form&quot;&quot; action=&quot;&quot;#&quot;&quot;</font>&quot; &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
method=&quot;&quot;post&quot;&quot;&gt;</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&lt;textarea id=&quot;&quot;message&quot;&quot;</font>&quot; &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
placeholder=&quot;&quot;Write message here...&quot;&quot;</font>&quot; &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
required&gt;&lt;/textarea&gt;</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&lt;button type=&quot;&quot;submit&quot;&quot;&gt;Send Message&lt;/button&gt;</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&lt;button type=&quot;&quot;button&quot;&quot;</font>&quot; &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
id=&quot;&quot;close&quot;&quot;&gt;Close Connection&lt;/button&gt;</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&lt;/form&gt;</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp; &lt;/div&gt;</font>&quot; 
&amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp; &lt;script 
'text/javascript'&gt;</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
window.onload = function ()</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
{</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
// Elements on the page</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
var Form =</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot; <font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
document.getElementById ('message-form');</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
var Message =</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
document.getElementById ('message');</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
var List =</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
document.getElementById ('messages');</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
var Status =</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
document.getElementById ('status');</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
var Close =</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
document.getElementById ('close');</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
// Create a new WebSocket</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
var Socket = new WebSocket ('ws://localhost');</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Socket.onerror = function (error)</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
{&nbsp; // Socket error</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
console.log ('Error: ' + error);</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
};</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Socket.onopen = function (event)</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
{&nbsp; // Opened</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Status.innerHTML = 'Connected to: '</font>&quot; &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
+ event.currentTarget.URL;</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Status.className = 'open';</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
};</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Socket.onmessage = function (event)</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
{&nbsp; // Incoming message</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
var message = event.data;</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
List.innerHTML +=</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
'&lt;li class=&quot;&quot;received&quot;&quot;&gt;&lt;span&gt;Received:&lt;/span&gt;'</font>&quot; &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
+ message + '&lt;/li&gt;';</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
};</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Socket.onclose = function (event)</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
{&nbsp; // Disconnected</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Status.innerHTML = 'Disconnected';</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Status.className = 'closed';</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
};</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Form.onsubmit = function (e)</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
{&nbsp; // Send when the form is submitted</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
e.preventDefault ();</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
var Text = Message.value; // Text</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Socket.send (Text); // Send the message</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
List.innerHTML += // To the list</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
'&lt;li class=&quot;&quot;sent&quot;&quot;&gt;&lt;span&gt;Sent:&lt;/span&gt;'</font>&quot; &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
+ Text + '&lt;/li&gt;';</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Message.value = ''; // Clear the field</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
return false;</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
};</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Close.onclick = function (e)</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
{&nbsp; // When the close button is clicked</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
e.preventDefault ();</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Socket.close(); // Close the socket</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
return false;</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
};</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
};</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&nbsp;&nbsp; &lt;/script&gt;</font>&quot; 
&amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&lt;/body&gt;</font>&quot; &amp; CRLF &amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">&lt;/html&gt;</font>&quot;;</tt></TD>
  </TR>
</TABLE>
<p>Page is the web page source. It contains a web-form with chat text and two 
buttons. The rest of the page is a JavaScript program that deals with the WebSocket at the client side. It opens a connection and then when the <i>send</i> 
button is pressed sends the text over the WebSocket to the server. The server's 
message is put back into the text field.</p>File<i> test_websocket_servers.adb</i> 
(continued):
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; <font color="#0000FF">function</font> 
Create<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Factory&nbsp; : <font color="#0000FF">access</font> Chat_Factory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Listener : <font color="#0000FF">access</font> Connections_Server'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
From&nbsp;&nbsp;&nbsp;&nbsp; : Sock_Addr_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">return</font> Connection_Ptr <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result : Connection_Ptr;<br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">new</font> 
Chat_Client<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Listener&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; Listener.all'Unchecked_Access,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Request_Length =&gt; Factory.Request_Length,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Output_Size&nbsp;&nbsp;&nbsp; =&gt; Factory.Output_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Receive_Body_Tracing (Chat_Client (Result.<font color="#0000FF">all</font>), 
True);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Result;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Create;</tt></TD>
  </TR>
</TABLE>
<p>This function is called when a HTTP connection is requested. It creates a new 
connection instance (Chat_Client) and turns on tracing.</p>File<i> 
test_websocket_servers.adb</i> (continued):
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; <font color="#0000FF">procedure</font> 
Do_Get_Head<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Client : <font color="#0000FF">in out</font> Chat_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Get&nbsp;&nbsp;&nbsp; : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Status : Status_Line <font color="#0000FF">
renames</font> Get_Status_Line (Client);<br>
&nbsp;&nbsp; <font color="#0000FF">begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case </font>Status.Kind <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when</font> None =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Reply_Text 
(Client, <font color="#800000">404</font>, &quot;<font color="#FF0000">Not found</font>&quot;, 
&quot;<font color="#FF0000">Not found</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> 
File =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">if</font> Status.File = &quot;&quot; <font color="#0000FF">or else</font> 
Status.File = &quot;<font color="#FF0000">index.htm</font>&quot; <font color="#0000FF">
then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Send_Status_Line (Client, <font color="#800000">200</font>, &quot;<font color="#FF0000">OK</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Send_Date (Client);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Send_Server (Client);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Send_Content_Type (Client, &quot;<font color="#FF0000">text/html</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Accumulate_Body (Client, Page);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Send_Body (Client, Get);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">else</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Reply_Text<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
(&nbsp; Client,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#800000">404</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&quot;<font color="#FF0000">Not found</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&quot;<font color="#FF0000">No file </font>&quot; &amp; Quote (Status.File) &amp; &quot;<font color="#FF0000"> 
found</font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> 
URI =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Reply_Text<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Client,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#800000">404</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&quot;<font color="#FF0000">Not found</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&quot;<font color="#FF0000">No URI </font>&quot; &amp; Quote (Status.Path) &amp; &quot;<font color="#FF0000"> 
found</font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Do_Get_Head;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Do_Get (Client :
<font color="#0000FF">in out</font> Chat_Client) <font color="#0000FF">is<br>
&nbsp;&nbsp; begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Do_Get_Head (Client, True);<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Do_Get;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Do_Head (Client :
<font color="#0000FF">in out</font> Chat_Client)<font color="#0000FF"> is<br>
&nbsp;&nbsp; begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Do_Get_Head (Client, False);<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Do_Head;</tt></TD>
  </TR>
</TABLE>
<p>On a HTTP request like GET or HEAD when the file name is empty or else <i>
index.htm</i> the page is sent back. The response's header contains current 
date, server and content fields.</p>File<i> test_websocket_servers.adb</i> 
(continued):
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; <font color="#0000FF">function</font> 
WebSocket_Open<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Client : <font color="#0000FF">access</font> Chat_Client<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">return</font> WebSocket_Accept<font color="#0000FF"> is<br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return </font>(True, <font color="#800000">0</font>,
<font color="#800000">1024</font>, False, &quot;&quot;);<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> WebSocket_Open;</tt></TD>
  </TR>
</TABLE>
<p>When a WebSocket&nbsp;connection is requested, it is accepted. The 
communication mode set to half-duplex as the server will send nothing on its own 
initiative.</p>File<i> test_websocket_servers.adb</i> (continued):
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; <font color="#0000FF">procedure</font> 
WebSocket_Received<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Client&nbsp; : <font color="#0000FF">in out</font> Chat_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Message : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is<br>
&nbsp;&nbsp; begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WebSocket_Send (Client, To_HTTP (Clock) &amp; &quot; &quot; &amp; 
Quote (Message));<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> WebSocket_Received;<br>
<br>
<font color="#0000FF">end</font> Test_WebSocket_Servers;</tt></TD>
  </TR>
</TABLE>
<p>When a WebSocket message is received, the current time stamp with quoted 
message is sent back.</p>
<p>The main program looks like:</p>File<i> test_websocket_server.adb</i>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">with</font> Ada.Exceptions;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Ada.Exceptions;<br>
<font color="#0000FF">with</font> Ada.Text_IO;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Ada.Text_IO;<br>
<font color="#0000FF">with</font> Test_WebSocket_Servers;&nbsp;
<font color="#0000FF">use</font> Test_WebSocket_Servers;<br>
<br>
<font color="#0000FF">with</font> GNAT.Sockets.Server.Pooled;<br>
<br>
<font color="#0000FF">procedure</font> Test_WebSocket_Server is<br>
&nbsp;&nbsp; Minutes : <font color="#0000FF">constant</font> :=
<font color="#800000">3.0</font>;<br>
&nbsp;&nbsp; Port&nbsp;&nbsp;&nbsp; : <font color="#0000FF">constant</font> :=
<font color="#800000">80</font>;<br>
&nbsp;&nbsp; Tasks&nbsp;&nbsp; : <font color="#0000FF">constant</font> :=
<font color="#800000">5</font>;<br>
<font color="#0000FF">begin<br>
&nbsp;&nbsp; declare</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Factory : <font color="#0000FF">aliased</font> 
Chat_Factory<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
(&nbsp; Request_Length&nbsp; =&gt; <font color="#800000">200</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Output_Size&nbsp;&nbsp;&nbsp;&nbsp; =&gt; <font color="#800000">1024</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Max_Connections =&gt; <font color="#800000">100</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Server : GNAT.Sockets.Server.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Connections_Server (Factory'Access, Port);<br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Trace_On (Factory =&gt; Factory, Received =&gt; True, 
Sent =&gt; True);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put_Line (&quot;<font color="#FF0000">HTTP server 
started</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">delay</font>
<font color="#800000">60.0</font> * Minutes;<font color="#008000"> -- Service</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put_Line (&quot;<font color="#FF0000">HTTP server 
stopping</font>&quot;);<br>
&nbsp;&nbsp; <font color="#0000FF">end</font>;<br>
<font color="#0000FF">exception</font><br>
&nbsp;&nbsp; <font color="#0000FF">when</font> Error : <font color="#0000FF">
others</font> =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put_Line (&quot;<font color="#FF0000">Error: </font>&quot; 
&amp; Exception_Information (Error));<br>
<font color="#0000FF">end</font> Test_WebSocket_Server;</tt></TD>
  </TR>
</TABLE>
<p>A factory object is created first. Then a pooled server is created. Once 
created it can be connected to from a browser that supports WebSockets. After 3 
minutes the application completes.</p>

<h4><a name="16.11.9"></a>16.11.9. Utility routines</h4>

<blockquote>
<p><tt><font color="#0000FF">function</font> From_Escaped<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Name</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Translate_Plus</b> : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )
<font color="#0000FF">&nbsp;return</font> String;</tt></p>
</blockquote>
<p>This function converts <b>Name</b> to an 
<a href="http://www.ietf.org/rfc/rfc2396.txt">RFC 2396</a>-escaped sequence. The 
sequence uses %HH to represent special characters. When <b>Translate_Plus</b> is 
true '+' is replaced with space.</p>

<blockquote>
<p><tt><font color="#0000FF">function</font> To_Escaped (<b>Name</b> : String)
<font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function converts <b>Name</b> from an 
<a href="http://www.ietf.org/rfc/rfc2396.txt">RFC 2396</a>-escaped sequence to plain 
string.</p>

<blockquote>
<p><tt><font color="#0000FF">function</font> To_HTML (<b>Text</b> : String)
<font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function encodes an UTF-8 string <b>Text</b> using HTML escape 
sequences, e.g. &amp;#HHH;. Data_Error is propagated when <b>Text</b> is not a valid 
UTF-8 string.</p>

<blockquote>
<p><tt><font color="#0000FF">function</font> To_HTTP (<b>Date</b> : Time)
<font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function returns time represented in HTTP format, e.g. </p>
<blockquote>
	<pre>Sun, 17 Feb 2013 21:02:43 +0100</pre>
</blockquote>

<blockquote>
<p><tt><font color="#0000FF">function</font> To_Time (<b>Date</b> : String)
<font color="#0000FF">return</font> Time;</tt></p>
</blockquote>
<p>This function converts time represented in HTTP format to Ada.Calendar.Time. 
Time_Error is propagated on errors.</p>

<h4><a name="16.11.10"></a>16.11.10. SQLite3 database browser</h4>

<p><a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser">
</a>The package
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser">
GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser</a> provides 
simplified means to browse a SQLite3 database on the host side. This can be used 
for debugging purposes. When an embedded server deploys an SQLite3 database, it 
is convenient to be able to view the database state remotely.</p>
<p>SQLite3 browsing facilities are implemented as types derived from
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Content_Source">
Content_Source</a>. The following code snippet illustrates typical usage:</p>

<blockquote>
<p><tt>DB_Root : <font color="#0000FF">aliased</font> DB_Tables_Content;<br>
...<br>
Set_Database_Path (DB_Root, File);&nbsp; <font color="#008000">-- Set 
database file</font><br>
Send_Status_Line (Client, <font color="#800000">200</font>, &quot;<font color="#FF0000">OK</font>&quot;);<br>
Send_Date (Client);<br>
Send_Server (Client);<br>
Send_Content_Type (Client, &quot;<font color="#FF0000">text/html</font>&quot;);<br>
Send_Body (Client, DB_Root'Access); <font color="#008000">-- Send back the list 
of all<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
-- database tables</font></tt></p>
</blockquote>
<p>The abstract content type used as the base for other types:</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Abstract_SQLite_Content">
</a>type</font> Abstract_SQLite_Content <font color="#0000FF">is<br>
&nbsp;&nbsp; abstract new</font> Content_Source <font color="#0000FF">with 
private</font>;</tt></p>
</blockquote>
<p>Here are the primitive operations of the type:</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Get_Database">
</a>function</font> Get_Database (<b>Content</b> : Abstract_SQLite_Content)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Data_Base;</tt></p>
</blockquote>
<p>This function returns a <a href="#SQLite.Data_Base">handle</a> to the database object previously set using 
either
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Set_Database">
Set_Database</a> or
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Set_Database_Path">
Set_Database_Path</a>.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Get_Database_Path">
</a>function</font> Get_Database_Path (<b>Content</b> : Abstract_SQLite_Content)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function returns the database file path as previously set using either
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Set_Database">
Set_Database</a> or
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Set_Database_Path">
Set_Database_Path</a>. When no database set, the result is an empty string.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Set_Database">
</a>procedure</font> Set_Database<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Content</b> :
<font color="#0000FF">in out</font> Abstract_SQLite_Content;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Source</b>&nbsp; : Abstract_SQLite_Content'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the database same as the database set in <b>Source</b>.</p>

<blockquote>
<p><tt><font color="#0000FF">
procedure</font> Set_Database<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Content</b>&nbsp;&nbsp; :
<font color="#0000FF">in out</font> Abstract_SQLite_Content;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Database</b>&nbsp; : Data_Base;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
File_Name</b> : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This variant uses a <a href="#SQLite.Data_Base">handle</a> to the database 
object of an already opened database and its file name.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Set_Database_Path">
</a>procedure</font> Set_Database_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Content</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Abstract_SQLite_Content;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
File_Name</b> : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Flags&nbsp;&nbsp;&nbsp; </b>&nbsp;: Open_Flags := READONLY <font color="#0000FF">
or</font> FULLMUTEX<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the database. The parameter <b>File_Name</b> is the path to the 
SQLite3 database file. <b>Flags</b> specifies the options used when the database 
file is opened. Data_Error is propagated when on a database error. 
Use_Error is propagated on a file open error.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Abstract_Table_Content">
</a>type</font> Abstract_Table_Content <font color="#0000FF">is<br>
&nbsp;&nbsp; abstract new</font>
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Abstract_SQLite_Content">
Abstract_SQLite_Content</a> <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>This type is the base type of contents related to a database table. Before 
first use the database should be set using either
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Set_Database">
Set_Database</a> or
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Set_Database_Path">
Set_Database_Path</a> and
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Set_Table">
Set_Table</a>. The following primitive operations are defined:</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Get_Table">
</a>function</font> Get_Table (<b>Content</b> : Abstract_Table_Content)
<font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function returns the name of the table previously set using the 
procedure
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Set_Table">
Set_Table</a>. When no table was set, the result is an empty string.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Set_Table">
</a>procedure</font> Set_Table<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Content</b> :
<font color="#0000FF">in out</font> Abstract_Table_Content;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Table</b>&nbsp;&nbsp; : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the table to use.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Table<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Content</b> :
<font color="#0000FF">in out</font> Abstract_Table_Content;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Source</b>&nbsp; : Abstract_Table_Content'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the database and the table from the object <b>Source</b>.</p>

<p><u><b>Browsing database tables</b></u>.</p>
<p>The following content type lists the database tables:</p>

<blockquote>
<p><tt><font color="#0000FF">type</font> DB_Tables_Content <font color="#0000FF">
is new</font>
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Abstract_SQLite_Content">
Abstract_SQLite_Content</a> <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The page is formatted as a table which contains names of the tables in its 
rows. The table names are linked to the pages which paths are returned by the 
operation
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Get_Content_Page">
Get_Content_Page</a>. The table name is followed to a link to the page 
representing the table's schema. The table schema page path is returned by the 
operation
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Get_Schema_Page">
Get_Schema_Page</a>.</p>
<p>&nbsp;The following primitive operations are declared on the type:</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Get_Content_Page">
</a>function</font> Get_Content_Page<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Content</b> : 
DB_Tables_Content;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Table</b> 
: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> String;</tt></p>
</blockquote>
<p>This function returns the name of the page that lists the contents of the 
table. The result is:</p>
<blockquote>
	<pre>&lt;<i>database-path</i>&gt;/&lt;<i>table-name</i>&gt;/content.htm</pre>
</blockquote>

<p>where &lt;<i>database-path</i>&gt; is the result of
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Get_Database_Path">
Get_Database_Path</a> and &lt;<i>table-name</i>&gt; is <b>Table</b>. The function can 
be overridden in order to provide a different naming. The server must use an 
instance of Table_Content object for the page.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Get_Schema_Page">
</a>function</font> Get_Schema_Page<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Content</b> : 
DB_Tables_Content;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Table</b> 
: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> String;</tt></p>
</blockquote>
<p>This function returns the name of the page that lists the contents of the 
table. The result is:</p>
<blockquote>
	<pre>&lt;<i>database-path</i>&gt;/&lt;<i>table-name</i>&gt;/schema.htm</pre>
</blockquote>

<p>where &lt;<i>database-path</i>&gt; is the result of
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Get_Database_Path">
Get_Database_Path</a> and &lt;<i>table-name</i>&gt; is <b>Table</b>. The function can 
be overridden in order to provide a different naming. The server must use an 
instance of Schema_Content object for the page.</p>
<p><u><b>Listing database table schema</b></u>.</p>
<p>The following content type lists the schema of a database table:</p>

<blockquote>
<p><tt><font color="#0000FF">type</font> Schema_Content <font color="#0000FF">is 
new</font>
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Abstract_Table_Content">
Abstract_Table_Content</a> <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The content is formatted as a table which lists information the database 
table's columns. I.e. the column name, data type etc. This following primitive 
operations are declared:</p>

<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Content_Page<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Content</b> : 
DB_Tables_Content;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Table</b> 
: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> String;</tt></p>
</blockquote>
<p>This function returns the name of the page that lists the contents of the 
table. The result is:</p>
<p><u><b>Listing database table content</b></u>.</p>
<p>The content is formatted as a table which lists the database table's columns. 
The following content type lists the contents of a database table:</p>

<blockquote>
<p><tt><font color="#0000FF">type</font> Table_Content<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Max_String_Column_Width : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;is new</font>
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Abstract_Table_Content">
Abstract_Table_Content</a> <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The discriminant Max_String_Column_Width specifies the maximal number of 
string or blob characters indicated before the string representation is 
truncated.</p>

<p><u><b>Querying the database</b></u>.</p>
<p>The following content type is used to execute SQL queries on a database:</p>

<blockquote>
<p><tt><font color="#0000FF">type</font> DB_Query_Content<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Max_String_Column_Width : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;is new</font>
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Abstract_Table_Content">
Abstract_Table_Content</a> <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The content shows a form to input the query and a button to submit the query. 
The submitted query is executed and the result set, if any, is listed on the 
page. The discriminant Max_String_Column_Width specifies the maximal number of 
string or blob characters indicated before the string representation is 
truncated. The database is set using either
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Set_Database">
Set_Database</a> or
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Set_Database_Path">
Set_Database_Path</a>. Whether the database can be modified by query is 
determined by the parameter <b>Flags</b> used in
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Set_Database_Path">
Set_Database_Path</a>. The following operations are defined:</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Get_Query_Action">
</a>function</font> Get_Query_Action (<b>Content</b> : DB_Query_Content)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>The function returns the field action used for the database query. It can be 
overridden in order to provide a different naming. The server must use an 
instance of DB_Query_Content object for the action. The result is:</p>
<blockquote>
	<pre>&lt;<i>database-path</i>&gt;/query.htm</pre>
</blockquote>

<p>The method of the action is POST. It means that the query must be processed 
within the body of
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Do_Post">Do_Post</a>. 
When the field <i>File</i> of Get_Status_Line is
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser.Get_Query_Action">
Get_Query_Action</a> the content should be used in the response:</p>

<blockquote>
<p><tt><font color="#0000FF">if</font> Get_Query_Action (Client).File = 
Get_Query_Action (Query) <font color="#0000FF">then</font><br>
&nbsp;&nbsp; Send_Status_Line (Client, <font color="#800000">200</font>, &quot;<font color="#FF0000">OK</font>&quot;);<br>
&nbsp;&nbsp; Send_Date (Client);<br>
&nbsp;&nbsp; Send_Server (Client);<br>
&nbsp;&nbsp; Send_Content_Type (Client, &quot;<font color="#FF0000">text/html</font>&quot;);<br>
&nbsp;&nbsp; Set_Statement (Query, Get_CGI_Value (Client, &quot;<font color="#FF0000">statement</font>&quot;));<br>
&nbsp;&nbsp; Send_Body (Client, Query'Access);<br>
&nbsp;&nbsp; <font color="#0000FF">return</font>;</tt></p>
</blockquote>
<p>The CGI key of containing the SQL command is <i>statement</i>.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Statement<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Content</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> DB_Query_Content;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Statement</b> : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure should be used in order to execute a statement and then show 
its result set as a part of the content. The execution happens when the content 
is sent using Send_Body. Typically it is set from the CGI key <i>statement</i>.</p>

<p align="right">
  <A name="16.12"></A><a href="#16.11"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#16.13"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>16.12. HTTP client protocol implementation</H3>

<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client"></a>The package 
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Client">GNAT.Sockets.Connection_State_Machine.HTTP_Client</a> provides an implementation of 
<a href="http://www.ietf.org/rfc/rfc2616.txt">HTTP 1.1</a> client protocol suitable for working with a
<a href="#GNAT.Sockets.Server.Connections_Server">multiple connections</a> 
server, e.g. with a single task handling multiple connections. It can also be 
used with a <a href="#GNAT.Sockets.Server.Pooled.Pooled_Server">server backed by 
a pool of tasks</a>. The package declares the 
HTTP connection object type:</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.HTTP_Session"></a>type</font> 
HTTP_Session<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Listener&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">access</font> Connections_Server'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Response_Length : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Input_Size&nbsp;&nbsp; &nbsp;&nbsp; : Buffer_Length;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Output_Size&nbsp;&nbsp; &nbsp; : Buffer_Length<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is new</font> 
State_Machine <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The discriminants are</p>
<ul>
	<li><i>Listener</i> is the server object to handle the connection;</li>
	<li><i>Response_Length</i> is the maximum length of a HTTP response line. This 
	limit applies to the response status line and the lines of the response header fields. 
	It does not limit the response message;</li>
	<li><i>Input_Size</i> is the input buffer size. It is not required to be 
	especially large, e.g. to accommodate all request or all request line;</li>
	<li><i>Output_Size</i> is the output buffer size. The buffer must be large 
	to accommodate the response status line and its fields. The same buffer is 
	used for the response body when no chunked transfer is used. For chunked 
	transfer the buffer size determines the maximum size of the chunk.</li>
</ul>
<p align="left">The implementation functions asynchronously as other
<a href="#GNAT.Sockets.Server.Connection">connection objects</a> on the context 
of the multiple connections server's task. When used from another task note that 
the connection might be missing or the object might be already active with a 
request. The object operations such as Get only initiate a request. Their 
completion must be awaited. The following primitive operations are provided:</p>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Connect_Parameters_Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Session</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Session;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Host</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Address</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Sock_Addr_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Max_Connect_No</b> : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The procedure overrides the default implementation of
<a href="#GNAT.Sockets.Server.Connect_Parameters_Set">Connect_Parameters_Set</a>. 
It sets the <i>Host</i> header to <b>Host</b>.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Connected (<b>Session</b> :
<font color="#0000FF">in out</font> HTTP_Session);</tt></p>
</blockquote>
<p>The procedure overrides the default implementation of
<a href="#GNAT.Sockets.Server.Connected">Connected</a>.</p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Completed"></a><tt>
<font color="#0000FF">procedure</font> Completed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Session</b> :
<font color="#0000FF">in out</font> HTTP_Session;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Method</b>&nbsp; : HTTP_Server.HTTP_Method;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Status</b>&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ <b>
Message</b> : <font color="#0000FF">access</font> <i>destination of the response message</i> 
]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>One of the procedures is called upon response message receipt. <b>Method</b> 
is the HTTP method which was used in the request. <b>Status</b> is the response 
status code. <b>Message</b> is the object where the message response was stored. 
If any, it can be of ether of the types:</p>
<ul>
	<li><i>Root_Stream_Type'Class</i></li>
	<li><i>Content_Destination'Class</i></li>
</ul>
<p>The default implementation does nothing.</p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Delete"></a><tt>
<font color="#0000FF">procedure</font> Delete<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Session</b> :
<font color="#0000FF">in out</font> HTTP_Session;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp; 
: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ <b>
Message</b> : <font color="#0000FF">access</font> <i>destination of the response message</i> 
]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures issue a request with the DELETE method. <b>Name</b> is the 
requested URI. <b>Message</b>, when specified, is the container to receive the 
response's message. It can be of ether of the types:</p>
<ul>
	<li><i>Root_Stream_Type'Class</i></li>
	<li><i>Content_Destination'Class</i></li>
</ul>
<p>Use_Error is propagated when there is no connection or else 
another request is still pending.</p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Get"></a><tt>
<font color="#0000FF">procedure</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Session</b> :
<font color="#0000FF">in out</font> HTTP_Session;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Message</b> :
<font color="#0000FF">access</font> <i>destination of the response message</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp; : Stream_Element_Count := 
<font color="#800000">1</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Stream_Element_Count := 
<font color="#800000">0</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);</tt></p>
</blockquote>
<p>These procedures issue a request with the GET method. <b>Name</b> is the 
requested URI. <b>Message</b> is the container to receive the 
response's message. It can be of ether of the types:</p>
<ul>
	<li><i>Root_Stream_Type'Class</i></li>
	<li><i>Content_Destination'Class</i></li>
</ul>
<p><b>From</b>..<b>To</b> is the range to send as the <i>Range</i> 
header. When <b>From</b> is greater than <b>To</b> no <i>Range</i> header is 
sent. Use_Error is propagated when there is no connection or else another 
request is still pending.</p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Get_Keep_Alive"></a><tt>
<font color="#0000FF">function</font> Get_Keep_Alive (<b>Session</b> : 
HTTP_Session) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if the <i>
Connection</i> header used in request is <i>keep-alive</i>. Otherwise it is <i>
close</i>. See also
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Client.Set_Keep_Alive">
Set_Keep_Alive</a>.</p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Get_Request_Header"></a>
<tt>
<font color="#0000FF">function</font> Get_Request_Header<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Session</b> : 
HTTP_Session;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Header</b>&nbsp; 
: HTTP_Server.Text_Header<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> String;</tt></p>
</blockquote>
<p>This function returns the value of text header used in requests. When empty 
string is returned the corresponding header will not be used in the requests. 
The request header values are set with 
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Client.Set_Request_Header">Set_Request_Header</a>. 
Some of them can be set explicitly upon method invocation, when they are 
required by the method.</p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Get_Request_Method"></a>
<tt>
<font color="#0000FF">function</font> Get_Request_Method<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Session</b> : 
HTTP_Session<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> HTTP_Server.HTTP_Method;</tt></p>
</blockquote>
<p>This function returns the method used in the last request. E.g. it is <i>
HTTP_GET</i> after calling
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Client.Get">Get</a>.</p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Get_Request_Range"></a>
<tt>
<font color="#0000FF">procedure</font> Get_Request_Range<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Session</b> : 
HTTP_Session;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Stream_Element_Count;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Stream_Element_Count<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure uses the range (zero-based bytes of content) used in the last 
request. When <b>From</b> is greater than <b>To</b>, no range was used.</p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Get_Response_Code"></a>
<tt>
<font color="#0000FF">function</font> Get_Response_Code (<b>Session</b> : 
HTTP_Session) <font color="#0000FF">
return</font> Positive;</tt></p>
</blockquote>
<p>This function returns the status code as retuned in the response to the last 
request. E.g. 200, 404 etc.</p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Get_Response_Connection_Flags"></a>
<tt>
<font color="#0000FF">function</font> Get_Response_Connection_Flags<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Session</b> : 
HTTP_Session<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> HTTP_Server.Connection_Flags;</tt></p>
</blockquote>
<p>This function returns the 
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.Connection_Flags">value</a> of the <i>Connection</i> header in the last 
response. Note that when the server returns <i>Connection</i>: <i>close</i>, the 
client drops the session. In that case client must explicitly reconnect to the 
server again, e.g. by calling <a href="#GNAT.Sockets.Server.Connect">Connect</a>.</p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Get_Response_Header"></a>
<tt>
<font color="#0000FF">function</font> Get_Response_Header<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Session</b> : HTTP_Session;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Header</b>&nbsp; 
: Text_Header<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function returns the 
value of the header as returned in the last server response. For headers not 
specified in the response the result is an empty string.</p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Get_Response_Reason"></a>
<tt>
<font color="#0000FF">function</font> Get_Response_Reason (<b>Session</b> : HTTP_Session)
<font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function returns the 
reason text from the last server response, e.g. &quot;OK&quot;.</p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Get_Response_Version"></a>
<tt>
<font color="#0000FF">function</font> Get_Response_Version (<b>Session</b> : HTTP_Session)
<font color="#0000FF">return</font> HTTP_Server.HTTP_Version;</tt></p>
</blockquote>
<p>This function returns the 
protocol version number as given in the last server response. Typically, it is 
1.1.</p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Head"></a><tt>
<font color="#0000FF">procedure</font> Head<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Session</b> :
<font color="#0000FF">in out</font> HTTP_Session;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp; : Stream_Element_Count := 
<font color="#800000">1</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Stream_Element_Count := 
<font color="#800000">0</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);</tt></p>
</blockquote>
<p>This procedures issues a request with the HEAD method. <b>Name</b> is the 
requested URI. <b>From</b>..<b>To</b> is the range to send as the <i>Range</i> 
header. When <b>From</b> is greater than <b>To</b> no <i>Range</i> header is 
sent. Use_Error is propagated when there is no connection or else another 
request is still pending.</p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Initialize"></a><tt>
<font color="#0000FF">procedure</font> Initialize (<b>Session</b> :
<font color="#0000FF">in out</font> HTTP_Session);</tt></p>
</blockquote>
<p>This procedure must be called from the new implementation if overridden.</p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Is_Active"></a>
<tt>
<font color="#0000FF">function </font>Is_Active (<b>Session</b> : HTTP_Session)
<font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if there is a 
request pending on the connection.</p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Message_Store_Error"></a>
<tt>
<font color="#0000FF">procedure </font>Message_Store_Error<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Session</b> :
<font color="#0000FF">in out</font> HTTP_Session;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stream</b>&nbsp; : <font color="#0000FF">in out</font> Root_Stream_Type'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Error</b>&nbsp;&nbsp; : Exception_Occurrence<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure </font>Message_Store_Error<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Session</b> :<font color="#0000FF"> 
in out</font> HTTP_Session;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Content</b> :<font color="#0000FF"> in out</font> 
HTTP_Server.Content_Destination'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Error</b>&nbsp;&nbsp; : Exception_Occurrence<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>One of these procedures is called on an error occurred during storing the 
response data. The method caused the error can be obtained using 
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Client.Get_Request_Method">Get_Request_Method</a>. The default implementations raise Data_Error exception which 
causes the connection to be dropped.</p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Options"></a><tt>
<font color="#0000FF">procedure</font> Options<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Session</b> :
<font color="#0000FF">in out</font> HTTP_Session;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp; 
: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ <b>Message</b> :
<font color="#0000FF">access</font> <i>destination of the response message</i> ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);</tt></p>
</blockquote>
<p>These procedures issue a request with the OPTIONS method. <b>Name</b> is the 
requested URI. <b>Message</b> is the container to receive the 
response's message. It can be of ether of the types:</p>
<ul>
	<li><i>Root_Stream_Type'Class</i></li>
	<li><i>Content_Destination'Class</i></li>
</ul>
<p>Use_Error is propagated when there is no connection or else another 
request is still pending.</p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Post"></a><tt>
<font color="#0000FF">procedure</font> Post<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Session</b> :
<font color="#0000FF">in out</font> HTTP_Session;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp; 
: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Content</b> : <i>source of the request body</i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Length</b>&nbsp; 
: Stream_Element_Count; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Message</b> : <font color="#0000FF">access</font> <i>destination of the response 
message</i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>MIME</b>&nbsp;&nbsp;&nbsp; 
: String := Post_MIME<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);</tt></p>
</blockquote>
<p>These procedures issue a request with the POST method. <b>Name</b> is the 
requested URI. The request body is specified by the parameter Content. It can be 
one of the following types:</p>
<ul>
	<li><i>String</i></li>
	<li><i>Stream_Element_Array</i></li>
	<li><i>Root_Stream_Type'Class</i>. In this case when <b>Length</b> is 
	present, it is the total number of bytes in the body to take from the 
	stream and a plain body transfer is used. When <b>Length</b> is absent, the body is sent using 
	a chunked 
	transfer;</li>
	<li><i>Content_Source'Class</i>. When <b>Length</b> is present, it is the 
	total number of bytes in the body to take from and a plain body transfer is 
	used. When <b>Length</b> 
	is absent, the body is sent using a chunked transfer.</li>
</ul>
<p>&nbsp;<b>Message</b> is the container to receive the 
response's message. It can be of ether of the types:</p>
<ul>
	<li><i>Root_Stream_Type'Class</i></li>
	<li><i>Content_Destination'Class</i></li>
</ul>
<p>The parameter <b>MIME</b> is the value to be used with the <i>Content-Type</i> 
header. By default it is <i>application/x-www-form-urlencoded</i>. Use_Error is propagated when there is no connection or else another 
request is still pending.</p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Put"></a><tt>
<font color="#0000FF">procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Session</b> :
<font color="#0000FF">in out</font> HTTP_Session;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp; 
: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Content</b> : <i>source of the request body</i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Length</b>&nbsp; 
: Stream_Element_Count; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Message</b> : <font color="#0000FF">access</font> <i>destination of the response 
message</i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>MIME</b>&nbsp;&nbsp;&nbsp; 
: String := Post_MIME<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);</tt></p>
</blockquote>
<p>These procedures issue a request with the PUT method. <b>Name</b> is the 
requested URI. The request body is specified by the parameter Content. It can be 
one of the following types:</p>
<ul>
	<li><i>String</i></li>
	<li><i>Stream_Element_Array</i></li>
	<li><i>Root_Stream_Type'Class</i>. In this case when <b>Length</b> is 
	present, it is the total number of bytes in the body to take from the 
	stream and a plain body transfer is used. When <b>Length</b> is absent, the body is sent using 
	a chunked 
	transfer;</li>
	<li><i>Content_Source'Class</i>. When <b>Length</b> is present, it is the 
	total number of bytes in the body to take from and a plain body transfer is 
	used. When <b>Length</b> 
	is absent, the body is sent using a chunked transfer.</li>
</ul>
<p>&nbsp;<b>Message</b> is the container to receive the 
response's message. It can be of ether of the types:</p>
<ul>
	<li><i>Root_Stream_Type'Class</i></li>
	<li><i>Content_Destination'Class</i></li>
</ul>
<p>The parameter <b>MIME</b> is the value to be used with the <i>Content-Type</i> 
header. By default it is <i>text/html; charset=utf-8</i>. Use_Error is propagated when there is no connection or else another 
request is still pending.</p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Receive_Header_Tracing"></a>
<tt>
<font color="#0000FF">procedure</font> Receive_Header_Tracing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Session</b> :
<font color="#0000FF">in out</font> HTTP_Session;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Enable</b>&nbsp; : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure enables or disables response header tracing.</p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Receive_Message_Tracing"></a>
<tt>
<font color="#0000FF">procedure</font> Receive_Message_Tracing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Session</b> :
<font color="#0000FF">in out</font> HTTP_Session;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Enable</b>&nbsp; : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure enables or disables response message tracing.</p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Set_Keep_Alive"></a>
<tt>
<font color="#0000FF">procedure</font> Set_Keep_Alive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Session</b> :
<font color="#0000FF">in out</font> HTTP_Session;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Enable</b>&nbsp; : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>Normally when a query is completed the client disconnects from the server. 
The connection object is collected. This behavior is matched by the request 
header <i>Connection</i> set to <i>close</i>. Alternatively the client may stay 
connected in which case the header is set to <i>keep-alive</i>. This procedure 
is used to change the behavior. Note that the server may request dropping 
connection anyway.</p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Set_Request_Date"></a>
<tt>
<font color="#0000FF">procedure</font> Set_Request_Date<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Session</b> :
<font color="#0000FF">in out</font> HTTP_Session;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Enable</b>&nbsp; : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure enables or disables the header <i>Date</i> to be used with the 
requests. By default the <i>Date</i> header is enabled.</p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Set_Request_Header"></a>
<tt>
<font color="#0000FF">procedure</font> Set_Request_Header<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Session</b> :
<font color="#0000FF">in out</font> HTTP_Session;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Header</b>&nbsp; : HTTP_Server.Text_Header;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : String := &quot;&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> String;</tt></p>
</blockquote>
<p>This procedure sets the value of a text header used in requests. When empty 
string is set the corresponding header will not be used in the requests.</p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Set_Request_If_Modified_Since"></a>
<tt>
<font color="#0000FF">procedure</font> Set_Request_If_Modified_Since<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Session</b> :
<font color="#0000FF">in out</font> HTTP_Session;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>
Date&nbsp; </b>&nbsp; : Time ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure enables or disables the header <i>If-Modified-Since</i> to be 
used with the requests. By default the header is disabled. To enable the header 
the parameter
<b>Date</b> must be specified, which will be the header value. To disable the 
header <b>Date</b> must be omitted. Time_Error is propagated when <b>Date</b> is 
invalid.&nbsp; </p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Set_Request_If_Unmodified_Since"></a>
<tt>
<font color="#0000FF">procedure</font> Set_Request_If_Unmodified_Since<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Session</b> :
<font color="#0000FF">in out</font> HTTP_Session;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>
Date&nbsp; </b>&nbsp; : Time ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure enables or disables the header <i>If-Unmodified-Since</i> to 
be used with the requests. By default the header is disabled. To enable the 
header the parameter
<b>Date</b> must be specified, which will be the header value. To disable the 
header <b>Date</b> must be omitted. Time_Error is propagated when <b>Date</b> is 
invalid.&nbsp; </p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Set_Request_If_Unmodified_Since0"></a>
<tt>
<font color="#0000FF">procedure</font> Set_Request_If_Unmodified_Since<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Session</b> :
<font color="#0000FF">in out</font> HTTP_Session;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>
Date&nbsp; </b>&nbsp; : Time ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure enables or disables the header <i>If-Unmodified-Since</i> to 
be used with the requests. By default the header is disabled. To enable the 
header the parameter
<b>Date</b> must be specified, which will be the header value. To disable the 
header <b>Date</b> must be omitted. Time_Error is propagated when <b>Date</b> is 
invalid.&nbsp; </p>

<blockquote>
<p>
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Set_Request_If_Unmodified_Since1"></a>
<tt>
<font color="#0000FF">procedure</font> Trace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Session</b> :
<font color="#0000FF">in out</font> HTTP_Session;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Message</b> : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is used to write trace.</p>

<h4><a name="16.12.1"></a>16.12.1. Signaled client</h4>

<p><a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Signaled"></a>The package
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Client.Signaled">
GNAT.Sockets.Connection_State_Machine.HTTP_Client.Signaled</a> provides 
a client to use with an external task. The client
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.HTTP_Session">
HTTP_Session</a> is driven by the task of the multiple connection server. The 
task can service more than one socket and one connection. When operating in this 
mode <a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.HTTP_Session">
HTTP_Session</a> should be extended to implement higher level logic from 
call-backs such as <a href="#GNAT.Sockets.Server.Connected">Connected</a> and
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Client.Completed">Completed</a>. 
A more straightforward would be non-busy waiting for a connection to be 
established and a pending request to complete in some independent task as 
implemented in this package:</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Server.HTTP_Session.Signaled.HTTP_Session_Signaled"></a>type</font> 
HTTP_Session_Signaled <font color="#0000FF">is new </font>HTTP_Session <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>This is the type of a client to used from an external task. Note that when 
created the object must be referenced using a handle in order to prevent its 
premature destruction (see <a href="#memory-management-of-connection-objects">memory management of 
connection objects</a>).</p>
<p align="left">The implementation functions asynchronously as other
<a href="#GNAT.Sockets.Server.Connection">connection objects</a> on the context 
of the multiple connections server's task. When used from another task note that 
the connection might be missing or the object might be already active with a 
request. The object operations such as Get only initiate a request. Their 
completion must be awaited. The following primitive operations are provided:</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Signaled.Cancel">
</a>procedure</font> Cancel (<b>Session</b> 
: <font color="#0000FF">in out</font> HTTP_Session_Signaled);</tt></p>
</blockquote>
<p>The procedure cancels
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Client.Signaled.Connect">
Connect</a> and
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Client.Signaled.Wait">Wait</a> 
operations pending in other tasks. The corresponding operations propagate 
Cancel_Error declared in this package. Note that this has no effect on the 
communication performed by the client.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Signaled.Connect">
</a>procedure</font> Connect<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Session</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> HTTP_Session_Signaled;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Host</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Port</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Port_Type := <font color="#800000">80</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Max_Connect_No</b> : Positive&nbsp; := Positive'Last;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Timeout</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Duration&nbsp; := 
Duration'Last<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The procedure is a synchronous variant of asynchronous
<a href="#GNAT.Sockets.Server.Connect">Connect</a>. Unlike the latter it awaits 
for the connection to be established. <b>Timeout</b> is the connection timeout. 
Timeout_Error, declared in this package, is propagated when the timeout expires. 
Cancel_Error is propagated when some other tasks calls
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Client.Signaled.Cancel">Cancel</a>. 
Note that in both cases communication with the target, e.g. connection attempts, 
is not interrupted or influenced.&nbsp; Status_Error is propagated when the 
number of attempts was exhausted. Other errors, e.g. Socket_Error indicate I/O 
errors.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.HTTP_Client.Signaled.Wait">
</a>procedure</font> Wait<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Session</b>&nbsp;&nbsp; :
<font color="#0000FF">in out</font> HTTP_Session_Signaled;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Connected</b> : Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Timeout</b>&nbsp;&nbsp; : Duration := Duration'Last<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The procedure awaits the session to become ready for another request when <b>
Connected</b> is <i><font color="#800000">true</font></i>. If the connection 
gets lost an exception is propagated as described below. When <b>Connected</b> 
is <i><font color="#800000">false</font></i> the procedure waits for any pending 
request to complete, the connection can be dropped without raising an exception.</p>
<ul>
	<li>When the client is used in a keep-alive mode (persistent connections),
	<b>Connected</b> should be <font color="#800000"><i>true</i></font>, and 
	after getting an exception
	<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Client.Signaled.Connect">
	Connect</a> is called.</li>
	<li>When connection is not persistent.
	<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Client.Set_Keep_Alive">
	Set_Keep_Alive</a> is used with <b>Enable</b> set to <i>
	<font color="#800000">false</font></i>. <b>Connected</b> is <i>
	<font color="#800000">false</font></i>
	<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Client.Signaled.Connect">
	Connect</a> is called before each new request.</li>
</ul>
<p><b>Timeout</b> is the connection timeout. 
Timeout_Error is propagated when the timeout expires. Cancel_Error is propagated 
when the operation was canceled by another task calling 
<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Client.Signaled.Cancel">Cancel</a>. Note that in 
both cases communication with the target is not interrupted or influenced. Status_Error is propagated when the 
number of attempts was exhausted. Other errors, e.g. Socket_Error indicate I/O 
errors.</p>

<p align="right">
  <A name="16.13"></A><a href="#16.12"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#16.14"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>16.13. MODBUS client protocol implementation</H3>

<p>
<a name="GNAT.Sockets.Connection_State_Machine.MODBUS_Client"></a>The package 
<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client">GNAT.Sockets.Connection_State_Machine.MODBUS_Client</a> provides an implementation of 
the MODBUS TCP/IP client. The client is suitable for working with a
<a href="#GNAT.Sockets.Server.Connections_Server">multiple connections</a> 
server, e.g. with a single task handling multiple connections. It can also be 
used with a <a href="#GNAT.Sockets.Server.Pooled.Pooled_Server">server backed by 
a pool of tasks</a>. The MODBUS function codes supported by the client are:</p>
<p>Class 0:</p>
<ul>
	<li><i>Read multiple registers</i> (<b>FC3</b>)</li>
	<li><i>Write multiple registers</i> (<b>FC16</b>)</li>
</ul>
<p>Class 1:</p>
<ul>
	<li><i>Read coils</i> (<b>FC1</b>)</li>
	<li><i>Read discrete inputs</i> (<b>FC2</b>)</li>
	<li><i>Read input registers</i> (<b>FC4</b>)</li>
	<li><i>Write coil</i> (<b>FC5</b>)</li>
	<li><i>Write single register</i> (<b>FC6</b>)</li>
	<li><i>Read exception status</i> (<b>FC7</b>)</li>
</ul>
<p>Class 2:</p>
<ul>
	<li><i>Force multiple coils</i> (<b>FC15</b>)</li>
	<li><i>Mask write register</i> (<b>FC23</b>)</li>
	<li><i>Read/write registers</i> (<b>FC23</b>)</li>
	<li><i>Read FIFO queue</i> (<b>FC24</b>)</li>
</ul>
<p>
The package declares the 
<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.MODBUS_Client">
MODBUS_Client</a> connection object type:</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.MODBUS_Client.MODBUS_Client"></a>type</font> 
MODBUS_Client<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Listener&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">access</font> Connections_Server'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Output_Size&nbsp;&nbsp; &nbsp; : Buffer_Length<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is new</font> 
State_Machine <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The discriminants are:</p>
<ul>
	<li><i>Listener</i> is the server object to handle the connection;</li>
	<li><i>Output_Size</i> is the output buffer size. The maximum required for 
	single request is about 140 elements. If the client wanted to queue more than one request it should be 
	increased correspondingly.</li>
</ul>
<p>The client operations are asynchronous, normally meant to be called on the 
context of the <a href="#GNAT.Sockets.Server.Connections_Server">multiple 
connections server</a> task. For a client with synchronous operations see
<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Synchronous.MODBUS_Synchronous_Client">MODBUS_Synchronous_Client</a>. The following types and constants are declared:</p>

<blockquote>
<p><tt>MODBUS_Port : <font color="#0000FF">constant</font> Port_Type :=
<font color="#800000">502</font>;</tt></p>
</blockquote>
<p>This is the MODBUS TCP/IP port number.</p>

<blockquote>
<p><tt><font color="#0000FF">type</font> Exception_Code <font color="#0000FF">is 
new</font> Unsigned_8;</tt></p>
</blockquote>
<p>This is the type of the exception code returned by the MODBUS master when it 
rejects a request.</p>

<blockquote>
<p><tt><font color="#0000FF">function</font> Error_Text (<b>Code</b> : 
Exception_Code) <font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function returns textual description of the exception code <b>Code</b>.</p>

<blockquote>
<p><tt><font color="#0000FF">type</font> Function_Code <font color="#0000FF">is 
new</font> Unsigned_8;</tt></p>
</blockquote>
<p>This is the type of the MODBUS function code, e.g. 2 denotes <b>FC2</b>.</p>

<blockquote>
<p><tt><font color="#0000FF">type</font> Unit_No <font color="#0000FF">is new</font> 
Unsigned_8;</tt></p>
</blockquote>
<p>This is the MODBUS slave number. A MODBUS server may handle up to 254 slaves. 
The number 255 is used when the server has only one slave, which number is 
irrelevant.</p>

<blockquote>
<p><tt><font color="#0000FF">type</font> Bit_Address <font color="#0000FF">is 
new</font> Unsigned_16;</tt></p>
</blockquote>
<p>This type defines the MODBUS address space that maps coils and digital 
outputs. The actual mapping depends on the concrete device.</p>

<blockquote>
<p><tt><font color="#0000FF">type</font> Word_Address <font color="#0000FF">is 
new</font> Unsigned_16;</tt></p>
</blockquote>
<p>This type defines the MODBUS address space that maps 16-bit registers. The 
word 
addresses are incremented by 1.</p>

<blockquote>
<p><tt><font color="#0000FF">type</font> Reference_ID <font color="#0000FF">is 
new</font> Unsigned_16;</tt></p>
</blockquote>
<p>The reference value is used to identify requests. The server sends the same 
value back it becomes from the client.</p>

<blockquote>
<p><tt><font color="#0000FF">type</font> Bit_Array <font color="#0000FF">is 
array </font>(Bit_Address <font color="#0000FF">range</font> &lt;&gt;)
<font color="#0000FF">of</font> Boolean;</tt></p>
</blockquote>
<p>This type is used to define a set of consequent bits when sent to or received 
from the server.</p>

<blockquote>
<p><tt><font color="#0000FF">type</font> Word_Array <font color="#0000FF">is 
array </font>(Word_Address <font color="#0000FF">range</font> &lt;&gt;)
<font color="#0000FF">of</font> Unsigned_16;</tt></p>
</blockquote>
<p>This type is used to define a set of consequent words when sent to or 
received from the server.</p>
<p align="left">The following primitive operations are provided for the client:</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Bits_Read"></a>procedure</font> 
Bits_Read<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MODBUS_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reference</b> : Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Values</b>&nbsp;&nbsp;&nbsp; : Bit_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Code</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Function_Code;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when some bits were successfully read. The read 
values are in set into the parameter <b>Values</b>. Note that the array indices 
do not correspond to the actual bit addresses. <b>Reference</b> has the value 
passed to the server with the request. <b>Code</b> is the function code 1, 2 (<b>FC1</b>,
<b>FC2</b>). <b>Unit</b> is the slave responding if more than one. The 
default implementation traces.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Bits_Written"></a>procedure</font> 
Bits_Written<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MODBUS_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reference</b> : Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Bit_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Bit_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Code</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Function_Code;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when some bits were successfully written. <b>From</b>..<b>To</b> 
is the written range of addresses. <b>Reference</b> has the value passed to the 
server with the request. <b>Code</b> is the function code 5, 15 (<b>FC5</b>, <b>FC15</b>).
<b>Unit</b> is the slave responding if more than one. The default implementation 
traces.</p>

<blockquote>
<p><tt><font color="#0000FF">function</font> Can_Send<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
MODBUS_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Code</b>&nbsp;&nbsp; 
: Function_Code;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Count</b>&nbsp; 
: Natural := <font color="#800000">0</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if the output 
buffer has space to queue a request with the function code specified by <b>Code</b>. 
The parameter <b>Count</b> is the number of bits to write for <b>FC15</b>. It is 
the number of words to write for <b>FC16</b> or <b>FC23</b>. For other function 
codes <b>Count</b> is ignored. Constraint_Error is 
propagated when the function code is not supported. Note that sending can still 
fail if there is no connection to the MODBUS server.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Exception_Status_Received">
</a>procedure</font> Exception_Status_Received<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MODBUS_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reference</b> : Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Status</b>&nbsp;&nbsp;&nbsp; : Unsigned_8;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when <b>FC7</b> request is completed. <b>Status</b> 
is the the exception status (a predefined range of coils). <b>Reference</b> has 
the value passed to the server with the request. <b>Unit</b> is the slave 
responding if more than one. The default implementation traces.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Failed"></a>procedure</font> 
Failed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MODBUS_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reference</b> : Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Error</b>&nbsp;&nbsp;&nbsp;&nbsp; : Exception_Code;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Code</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Function_Code;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when the server responds with an exception. <b>Error</b> 
is the exception code. <b>Reference</b> has the value passed to the server with 
the request. <b>Code</b> is the function code that caused the exception. <b>Unit</b> 
is the slave responding if more than one. The default implementation traces.</p>

<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Request_Length<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
MODBUS_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Code</b>&nbsp;&nbsp; 
: Function_Code;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Count</b>&nbsp; 
: Natural := <font color="#800000">0</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Stream_Element_Count;</tt></p>
</blockquote>
<p>This function returns the number of elements in the output buffer required to 
queue a request with the function code specified by <b>Code</b>. The parameter
<b>Count</b> is the number of bits to write for <b>FC15</b>. It is the number of 
words to write for <b>FC16</b> or <b>FC23</b>. For other function codes <b>Count</b> 
is ignored. Constraint_Error is 
propagated when the function code is not supported.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Send_FC1"></a>procedure</font> 
Send_FC1<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MODBUS_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reference</b> : Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Bit_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Bit_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No := <font color="#800000">255</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to send a <i>Read Coils</i> request. The execution 
is asynchronous, when completed
<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Bits_Read">
Bits_Read</a> is called. Upon MODBUS exceptions
<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Failed">Failed</a> 
is called. <b>Reference</b> is any value the server will return back, e.g. a 
sequence number. <b>From</b>..<b>To</b> is the bit range to read. <b>Unit</b> is the slave to 
query. Use_Error is propagated when the server is not connected. Data_Error is 
propagated when the output buffer is full, e.g. when the client tries to queue 
several requests without awaiting a response.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Send_FC2<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MODBUS_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reference</b> : Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Bit_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Bit_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No := <font color="#800000">255</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to send a <i>Read Discrete Inputs</i> request. The 
behavior and parameters are same as of
<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Send_FC1">Send_FC1</a>.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Send_FC3"></a>procedure</font> 
Send_FC3<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MODBUS_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reference</b> : Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Word_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Word_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No := <font color="#800000">255</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to send a <i>Read Holding Registers</i> request. The execution 
is asynchronous, when completed
<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Words_Read">Words_Read</a> is called. Upon MODBUS exceptions
<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Failed">Failed</a> 
is called. <b>Reference</b> is any value the server will return back, e.g. a 
sequence number. <b>From</b>..<b>To</b> is the words range to read. <b>Unit</b> is the slave to 
query. Use_Error is propagated when the server is not connected. Data_Error is 
propagated when the output buffer is full, e.g. when the client tries to queue 
several requests without awaiting a response.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Send_FC4<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MODBUS_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reference</b> : Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Word_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Word_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No := <font color="#800000">255</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to send a <i>Read Input Registers</i> request. The 
behavior and parameters are same as of
<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Send_FC3">Send_FC3</a>.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Send_FC5<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MODBUS_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reference</b> : Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Address</b>&nbsp;&nbsp; : Bit_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp;&nbsp;&nbsp; : Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No := <font color="#800000">255</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to send a <i>Write Single Coil</i> request. The 
behavior is same as of
<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Send_FC15">Send_FC15</a>.
<b>Address</b> is the address of coil. <b>Value</b> is the value to write.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Send_FC6<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MODBUS_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reference</b> : Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Address</b>&nbsp;&nbsp; : Word_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp;&nbsp;&nbsp; : Unsigned_16;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No := <font color="#800000">255</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to send a <i>Write Single Holding Register</i> request. The 
behavior is same as of
<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Send_FC16">Send_FC16</a>.
<b>Address</b> is the address of the register. <b>Value</b> is the value to 
write. The value is big-endian encoded when sent to the slave.</p>

<blockquote>
<p><tt><font color="#0000FF">
procedure</font> 
Send_FC7<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MODBUS_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reference</b> : Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No := <font color="#800000">255</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to send a <i>Read Exception Status</i> 
request. The execution is asynchronous, when completed
<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Exception_Status_Received">
Exception_Status_Received</a> is called. Upon MODBUS exceptions
<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Failed">Failed</a> 
is called. <b>Reference</b> is any value the server will return back, e.g. a 
sequence number. <b>Unit</b> is the slave to 
query. Use_Error is propagated when the server is not connected. Data_Error is 
propagated when the output buffer is full, e.g. when the client tries to queue 
several requests without awaiting a response.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Send_FC15"></a>procedure</font> 
Send_FC15<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MODBUS_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reference</b> : Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Values</b>&nbsp;&nbsp;&nbsp; : Bit_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No := <font color="#800000">255</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to send a <i>Write Multiple Coils</i> 
request. The execution is asynchronous, when completed
<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Bits_Written">Bits_Written</a> is called. Upon MODBUS exceptions
<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Failed">Failed</a> 
is called. <b>Reference</b> is any value the server will return back, e.g. a 
sequence number. <b>Values</b> is the bits to write. The array indices 
correspond to the addresses where to write the values. For example, if <i>on</i>,<i> 
off</i>,<i> on</i> has 
to be written at 3..5, <b>Values</b> must be:</p>

<blockquote>
<p><tt>(<font color="#800000">3</font>=&gt;True,
<font color="#800000">4</font>=&gt;False,
<font color="#800000">5</font>=&gt;True)</tt></p>
</blockquote>
<p><b>Unit</b> is the slave to 
query. Use_Error is propagated when the server is not connected. Data_Error is 
propagated when the output buffer is full, e.g. when the client tries to queue 
several requests without awaiting a response.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Send_FC16"></a>procedure</font> 
Send_FC16<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MODBUS_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reference</b> : Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Values</b>&nbsp;&nbsp;&nbsp; : Word_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No := <font color="#800000">255</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to send a <i>Write Multiple Holding Register</i> 
request. The execution is asynchronous, when completed
<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Words_Written">
Words_Written</a> is called. Upon MODBUS exceptions
<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Failed">Failed</a> 
is called. <b>Reference</b> is any value the server will return back, e.g. a 
sequence number. <b>Values</b> is the words to write, they are encoded 
big-endian when sent. The array indices 
correspond to the addresses where to write the values. For example, if 1,2,3 has 
to be written at 3..5, <b>Values</b> must be:</p>

<blockquote>
<p><tt>(<font color="#800000">3</font>=&gt;<font color="#800000">1</font>,
<font color="#800000">4</font>=&gt;<font color="#800000">2</font>,
<font color="#800000">5</font>=&gt;<font color="#800000">3</font>)</tt></p>
</blockquote>
<p><b>Unit</b> is the slave to 
query. Use_Error is propagated when the server is not connected. Data_Error is 
propagated when the output buffer is full, e.g. when the client tries to queue 
several requests without awaiting a response.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Send_FC22<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MODBUS_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reference</b> : Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Address</b>&nbsp;&nbsp; : Word_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
And_Mask</b>&nbsp; : Unsigned_16;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Or_Mask</b>&nbsp; : Unsigned_16;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No := <font color="#800000">255</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to send a <i>Mask Write Register</i> request. The 
execution is asynchronous, when completed
<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Words_Written">
Words_Written</a> is called. Upon MODBUS exceptions
<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Failed">Failed</a> 
is called. <b>Reference</b> is any value the server will return back, e.g. a 
sequence number. <b>Address </b>is the word's address to mask. <b>And_Mask</b> 
is the mask to apply using AND. <b>Or_Mask</b> is the mask to apply using OR. <b>
Unit</b> is the slave to 
query. Use_Error is propagated when the server is not connected. Data_Error is 
propagated when the output buffer is full, e.g. when the client tries to queue 
several requests without awaiting a response.</p>

<blockquote>
<p><tt><font color="#0000FF">
procedure</font> 
Send_FC23<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MODBUS_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reference</b> : Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Word_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Word_Address;<b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Values</b>&nbsp;&nbsp;&nbsp; : Word_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No := <font color="#800000">255</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to send a <i>Read/Write Multiple Registers</i> request. The execution 
is asynchronous, when completed
<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Words_Read">Words_Read</a> is called. Upon MODBUS exceptions
<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Failed">Failed</a> 
is called. <b>Reference</b> is any value the server will return back, e.g. a 
sequence number. <b>From</b>..<b>To</b> is the words range to read. <b>Values</b> 
is the words to write as in
<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Send_FC16">
Send_FC16</a>. The words are encoded big-endian when sent to the slave. <b>Unit</b> is the slave to 
query. Use_Error is propagated when the server is not connected. Data_Error is 
propagated when the output buffer is full, e.g. when the client tries to queue 
several requests without awaiting a response.</p>

<blockquote>
<p><tt><font color="#0000FF">
procedure</font> 
Send_FC24<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MODBUS_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reference</b> : Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Address</b>&nbsp;&nbsp; 
: Word_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No := <font color="#800000">255</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to send a <i>Read FIFO queue</i> request. The execution 
is asynchronous, when completed
<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Words_Read">Words_Read</a> is 
called with the data from the queue top. Upon MODBUS exceptions
<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Failed">Failed</a> 
is called. <b>Reference</b> is any value the server will return back, e.g. a 
sequence number. <b>Address</b> is the queue address. <b>Unit</b> is the slave to 
query. Use_Error is propagated when the server is not connected. Data_Error is 
propagated when the output buffer is full, e.g. when the client tries to queue 
several requests without awaiting a response.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Words_Read"></a>procedure</font> 
Words_Read<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MODBUS_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reference</b> : Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Values</b>&nbsp;&nbsp;&nbsp; : Word_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Code</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Function_Code;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when some words were successfully read. The read 
values are in set into the parameter <b>Values</b>. Note that the array indices 
do not correspond to the actual word addresses. The encoding of MODBUS words is 
assumed big-endian. <b>Reference</b> has the value 
passed to the server with the request. <b>Code</b> is the function code 3, 4, 23, 
24 (<b>FC3</b>,
<b>FC4</b>, <b>FC23</b>, <b>FC24</b>). <b>Unit</b> is the slave responding if more than one. The 
default implementation traces.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Words_Written"></a>procedure</font> 
Words_Written<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MODBUS_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reference</b> : Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Word_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Word_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Code</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Function_Code;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when some words were successfully written. <b>From</b>..<b>To</b> 
is the written range of addresses. <b>Reference</b> has the value passed to the 
server with the request. <b>Code</b> is the function code 6, 16, (<b>FC6</b>, <b>FC16</b>).
<b>Unit</b> is the slave responding if more than one. The default implementation 
traces.</p>

<h4><a name="16.13.1"></a>16.13.1. Synchronous client</h4>

<p><a name="GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Synchronous">
</a>The package
<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Synchronous">GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Synchronous</a> provides 
a MODBUS client to use with an external task in a synchronous way:</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Synchronous.MODBUS_Synchronous_Client">
</a>type</font> 
MODBUS_Synchronous_Client<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Listener : <font color="#0000FF">access</font> 
Connections_Server'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is new</font> Connection
<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The client should be used from a task different from the
<a href="#GNAT.Sockets.Server.Connections_Server">multiple connections server</a>'s 
task. Only one request may be performed on the client at the time. It is 
possible to use operations from multiple task. The timeouts specified in the 
operations limit waiting for request completion but do not influence its 
execution. The timeouts do not limit waiting for an object to become free when 
used from another task. Note that when 
created the object must be referenced using a handle in order to prevent its 
premature destruction (see <a href="#memory-management-of-connection-objects">memory management of 
connection objects</a>). The following primitive operations are provided:</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Synchronous.Cancel">
</a>procedure</font> Cancel (<b>Client</b> 
: <font color="#0000FF">in out</font> MODBUS_Synchronous_Client);</tt></p>
</blockquote>
<p>The procedure cancel the 
operation pending in another task. The corresponding operation propagates Cancel_Error declared in this package. Note that this has no effect on the 
communication performed by the client.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Synchronous.Connect">
</a>procedure</font> Connect<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MODBUS_Synchronous_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Host</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Port</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Port_Type := MODBUS_Port;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Max_Connect_No</b> : Positive&nbsp; := Positive'Last;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Timeout</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Duration&nbsp; := 
Duration'Last<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The procedure connects to the MODBUS server specified by <b>Host</b>. <b>Port</b> 
is the port number. <b>Max_Connect_No</b> is the total number of connection 
attempts before error is reported. <b>Timeout</b> is the connection timeout.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Cancel_Error</TD>
    <TD>Canceled by
	<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Synchronous.Cancel">
	Cancel</a></TD>
  </TR>
  <TR>
    <TD>  Status_Error</TD>
    <TD>Failed to connect, attempts limit exhausted</TD>
  </TR>
  <TR>
    <TD>  Timeout_Error</TD>
    <TD>Timeout expired</TD>
  </TR>
  <TR>
    <TD>  Socket_Error</TD>
    <TD>Socket I/O errors</TD>
  </TR>
  </TABLE>

<blockquote>
<p><tt><font color="#0000FF">function</font> {FC1|FC2}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">access</font> MODBUS_Synchronous_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Reference</b> 
: Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Bit_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Bit_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No&nbsp; := <font color="#800000">255</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Timeout</b>&nbsp;&nbsp; 
: Duration := Duration'Last<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Bit_Array;</tt></p>
</blockquote>
<p>These functions execute <i>Read Coils</i> and <i>Read Discrete Inputs</i> 
request. The result is the array of bits read. <b>Reference</b> is any value the server will return back, e.g. a 
sequence number. <b>From</b>..<b>To</b> is the bit range to read. <b>Unit</b> is the slave to 
query.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Cancel_Error</TD>
    <TD>Canceled by
	<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Synchronous.Cancel">
	Cancel</a></TD>
  </TR>
  <TR>
    <TD>  MODBUS_Error</TD>
    <TD>The server responded with an exception status</TD>
  </TR>
  <TR>
    <TD>  Status_Error</TD>
    <TD>Connection was lost during the operation</TD>
  </TR>
  <TR>
    <TD>  Timeout_Error</TD>
    <TD>Timeout expired</TD>
  </TR>
  <TR>
    <TD>  Use_Error</TD>
    <TD>Not connected</TD>
  </TR>
  </TABLE>

<blockquote>
<p><tt><font color="#0000FF">function</font> {FC3|FC4}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">access</font> MODBUS_Synchronous_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Reference</b> 
: Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Word_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Word_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No&nbsp; := <font color="#800000">255</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Timeout</b>&nbsp;&nbsp; 
: Duration := Duration'Last<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Word_Array;</tt></p>
</blockquote>
<p>These functions execute <i>Read Holding Registers</i> and <i>Read Input 
Registers</i> request. The result is the array of words read. <b>Reference</b> is any value the server will return back, e.g. a 
sequence number. <b>From</b>..<b>To</b> is the words range to read. <b>Unit</b> is the slave to 
query.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Cancel_Error</TD>
    <TD>Canceled by
	<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Synchronous.Cancel">
	Cancel</a></TD>
  </TR>
  <TR>
    <TD>  MODBUS_Error</TD>
    <TD>The server responded with an exception status</TD>
  </TR>
  <TR>
    <TD>  Status_Error</TD>
    <TD>Connection was lost during the operation</TD>
  </TR>
  <TR>
    <TD>  Timeout_Error</TD>
    <TD>Timeout expired</TD>
  </TR>
  <TR>
    <TD>  Use_Error</TD>
    <TD>Not connected</TD>
  </TR>
  </TABLE>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> FC5<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MODBUS_Synchronous_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reference</b> : Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Address</b>&nbsp;&nbsp; : Bit_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp;&nbsp;&nbsp; : Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No&nbsp; := <font color="#800000">255</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Timeout</b>&nbsp;&nbsp; : Duration := Duration'Last<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure executes <i>Write Single Coil</i> request. <b>Reference</b> is any value the server will return back, e.g. a 
sequence number. <b>Address</b> is the bit address. <b>Value</b> is the value to 
write. <b>Unit</b> is the slave to 
query.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Cancel_Error</TD>
    <TD>Canceled by
	<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Synchronous.Cancel">
	Cancel</a></TD>
  </TR>
  <TR>
    <TD>  MODBUS_Error</TD>
    <TD>The server responded with an exception status</TD>
  </TR>
  <TR>
    <TD>  Status_Error</TD>
    <TD>Connection was lost during the operation</TD>
  </TR>
  <TR>
    <TD>  Timeout_Error</TD>
    <TD>Timeout expired</TD>
  </TR>
  <TR>
    <TD>  Use_Error</TD>
    <TD>Not connected</TD>
  </TR>
  </TABLE>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> FC6<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MODBUS_Synchronous_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reference</b> : Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Address</b>&nbsp;&nbsp; : Bit_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp;&nbsp;&nbsp; : Unsigned_16;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No&nbsp; := <font color="#800000">255</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Timeout</b>&nbsp;&nbsp; : Duration := Duration'Last<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure executes <i>Write Single Holding Register</i> request. <b>Reference</b> is any value the server will return back, e.g. a 
sequence number. <b>Address</b> is the word address. <b>Value</b> is the value 
to write. <b>Unit</b> is the slave to 
query.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Cancel_Error</TD>
    <TD>Canceled by
	<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Synchronous.Cancel">
	Cancel</a></TD>
  </TR>
  <TR>
    <TD>  MODBUS_Error</TD>
    <TD>The server responded with an exception status</TD>
  </TR>
  <TR>
    <TD>  Status_Error</TD>
    <TD>Connection was lost during the operation</TD>
  </TR>
  <TR>
    <TD>  Timeout_Error</TD>
    <TD>Timeout expired</TD>
  </TR>
  <TR>
    <TD>  Use_Error</TD>
    <TD>Not connected</TD>
  </TR>
  </TABLE>

<blockquote>
<p><tt><font color="#0000FF">function</font> FC7<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">access</font> MODBUS_Synchronous_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Reference</b> 
: Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No&nbsp; := <font color="#800000">255</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Timeout</b>&nbsp;&nbsp; 
: Duration := Duration'Last<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Unsigned_8;</tt></p>
</blockquote>
<p>This function executes <i>Read Exception Status</i> request. The result is 
the exception status. <b>Reference</b> is any value the server will return back, e.g. a 
sequence number. <b>Unit</b> is the slave to 
query.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Cancel_Error</TD>
    <TD>Canceled by
	<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Synchronous.Cancel">
	Cancel</a></TD>
  </TR>
  <TR>
    <TD>  MODBUS_Error</TD>
    <TD>The server responded with an exception status</TD>
  </TR>
  <TR>
    <TD>  Status_Error</TD>
    <TD>Connection was lost during the operation</TD>
  </TR>
  <TR>
    <TD>  Timeout_Error</TD>
    <TD>Timeout expired</TD>
  </TR>
  <TR>
    <TD>  Use_Error</TD>
    <TD>Not connected</TD>
  </TR>
  </TABLE>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> FC15<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MODBUS_Synchronous_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reference</b> : Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp;&nbsp;&nbsp; : Bit_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No&nbsp; := <font color="#800000">255</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Timeout</b>&nbsp;&nbsp; : Duration := Duration'Last<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure executes <i>Write Multiple Coils</i> request. <b>Reference</b> is any value the server will return back, e.g. a 
sequence number. <b>Values</b> is the bits to write. The array indices 
correspond to the addresses where to write the values. For example, if <i>on</i>,<i> 
off</i>,<i> on</i> has 
to be written at 3..5, <b>Values</b> must be:</p>

<blockquote>
<p><tt>(<font color="#800000">3</font>=&gt;True,
<font color="#800000">4</font>=&gt;False,
<font color="#800000">5</font>=&gt;True)</tt></p>
</blockquote>
<p>&nbsp;<b>Unit</b> is the slave to 
query.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Cancel_Error</TD>
    <TD>Canceled by
	<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Synchronous.Cancel">
	Cancel</a></TD>
  </TR>
  <TR>
    <TD>  MODBUS_Error</TD>
    <TD>The server responded with an exception status</TD>
  </TR>
  <TR>
    <TD>  Status_Error</TD>
    <TD>Connection was lost during the operation</TD>
  </TR>
  <TR>
    <TD>  Timeout_Error</TD>
    <TD>Timeout expired</TD>
  </TR>
  <TR>
    <TD>  Use_Error</TD>
    <TD>Not connected</TD>
  </TR>
  </TABLE>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> FC16<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MODBUS_Synchronous_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reference</b> : Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp;&nbsp;&nbsp; : Bit_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No&nbsp; := <font color="#800000">255</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Timeout</b>&nbsp;&nbsp; : Duration := Duration'Last<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure executes <i>Write Multiple Holding Registers</i> request. <b>Reference</b> is any value the server will return back, e.g. a 
sequence number. <b>Values</b> is the words to write, they are encoded 
big-endian when sent. The array indices 
correspond to the addresses where to write the values. For example, if 1,2,3 has 
to be written at 3..5, <b>Values</b> must be:</p>

<blockquote>
<p><tt>(<font color="#800000">3</font>=&gt;<font color="#800000">1</font>,
<font color="#800000">4</font>=&gt;<font color="#800000">2</font>,
<font color="#800000">5</font>=&gt;<font color="#800000">3</font>)</tt></p>
</blockquote>
<p><b>Unit</b> is the slave to 
query.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Cancel_Error</TD>
    <TD>Canceled by
	<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Synchronous.Cancel">
	Cancel</a></TD>
  </TR>
  <TR>
    <TD>  MODBUS_Error</TD>
    <TD>The server responded with an exception status</TD>
  </TR>
  <TR>
    <TD>  Status_Error</TD>
    <TD>Connection was lost during the operation</TD>
  </TR>
  <TR>
    <TD>  Timeout_Error</TD>
    <TD>Timeout expired</TD>
  </TR>
  <TR>
    <TD>  Use_Error</TD>
    <TD>Not connected</TD>
  </TR>
  </TABLE>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> FC22<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MODBUS_Synchronous_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reference</b> : Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Address</b>&nbsp;&nbsp; : Word_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
And_Mask</b>&nbsp; : Unsigned_16;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Or_Mask</b>&nbsp;&nbsp; : Unsigned_16;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No&nbsp; := <font color="#800000">255</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Timeout</b>&nbsp;&nbsp; : Duration := Duration'Last<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure executes <i>Mask Write Registers</i> request. <b>Reference</b> is any value the server will return back, e.g. a 
sequence number. <b>Address </b>is the word's address to mask. <b>And_Mask</b> 
is the mask to apply using AND. <b>Or_Mask</b> is the mask to apply using OR. <b>Unit</b> is the slave to 
query.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Cancel_Error</TD>
    <TD>Canceled by
	<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Synchronous.Cancel">
	Cancel</a></TD>
  </TR>
  <TR>
    <TD>  MODBUS_Error</TD>
    <TD>The server responded with an exception status</TD>
  </TR>
  <TR>
    <TD>  Status_Error</TD>
    <TD>Connection was lost during the operation</TD>
  </TR>
  <TR>
    <TD>  Timeout_Error</TD>
    <TD>Timeout expired</TD>
  </TR>
  <TR>
    <TD>  Use_Error</TD>
    <TD>Not connected</TD>
  </TR>
  </TABLE>

<blockquote>
<p><tt><font color="#0000FF">function</font> FC23<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">access</font> MODBUS_Synchronous_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Reference</b> 
: Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Word_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Word_Address;<b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Values</b>&nbsp;&nbsp;&nbsp; : Word_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No&nbsp; := <font color="#800000">255</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Timeout</b>&nbsp;&nbsp; 
: Duration := Duration'Last<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Word_Array;</tt></p>
</blockquote>
<p>These function executes <i>Read/Write Multiple Registers</i> request. The 
result is the array of words read. <b>Reference</b> is any value the server will return back, e.g. a 
sequence number. <b>From</b>..<b>To</b> is the words range to read. <b>Values</b> 
is the words to write. The words are encoded big-endian when sent to the slave.&nbsp; <b>Unit</b> is the slave to 
query.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I></CAPTION>
  <TR>
    <TD>  Cancel_Error</TD>
    <TD>Canceled by
	<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Synchronous.Cancel">
	Cancel</a></TD>
  </TR>
  <TR>
    <TD>  MODBUS_Error</TD>
    <TD>The server responded with an exception status</TD>
  </TR>
  <TR>
    <TD>  Status_Error</TD>
    <TD>Connection was lost during the operation</TD>
  </TR>
  <TR>
    <TD>  Timeout_Error</TD>
    <TD>Timeout expired</TD>
  </TR>
  <TR>
    <TD>  Use_Error</TD>
    <TD>Not connected</TD>
  </TR>
  </TABLE>

<blockquote>
<p><tt><font color="#0000FF">function</font> FC24<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">access</font> MODBUS_Synchronous_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Reference</b> 
: Reference_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Address</b>&nbsp;&nbsp; 
: Word_Address;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<b>Unit</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Unit_No := <font color="#800000">255</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Timeout</b>&nbsp;&nbsp; 
: Duration := Duration'Last<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )<font color="#0000FF">&nbsp; 
return</font> Word_Array;</tt></p>
</blockquote>
<p>These function executes <i>Read FIFO queue</i> request. The result is the 
array of words from the queue top. <b>Reference</b> is any value the server will return back, e.g. a 
sequence number. <b>Address</b> is the queue address.&nbsp; <b>Unit</b> is the slave to 
query.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I></CAPTION>
  <TR>
    <TD>  Cancel_Error</TD>
    <TD>Canceled by
	<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Synchronous.Cancel">
	Cancel</a></TD>
  </TR>
  <TR>
    <TD>  MODBUS_Error</TD>
    <TD>The server responded with an exception status</TD>
  </TR>
  <TR>
    <TD>  Status_Error</TD>
    <TD>Connection was lost during the operation</TD>
  </TR>
  <TR>
    <TD>  Timeout_Error</TD>
    <TD>Timeout expired</TD>
  </TR>
  <TR>
    <TD>  Use_Error</TD>
    <TD>Not connected</TD>
  </TR>
  </TABLE>

<p align="right">
  <A name="16.14"></A><a href="#16.13"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#16.15"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>16.14. ELV/e-Q3 MAX! Cube protocol implementation</H3>

<p>
<a name="GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client"></a>The package 
<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client">GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client</a> provides an implementation of 
the ELV/e-Q3 MAX! Cube protocol. The device is a gateway to the radio-controlled 
home automation devices such as thermostats and shutter contacts. The client is 
suitable for working with a
<a href="#GNAT.Sockets.Server.Connections_Server">multiple connections</a> 
server, e.g. with a single task handling multiple connections. It can also be 
used with a <a href="#GNAT.Sockets.Server.Pooled.Pooled_Server">server backed by 
a pool of tasks</a>.</p>
<p>
<b><u>Basic types and operations</u>:</b> The following data types are declared 
in the package:</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Room_ID"></a>type</font> 
Room_ID <font color="#0000FF">is range</font> <font color="#800000">0</font>..<font color="#800000">2</font>**<font color="#800000">8</font>-<font color="#800000">1</font>;<br>
No_Room : <font color="#0000FF">constant</font> Room_ID;</tt></p>
</blockquote>
<p>Each room has an unique ID of this type. Devices, e.g. thermostats are 
assigned to the rooms. However some devices may have no room assigned.</p>

<blockquote>
<p><tt><font color="#0000FF">
type</font> 
Ratio <font color="#0000FF">is delta</font> <font color="#800000">0.001</font>
<font color="#0000FF">range</font> <font color="#800000">0.0</font>..<font color="#800000">1.0</font>;</tt></p>
</blockquote>
<p>This type is used, in particular, for valve positions. Ratio'First 
corresponds to a closed valve.</p>

<blockquote>
<p><tt><font color="#0000FF">type</font> Centigrade <font color="#0000FF">is 
delta</font> <font color="#800000">0.1 </font><font color="#0000FF">digits</font><font color="#800000"> 
4</font> <font color="#0000FF">range</font> 
-<font color="#800000">4.0</font>..<font color="#800000">135.0</font>;</tt></p>
</blockquote>
<p>This type is used for temperatures. Values are specified in Celsius degrees. 
The value precision is 0.5 degree.</p>

<blockquote>
<p><tt><font color="#0000FF">function</font> Image (<b>Value</b> : Centigrade)
<font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function returns a textual representation of temperature.</p>

<blockquote>
<p><tt><font color="#0000FF">type</font> RF_Address <font color="#0000FF">is 
range</font> <font color="#800000">0</font>..<font color="#800000">2</font>**<font color="#800000">24</font>-<font color="#800000">1</font>;</tt></p>
</blockquote>
<p>This type is used for radio frequency addresses. Each device has a unique 
address.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Image (<b>Value</b> : RF_Address)
<font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function returns a textual representation of the address <b>Value</b>.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Device_Type">
</a>type</font> Device_Type <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Cube,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Radiator_Thermostat,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Radiator_Thermostat_Plus,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Wall_Thermostat,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Shutter_Contact,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Eco_Button,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Unknown<br>
&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>Values of this type correspond to types of devices.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Image (<b>Kind_Of</b> : Device_Type)
<font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function returns a textual representation of the device type.</p>

<blockquote>
<p><tt><font color="#0000FF">type</font> Week_Day <font color="#0000FF">is</font> 
(Mo, Tu, We, Th, Fr, Sa, Su);</tt></p>
</blockquote>
<p>This type describes days of week used in thermostat programming.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Image (<b>Day</b> : Week_Day; <b>
Short</b> : Boolean := True)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function returns a textual representation of the week day. When Short is 
true, the result is two characters long, e.g. <i>Mo</i>. Otherwise it is the 
full name, e.g. <i>Monday</i>.</p>

<blockquote>
<p><tt><font color="#0000FF">type</font> Week_Time <font color="#0000FF">is 
record</font><br>
&nbsp;&nbsp; Day&nbsp; : Week_Day;<br>
&nbsp;&nbsp; Time : Day_Duration;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>This type represents a week time. The field <i>Day</i> is the week day. The 
field <i>Time</i> is the time within the day (see Ada.Calendar).</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Minutes (<b>Day</b> : Day_Duration)
<font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function returns a textual representation of the day time in minutes. 
The highest resolution of times used is in minutes.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Minutes (<b>Time</b> : Day_Duration)
<font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function returns a textual representation of the day time in hours and 
minutes. E.g. <i>13:00</i>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Image (<b>Time</b> : Week_Time; <b>
Short</b> : Boolean := True) <font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function returns a textual representation of the week time, e.g. <i>Mo 
05:00</i>.</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Set_Point <font color="#0000FF">is 
record</font><br>
&nbsp;&nbsp; Last&nbsp; : Day_Duration;<br>
&nbsp;&nbsp; Point : Centigrade;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>A set point of the temperature profile defines the time <b>Last</b> until the 
temperature <b>Point</b> applies.</p>
<blockquote>
<p><tt><font color="#0000FF">subtype</font> Point_Count <font color="#0000FF">is
</font>Integer <font color="#0000FF">range</font> <font color="#800000">0</font>..<font color="#800000">13</font>;<br>
<font color="#0000FF">subtype</font> Point_Number <font color="#0000FF">is</font> 
Point_Count <font color="#0000FF">range</font> <font color="#800000">1</font>..Point_Count'Last;<br>
<font color="#0000FF">type</font> Points_List <font color="#0000FF">is array</font> 
(Point_Number range &lt;&gt;) <font color="#0000FF">of</font> Set_Point;<br>
<font color="#0000FF">type</font> Day_Schedule (Length : Point_Count :=
<font color="#800000">0</font>) <font color="#0000FF">is record</font><br>
&nbsp;&nbsp; Points : Points_List (<font color="#800000">1</font>..Length);<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>The day schedule is an array of set points in time progressing order. The 
temperature of the last point applies to the rest of the day.</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Week_Schedule <font color="#0000FF">is 
array</font> (Week_Day) <font color="#0000FF">of</font> Day_Schedule;</tt></p>
</blockquote>
<p>The week schedule is an array of day schedules.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Operating_Mode">
</a>type</font> Operating_Mode <font color="#0000FF">is</font> (Automatic, 
Manual, Vacation, Boost);</tt></p>
</blockquote>
<p>This type specifies the operating mode of a device like thermostat:</p>
<ul>
	<li><i>Automatic</i>, in this mode the device functions according to its 
	week schedule;</li>
	<li><i>Manual</i>, in this mode a thermostat keeps the temperature set for 
	indefinite time;</li>
	<li><i>Vacation</i>, in this mode a thermostat keeps the temperature set 
	until specified time (end of vacation) and the switches into the automatic 
	mode;</li>
	<li><i>Boost</i>, in this mode a thermostat moves the valve into the 
	specified position and holds it for the specified period of time. After that 
	it switches back to the previous mode.</li>
</ul>
<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Device_Data">
</a>type</font> Device_Data (Kind_Of : Device_Type) <font color="#0000FF">is 
record</font><br>
&nbsp;&nbsp; Address&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : RF_Address :=
<font color="#800000">0</font>;<br>
&nbsp;&nbsp; Error&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Boolean := 
False;<br>
&nbsp;&nbsp; Initialized&nbsp;&nbsp; : Boolean := False;<br>
&nbsp;&nbsp; Battery_Low&nbsp;&nbsp;&nbsp;: Boolean := False;<br>
&nbsp;&nbsp; Link_Error&nbsp;&nbsp;&nbsp;&nbsp;: Boolean := False;<br>
&nbsp;&nbsp; Panel_Locked&nbsp;&nbsp;: Boolean := False;<br>
&nbsp;&nbsp; Gateway_Known&nbsp;: 
Boolean := False;<br>
&nbsp;&nbsp; DST&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: Boolean 
:= False;<br>
&nbsp;&nbsp; Mode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;: Operating_Mode 
:= Automatic;<br>
&nbsp;&nbsp; <font color="#0000FF">case</font> Kind_Of <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when</font> Cube | Eco_Button | 
Unknown =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> Shutter_Contact 
=&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Open : Boolean := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> 
Radiator_Thermostat..Wall_Thermostat =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set_Temperature : Centigrade :=
<font color="#800000">18.0</font>;
<font color="#008000">-- As kept by the thermostat<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>New_Temperature : 
Centigrade := <font color="#800000">18.0</font>; <font color="#008000">-- Last requested temperature</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Temperature&nbsp;&nbsp;&nbsp;&nbsp; : Centigrade := Centigrade'First; <font color="#008000">-- Measured temperature</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">case</font> 
Kind_Of <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when </font>
Radiator_Thermostat |<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Radiator_Thermostat_Plus =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Valve_Position&nbsp;&nbsp;&nbsp;&nbsp; : Ratio := <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Latest_Temperature : Centigrade := Centigrade'First;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Received_At&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Time;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">when others</font> =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>Values of this type describe the state of a device as obtained from the cube. 
Meaning of the fields:</p>
<ul>
	<li><i>DST</i> when <i><font color="#800000">true</font></i> indicates day 
	saving time;</li>
	<li><i>Set_Temperature</i> is the temperature kept by the thermostat;</li>
	<li><i>New_Temperature</i> is the temperature requested by last command, 
	e.g. by a
	<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Set_Thermostat_Temperature">
	Set_Thermostat_Temperature</a> call. When a response refreshes the <i>
	Set_Temperature</i> field, the value is also set into <i>New_Temperature</i>. 
	This field can be used to increment/decrement set temperature under the 
	condition that the thermostat response may be very too slow to use <i>
	Set_Temperature</i> value as the increment/decrement base;</li>
	<li><i>Temperature</i> is the measured temperature. For a radiator 
	thermostat the temperature is measured only under certain conditions, e.g. 
	when the mode is changed between <i>Automatic</i> and <i>Manual</i> or when 
	the valve position is changed. When no temperature is measured the value of <i>Temperature</i> 
	is Centigrade'First;</li>
	<li><i>Valve</i> is the radiator thermostat position. 0 is closed. 1 is 
	open;</li>
	<li><i>Latest_Temperature</i> is the latest measured radiator thermostat 
	temperature. It is Centigrade'First when no temperature was measured;</li>
	<li><i>Received_At</i> is the timestamp of <i>Latest_Temperature</i> when 
	the later is not Centigrade'First.</li>
</ul>
<blockquote>
<p><tt><font color="#0000FF">function</font> Image (<b>Data</b> : Device_Data) <font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function returns a textual representation of the device data.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Device_Parameters">
</a>type</font> Device_Parameters<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Kind_Of&nbsp;&nbsp;&nbsp;&nbsp; : Device_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Name_Length : Natural<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is<br>
record</font><br>
&nbsp;&nbsp; Room&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Room_ID;<br>
&nbsp;&nbsp; Address&nbsp;&nbsp; : RF_Address;<br>
&nbsp;&nbsp; Serial_No : String (<font color="#800000">1</font>..<font color="#800000">10</font>);<br>
&nbsp;&nbsp; Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : String (<font color="#800000">1</font>..Name_Length);<br>
&nbsp;&nbsp; <font color="#0000FF">case</font> Kind_Of <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when</font> Cube | Shutter_Contact | Eco_Button | Unknown =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> 
Radiator_Thermostat..Wall_Thermostat =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Comfort&nbsp;&nbsp;: Centigrade := <font color="#800000">18.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Eco&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: Centigrade := <font color="#800000">18.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Max&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: Centigrade := <font color="#800000">18.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Min&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: Centigrade := <font color="#800000">18.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Schedule&nbsp;: Week_Schedule;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">case</font> 
Kind_Of<font color="#0000FF"> is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when</font> 
Radiator_Thermostat | Radiator_Thermostat_Plus =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Offset&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Centigrade := <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Window_Open&nbsp;&nbsp;&nbsp;&nbsp; 
: Centigrade := <font color="#800000">18.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; Window_Time&nbsp;&nbsp;&nbsp;&nbsp; 
: Duration&nbsp;&nbsp; := <font color="#800000">10.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Boost_Time&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Duration&nbsp;&nbsp; := <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; Boost_Valve&nbsp;&nbsp;&nbsp;&nbsp; 
: Ratio&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := <font color="#800000">0.5</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Decalcification : Week_Time;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; Max_Valve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Ratio;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Valve_Offset&nbsp;&nbsp;&nbsp; 
: Ratio;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">when others</font> =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>This type describes parameters of a device.</p>
<blockquote>
	<p><tt>ELV_MAX_Cube_Port : <font color="#0000FF">constant</font> Port_Type 
	:= <font color="#800000">62910</font>;</tt></p>
</blockquote>
<p>This is the default MAX! cube port.</p>
<p>
<b><u>Client type and operations</u>:</b></p>
<p>
The package declares the
<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.ELV_MAX_Cube_Client">
ELV_MAX_Cube_Client</a> connection object type:</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.ELV_MAX_Cube_Client"></a>type</font> 
ELV_MAX_Cube_Client<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Listener&nbsp;&nbsp; &nbsp;:
<font color="#0000FF">access</font> Connections_Server'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Line_Length : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Input_Size&nbsp; : Buffer_Length;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Output_Size : Buffer_Length<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is new</font> 
State_Machine <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The discriminants are:</p>
<ul>
	<li><i>Listener</i> is the server object to handle the connection;</li>
	<li><i>Line_Length</i> is the maximum response line length. A value about 
	1024 should be sufficient;</li>
	<li><i>Input_Size</i> is the input buffer size it determines the amount of 
	data received in one piece;</li>
	<li><i>Output_Size</i> is the output buffer size. It should be large enough 
	to hold any outgoing command. A value about 200 can be used.</li>
</ul>
<p>The following operations are defined of the client:</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Configuration_Updated">
</a>procedure</font> Configuration_Updated<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">in out</font> ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Update</b> : Update_Data<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called upon connection handshake when a portion data is 
received. The parameter <b>Update</b> indicates what was updated:</p>
<blockquote>
	<p><tt><font color="#0000FF">package </font> Servers_List<font color="#0000FF"> 
	is new </font> Generic_Indefinite_Set (String);<font color="#0000FF"><br>
	type</font> Update_Type <font color="#0000FF">
	is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Cube_Update,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Topology_Update,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Device_Parameters_Update,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Device_Discovery_Update,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End_Discovery_Update,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NTP_Servers_List_Update<br>
&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The value of <i>Update_Type</i> specifies the information type:</p>
<ul>
	<li><i>Cube_Update</i> is used when a handshake message from the cube is 
	received. The cube parameters (e.g. the serial number) and state become 
	known at this point;</li>
	<li><i>Topology_Update</i> is used when the list of rooms and paired devices 
	is changed or updated. E.g. when information about a room or a device is 
	received after the connection handshake;</li>
	<li><i>Device_Parameters_Update</i> is used when a device parameters are 
	received from the cube;</li>
	<li><i>Device_Discovery_Update</i> is used when a new unpaired device is 
	discovered;</li>
	<li><i>End_Discovery_Update</i> is used when the cube ends searching for 
	unpaired devices;</li>
	<li><i>NTP_Servers_List_Updated</i> is used when information about cube's NTP 
	servers is received.</li>
</ul>
<p>The fields of the parameter <b>Update</b> are as follows:</p>
<blockquote>
	<p><tt><font color="#0000FF">type</font> Update_Data (Kind_Of : Update_Type)
	<font color="#0000FF">is record<br>
&nbsp;&nbsp; case</font> Kind_Of<font color="#0000FF"> is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when</font> Cube_Update | Topology_Update | 
	End_Discovery_Update =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> 
	Device_Parameters_Update | Device_Discovery_Update =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Device&nbsp; : Device_Type;
	<font color="#008000">-- The device type</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Address : RF_Address;&nbsp;
	<font color="#008000">-- Of the device updated</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">case</font> 
	Kind_Of <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when </font>
	Device_Discovery_Update =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	Serial_No : String (<font color="#800000">1</font>..<font color="#800000">10</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<font color="#0000FF">when others</font> =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> 
	NTP_Servers_List_Update =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NTP_Servers_List : 
	Servers_List.Set;<font color="#008000"> -- NTP servers</font><br>
&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
	<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>The default implementation prints data when the type of update is <i>
Device_Discovery_Update</i>, <i>End_Discovery_Update</i> or <i>NTP_Servers_List_Update</i>.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Data_Received">
</a>procedure</font> Data_Received<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">in out</font> ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data&nbsp;
</b>&nbsp;: Device_Data<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when data from a device are received. The cube polls 
the devices and their data back to the client upon handshake or when data are 
requested (see
<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Query_Devices">Query_Devices</a>). The default implementation does some tracing. It 
likely should be overridden, e.g. to store the data. The parameter <b>Data</b> 
has the type
<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Device_Data">
Device_Data</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Disconnected (<b>Client</b> :
<font color="#0000FF">in out</font> ELV_MAX_Cube_Client);</tt></p>
</blockquote>
<p>This procedure is called when the client loses connection to the cube. If 
overridden the new implementation shall call the parent's one from its body.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize (<b>Client</b> :
<font color="#0000FF">in out</font> ELV_MAX_Cube_Client);</tt></p>
</blockquote>
<p>This procedure is called upon object construction. It must be called from the 
new implementation if overridden.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Find_Room<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>ID</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Room_ID<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Positive;</tt></p>
</blockquote>
<p>This function is called to find a room by its ID. The returned value is the 
room number in the range 1..<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Rooms">Get_Number_Of_Rooms</a> 
(<b>Client</b>). End_Error is propagated when there is no room with ID.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Clock_Difference<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
ELV_MAX_Cube_Client)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Duration;</tt></p>
</blockquote>
<p>This function returns the time skew between cube and host clocks: T<i><sub>cube</sub></i> 
- T<sub><i>host</i></sub>. Status_Error is propagated when there is no 
connection to the cube.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Device<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Address</b> 
: RF_Address<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Positive;</tt></p>
</blockquote>
<p>This function returns the number of the device with the given radio frequency 
address. The result is in the range 1..<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Devices">Get_Number_Of_Devices</a> 
(<b>Client</b>).</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Device<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
: Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Device</b> 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Positive;<font color="#0000FF"><br>
function</font> Get_Device<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>ID&nbsp;
</b>&nbsp;&nbsp; : Room_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Device</b> 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Positive;</tt></p>
</blockquote>
<p>This function returns the number of the device in the room specified by the 
room number <b>Index</b> in the range 1..<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Rooms">Get_Number_Of_Rooms</a> 
(<b>Client</b>) or the room identifier and the number <b>Device</b> counted from 1 through all devices 
in the room. The result is in the range 1..<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Devices">Get_Number_Of_Devices</a> 
(<b>Client</b>). Constraint_Error is propagated when room or device number is 
out of range. The function allows to enumerate all devices in a room. The number 
of devices in a room is returned by the variant of
<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Devices_room">
Get_Number_Of_Devices</a> with the room number as the parameter. End_Error is 
propagated when there is no such room.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Device_Data<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Device_Data;<font color="#0000FF"><br>
function</font> Get_Device_Data<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Address</b> 
: RF_Address<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Device_Data;</tt></p>
</blockquote>
<p align="left">These functions return the
<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Device_Data">device 
data</a>. The device can be specified by its number in the range 
1..<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Devices">Get_Number_Of_Devices</a> 
(<b>Client</b>) or by its radio frequency address. Constraint_Error is 
propagated when the device number is out of range. End_Error is propagated when 
there is no device with the specified address. Status_Error is propagated when 
the device has not yet sent any data.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Device_Name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> String;<font color="#0000FF"><br>
function</font> Get_Device_Name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Address</b> 
: RF_Address<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> String;</tt></p>
</blockquote>
<p>These functions return the device name. The device can be specified by its 
number in the range 1..<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Devices">Get_Number_Of_Devices</a> 
(<b>Client</b>) or by its radio frequency address. Constraint_Error is 
propagated when the device number is out of range. End_Error is propagated when 
there is no device with the specified address.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Device_Room<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Room_ID;<font color="#0000FF"><br>
function</font> Get_Device_Room<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Address</b> 
: RF_Address<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Room_ID;</tt></p>
</blockquote>
<p>These functions return the room of device. The device can be specified by its 
number in the range 1..<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Devices">Get_Number_Of_Devices</a> 
(<b>Client</b>) or by its radio frequency address. Constraint_Error is 
propagated when the device number is out of range. End_Error is propagated when 
there is no device with the specified address. Note that some devices may have 
no room associated with them. For such devices No_Room is returned.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Device_Parameters<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Device_Parameters;<font color="#0000FF"><br>
function</font> Get_Device_Parameters<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Address</b> 
: RF_Address<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Device_Parameters;</tt></p>
</blockquote>
<p>These functions return the
<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Device_Parameters">
device parameters</a>. The device can be specified by its number in the range 
1..<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Devices">Get_Number_Of_Devices</a> 
(<b>Client</b>) or by its radio frequency address. Constraint_Error is 
propagated when the device number is out of range. End_Error is propagated when 
there is no device with the specified address.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Device_RF_Address<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> RF_Address;</tt></p>
</blockquote>
<p>This function returns the
<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Device_Parameters">
device parameters</a>. The device is specified by its number in the range 1..<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Devices">Get_Number_Of_Devices</a> 
(<b>Client</b>). Constraint_Error is propagated when the device number is out of 
range.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Device_Serial_No<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> String;<font color="#0000FF"><br>
function</font> Get_Device_Serial_No<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Address</b> 
: RF_Address<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> String;</tt></p>
</blockquote>
<p>These functions return the device serial number, e.g. <i>KEQ0828854</i>. It 
is ten characters long. The device can be specified by its number in the range 
1..<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Devices">Get_Number_Of_Devices</a> 
(<b>Client</b>) or by its radio frequency address. Constraint_Error is 
propagated when the device number is out of range. End_Error is propagated when 
there is no device with the specified address.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Device_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Device_Type;<font color="#0000FF"><br>
function</font> Get_Device_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Address</b> 
: RF_Address<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Device_Type;</tt></p>
</blockquote>
<p>These functions return the
<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Device_Type">
device type</a>. The device can be specified by its number in the range 1..<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Devices">Get_Number_Of_Devices</a> 
(<b>Client</b>) or by its radio frequency address. Constraint_Error is 
propagated when the device number is out of range. End_Error is propagated when 
there is no device with the specified address.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Devices">
</a>function</font> Get_Number_Of_Devices<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
ELV_MAX_Cube_Client<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Natural;</tt></p>
</blockquote>
<p>This function returns the number of devices. It becomes known shortly after 
successful connection to the cube, when the cube sends its configuration to the 
client. Between connections the number of devices is 0.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Error<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
ELV_MAX_Cube_Client<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if the last 
's' command was rejected by the cube. The command is issued for configuring and 
changing operating mode of the device:</p>
<ul>
	<li>
	<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Set_Thermostat_Automatic">
	Set_Thermostat_Automatic</a>;</li>
	<li>
	<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Set_Thermostat_Boost">
	Set_Thermostat_Boost</a>;</li>
	<li>
	<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Set_Thermostat_Parameters">
	Set_Thermostat_Parameters</a>;</li>
	<li>
	<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Set_Thermostat_Schedule">
	Set_Thermostat_Schedule</a>;</li>
	<li>
	<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Set_Thermostat_Temperature">
	Set_Thermostat_Temperature</a>.</li>
</ul>
<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Devices_room">
</a>function</font> Get_Number_Of_Devices<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Natural;<br>
<font color="#0000FF">
function</font> Get_Number_Of_Devices<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>ID</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Room_ID<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Natural;</tt></p>
</blockquote>
<p>This function returns the number of devices in the room specified by its 
number in the range 1..<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Rooms">Get_Number_Of_Rooms</a> 
(<b>Client</b>) or by its identifier. Constraint_Error is propagated when <b>
Index</b> is out of the range. End_Error is propagated when there is no room 
with the specified identifier.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Rooms">
</a>function</font> Get_Number_Of_Rooms<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
ELV_MAX_Cube_Client<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Natural;</tt></p>
</blockquote>
<p>This function returns the number of rooms. The number becomes known shortly 
after successful connection to the cube, when the cube sends its configuration 
to the client. Between connections the number of rooms is 0.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_RF_Address<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
ELV_MAX_Cube_Client<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> RF_Address;</tt></p>
</blockquote>
<p>This function returns the radio frequency address of the cube. Status_Error 
is propagated when there is no connection yet.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Room_ID<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Room_ID;</tt></p>
</blockquote>
<p>This function returns the room ID. The room is specified by its number in the 
range 1..<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Rooms">Get_Number_Of_Rooms</a> 
(<b>Client</b>). Constraint_Error is propagated when <b>Room</b> is out of the 
range.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Room_Name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> String;<br>
<font color="#0000FF">function</font> Get_Room_Name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>ID</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Room_ID<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> String;</tt></p>
</blockquote>
<p>This functions return the room name. The room is specified by its number in 
the range 1..<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Rooms">Get_Number_Of_Rooms</a> 
(<b>Client</b>) or by its identifier. Constraint_Error is propagated when <b>Room</b> is out of the 
range. End_Error is propagated when there is no room with the specified 
identifier.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Room_RF_Address<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> RF_Address;<br>
<font color="#0000FF">function</font> Get_Room_RF_Address<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>ID</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Room_ID<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> RF_Address</tt></p>
</blockquote>
<p>This functions return the room radio frequency address. The address is one of 
the main room device. The room is specified by its number in the range 1..<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Rooms">Get_Number_Of_Rooms</a> 
(<b>Client</b>) or by its identifier. Constraint_Error is propagated when <b>Room</b> is out of the 
range. End_Error is propagated when there is no room with the specified 
identifier.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Serial_No<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
ELV_MAX_Cube_Client<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> String;</tt></p>
</blockquote>
<p>This function returns the ten characters serial number of the cube. 
Status_Error is propagated when there is no connection yet.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Version<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
ELV_MAX_Cube_Client<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> String;</tt></p>
</blockquote>
<p>This function returns the firmware version of the cube, e.g. <i>1.1.3</i>. 
Status_Error is propagated when there is no connection yet.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Has_Device_Data<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;<font color="#0000FF"><br>
function</font> Has_Device_Data<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Address</b> 
: RF_Address<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p align="left">These functions return <i><font color="#800000">true</font></i> 
if the
<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Device_Data">device 
data</a> are avialable. The device can be specified by its number in the range 
1..<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Devices">Get_Number_Of_Devices</a> 
(<b>Client</b>) or by its radio frequency address. Constraint_Error is 
propagated when the device number is out of range. End_Error is propagated when 
there is no device with the specified address.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Is_In<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
: Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Device</b> 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;<br>
<font color="#0000FF">function</font> Is_In<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> : 
ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>ID</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Room_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Device</b> 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>This functions return <i><font color="#800000">true</font></i> if the room 
specified by the room number <b>Index</b> in the range 1..<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Rooms">Get_Number_Of_Rooms</a> 
(<b>Client</b>) contains a device with the number <b>Device</b> counted from 1 
through all devices in the room. The room can also be specified by its 
identifier. When either of the numbers is out of range the 
result is <font color="#800000"><i>false</i></font>.</p>
<blockquote>
<p><tt><font color="#0000FF">
procedure</font> Pair<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; :
<font color="#0000FF">in out</font> ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Timeout</b> : Duration := <font color="#800000">60.0</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the cube into the pairing mode used to discover new 
devices. A device in order to be discovered must be set into the pairing mode 
too. The parameter <b>Timeout</b> specifies the operation duration. When 
a new device is found
<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Configuration_Updated">Configuration_Updated</a> is called 
with the parameters of the device and the discriminant <i>
Device_Discovery_Update</i>. When the cube leaves discovery mode
<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Configuration_Updated">Configuration_Updated</a> 
is called with the discriminant <i>End_Discovery_Update</i>.</p>
<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Constraint_Error</TD>
    <TD>Invalid timeout</TD>
  </TR>
  <TR>
    <TD>  Socket_Error</TD>
    <TD>I/O error, connection is dropped</TD>
  </TR>
  <TR>
    <TD>  Use_Error</TD>
    <TD>The output buffer is full (connection is preserved)</TD>
  </TR>
  </TABLE>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Query_Devices">
</a>procedure</font> Query_Devices<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">in out</font> ELV_MAX_Cube_Client<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The cube sends actual status of the devices once immediately after 
connection. To actualize the status this procedure is called. In both cases when 
a response is obtained
<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Data_Received">
Data_Received</a> is called per each device which data are found in the 
response. Socket_Error is propagated on I/O errors. Use_Error is propagated when 
the output buffer is full. In the latter case the connection is not dropped and 
the application may try to call this procedure later (from another callback).</p>
<blockquote>
<p><tt><font color="#0000FF">
procedure</font> Query_NTP_Servers<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">in out</font> ELV_MAX_Cube_Client<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The cube sends back the list of NTP servers it uses. When 
a response is obtained
<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Configuration_Updated">Configuration_Updated</a> is called. Socket_Error is propagated on I/O errors. Use_Error is propagated when 
the output buffer is full. In the latter case the connection is not dropped and 
the application may try to call this procedure later (from another callback).</p>
<blockquote>
<p><tt><font color="#0000FF">
procedure</font> Reset_Devices (<b>Client</b> :
<font color="#0000FF">in out</font> ELV_MAX_Cube_Client);</tt></p>
</blockquote>
<p>The cube will drop all connected devices. Upon cube response the cached list 
of devices is erased. Socket_Error is propagated on I/O errors. Use_Error is propagated when 
the output buffer is full. In the latter case the connection is not dropped and 
the application may try to call this procedure later (from another callback).</p>
<blockquote>
<p><tt><font color="#0000FF">
procedure</font> Reset_Error (<b>Client</b> :
<font color="#0000FF">in out</font> ELV_MAX_Cube_Client);</tt></p>
</blockquote>
<p>This procedure resets error. Socket_Error is propagated on I/O errors. Use_Error is propagated when 
the output buffer is full. In the latter case the connection is not dropped and 
the application may try to call this procedure later (from another callback).</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_NTP_Servers<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">in out</font> ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>List
</b>&nbsp; : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">procedure</font> Set_NTP_Servers<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> 
: <font color="#0000FF">in out</font> ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>List&nbsp;
</b>&nbsp;: Servers_List.Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures set a new list of NTP servers for the cube to use. <b>List</b> 
is either a comma separated list of server names, e.g.&nbsp; <tt>&quot;de.pool.ntp.org,ntp.homematic.com&quot;</tt> 
or else it is a set of strings with the server name.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Set_Thermostat_Automatic">
</a>procedure</font> Set_Thermostat_Automatic<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">in out</font> ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Index</b>&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">procedure</font> Set_Thermostat_Automatic<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Address</b> : RF_Address<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures set a thermostat device in the automatic mode. The device 
can be specified by its number in the range 1..<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Devices">Get_Number_Of_Devices</a> 
(<b>Client</b>) or by its radio frequency address.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Constraint_Error</TD>
    <TD>The device number is out of range 1..<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Devices">Get_Number_Of_Devices</a></TD>
  </TR>
  <TR>
    <TD>  End_Error</TD>
    <TD>There is no device with the specified address</TD>
  </TR>
  <TR>
    <TD>  Mode_Error</TD>
    <TD>The device is not a thermostat</TD>
  </TR>
  <TR>
    <TD>  Socket_Error</TD>
    <TD>I/O error, connection is dropped</TD>
  </TR>
  <TR>
    <TD>  Use_Error</TD>
    <TD>The output buffer is full (connection is preserved)</TD>
  </TR>
  </TABLE>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Set_Thermostat_Boost">
</a>procedure</font> Set_Thermostat_Boost<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">in out</font> ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Index</b>&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">procedure</font> Set_Thermostat_Boost<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp; 
: <font color="#0000FF">in out</font> ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Address</b> : RF_Address<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures set a thermostat device in the boost mode. After boost 
sequence completion the device returns to its previous mode. The device can be 
specified by its number in the range 1..<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Devices">Get_Number_Of_Devices</a> 
(<b>Client</b>) or by its radio frequency address.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Constraint_Error</TD>
    <TD>The device number is out of range 1..<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Devices">Get_Number_Of_Devices</a></TD>
  </TR>
  <TR>
    <TD>  End_Error</TD>
    <TD>There is no device with the specified address</TD>
  </TR>
  <tr>
    <TD>  Mode_Error</TD>
    <TD>The device is not a thermostat</TD>
  </tr>
  <TR>
    <TD>  Socket_Error</TD>
    <TD>I/O error, connection is dropped</TD>
  </TR>
  <TR>
    <TD>  Use_Error</TD>
    <TD>The output buffer is full (connection is preserved)</TD>
  </TR>
  </TABLE>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Set_Thermostat_Parameters">
</a>procedure</font> Set_Thermostat_Parameters<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Index</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Comfort</b>&nbsp;&nbsp;&nbsp;&nbsp; : Centigrade;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Eco</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Centigrade;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Max</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Centigrade;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Min</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Centigrade;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>
Offset</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Centigrade;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Window_Open</b> : Centigrade;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Window_Time</b> : Day_Duration ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">procedure</font> Set_Thermostat_Parameters<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Address</b>&nbsp;&nbsp;&nbsp;&nbsp; : RF_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Comfort</b>&nbsp;&nbsp;&nbsp;&nbsp; : Centigrade;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Eco</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Centigrade;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Max</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Centigrade;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Min</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Centigrade;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>
Offset</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Centigrade;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Window_Open</b> : Centigrade;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Window_Time</b> : Day_Duration ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures set thermostat device parameters. For a wall mounted 
thermostat parameters <b>Offset</b>..<b>Window_Time</b> are omitted. The device can be 
specified by its number in the range 1..<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Devices">Get_Number_Of_Devices</a> 
(<b>Client</b>) or by its radio frequency address.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Constraint_Error</TD>
    <TD>The device number is out of range 1..<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Devices">Get_Number_Of_Devices</a></TD>
  </TR>
  <TR>
    <TD>  End_Error</TD>
    <TD>There is no device with the specified address</TD>
  </TR>
  <tr>
    <TD>  Mode_Error</TD>
    <TD>The device is not a thermostat</TD>
  </tr>
  <TR>
    <TD>  Socket_Error</TD>
    <TD>I/O error, connection is dropped</TD>
  </TR>
  <TR>
    <TD>  Use_Error</TD>
    <TD>The output buffer is full (connection is preserved)</TD>
  </TR>
  </TABLE>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Set_Thermostat_Schedule">
</a>procedure</font> Set_Thermostat_Schedule<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Index</b>&nbsp;&nbsp;&nbsp; : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Day</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Week_Day;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Schedule</b> : Points_List<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">procedure</font> Set_Thermostat_Schedule<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Address</b>&nbsp; : RF_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Day</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Week_Day;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Schedule</b> : Points_List<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures are used to set the thermostat's day program. The device can 
be specified by its number in the range 1..<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Devices">Get_Number_Of_Devices</a> 
(<b>Client</b>) or by its radio frequency address. The list of points must be 
sorted end time ascending. Note that there is no way to get confirmation that 
the schedule is set. The object assumes that it was and updates the schedule 
cached in the memory. The actual schedule will be read only upon a new 
connection.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Constraint_Error</TD>
    <TD>The device number is out of range 1..<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Devices">Get_Number_Of_Devices</a></TD>
  </TR>
  <TR>
    <TD>  End_Error</TD>
    <TD>There is no device with the specified address</TD>
  </TR>
  <TR>
    <TD>  Mode_Error</TD>
    <TD>Illegal program or not a thermostat</TD>
  </TR>
  <TR>
    <TD>  Socket_Error</TD>
    <TD>I/O error, connection is dropped</TD>
  </TR>
  <TR>
    <TD>  Use_Error</TD>
    <TD>The output buffer is full (connection is preserved)</TD>
  </TR>
  </TABLE>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Set_Thermostat_Temperature">
</a>procedure</font> Set_Thermostat_Temperature<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Index</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Temperature</b> : Centigrade;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Up_Until</b>&nbsp;&nbsp;&nbsp; 
: Time ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">procedure</font> Set_Thermostat_Temperature<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Address</b>&nbsp;&nbsp;&nbsp;&nbsp; : RF_Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Temperature</b> : Centigrade;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Up_Until</b>&nbsp;&nbsp;&nbsp; 
: Time ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures set thermostat temperature. When the parameter Up_Until is 
specified, it is the time until the temperature is set before the device returns 
to its previous mode. The device can be specified by its number in the range 1..<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Devices">Get_Number_Of_Devices</a> 
(<b>Client</b>) or by its radio frequency address.</p>

<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>  Constraint_Error</TD>
    <TD>The device number is out of range 1..<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Get_Number_Of_Devices">Get_Number_Of_Devices</a></TD>
  </TR>
  <TR>
    <TD>  End_Error</TD>
    <TD>There is no device with the specified address</TD>
  </TR>
  <tr>
    <TD>  Mode_Error</TD>
    <TD>The device is not a thermostat</TD>
  </tr>
  <TR>
    <TD>  Socket_Error</TD>
    <TD>I/O error, connection is dropped</TD>
  </TR>
  <TR>
    <TD>  Use_Error</TD>
    <TD>The output buffer is full (connection is preserved)</TD>
  </TR>
  </TABLE>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Status_Received<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Client</b> :
<font color="#0000FF">in out</font> ELV_MAX_Cube_Client;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Error</b>&nbsp; : Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Duty</b>&nbsp;&nbsp; 
: Ratio;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Slots</b>&nbsp; : Natural<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when command response from a device is received. The 
default implementation calls to Trace. It likely should be overridden, e.g. to 
store the data. <b>Error</b> is <font color="#800000"><i>true</i></font> when 
the last command was rejected. <b>Duty</b> indicates how much the radio traffic 
was used. When it reaches 1 the cube stops communicating with the device. <b>
Slots</b> is the number of free memory slots.</p>
<p><b><u>LAN discovery</u>:</b> MAX! cubes in the LAN can be discovered via 
broadcast. The following data types describe a cube:</p>

<blockquote>
<p><tt><font color="#0000FF">
type</font> 
Cube_Descriptor <font color="#0000FF">is record</font><br>
&nbsp;&nbsp; Address&nbsp;&nbsp; : Inet_Addr_Type;<br>
&nbsp;&nbsp; Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : String (<font color="#800000">1</font>..<font color="#800000">8</font>);<br>
&nbsp;&nbsp; Serial_No : String (<font color="#800000">1</font>..<font color="#800000">10</font>);<br>
<font color="#0000FF">end record</font>;<br>
<font color="#0000FF">type</font> Cube_Descriptor_Array <font color="#0000FF">is<br>
&nbsp;&nbsp; array</font> (Positive <font color="#0000FF">range</font> &lt;&gt;)
<font color="#0000FF">of</font> Cube_Descriptor;</tt></p>
</blockquote>
<p>Here:</p>
<ul>
	<li><i>Address</i> is the IP address of the cube. GNAT.Sockets.Image can be 
	used to obtain the IP address of;</li>
	<li><i>Name</i> is the name of;</li>
	<li><i>Serial_No</i> is the serial number of (e.g. KEQ0821071)</li>
</ul>
<p>The function</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Discover<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Timeout</b>&nbsp; : 
Timeval_Duration := <font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Attempts</b> 
: Positive&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
<font color="#800000">2</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Host</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := &quot;&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Port</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Port_Type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := <font color="#800000">
23272</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Cube_Descriptor_Array;</tt></p>
</blockquote>
<p>returns an array of discovered MAX! cubes. <b>Timeout</b> is the overall 
operation duration. <b>Attempts</b> is the number of broadcast queries sent. <b>
Host</b> is the official address of the host in the LAN. When omitted the first 
host address is taken. <b>Port</b> is the broadcast port. Socket_Error is 
propagated on I/O errors. Host_Error is propagated on host naming errors.</p>

<h4><a name="16.14.1"></a>16.14.1. Stream I/O</h4>

<p>
<a name="GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Stream_IO">
</a>The package
<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Stream_IO">GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Stream_IO</a> provides 
stream I/O operations for basic types declared in the parent package. The 
operations can be used for storing schedules and device parameters into files or 
databases.</p>

<p align="right">
  <A name="16.15"></A><a href="#16.14"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#17"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>16.15. MQTT protocol implementation</H3>
<p><b><a name="MQTT"></a>M</b>essage <b>Q</b>ueueing <b>T</b>elemetry <b>T</b>ransport (<b>MQTT</b>) 
is an ISO standard (<a href="http://www.iso.org/iso/catalogue_detail.htm?csnumber=69466">ISO/IEC 
PRF 20922</a>) messaging protocol. The protocol is a TCP/IP based and supports 
publishing and subscribing to messages identified by UTF-8 encoded names, 
so-called topics. There is no topic any registration procedure. Topics are 
introduced ad-hoc. A message is an untyped bucket of octets, represented in the 
implementation by a stream-element array. It is up to the message publisher or 
subscriber to interpret the message content. Multiple clients may subscribe to 
the same topic. Additionally to this messages can be retained on the server to 
ensure late delivery to the clients staying off-line while publishing. A 
subscriber may require three levels of delivery acknowledgement (at most once, 
at least once, exactly once). For further information
<a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html">see</a>.</p>
<p>The MQTT protocol architecture is relatively heavy-weight, especially because 
topics are introduced ad-hoc. Possibly, it is also the reason why the protocol 
supports no naming and browsing services. Server discovery services are not 
provided. The protocol lacks time stamping, message instance identification, live 
lock detection. Published messages are not filtered, nor there is publishing 
confirmation, rejection or other form of data returned to the message's issuer.</p>
<p>The provided implementation provides:</p>
<ul>
	<li>A minimal implementation of a MQTT pier. It implements the MQTT stack 
	with procedures to encode/decode all MQTT packets;</li>
	<li>A full MQTT broker supporting messages subscriptions and 
	publishing.</li>
</ul>

<h4><a name="16.15.1"></a>16.15.1. MQTT pier</h4>

<p>
<a name="GNAT.Sockets.MQTT"></a>The package
<a href="#GNAT.Sockets.MQTT">GNAT.Sockets.MQTT</a> provides 
a minimal implementation of a MQTT pier. It can be used to implement end MQTT 
devices that need no messages brokering. The implementation is not task-safe. 
All calls must be performed on the context of the connection server, e.g. in 
response to incoming requests. The package defines the type of a MQTT pier:</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.MQTT_Pier"></a>type</font> 
MQTT_Pier<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Listener&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">access</font> Connections_Server'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Max_Subscribe_Topics : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Input_Size&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Buffer_Length;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Output_Size&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Buffer_Length<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is new</font> Connection
<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The type is derived from <a href="#GNAT.Sockets.Server.Connection">Connection</a> 
object and can act both as a server and client. The dicriminants of the type 
are:</p>

<ul>
	<li><i>Listener</i> is an instance of
	<a href="#GNAT.Sockets.Server.Connections_Server">Connections_Server</a> 
	object handling the pier;</li>
	<li><i>Max_Subscribe_Topics</i> specifies the maximum number of topics 
	allowed in a single subscribe request;</li>
	<li><i>Input_Size</i> is the size of the input buffer used to read the 
	socket into. See for <a href="#GNAT.Sockets.Server.Connection">Connection</a> 
	further explanation;</li>
	<li><i>Output_Size</i> is the size of the output buffer used to keep sent 
	data before the socket becomes available to write. The object dynamically 
	allocates a secondary output buffer when <i>Output_Buffer</i> overflows. 
	Thus Send operation never fails.</li>
</ul>
<p><u><b>General-purpose operations</b></u>. The following general-purpose primitive operations are defined on
<a href="#GNAT.Sockets.MQTT.MQTT_Pier">MQTT_Pier</a>:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Finalize (<b>Pier</b> :
<font color="#0000FF">in out</font> MQTT_Pier);</tt></p>
</blockquote>
<p>The procedure is called when the object is destroyed. If overridden it must 
be called from the new implementation.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Get_Max_Message_Size">
</a>function</font> Get_Max_Message_Size (<b>Pier</b> : MQTT_Pier)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Stream_Element_Count;</tt></p>
</blockquote>
<p>The function returns the current limit set on the message size. The limit can 
be set using the procedure <a href="#GNAT.Sockets.MQTT.Set_Max_Message_Size">
Set_Max_Message_Size</a>.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.MQTT.Get_Max_Secondary_Buffer_Size"></a>function</font> 
Get_Max_Secondary_Buffer_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pier</b> : MQTT_Pier<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Stream_Element_Count;</tt></p>
</blockquote>
<p>The function returns upper limit of the secondary buffer. The secondary 
buffer is allocated on demand when the output buffer becomes full. The size of 
the buffer is limited by
<a href="#GNAT.Sockets.MQTT.Set_Max_Secondary_Buffer_Size">
Set_Max_Secondary_Buffer_Size</a>. Zero limit means unlimited buffer.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Get_QoS"></a>function</font> 
Get_QoS<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pier</b>&nbsp; : 
MQTT_Pier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b> 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> QoS_Level;</tt></p>
</blockquote>
<p>The function returns the quality of service requested for the topic with the 
number <b>Index</b>. This function can be used only in the callback of a <i>
SUBSCRIBE</i> request (<a href="#GNAT.Sockets.MQTT.On_Subscribe">On_Subscribe</a>), 
otherwise Use_Error is propagated. Constraint_Error is propagated when Index is 
greater than the number of subscribed topics.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.MQTT.Get_Secondary_Buffer_Size"></a>function</font> 
Get_Secondary_Buffer_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pier</b> : MQTT_Pier<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Stream_Element_Count;</tt></p>
</blockquote>
<p>The function returns actual size of the secondary buffer. The secondary 
buffer is allocated on demand when the output buffer becomes full. The size of 
the buffer can be limited (see
<a href="#GNAT.Sockets.MQTT.Set_Max_Secondary_Buffer_Size">
Set_Max_Secondary_Buffer_Size</a>). If limited overflow will cause data overrun 
exception.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Get_Topic"></a>function</font> 
Get_Topic<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pier</b>&nbsp; : 
MQTT_Pier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b> 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> String;</tt></p>
</blockquote>
<p>The function returns the topic with the number <b>Index</b>. This function 
can be used only in the callback of a <i>SUBSCRIBE</i> (see
<a href="#GNAT.Sockets.MQTT.On_Subscribe">On_Subscribe</a>) or an <i>UNSUBSCRIBE</i> 
(see <a href="#GNAT.Sockets.MQTT.On_Unsubscribe">On_Unsubscribe</a>) request, 
otherwise Use_Error is propagated. Constraint_Error is propagated when Index is 
greater than the number of subscribed topics.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Received"></a>procedure</font> 
Received<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pier</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MQTT_Pier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pointer</b> : <font color="#0000FF">in out</font> Stream_Element_Offset);</tt></p>
</blockquote>
<p>The procedure is called when a portion of data is received. The 
implementation parses input and fires the state machine implementing the MQTT 
stack.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Sent"></a>procedure</font> 
Sent (<b>Pier</b> : <font color="#0000FF">in out</font> MQTT_Pier);</tt></p>
</blockquote>
<p>The procedure is called when a portion of data is sent. The implementation 
moves data from the secondary buffer to the output buffer. If overridden it must 
be called from the new implementation.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Set_Max_Message_Size">
</a>procedure</font> Set_Max_Message_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pier</b> :
<font color="#0000FF">in out</font> MQTT_Pier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Size</b> 
: Stream_Element_Count<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The procedure sets the limit on the message size. This is the maximum size of 
a message that does not include packet header, topic name etc. For the message 
the pier object keeps a buffer allocated. The current limit can be queried by
<a href="#GNAT.Sockets.MQTT.Get_Max_Message_Size">Get_Max_Message_Size</a>.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.MQTT.Set_Max_Secondary_Buffer_Size"></a>procedure</font> 
Set_Max_Secondary_Buffer_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pier</b> :
<font color="#0000FF">in out </font> MQTT_Pier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Size</b> 
: Stream_Element_Count := <font color="#800000">0</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The procedure sets the limit to the secondary buffer size. The buffer is 
allocated on demand. When <b>Size</b> set to zero the buffer is not limited. 
Otherwise buffer overflow causes exception. See
<a href="#GNAT.Sockets.MQTT.Get_Max_Secondary_Buffer_Size">
Get_Max_Secondary_Buffer_Size</a>.</p>

<p><u><b>Incoming requests notifications</b></u>. The following primitive operations are 
called upon an incoming packet:</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.On_Acknowledge"></a>
procedure</font> On_Acknowledge<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pier</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MQTT_Pier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Request</b> : Acknowledge_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Packet</b>&nbsp; : Packet_Identifier<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The procedure is called when an <a href="#GNAT.Sockets.MQTT.Acknowledge_Type">
acknowledge response</a> is received. The parameter <b>Request</b> identifies 
the response. <b>Packet</b> is the packet identifier. The default implementation 
calls <a href="#GNAT.Sockets.MQTT.Send_Acknowledge">Send_Acknowledge</a> when an 
acknowledge is expected, i.e. for:</p>
<ul>
	<li><i>Publish_Level_2_Received </i>is acknowledged with<i> 
	Publish_Level_2_Release</i>;</li>
	<li><i>Publish_Level_2_Release</i> is acknowledged with <i>
	Publish_Level_2_Complete</i>.</li>
</ul>
<p>In other cases the implementation does nothing.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.On_Connect"></a>
procedure</font> On_Connect<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pier</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MQTT_Pier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Client</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Clean</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Will_Topic</b>&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Will_Message</b> : Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Will_QoS</b>&nbsp;&nbsp;&nbsp;&nbsp; : QoS_Level;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Will_Retain</b>&nbsp; : Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
User_Name</b>&nbsp;&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Password</b>&nbsp;&nbsp;&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Keep_Alive</b>&nbsp;&nbsp; : Duration<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The procedure is called when a <i>CONNECT</i> request is received. <b>Client</b> 
is the client identifier. When empty an anonymous session is created. Otherwise 
the server must take the saved session with this identifier if exists. When <b>
Clean</b> is <font color="#800000"><i>false</i></font> and the saved session is 
found, the session is continued, e.g. its subscriptions are reactivated etc. 
When <b>Clean</b> is <i><font color="#800000">true</font></i>, the existing 
session is erased. <b>Will_Topic</b>, <b>Will_Message</b>, <b>Will_QoS</b> and
<b>Will_Retain</b> determine the behavior when the client gets prematurely 
disconnected. In this case, when <b>Will_Topic</b> is not empty, the topic is 
published by the server. The parameter <b>Will_QoS</b> is the quality of service 
of the<i> </i>topic. The parameter <b>Will_Retain</b> when <font color="#800000">
<i>true</i></font> specifies that the will topic is retained by the server. I.e. 
it can be subscribed and received after being published. When <b>Will_Retain</b> 
is <font color="#800000"><i>false</i></font> the topic is delivered only to 
connected clients. <b>User_Name</b> and <b>Password</b> can be used for the 
client authentication. <b>Keep_Alive</b> when greater than zero specifies how 
frequently the client must send its requests. When there is nothing to request 
the client must send a <i>PINGREQ</i> request instead. If the client fails to 
send a request within this period of time, the server drops the connection. The 
default implementation of this procedure rejects all connections.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.On_Connect_Accepted">
</a>procedure</font> On_Connect_Accepted<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pier</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MQTT_Pier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Session_Present</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The procedure is called when a successful connection acknowledge <i>CONNACK</i> 
is received. <b>Session_Present</b> is <i><font color="#800000">true</font></i> 
when the server has found and resumed the previous session identified by the 
client (see the <b>Client</b> parameter of
<a href="#GNAT.Sockets.MQTT.On_Connect">On_Connect</a>). The default 
implementation does nothing.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.On_Connect_Rejected">
</a>procedure</font> On_Connect_Rejected<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pier</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MQTT_Pier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Response</b> : Connect_Response<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The procedure is called when a failed connection acknowledge <i>CONNACK</i> 
is received. <b>Response</b> is the server's
<a href="#GNAT.Sockets.MQTT.Connect_Response">response code</a>. The default 
implementation does nothing.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.On_Disconnect"></a>
procedure</font> On_Disconnect (<b>Pier</b> : <font color="#0000FF">in out</font> 
MQTT_Pier);</tt></p>
</blockquote>
<p>The procedure is called when a <i>DISCONNECT</i> request is received. This is 
the last request a client sends to the server. When the client does not send 
this request before dropping connection, the server will publish its last will 
(see <a href="#GNAT.Sockets.MQTT.On_Connect">On_Connect</a>). The default 
implementation does nothing.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.On_Ping"></a>procedure</font> 
On_Ping (<b>Pier</b> : <font color="#0000FF">in out</font> MQTT_Pier);</tt></p>
</blockquote>
<p>The procedure is called when a <i>PINGREQ</i> request is received. The 
default implementation responds with a ping response.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.On_Ping_Response"></a>
procedure</font> On_Ping_Response (<b>Pier</b> : <font color="#0000FF">in out</font> 
MQTT_Pier);</tt></p>
</blockquote>
<p>The procedure is called when a <i>PINGRESP</i> response is received. The 
default implementation does nothing.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.On_Publish"></a>
procedure</font> On_Publish<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pier</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MQTT_Pier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Topic</b>&nbsp;&nbsp;&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Message</b>&nbsp;&nbsp; : Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Packet</b>&nbsp;&nbsp;&nbsp; : Packet_Identification;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Duplicate</b> : Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Retain</b>&nbsp;&nbsp;&nbsp; : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The procedure is called when a <i>PUBLISH</i> request is received. The 
parameter <b>Topic</b> is the published topic. Published topics may not contain 
wildcards. See <a href="#GNAT.Sockets.MQTT.Check_Topic">Check_Topic</a> for 
further information. The parameter <b>Message</b> is the published message. The 
parameter <b>Packet</b> identifies the packet. The response if any must contain 
this number. <b>Duplicate</b> is <i><font color="#800000">true</font></i> if the 
server suspects that the recipient might already have received this message. <b>
Retain</b> is <i><font color="#800000">true</font></i> if the message is sent 
after the client has subscribed to the topic and the server discovered this 
message retained on the server. The default implementation acknowledges the 
request according to the <a href="#GNAT.Sockets.MQTT.QoS_Level">QoS_Level</a> 
specified in <b>Packet</b>:</p>
<ul>
	<li><i>At_Most_Once</i> is not acknowledged;</li>
	<li><i>At_Least_Once</i> is acknowledged with <i>Publish_Level_1</i>;</li>
	<li><i>Exactly_Once</i> is acknowledged with <i>Publish_Level_2_Received</i>.</li>
</ul>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.On_Subscribe"></a>
procedure</font> On_Subscribe<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pier</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MQTT_Pier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Packet</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Packet_Identifier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Topics_Number</b> : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The procedure is called when a <i>SUBSCRIBE</i> request is received. The 
parameter <b>Packet</b> identifies the packet. The parameter <b>Topics_Number</b> 
specifies the number of subscribed tokens. The maximum number of topics is 
limited by the object discriminant <i>Max_Subscribe_Topics</i>. The requested 
topic and quality of service is obtained by the functions
<a href="#GNAT.Sockets.MQTT.Get_Topic">Get_Topic</a> and
<a href="#GNAT.Sockets.MQTT.Get_QoS">Get_QoS</a> correspondingly. Subscribed 
topics may contain wildcards. See <a href="#GNAT.Sockets.MQTT.Check_Topic">
Check_Topic</a> and <a href="#GNAT.Sockets.MQTT.Match_Topic">Match_Topic</a> for 
details. The default implementation rejects all requested topics in the returned
<i>SUBACK</i>.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.MQTT.On_Subscribe_Acknowledgement"></a>procedure</font> 
On_Subscribe_Acknowledgement<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pier</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MQTT_Pier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Packet</b> : Packet_Identifier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Codes</b>&nbsp; : Return_Code_List<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The procedure is called when a <i>SUBACK</i> response is received. The 
parameter <b>Packet</b> identifies the packet. The array <b>Codes</b> contains a
<a href="#GNAT.Sockets.MQTT.Return_Code">Return_Code</a> for each subscribed 
topic. The default implementation does nothing.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.On_Unsubscribe"></a>
procedure</font> On_Unsubscribe<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pier</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MQTT_Pier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Packet</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Packet_Identifier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Topics_Number</b> : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The procedure is called when a <i>UNSUBSCRIBE</i> request is received. The 
parameter <b>Packet</b> identifies the packet. The parameter <b>Topics_Number</b> 
specifies the number of tokens to unsubscribe. The maximum number of topics is 
limited by the object discriminant <i>Max_Subscribe_Topics</i>. The requested 
topic is obtained by the function <a href="#GNAT.Sockets.MQTT.Get_Topic">
Get_Topic</a>. The default implementation acknowledges the receipt by sending <i>
UNSUBACK</i> back.</p>
<p><u><b>Sending outgoing requests</b></u>. The following primitive operations are 
used to send requests:</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Send_Acknowledge"></a>
procedure</font> Send_Acknowledge<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pier</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MQTT_Pier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Request</b> : Acknowledge_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Packet</b>&nbsp; : Packet_Identifier<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The procedure sends an <a href="#GNAT.Sockets.MQTT.Acknowledge_Type">
acknowledge response</a> specified by the parameter <b>Request</b> to <i>PUBLISH</i> 
(and following responses) or <i>UNSUBSCRIBE</i>. The parameter <b>Packet</b> 
identifies the request's packet. Use_Error is propagated when <b>Pier</b> is not 
connected. Data_Error is propagated on secondary buffer overflow if its size is 
limited by <a href="#GNAT.Sockets.MQTT.Set_Max_Secondary_Buffer_Size">
Set_Max_Secondary_Buffer_Size</a>.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Send_Connect"></a>
procedure</font> Send_Connect<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pier</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MQTT_Pier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Client</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Clean</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= True;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Will_Topic</b>&nbsp;&nbsp; : String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= &quot;&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Will_Message</b> : Stream_Element_Array := (<font color="#800000">1</font>..<font color="#800000">0</font> 
=&gt; <font color="#800000">0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Will_QoS</b>&nbsp;&nbsp;&nbsp;&nbsp; : QoS_Level&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= At_Most_Once;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Will_Retain</b>&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
User_Name</b>&nbsp;&nbsp;&nbsp; : String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= &quot;&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Password</b>&nbsp;&nbsp;&nbsp;&nbsp; : String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= &quot;&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Keep_Alive</b>&nbsp;&nbsp; : Duration&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= <font color="#800000">0.0</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The procedure sends a <i>CONNECT</i> request. The parameters are same as in
<a href="#GNAT.Sockets.MQTT.On_Connect">On_Connect</a>. This must be the first 
request sent by a client to the server after connection is established. 
Constraint_Error is propagated if a parameter is invalid. Use_Error is 
propagated when <b>Pier</b> is not connected. Data_Error is propagated on 
secondary buffer overflow if its size is limited by
<a href="#GNAT.Sockets.MQTT.Set_Max_Secondary_Buffer_Size">
Set_Max_Secondary_Buffer_Size</a>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Send_Connect_Accepted">
</a>procedure</font> Send_Connect_Accepted<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pier</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MQTT_Pier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Session_Present</b> : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The procedure sends a <i>CONNACK </i>response. The parameters are same as in
<a href="#GNAT.Sockets.MQTT.On_Connect_Accepted">On_Connect_Accepted</a>. 
Use_Error is propagated when <b>Pier</b> is not connected. Data_Error is 
propagated on secondary buffer overflow if its size is limited by
<a href="#GNAT.Sockets.MQTT.Set_Max_Secondary_Buffer_Size">
Set_Max_Secondary_Buffer_Size</a>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Send_Connect_Rejected">
</a>procedure</font> Send_Connect_Rejected<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pier</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MQTT_Pier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Response</b> : Connect_Response<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The procedure sends a <i>CONNACK </i>response. The parameters are same as in
<a href="#GNAT.Sockets.MQTT.On_Connect_Rejected">On_Connect_Rejected</a>. 
Use_Error is propagated when <b>Pier</b> is not connected. Data_Error is 
propagated on secondary buffer overflow if its size is limited by
<a href="#GNAT.Sockets.MQTT.Set_Max_Secondary_Buffer_Size">
Set_Max_Secondary_Buffer_Size</a>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Send_Disconnect"></a>procedure</font> 
Send_Disconnect (<b>Pier</b> 
: <font color="#0000FF">in out</font> MQTT_Pier);</tt></p>
</blockquote>
<p>The procedure sends a <i>DISCONNECT </i>request. This must be the last 
request from a client before it drops the connection. Use_Error is propagated 
when <b>Pier</b> is not connected. Data_Error is propagated on secondary buffer 
overflow if its size is limited by
<a href="#GNAT.Sockets.MQTT.Set_Max_Secondary_Buffer_Size">
Set_Max_Secondary_Buffer_Size</a>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Send_Ping"></a>procedure</font> 
Send_Ping (<b>Pier</b> : <font color="#0000FF">in out </font>MQTT_Pier);</tt></p>
</blockquote>
<p>The procedure sends a <i>PINKREQ</i> request. Use_Error is propagated when <b>
Pier</b> is not connected. Data_Error is propagated on secondary buffer overflow 
if its size is limited by
<a href="#GNAT.Sockets.MQTT.Set_Max_Secondary_Buffer_Size">
Set_Max_Secondary_Buffer_Size</a>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Send_Ping_Response"></a>procedure</font> 
Send_Ping_Response (<b>Pier</b> : <font color="#0000FF">in out </font>MQTT_Pier);</tt></p>
</blockquote>
<p>The procedure sends a <i>PINKRES</i> response. Use_Error is propagated when
<b>Pier</b> is not connected. Data_Error is propagated on secondary buffer 
overflow if its size is limited by
<a href="#GNAT.Sockets.MQTT.Set_Max_Secondary_Buffer_Size">
Set_Max_Secondary_Buffer_Size</a>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Send_Publish"></a>procedure</font> 
Send_Publish<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pier</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out </font>MQTT_Pier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Topic</b>&nbsp;&nbsp;&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Message</b>&nbsp;&nbsp; : Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Packet</b>&nbsp;&nbsp;&nbsp; : Packet_Identification;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Duplicate</b> : Boolean := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Retain</b>&nbsp;&nbsp;&nbsp; : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> 
Send_Publish<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pier</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out </font>MQTT_Pier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Topic</b>&nbsp;&nbsp;&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Message</b>&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Packet</b>&nbsp;&nbsp;&nbsp; : Packet_Identification;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Duplicate</b> : Boolean := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Retain</b>&nbsp;&nbsp;&nbsp; : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures send a <i>PUBLISH</i> request. The parameters are similar to 
ones in <a href="#GNAT.Sockets.MQTT.On_Publish">On_Publish</a>. The parameter <b>
Message</b> can be Stream_Element_Array or String. Constraint_Error is 
propagated if a parameter is invalid. Use_Error is propagated when <b>Pier</b> 
is not connected. Data_Error is propagated on secondary buffer overflow if its 
size is limited by <a href="#GNAT.Sockets.MQTT.Set_Max_Secondary_Buffer_Size">
Set_Max_Secondary_Buffer_Size</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> 
Send_Publish<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pier</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out </font>MQTT_Pier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Message</b>&nbsp;&nbsp; : MQTT_Message'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Packet</b>&nbsp;&nbsp;&nbsp; : Packet_Identification;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Duplicate</b> : Boolean := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Retain</b>&nbsp;&nbsp;&nbsp; : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This variant sends a message stored in
<a href="#GNAT.Sockets.MQTT.MQTT_Message">MQTT_Message</a> object. Use_Error is propagated when <b>Pier</b> 
is not connected. Data_Error is propagated on secondary buffer overflow if its 
size is limited by <a href="#GNAT.Sockets.MQTT.Set_Max_Secondary_Buffer_Size">
Set_Max_Secondary_Buffer_Size</a>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Send_Subscribe"></a>procedure</font> 
Send_Subscribe<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pier</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MQTT_Pier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Packet</b> : Packet_Identifier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Topics</b> : Topics_List;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>QoS</b>&nbsp;&nbsp;&nbsp; 
: QoS_Level_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">procedure</font> Send_Subscribe<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pier</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MQTT_Pier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Packet</b> : Packet_Identifier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Topic</b>&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>QoS</b>&nbsp;&nbsp;&nbsp; 
: QoS_Level<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures send a <i>SUBSCRIBE</i> request. The parameter <b>Packet</b> 
is the packet number with is used by the pier to acknowledge subscription. The parameter
<b>Topics</b> is <a href="#GNAT.Sockets.MQTT.Topics_List">the list of topics</a> 
to subscribe. The parameter <b>QoS</b> the array of
<a href="#GNAT.Sockets.MQTT.QoS_Level">QoS_Level</a>. Both parameters must have 
the same length otherwise Constraint_Error is propagated. An alternative variant 
is used to subscribe to single topic with <b>Topic</b> and <b>QoS</b> 
parameters. Use_Error is propagated when <b>Pier</b> is not connected. 
Data_Error is propagated on secondary buffer overflow if its size is limited by
<a href="#GNAT.Sockets.MQTT.Set_Max_Secondary_Buffer_Size">
Set_Max_Secondary_Buffer_Size</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.MQTT.Send_Subscribe_Acknowledgement"></a>procedure</font> 
Send_Subscribe_Acknowledgement<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pier</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MQTT_Pier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Packet</b> : Packet_Identifier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Codes</b>&nbsp; : Return_Code_List<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The procedure sends a <i>SUBACK</i> response. The parameter <b>Packet</b> is 
the packet number, same as in <i>SUBSCRIBE</i> request. The parameters are same 
as in <a href="#GNAT.Sockets.MQTT.On_Subscribe_Acknowledgement">
On_Subscribe_Acknowledgement</a>. Use_Error is propagated when <b>Pier</b> is 
not connected. Data_Error is propagated on secondary buffer overflow if its size 
is limited by <a href="#GNAT.Sockets.MQTT.Set_Max_Secondary_Buffer_Size">
Set_Max_Secondary_Buffer_Size</a>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Send_Unsubscribe"></a>
procedure</font> Send_Unsubscribe<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Pier</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> MQTT_Pier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Packet</b> : Packet_Identifier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Topics</b> : Topics_List<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The procedure sends a <i>UNSUBSCRIBE</i> request. The parameter <b>Packet</b> 
is the packet number which will identify the response. The parameter <b>Topics</b> 
is <a href="#GNAT.Sockets.MQTT.Topics_List">the list of topics</a> to 
unsubscribe. The procedure is void when <b>Topics</b> is empty. Constraint_Error 
is propagated if a parameter is invalid. Use_Error is propagated when <b>Pier</b> 
is not connected. Data_Error is propagated on secondary buffer overflow if its 
size is limited by <a href="#GNAT.Sockets.MQTT.Set_Max_Secondary_Buffer_Size">
Set_Max_Secondary_Buffer_Size</a>.</p>
<p><u><b>Handling topics</b></u>. Topics are UTF-8 encoded and consist of levels 
separated by the forward slash /. The topics are case-sensitive, e.g. <i>Abc/deF</i> 
is different from <i>abc/def</i>. The following functions are used for handling 
topics:</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Check_Topic"></a>
function</font> Check_Topic (<b>Topic</b> : String) <font color="#0000FF">return</font> 
Boolean;</tt></p>
</blockquote>
<p>This function checks its argument for validity. The result is <i>
<font color="#800000">true</font></i> if the topic contains wildcards + and #. 
The wildcard + matches any level. The wildcard # matches any number of level, it 
must be the last character of the topic if present. Constraint_Error is 
propagated when the topic is invalid.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Match_Topic"></a>
function</font> Match_Topic<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Topic</b>&nbsp;&nbsp; 
: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Pattern</b> 
: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>This function matches <b>Topic</b> against <b>Pattern</b>. The result is true 
is <b>Pattern</b> matches <b>Topic</b>. Note that topics starting with $ are not 
matched by patterns starting with a wildcard. Constraint_Error is propagated 
when <b>Topic</b> or <b>Pattern</b> is invalid.</p>
<p><u><b>Other types and subprograms</b></u>. The following types and 
subprograms are declared in the package:</p>
<blockquote>
<p><tt><a name="GNAT.Sockets.MQTT.MQTT_Port"></a>MQTT_Port :
<font color="#0000FF">constant</font> := 1883;</tt></p>
</blockquote>
<p><a href="#GNAT.Sockets.MQTT.MQTT_Port">MQTT_Port</a> is the default MQTT 
port.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.QoS_Level"></a>type</font> 
QoS_Level <font color="#0000FF">is</font> (At_Most_Once, At_Least_Once, 
Exactly_Once);</tt></p>
</blockquote>
<p>This is quality of service requested for message publishing:</p>
<ul>
	<li><i>At_Most_Once</i> does not use acknowledgement;</li>
	<li><i>At_Least_Once</i> uses single acknowledgement sent by the recipient. 
	When the sender does not receive the acknowledge it resends the message if 
	the connection gets lost;</li>
	<li><i>Exactly_Once</i> uses triple acknowledgement. The recipient sends its 
	acknowledgement and await the sender to respond with its acknowledgement. 
	Then it sends its final acknowledgement.</li>
</ul>
<blockquote>
<p><tt><font color="#0000FF">type</font> QoS_Level_Array <font color="#0000FF">
is array </font>(Positive <font color="#0000FF">range</font> &lt;&gt;)
<font color="#0000FF">of</font> QoS_Level;</tt></p>
</blockquote>
<p>This is an array of <a href="#GNAT.Sockets.MQTT.QoS_Level">QoS_Level</a> 
elements.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Image (<b>QoS</b> : QoS_Level)
<font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function returns a textual representation of a
<a href="#GNAT.Sockets.MQTT.QoS_Level">QoS_Level</a> value.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> &quot;<font color="#FF0000">+</font>&quot; (<b>Left</b>, <b>Right</b> : 
QoS_Level) <font color="#0000FF">return</font> QoS_Level;</tt></p>
</blockquote>
<p>This function merges two values of <a href="#GNAT.Sockets.MQTT.QoS_Level">
QoS_Level</a> choosing the maximum level of quality.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Acknowledge_Type"></a>
type</font> Acknowledge_Type <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Publish_Level_1,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Publish_Level_2_Received,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Publish_Level_2_Release,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Publish_Level_2_Complete,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Unsubscribed<br>
&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This is the type of acknowledge:</p>
<ul>
	<li><i>Publish_Level_1</i> is an acknowledge to the <i>PUBLISH</i> request 
	with the QoS <i>at least once</i>;</li>
	<li><i>Publish_Level_2_Received</i> is an acknowledge to the <i>PUBLISH</i> 
	request with the QoS <i>exactly once</i>;</li>
	<li><i>Publish_Level_2_Release</i> is an acknowledge to the above 
	acknowledge response. It is sent by the recipient back to the sender of the
	<i>PUBLISH</i> request;</li>
	<li><i>Publish_Level_2_Received</i> is the final acknowledge to the <i>
	PUBLISH</i> request with the QoS e<i>exactly once</i>;</li>
	<li><i>Unsubscribed</i> is an acknowledge to the <i>UNSUBSCRIBE</i> request.</li>
</ul>
<blockquote>
<p><tt><font color="#0000FF">function</font> Image (<b>Value</b> : 
Acknowledge_Type) <font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function returns a textual representation of the argument.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Connect_Response"></a>
type</font> Connect_Response <font color="#0000FF">is range</font>
<font color="#800000">1</font>..<font color="#800000">255</font>;</tt></p>
</blockquote>
<p>This type represents reasons of a <i>CONNECT</i> request failure. The 
following values are predefined:</p>
<blockquote>
<p><tt>Unacceptable_Protocol_Version : <font color="#0000FF">constant</font> 
Connect_Response := <font color="#800000">1</font>;<br>
Identifier_Rejected&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">constant</font> Connect_Response :=
<font color="#800000">2</font>;<br>
Server_Unavailable&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">constant</font> Connect_Response :=
<font color="#800000">3</font>;<br>
Bad_User_Name_Or_Password&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">
constant</font> Connect_Response := <font color="#800000">4</font>;<br>
Not_Authorized&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">constant</font> Connect_Response :=
<font color="#800000">5</font>;</tt></p>
</blockquote>
<blockquote>
<p><tt><font color="#0000FF">function</font> Image (<b>Code</b> : 
Connect_Response) <font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function returns a textual representation of a
<a href="#GNAT.Sockets.MQTT.Connect_Response">Connect_Response</a> value.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Packet_Identifier"></a>
type</font> Packet_Identifier <font color="#0000FF">is new</font> Unsigned_16;</tt></p>
</blockquote>
<p>Values of this type identify packets. Responses to a request use the 
request's packet number.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Packet_Identification">
</a>type</font> Packet_Identification<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; QoS : QoS_Level := At_Most_Once<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is<br>
record<br>
&nbsp;&nbsp; case</font> QoS <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when</font> At_Most_Once =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> At_Least_Once | 
Exactly_Once =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ID : Packet_Identifier;<br>
&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>Values of this type identify packets dealing with different quality of 
service. The level <i>At_Most_Once</i> does not identify packets because it does 
not deploy acknowledgement.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Return_Code"></a>type</font> 
Return_Code (Success : Boolean := False) <font color="#0000FF">is record<br>
&nbsp;&nbsp; case</font> Success <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when</font> True =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; QoS : QoS_Level;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> False =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>Values of this are used in a response to a <i>SUBSCRIBE</i> request. 
Successful requests contain the quality of service.</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Return_Code_List <font color="#0000FF">
is array </font>(Positive <font color="#0000FF">range</font> &lt;&gt;)
<font color="#0000FF">of</font> Return_Code;</tt></p>
</blockquote>
<p>This is an array of <a href="#GNAT.Sockets.MQTT.Return_Code">Return_Code</a> 
elements.</p>
<p><u><b>Lists of topics</b></u>. </p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Topics_List"></a>type</font> 
Topics_List (&lt;&gt;) <font color="#0000FF">is private</font>;<br>
<font color="#0000FF">function</font> Get_Length (<b>List</b> : Topics_List)
<font color="#0000FF">return</font> Natural;<br>
<font color="#0000FF">function</font> Get_Topic (<b>List</b> : Topics_List; <b>
Index</b> : Positive) <font color="#0000FF">return</font> String;<br>
<font color="#0000FF">function</font> &quot;<font color="#FF0000">+</font>&quot; (<b>Left</b> 
: String) <font color="#0000FF">return</font> Topics_List;<br>
<font color="#0000FF">function</font> &quot;<font color="#FF0000">/</font>&quot; (<b>Left</b> 
: String; <b>&nbsp;&nbsp;&nbsp;&nbsp; Right</b> : String) <font color="#0000FF">
return</font> Topics_List;<br>
<font color="#0000FF">function</font> &quot;<font color="#FF0000">/</font>&quot; (<b>Left</b> 
: Topics_List; <b>Right</b> : String) <font color="#0000FF">return</font> 
Topics_List;</tt></p>
</blockquote>
<p>Ordered lists of topics are provided by the type
<a href="#GNAT.Sockets.MQTT.Topics_List">Topic_List</a>. The list can be 
composed from individual topics using operations /. E.g.</p>
<blockquote>
<p><tt>&quot;<font color="#FF0000">$SYS/broker/uptime</font>&quot; / &quot;<font color="#FF0000">$SYS/broker/load/#</font>&quot;</tt></p>
</blockquote>

<p><u><b>Composite message object</b></u>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.MQTT_Message"></a>type</font> 
MQTT_Message <font color="#0000FF">is tagged private</font>;</tt></p>
</blockquote>
<p>Objects of this type represent a composite message object.</p>
<blockquote>
<p><tt>
<font color="#0000FF"><a name="GNAT.Sockets.MQTT.Compose"></a>function</font> 
Compose<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Topic</b>&nbsp;&nbsp; 
: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Message</b> 
: Stream_Element_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> MQTT_Message;<br>
<font color="#0000FF">function</font> Compose<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Topic</b>&nbsp;&nbsp; 
: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Message</b> 
: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> MQTT_Message;</tt></p>
</blockquote>
<p>These functions create a new message object from the topic and the message 
content. Constraint_Error is propagated when <b>Topic</b> is invalid.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Topic<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Message</b> : 
MQTT_Message<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> String;</tt></p>
</blockquote>
<p>This function gets the message topic. Constraint_Error is propagated when the 
message object was not initialized.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Message<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Message</b> : 
MQTT_Message<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Stream_Element_Array;<font color="#0000FF"><br>
function</font> Get_Message<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Message</b> : 
MQTT_Message<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> String;</tt></p>
</blockquote>
<p>This function gets the message contents. Constraint_Error is propagated when 
the message object was not initialized.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Message<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Message</b> :
<font color="#0000FF">in out</font> MQTT_Message;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Content</b> : Stream_Element_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">procedure</font> Set_Message<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Message</b> :
<font color="#0000FF">in out</font> MQTT_Message;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Content</b> : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure replaces the message's content. Constraint_Error is propagated when 
the message object was not initialized.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Message</b> :
<font color="#0000FF">in out</font> MQTT_Message;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Size&nbsp;&nbsp;
</b>&nbsp;: Stream_Element_Count<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure ensures that the message can accommodate at least <b>Size</b> 
elements of content. Constraint_Error is propagated when 
the message object was not initialized.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Topic<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Message</b> :
<font color="#0000FF">in out</font> MQTT_Message;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Topic&nbsp; </b>&nbsp;: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure replaces the message's topic. Constraint_Error is propagated when 
the topic is invalid. An uninitialized message can be initialized using this 
procedure.</p>

<h4><a name="16.15.2"></a>16.15.2. MQTT message stream I/O</h4>
<p><a name="GNAT.Sockets.MQTT.Streams"></a>The package
<a href="#GNAT.Sockets.MQTT.Streams">GNAT.Sockets.MQTT.Streams</a> provides 
stream interface to the MQTT message contents. The package declares the 
following type:</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Streams.MQTT_Stream">
</a>type</font> 
MQTT_Stream (Message : <font color="#0000FF">access</font> MQTT_Message'Class) <font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> Root_Stream_Type
<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The primitive operations defined on
<a href="#GNAT.Sockets.MQTT.Streams.MQTT_Stream">MQTT_Stream</a>:</p>
<blockquote>
<p><tt>
<font color="#0000FF">procedure</font> Erase (<b>Stream</b> :
<font color="#0000FF">in out</font> MQTT_Stream);</tt></p>
</blockquote>
<p>This procedure prepares the stream for writing the message's contents. The 
contents are erased. Writing the stream starts from the first element of the 
message contents. The message's contents are expanded as necessary upon stream 
writing.</p>
<blockquote>
<p><tt>
<font color="#0000FF">procedure</font> Rewind (<b>Stream</b> :
<font color="#0000FF">in out</font> MQTT_Stream);</tt></p>
</blockquote>
<p>This procedure prepares the stream for reading the message's contents. 
Reading the stream starts from the first element of the message contents.</p>
<h4><a name="16.15.3"></a>16.15.3. MQTT server (broker)</h4>

<p>
<a name="GNAT.Sockets.MQTT.Server"></a>The package
<a href="#GNAT.Sockets.MQTT.Server">GNAT.Sockets.MQTT.Server</a> 
provides a full implementation of a MQTT broker that supports subscriptions and 
	publishing. The implementation is task-safe allowing publishing from 
asynchronous tasks. The broker is represented by the type
<a href="#GNAT.Sockets.MQTT.Server.MQTT_Server">MQTT_Server</a>:</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Server.MQTT_Server"></a>
type</font> MQTT_Server <font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> Ada.Finalization.Limited_Controlled
<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>
The server maintains the state shared between several MQTT connections. It keeps 
so-called retained messages and persistent MQTT sessions of named clients. When 
a message is published on the server it is delivered to all subscribers managed 
by the server. The server provides means to manage retained messages and 
sessions.</p>
<p>
The following primitive operations are 
defined on the type:</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Server.Drop"></a>procedure</font> 
Drop<br>
<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>(&nbsp; <b>Server</b> : <font color="#0000FF">in out</font> 
MQTT_Server;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name
</b>&nbsp; : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> 
Drop<br>
<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>(&nbsp; <b>Server</b> : <font color="#0000FF">in out</font> 
MQTT_Server;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Index</b>&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>
This procedure removes a persistent session by its name or index. Nothing 
happens when there no session with <b>Name</b>. When Index not in 1..<a href="#GNAT.Sockets.MQTT.Server.Get_Sessions_Number">Get_Sessions_Number</a> Constraint_Error 
is propagated. Note that if the session is active, i.e. a connect client uses 
it, the session will be removed after the client disconnects.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.MQTT.Server.Get_Tracing_Flags"></a>function</font> 
Get_Tracing_Flags<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Server</b> : 
MQTT_Server<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> MQTT_Trace_Flags;</tt></p>
</blockquote>
<p>
This function returns the current tracing flags in effect. The
<a href="#GNAT.Sockets.MQTT.Server.MQTT_Trace_Flags">trace flags</a> are:</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.MQTT.Server.MQTT_Trace_Flags"></a>type</font> 
MQTT_Trace_Flags <font color="#0000FF">is mod</font> ...;<br>
Trace_Acknowledgement : <font color="#0000FF">constant</font> MQTT_Trace_Flags 
:= ...;<br>
Trace_Sessions&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">
constant</font> MQTT_Trace_Flags := ...;<br>
Trace_Subscriptions&nbsp;&nbsp; : <font color="#0000FF">constant</font> 
MQTT_Trace_Flags := ...;<br>
Trace_Ping&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">constant</font> MQTT_Trace_Flags := ...;<br>
Trace_Pubishing&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">
constant</font> MQTT_Trace_Flags := ...;<br>
Trace_All&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">constant</font> MQTT_Trace_Flags := ...;</tt></p>
</blockquote>
<p>Tracing flags are set using the procedure
<a href="#GNAT.Sockets.MQTT.Server.Set_Tracing_Flags">Set_Tracing_Flags</a>.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.MQTT.Server.Get_Message"></a>function</font> 
Get_Message<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( <b>&nbsp;Server</b> : 
MQTT_Server;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
: Integer<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
MQTT_Message;</tt></p>
</blockquote>
<p>
This function returns a retained message by its index 1..<a href="#GNAT.Sockets.MQTT.Server.Get_Messages_Number">Get_Messages_Number</a>. 
Constraint_Error is propagated when <b>Index</b> is invalid.</p>

<blockquote>
<p><tt><font color="#0000FF">
function</font> 
Get_Message<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( <b>&nbsp;Server</b> : 
MQTT_Server;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Topic</b>&nbsp; 
: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
MQTT_Message;<font color="#0000FF"><br>
function</font> 
Get_Message<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( <b>&nbsp;Server</b> : 
MQTT_Server;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Topic</b>&nbsp; 
: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
Integer;</tt></p>
</blockquote>
<p>
This function returns a retained message by its topic. Constraint_Error is 
propagated when <b>Topic </b>is invalid or contains wild-cards. The variant 
returning message propagates End_Error when there is no such message. The 
variant returning Integer does either the message index or else 0 if there is no 
such message.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.MQTT.Server.Get_Messages_Number"></a>function</font> 
Get_Messages_Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( <b>&nbsp;Server</b> : 
MQTT_Server<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
Natural;</tt></p>
</blockquote>
<p>
This function returns the total number of messages retained by the server:</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.MQTT.Server.Message_Type"></a>type</font> 
Message_Type <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Transient,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Retained,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Updated,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Initial,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ignored<br>
&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The type <a href="#GNAT.Sockets.MQTT.Server.Message_Type">Message_Type</a> 
specifies how a message is handled when published on the server:</p>
<ul>
	<li><i>Transient</i> message is delivered to its subscribers and not 
	retained by the server. That means only presently connected clients have a chance to 
	get the message;</li>
	<li><i>Retained</i> message is delivered to the subscribers and then 
	retained by the server. The message replaces any retained prior to it 
	message with the same topic. Retained messages are delivered to the clients 
	even if they connect later and subscribe to the message topic;</li>
	<li><i>Updated</i> message is delivered to the subscribers if either there 
	is no retained message with the same topic or else its contents differs from 
	the one of the retained message. In the latter case the message replaces the 
	retained one. The message is retained if delivered;</li>
	<li><i>Initial</i> message is delivered to the subscribers only if there is 
	no retained message with the same topic. If delivered, the message is 
	retained by the server;</li>
	<li><i>Ignored</i> message is neither delivered nor retained.</li>
</ul>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Server.Get_Queue_Size">
</a>function</font> Get_Queue_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Server</b> : 
MQTT_Server<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Positive;</tt></p>
</blockquote>
<p>
This function returns the maximum number queued messages per a connection. Published messages are 
queued to be sent to a client. When the queue becomes full the connection to the 
client is 
dropped. The procedure <a href="#GNAT.Sockets.MQTT.Server.Set_Queue_Size">
Set_Queue_Size</a> is used to set the limit.</p>

<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Server.Get_Session"></a>function</font> 
Get_Session<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( <b>&nbsp;Server</b> : 
MQTT_Server;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name </b>&nbsp; 
: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
Integer;</tt></p>
</blockquote>
<p>
This function returns the index of session by it name. The result is 0 if there 
is no such session.</p>

<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.MQTT.Server.Get_Session_Name"></a>function</font> 
Get_Session_Name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Server</b> : 
MQTT_Server;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> String;</tt></p>
</blockquote>
<p>
This function returns the name of the session with the number 1..<a href="#GNAT.Sockets.MQTT.Server.Get_Sessions_Number">Get_Sessions_Number</a>. 
Anonymous clients have sessions with empty names. End_Error is propagated when
<b>Index</b> is illegal.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.MQTT.Server.Get_Session_Time"></a>function</font> 
Get_Session_Time<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Server</b> : 
MQTT_Server;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp; 
: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Time;<br>
<font color="#0000FF">function</font> Get_Session_Time<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Server</b> : 
MQTT_Server;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Time;</tt></p>
</blockquote>
<p>
This function returns the last time the session identified by its name or the 
number 1..<a href="#GNAT.Sockets.MQTT.Server.Get_Sessions_Number">Get_Sessions_Number</a> 
has an exchange with a client. End_Error is propagated when <b>Index</b> is 
illegal or no session with this name exists.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.MQTT.Server.Get_Sessions_Number"></a>function</font> 
Get_Sessions_Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Server</b> : 
MQTT_Server;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Natural;</tt></p>
</blockquote>
<p>
This function returns the number of sessions active or not.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.MQTT.Server.Is_Session_Active"></a>function</font> 
Is_Session_Active<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Server</b> : 
MQTT_Server;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp; 
: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;<br>
<font color="#0000FF">function</font> Is_Session_Active<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Server</b> : 
MQTT_Server;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>
This function returns <i><font color="#800000">true</font></i> if the session 
identified by its name or the number 1..<a href="#GNAT.Sockets.MQTT.Server.Get_Sessions_Number">Get_Sessions_Number</a> 
is active, i.e. has a connected client. End_Error is propagated when <b>Index</b> 
is illegal or no session with this name exists.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Server.Is_Tracing_On">
</a>function</font> Is_Tracing_On<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Server</b> : 
MQTT_Server;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Flags</b>&nbsp; 
: MQTT_Trace_Flags<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>
This function returns <i><font color="#800000">true</font></i> if one the flags in <b>Flags</b> is in effect.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Server.Publish"></a>
procedure</font> Publish<br>
<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>(&nbsp; <b>Server</b>&nbsp; : <font color="#0000FF">in out</font> 
MQTT_Server;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Topic</b>&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Message</b> : Stream_Element_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>QoS</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: QoS_Level&nbsp;&nbsp;&nbsp; := At_Most_Once;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Policy</b>&nbsp; : Message_Type := Transient<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> Publish<br>
<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>(&nbsp; <b>Server</b>&nbsp; : <font color="#0000FF">in out</font> 
MQTT_Server;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Topic</b>&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Message</b> : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>QoS</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: QoS_Level&nbsp;&nbsp;&nbsp; := At_Most_Once;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Policy</b>&nbsp; : Message_Type := Transient<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>
These procedures are used to publish a message. The message is propagated to all 
clients subscribed to the topic specified by the parameter <b>Topic</b>. <b>
Message</b> is the published message which can be either a Stream_Element_Array 
or String. <b>QoS</b> specifies the quality of service. <b>Policy</b> specifies 
how to <a href="#GNAT.Sockets.MQTT.Server.Message_Type">handle the message</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.MQTT.Server.MQTT_Messages_Array"></a>type </font> MQTT_Messages_Array<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; array </font> (Positive <font color="#0000FF">range</font> &lt;&gt;)<font color="#0000FF"> 
of </font> MQTT_Message;<font color="#0000FF"><br>
<br>
procedure</font> Publish<br>
<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>(&nbsp; <b>Server</b>&nbsp; : <font color="#0000FF">in out</font> 
MQTT_Server;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Message</b> : MQTT_Message;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>QoS</b>&nbsp;&nbsp;&nbsp;&nbsp; : QoS_Level&nbsp;&nbsp;&nbsp; := At_Most_Once;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Policy</b>&nbsp; : Message_Type := Transient<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )<font color="#0000FF">;<br>
procedure</font> Publish<br>
<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>(&nbsp; <b>Server</b>&nbsp;&nbsp; : <font color="#0000FF">in out</font> 
MQTT_Server;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Messages</b> : MQTT_Messages_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>QoS</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : QoS_Level&nbsp;&nbsp;&nbsp; := At_Most_Once;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Policy</b>&nbsp;&nbsp; : Message_Type := Transient<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>
These variants publish single message <b>Message</b> or a couple of messages stored in the array <b>Messages</b>. 
Invalid <b>Message</b> or elements of <b>Messages</b> are ignored.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Server.Received"></a>
procedure</font> Received<br>
<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>(&nbsp; <b>Server</b>&nbsp; : <font color="#0000FF">in out</font> 
MQTT_Server;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Client</b>&nbsp; : <font color="#0000FF">in out</font> MQTT_Connection'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Topic</b>&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Message</b> : Stream_Element_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>QoS</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: QoS_Level;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Policy</b>&nbsp; : <font color="#0000FF">in out</font> Message_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>
This procedure is called for each incoming message. The parameter <b>Client</b> 
is the client publishing the message. The parameters <b>Topic</b>,
<b>Message</b>, <b>QoS</b> are the message parameters. <b>Policy</b> is either
<i>Transient</i> or <i>Retained</i> according to the client's request. The 
implementation may change Policy to instruct the server how to handle the 
message. For instance, it can set it <i>Ignored</i> in order to drop the 
message. The default 
implementation does not change <b>Policy</b>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Server.Remove"></a>procedure</font> 
Remove<br>
<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>(&nbsp; <b>Server</b> : <font color="#0000FF">in out</font> 
MQTT_Server;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Topic</b>&nbsp; : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> 
Remove<br>
<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>(&nbsp; <b>Server</b> : <font color="#0000FF">in out</font> 
MQTT_Server;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Index</b>&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>
This procedure removes retained messages matched by the pattern <b>Topic</b>. 
E.g. if <b>Topic</b> is &quot;<font color="#FF0000">#</font>&quot; all messages are 
removed. Note that this action does not influence messages already queued to the 
subscribers. They will be delivered even after being removed. The variant with 
the parameter Index removes the message by its number 1..<a href="#GNAT.Sockets.MQTT.Server.Get_Messages_Number">Get_Messages_Number</a>. 
Constraint_Error is propagated when <b>Index</b> is invalid.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Server.Set_Queue_Size">
</a>procedure</font> Set_Queue_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Server</b> :
<font color="#0000FF">in out</font> MQTT_Server;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Size</b>&nbsp;&nbsp; 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>
This procedure sets the limit to the number of queued messages. Published 
messages are queued to be sent to a client. When the queue becomes full the 
connection is dropped. Setting the limit influences only future connections.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="GNAT.Sockets.MQTT.Server.Set_Tracing_Flags"></a>procedure</font> 
Set_Tracing_Flags<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Server</b> :
<font color="#0000FF">in out</font> MQTT_Server;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Flags</b>&nbsp; : MQTT_Trace_Flags<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>
This procedure sets the server tracing flags.</p>
<p>
<u><b>Connection object</b></u>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GNAT.Sockets.MQTT.Server.MQTT_Connection">
</a>type</font> MQTT_Connection<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Server&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">access</font> MQTT_Server'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Listener&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">access</font> Connections_Server'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Input_Size&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Buffer_Length;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Output_Size&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Buffer_Length;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Max_Subscribe_Topics : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is new</font> MQTT_Pier
<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>
The type <a href="#GNAT.Sockets.MQTT.Server.MQTT_Connection">MQTT_Connection</a> 
is a connection object that can be used as a server or client with
<a href="#GNAT.Sockets.Server.Connections_Server">Connections_Server</a>. The 
discriminant <i>Server</i> refers to an instance of
<a href="#GNAT.Sockets.MQTT.Server.MQTT_Server">MQTT_Server</a> that to handle 
messages, subscriptions and sessions.</p>

<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Name (<b>Client</b> : 
MQTT_Connection) <font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>
This function returns the name of the session used by <b>Client</b>. The name is 
specified in the <a href="#GNAT.Sockets.MQTT.On_Connect">connect request</a>. 
For an anonymous session the result is empty string.</p>

<hr>
<p align="right">
<a name="17"></a><a href="#16.15"><IMG src="prev.gif" alt="[Back]" width="29" height="29"></a><A href="#20"><IMG src="index.gif"
 alt="[TOC]" width="29" height="29"></A><a href="#17.1"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>17. Packages<p align="right">
  <A name="17.1"></A><a href="#17"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><a href="#17.2"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>17.1. Source packages</H3>
<p>The following table describes the packages and other compilation units provided by the software.</p>
<TABLE border="5" cellpadding="3" cellspacing="0" style="border-left-width: 0px">
  <TR>
    <TD bgcolor="#008080" colspan="16"><FONT color="#FFFFFF"><B>Package</B></FONT></TD>
    <TD bgcolor="#008080"><FONT color="#FFFFFF"><B>Provides</B></FONT></TD>
  </TR>
  <tr>
    <TD colspan="16" bgcolor="#C0C0C0">APQ</TD>
    <TD>Implementation packages used for <a href="#Persistent.APQ">Persistent.APQ</a></TD>
  </tr>
  <tr>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;&nbsp;&nbsp;&nbsp; </TD>
    <TD colspan="10" style="border-left-style: solid; border-left-width: 1px">Common</TD>
    <TD>Thicker bindings to the APQ abstracting away data base specific details</TD>
  </tr>
  <tr>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="10" style="border-left-style: solid; border-left-width: 1px">Keys</TD>
    <TD>Persistent objects identification in APQ</TD>
  </tr>
  <tr>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" style="border-left-style: none; border-left-width: medium">&nbsp;&nbsp;&nbsp;&nbsp; </TD>
    <TD colspan="9" style="border-left-style: solid; border-left-width: 1px">Sets</TD>
    <TD style="border-left-style: solid; border-left-width: 1px">Sets of persistent objects keys</TD>
  </tr>
  <tr>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium">&nbsp;</TD>
    <TD colspan="10" style="border-left-style: solid; border-left-width: 1px">Links</TD>
    <TD>Management of persistent objects dependencies in APQ</TD>
  </tr>
  <tr>
    <TD colspan="16"><a href="#Backward_Link_Handles">Backward_Link_Handles</a></TD>
    <TD>An instance of <a href="#Object.Handle">Object.Handle</a> with <a href="#Backward_Link">Backward_Link</a></TD>
  </tr>
  <tr>
    <TD colspan="5" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD colspan="11" style="border-left-style: solid; border-left-width: 1px"><a href="#Backward_Link_Handles.Sets">Sets</a></TD>
    <TD>An instance of <a href="#Object.Handle.Generic_Handle_Set">
	Object.Handle.Generic_Handle_Set</a> with <a href="#Backward_Link">Backward_Link</a></TD>
  </tr>
  <tr>
    <TD colspan="16"> <a href="#Block_Streams">
Block_Streams</a></TD>
    <TD>Block-oriented I/O layer over a stream</TD>
  </tr>
  <tr>
    <TD colspan="16"><a href="#Deposit_Handles">Deposit_Handles</a></TD>
    <TD>An instance of <a href="#Object.Archived.Handle">
    Object.Archived.Handle</a> with <a href="#Deposit">Deposit</a></TD>
  </tr>
  <tr>
    <TD colspan="16">
<a href="#Gamma">Gamma</a></TD>
    <TD>Gamma function</TD>
  </tr>
  <tr>
    <TD colspan="16">
<a href="#Generic_Address_Order">Generic_Address_Order</a></TD>
    <TD>Comparison of objects by their addresses</TD>
  </tr>
  <tr>
    <TD colspan="16">
<a href="#Generic_Chebyshev_Polynomials">Generic_Chebyshev_Polynomials</a></TD>
    <TD>Chebyshev series (generic)</TD>
  </tr>
  <tr>
    <TD colspan="16"> <a href="#Generic_B_Tree">Generic_B_Tree</a></TD>
    <TD>An implementation of B-tree</TD>
  </tr>
  <tr>
    <TD colspan="16"> <a href="#Generic_Blackboard">Generic_Blackboard</a></TD>
    <TD>One-to-many lock-free generic blackboard</TD>
  </tr>
  <tr>
    <TD colspan="4" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD colspan="12" style="border-left-style: solid; border-left-width: 1px"><a href="#Generic_Blackboard.Generic_Task_Safe">Generic_Task_Safe</a></TD>
    <TD style="border-left-style: solid; border-left-width: 1px">Many-to-many generic blackboard with lock-free read access</TD>
  </tr>
  <tr>
    <TD colspan="16"><a href="#Generic_Directed_Graph">Generic_Directed_Graph</a></TD>
    <TD>Generic directed graphs</TD>
  </tr>
  <tr>
    <TD colspan="16"><a href="#Generic_Directed_Weighted_Graph">Generic_Directed_Weighted_Graph</a></TD>
    <TD>Generic directed weighted graphs</TD>
  </tr>
  <tr>
    <TD colspan="16"><a href="#Generic_Doubly_Linked">Generic_Doubly_Linked</a></TD>
    <TD>Doubly-linked lists of items with referential semantics</TD>
  </tr>
  <tr>
    <TD colspan="16"><a href="#Generic_Doubly_Linked_Web">
	Generic_Doubly_Linked_Web</a></TD>
    <TD>Networks of doubly-linked items with referential semantics.</TD>
  </tr>
	<tr>
    <TD colspan="4" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD colspan="12" style="border-left-style: solid; border-left-width: 1px"><a href="#Generic_Doubly_Linked_Web.Generic_List">
	Generic_List</a></TD>
    <TD>A specialized list view of a network</TD>
  </tr>
  <tr>
    <TD colspan="16"><a href="#Generic_FIFO">Generic_FIFO</a></TD>
    <TD>Peer-to-peer lock-free first in, first out generic queue</TD>
  </tr>
  <tr>
    <TD colspan="4" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD colspan="12" style="border-left-style: solid; border-left-width: 1px"><a href="#Generic_FIFO.Signaled_FIFO">Generic_Signaled</a></TD>
    <TD>Peer-to-peer almost lock-free first in, first out generic queue</TD>
  </tr>
  <tr>
    <TD colspan="16"><a href="#Generic_Indefinite_B_Tree">Generic_Indefinite_B_Tree</a></TD>
    <TD>An implementation of B-tree with indefinite types of keys and objects</TD>
  </tr>
  <tr>
    <TD colspan="16"><a href="#Generic_Indefinite_FIFO">Generic_Indefinite_FIFO</a></TD>
    <TD>Peer-to-peer lock-free first in, first out generic queue of indefinite 
	objects</TD>
  </tr>
	<tr>
    <TD colspan="4" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD colspan="12" style="border-left-style: solid; border-left-width: 1px"><a href="#Generic_Indefinite_FIFO.Signaled_FIFO">Generic_Signaled</a></TD>
    <TD>Peer-to-peer almost lock-free first in, first out generic queue of 
	indefinite objects</TD>
  </tr>
  <tr>
    <TD colspan="16"><a href="#Generic_Map">Generic_Map</a></TD>
    <TD>The type <a href="#Map">Map</a></TD>
  </tr>
  <tr>
    <TD colspan="16"><a href="#Generic_Random_Sequence">Generic_Random_Sequence</a></TD>
    <TD>Random sequences of non-repeating items</TD>
  </tr>
  <TR>
    <TD colspan="16"><a href="#Generic_Set">Generic_Set</a></TD>
    <TD>The type <a href="#Set">Set</a></TD>
  </TR>
  <TR>
    <TD colspan="16"><a href="#Generic_Stack">Generic_Stack</a></TD>
    <TD>The type <a href="#Stack">Stack</a>, a generic stack</TD>
  </TR>
  <TR>
    <TD colspan="16"> <a href="#Generic_Segmented_Stack">Generic_Segmented_Stack</a></TD>
    <TD>Stacks built of segments of same size (generic)</TD>
  </TR>
  <tr>
    <TD colspan="16"><a href="#Generic_Unbounded_Array">Generic_Unbounded_Array</a></TD>
    <TD>The type <a href="#Unbounded_Array">Unbounded_Array</a> and operations 
	on it</TD>
  </tr>
	<tr>
    <TD colspan="16"><a href="#Generic_Unbounded_Ptr_Array">
	Generic_Unbounded_Ptr_Array</a></TD>
    <TD>The type <a href="#Unbounded_Ptr_Array">Unbounded_Ptr_Array</a></TD>
  </tr>
  <tr>
    <TD colspan="16">GNAT.Sockets</TD>
    <TD>GNAT sockets implementation</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="13" style="border-left-style: solid; border-left-width: 1px">
	<a href="#GNAT.Sockets.Server">Server</a></TD>
    <TD>Multiple TCP connections server, a low-level implementation</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-left-style: none; border-left-width: medium; border-top-style:solid; border-top-width:1px; border-bottom-style:none; border-bottom-width:medium" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="5" style="border-left-style: solid; border-left-width: 1px">
	Handles</TD>
    <TD>Instantiation of <a href="#Object.Handle">Object.Handle</a> with
	<a href="#GNAT.Sockets.Server.Connection">Connection</a> type</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-left-style: none; border-left-width: medium; border-bottom-style:none; border-bottom-width:medium; border-top-style:none; border-top-width:medium" bgcolor="#C0C0C0">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TD>
    <TD colspan="5" style="border-left-style: solid; border-left-width: 1px">
	<a href="#GNAT.Sockets.Server.Pooled">Pooled</a></TD>
    <TD>Server with a pool of worker tasks</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-left-style: none; border-left-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="5" style="border-left-style: solid; border-left-width: 1px">
	<a href="#GNAT.Sockets.Server.Secure">Secure</a></TD>
    <TD>Secure TLS connection server</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-style:none; border-width:medium; " bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="2" style="border-left-style: none; border-left-width: medium; border-bottom-style:none; border-bottom-width:medium" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="3" style="border-left-style: solid; border-left-width: 1px">
	<a href="#GNAT.Sockets.Server.Secure.Anonymous">Anonymous</a></TD>
    <TD>An implementation of connection factory for anonymous authentication</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-left-style: none; border-left-width: medium; border-right-style:none; border-right-width:medium; border-top-style:none; border-top-width:medium" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="2" style="border-left-style: none; border-left-width: medium; border-top-style:none; border-top-width:medium" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="3" style="border-left-style: solid; border-left-width: 1px">
	<a href="#GNAT.Sockets.Server.Secure.X509">X509</a></TD>
    <TD>An implementation of connection factory for X509 authentication</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="13" style="border-left-style: solid; border-left-width: 1px">
	<a href="#GNAT.Sockets.Connection_State_Machine">
	Connection_State_Machine</a></TD>
    <TD>Multiple TCP connections server, a higher-level implementation</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="5" bgcolor="#C0C0C0" style="border-left-style: none; border-left-width: medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-left-style: solid; border-left-width: 1px; border-right-style:solid; border-right-width:1px; border-bottom-style:solid; border-bottom-width:1px">
	<a href="#GNAT.Sockets.Connection_State_Machine.Big_Endian">Big_Endian</a></TD>
    <TD style="border-left-style: solid; border-left-width: 1px">Big-endian encoded data items, parent package</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-style:none; border-width:medium; " bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="2" style="border-left-style: none; border-left-width: medium; border-bottom-style:none; border-bottom-width:medium" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="3" style="border-left-style: solid; border-left-width: 1px">
	<a href="#GNAT.Sockets.Connection_State_Machine.Big_Endian.Generic_Double_Precision_IEEE_754">
	Generic_Double_Precision_IEEE_754</a></TD>
    <TD>Double-precision IEEE 754 numbers (generic)</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-style:none; border-width:medium; " bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="2" style="border-left-style: none; border-left-width: medium; border-bottom-style:none; border-bottom-width:medium; border-top-style:none; border-top-width:medium" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="3" style="border-left-style: solid; border-left-width: 1px">
	<a href="#GNAT.Sockets.Connection_State_Machine.Big_Endian.Generic_Single_Precision_IEEE_754">
	Generic_Single_Precision_IEEE_754</a></TD>
    <TD>Single-precision IEEE 754 numbers (generic)</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-style:none; border-width:medium; " bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="2" style="border-left-style: none; border-left-width: medium; border-bottom-style:none; border-bottom-width:medium; border-top-style:none; border-top-width:medium" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="3" style="border-left-style: solid; border-left-width: 1px">
	<a href="#GNAT.Sockets.Connection_State_Machine.Big_Endian.IEEE_754_Floats">
	IEEE_754_Floats</a></TD>
    <TD>Instantiation of
	<a href="#GNAT.Sockets.Connection_State_Machine.Big_Endian.Generic_Single_Precision_IEEE_754">
	Generic_Single_Precision_IEEE_754</a> with Float</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-style:none; border-width:medium; " bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="2" style="border-left-style: none; border-left-width: medium; border-bottom-style:none; border-bottom-width:medium; border-top-style:none; border-top-width:medium" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="3" style="border-left-style: solid; border-left-width: 1px">
	<a href="#GNAT.Sockets.Connection_State_Machine.Big_Endian.IEEE_754_Long_Floats">
	IEEE_754_Long_Floats</a></TD>
    <TD>Instantiation of
	<a href="#GNAT.Sockets.Connection_State_Machine.Big_Endian.Generic_Double_Precision_IEEE_754">
	Generic_Double_Precision_IEEE_754</a> with Long_Float</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-style:none; border-width:medium; " bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="2" style="border-left-style: none; border-left-width: medium; border-bottom-style:none; border-bottom-width:medium; border-top-style:none; border-top-width:medium" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="3" style="border-left-style: solid; border-left-width: 1px">
	<a href="#GNAT.Sockets.Connection_State_Machine.Big_Endian.Integers">
	Integers</a></TD>
    <TD>Signed integers</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-style:none; border-width:medium; " bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="2" style="border-left-style: none; border-left-width: medium; border-bottom-style:none; border-bottom-width:medium; border-top-style:none; border-top-width:medium" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="3" style="border-left-style: solid; border-left-width: 1px">
	<a href="#GNAT.Sockets.Connection_State_Machine.Big_Endian.Unsigneds">
	Unsigneds</a></TD>
    <TD>Unsigned modular integers</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-left-style: none; border-left-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="7" style="border-style:solid; border-width:1px; ">
	<a href="#GNAT.Sockets.Connection_State_Machine.Chain_Code">Chain_Code</a></TD>
    <TD style="border-left-style: solid; border-left-width: 1px">Chain-coded data items, parent package</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-style:none; border-width:medium; " bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="2" style="border-left-style: none; border-left-width: medium; border-bottom-style:none; border-bottom-width:medium" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="3" style="border-left-style: solid; border-left-width: 1px">
	<a href="#GNAT.Sockets.Connection_State_Machine.Chain_Code.Generic_Integer">
	Generic_Integer</a></TD>
    <TD>Signed integers (generic)</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-style:none; border-width:medium; " bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="2" style="border-left-style: none; border-left-width: medium; border-bottom-style:none; border-bottom-width:medium; border-top-style:none; border-top-width:medium" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="3" style="border-left-style: solid; border-left-width: 1px">
	<a href="#GNAT.Sockets.Connection_State_Machine.Chain_Code.Generic_Unsigned">
	Generic_Unsigneds</a></TD>
    <TD>Unsigned integers (generic)</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-style:none; border-width:medium; " bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="2" style="border-left-style: none; border-left-width: medium; border-bottom-style:none; border-bottom-width:medium; border-top-style:none; border-top-width:medium" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="3" style="border-left-style: solid; border-left-width: 1px">
	<a href="#GNAT.Sockets.Connection_State_Machine.Chain_Code.Integers">
	Integers</a></TD>
    <TD>Instantiation of
	<a href="#GNAT.Sockets.Connection_State_Machine.Chain_Code.Generic_Integer">
	Generic_Integer</a> with Integer</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-style:none; border-width:medium; " bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="2" style="border-left-style: none; border-left-width: medium; border-bottom-style:none; border-bottom-width:medium; border-top-style:none; border-top-width:medium" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="3" style="border-left-style: solid; border-left-width: 1px">
	<a href="#GNAT.Sockets.Connection_State_Machine.Chain_Code.Naturals">
	Naturals</a></TD>
    <TD>Instantiation of
	<a href="#GNAT.Sockets.Connection_State_Machine.Chain_Code.Generic_Unsigned">
	Generic_Unsigneds</a> with Natural</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="5" bgcolor="#C0C0C0" style="border-left-style: none; border-left-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-style:solid; border-width:1px; ">
	<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client">
	ELV_MAX_Cube_Client</a></TD>
    <TD style="border-left-style: solid; border-left-width: 1px">An 
	implementation of ELV/e-Q3 MAX! cube client</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-style:none; border-width:medium; " bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="2" style="border-left-style: none; border-left-width: medium; border-bottom-style:none; border-bottom-width:medium" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="3" style="border-left-style: solid; border-left-width: 1px">
	<a href="#GNAT.Sockets.Connection_State_Machine.ELV_MAX_Cube_Client.Stream_IO">
	Stream_IO</a></TD>
    <TD>Stream I/O operations for ELV/e-Q3 MAX! cube data</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="5" bgcolor="#C0C0C0" style="border-left-style: none; border-left-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-style:solid; border-width:1px; ">
	<a href="#GNAT.Sockets.Connection_State_Machine.Expected_Sequence">
	Expected_Sequence</a></TD>
    <TD style="border-left-style: solid; border-left-width: 1px">Expected sequence of fixed content</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="5" bgcolor="#C0C0C0" style="border-left-style: none; border-left-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-style:solid; border-width:1px; ">
	<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server">HTTP_Server</a></TD>
    <TD style="border-left-style: solid; border-left-width: 1px">An implementation of HTTP server</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-style:none; border-width:medium; " bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="2" style="border-left-style: none; border-left-width: medium; border-bottom-style:none; border-bottom-width:medium" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="3" style="border-left-style: solid; border-left-width: 1px">
	<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Server.SQLite_Browser">
	SQLite_Browser</a></TD>
    <TD>HTTP browser of SQLite3 database</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="5" bgcolor="#C0C0C0" style="border-left-style: none; border-left-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-style:solid; border-width:1px; ">
	<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Client">HTTP_Client</a></TD>
    <TD style="border-left-style: solid; border-left-width: 1px">An implementation of HTTP client</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-style:none; border-width:medium; " bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="2" style="border-left-style: none; border-left-width: medium; border-bottom-style:none; border-bottom-width:medium" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="3" style="border-left-style: solid; border-left-width: 1px">
	<a href="#GNAT.Sockets.Connection_State_Machine.HTTP_Client.Signaled">
	Signaled</a></TD>
    <TD>A HTTP client to use with an external task</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-left-style:none; border-left-width:medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="7" style="border-style:solid; border-width:1px; ">
	<a href="#GNAT.Sockets.Connection_State_Machine.Little_Endian">
	Little_Endian</a></TD>
    <TD>Little-endian encoded data items, parent package</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-style:none; border-width:medium; " bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="2" style="border-left-style: none; border-left-width: medium; border-bottom-style:none; border-bottom-width:medium; border-top-style:solid; border-top-width:1px" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="3" style="border-left-style: solid; border-left-width: 1px; border-top-style:solid; border-top-width:1px">
	<a href="#GNAT.Sockets.Connection_State_Machine.Little_Endian.Generic_Double_Precision_IEEE_754">
	Generic_Double_Precision_IEEE_754</a></TD>
    <TD>Double-precision IEEE 754 numbers (generic)</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-style:none; border-width:medium; " bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="2" style="border-left-style: none; border-left-width: medium; border-bottom-style:none; border-bottom-width:medium; border-top-style:none; border-top-width:medium" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="3" style="border-left-style: solid; border-left-width: 1px">
	<a href="#GNAT.Sockets.Connection_State_Machine.Little_Endian.Generic_Single_Precision_IEEE_754">
	Generic_Single_Precision_IEEE_754</a></TD>
    <TD>Single-precision IEEE 754 numbers (generic)</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-style:none; border-width:medium; " bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="2" style="border-left-style: none; border-left-width: medium; border-bottom-style:none; border-bottom-width:medium; border-top-style:none; border-top-width:medium" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="3" style="border-left-style: solid; border-left-width: 1px">
	<a href="#GNAT.Sockets.Connection_State_Machine.Little_Endian.IEEE_754_Floats">
	IEEE_754_Floats</a></TD>
    <TD>Instantiation of
	<a href="#GNAT.Sockets.Connection_State_Machine.Little_Endian.Generic_Single_Precision_IEEE_754">
	Generic_Single_Precision_IEEE_754</a> with Float</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-style:none; border-width:medium; " bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="2" style="border-left-style: none; border-left-width: medium; border-bottom-style:none; border-bottom-width:medium; border-top-style:none; border-top-width:medium" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="3" style="border-left-style: solid; border-left-width: 1px">
	<a href="#GNAT.Sockets.Connection_State_Machine.Little_Endian.IEEE_754_Floats">
	IEEE_754_Long_Floats</a></TD>
    <TD>Instantiation of
	<a href="#GNAT.Sockets.Connection_State_Machine.Little_Endian.Generic_Double_Precision_IEEE_754">
	Generic_Double_Precision_IEEE_754</a> with Long_Float</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-style:none; border-width:medium; " bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="2" style="border-left-style: none; border-left-width: medium; border-bottom-style:none; border-bottom-width:medium; border-top-style:none; border-top-width:medium" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="3" style="border-left-style: solid; border-left-width: 1px">
	<a href="#GNAT.Sockets.Connection_State_Machine.Little_Endian.Integers">
	Integers</a></TD>
    <TD>Signed integers</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-style:none; border-width:medium; " bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="2" style="border-left-style: none; border-left-width: medium; border-bottom-style:none; border-bottom-width:medium; border-top-style:none; border-top-width:medium" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="3" style="border-left-style: solid; border-left-width: 1px">
	<a href="#GNAT.Sockets.Connection_State_Machine.Little_Endian.Unsigneds">
	Unsigneds</a></TD>
    <TD>Unsigned modular integers</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="5" bgcolor="#C0C0C0" style="border-left-style: none; border-left-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-style:solid; border-width:1px; ">
	<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client">MODBUS_Client</a></TD>
    <TD style="border-left-style: solid; border-left-width: 1px">An implementation of MODBUS client</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-style:none; border-width:medium; " bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="2" style="border-left-style: none; border-left-width: medium; border-bottom-style:none; border-bottom-width:medium" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="3" style="border-left-style: solid; border-left-width: 1px">
	<a href="#GNAT.Sockets.Connection_State_Machine.MODBUS_Client.Synchronous">Synchronous</a></TD>
    <TD>A synchronous MODBUS client to use with an external task</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="7" bgcolor="#C0C0C0" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="6" style="border-right-style:solid; border-right-width:1px; border-top-style:solid; border-top-width:1px; border-bottom-style:solid; border-bottom-width:1px">
	<a href="#GNAT.Sockets.Connection_State_Machine.Terminated_Strings">
	Terminated_Strings</a></TD>
    <TD style="border-left-style: solid; border-left-width: 1px">Strings terminated by a special character</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="8" style="border-style:none; border-width:medium; " bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="2" style="border-left-style: none; border-left-width: medium; border-bottom-style:none; border-bottom-width:medium" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="3" style="border-left-style: solid; border-left-width: 1px">
	<a href="#GNAT.Sockets.Connection_State_Machine.Variable_Length_Arrays">
	Variable_Length_Arrays</a></TD>
    <TD>Variable-length arrays</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:solid; border-bottom-width:1px">&nbsp;</TD>
    <TD colspan="8" style="border-left-style:none; border-left-width:medium; border-right-style:none; border-right-width:medium; border-top-style:none; border-top-width:medium; " bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="2" style="border-left-style: none; border-left-width: medium; border-top-style:none; border-top-width:medium" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="3" style="border-left-style: solid; border-left-width: 1px">
	<a href="#GNAT.Sockets.Connection_State_Machine.Variable_Length_Strings">
	Variable_Length_Strings</a></TD>
    <TD>Variable-length strings</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-top-style:none; border-top-width:medium; border-bottom-style:solid; border-bottom-width:1px">&nbsp;</TD>
    <TD colspan="13" style="border-style:solid; border-width:1px; ">
	<a href="#GNAT.Sockets.MQTT">MQTT</a></TD>
    <TD style="border-left-style: solid; border-left-width: 1px">Basic 
	implementation of a MQTT pier</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:solid; border-bottom-width:1px">&nbsp;</TD>
    <TD colspan="8" style="border-left-style:none; border-left-width:medium; border-top-style:solid; border-top-width:1px; border-bottom-style:none; border-bottom-width:medium" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="5" style="border-left-style: solid; border-left-width: 1px; border-bottom-style:solid; border-bottom-width:1px; border-top-style:solid; border-top-width:1px">
	<a href="#GNAT.Sockets.MQTT.Server">Server</a></TD>
    <TD>A full implementation of a MQTT server (broker)</TD>
  </tr>
	<tr>
    <TD colspan="3" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:solid; border-bottom-width:1px">&nbsp;</TD>
    <TD colspan="8" style="border-left-style:none; border-left-width:medium; border-top-style:none; border-top-width:medium; border-bottom-style:solid; border-bottom-width:1px" bgcolor="#C0C0C0">
	&nbsp;</TD>
    <TD colspan="5" style="border-left-style: solid; border-left-width: 1px; border-bottom-style:solid; border-bottom-width:1px; border-top-style:solid; border-top-width:1px">
	<a href="#GNAT.Sockets.MQTT.Streams">Streams</a></TD>
    <TD>Stream interface to MQTT messages</TD>
  </tr>
  <tr>
    <TD colspan="16">GNU.DB.CLI.API</TD>
    <TD>Thick bindings to GNADE ODBC</TD>
  </tr>
  <tr>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="10">Keys</TD>
    <TD>Persistent objects identification in GNADE ODBC</TD>
  </tr>
  <tr>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9">Edit</TD>
    <TD>String conversions for GNADE ODBC objects keys</TD>
  </tr>
  <tr>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium">&nbsp;</TD>
    <TD colspan="9">Sets</TD>
    <TD>Sets of persistent objects keys for GNADE ODBC</TD>
  </tr>
  <tr>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium">&nbsp;</TD>
    <TD colspan="10" style="border-left-style: solid; border-left-width: 1px">Links</TD>
    <TD>Management of persistent objects dependencies in GNADE ODBC</TD>
  </tr>
  <tr>
    <TD colspan="16">GNUTLS</TD>
    <TD><a href="http://www.gnutls.org/">GNUTLS</a> bindings</TD>
  </tr>
  <tr>
    <TD colspan="16"><a href="#IEEE_754">IEEE_754</a></TD>
    <TD>The parent package for dealing with <a href="http://grouper.ieee.org/groups/754/">IEEE 754</a> 
	representations</TD>
  </tr>
  <tr>
    <TD colspan="4" bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="12"><a href="#IEEE_754.Floats">Floats</a></TD>
    <TD>An instance of <a href="#IEEE_754.Generic_Double_Precision">IEEE_754.Generic_Double_Precision</a> 
	with Float</TD>
  </tr>
  <tr>
    <TD colspan="4" bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="12"><a href="#IEEE_754.Generic_Double_Precision">Generic_Double_Precision</a></TD>
    <TD>64-bit double precision <a href="http://grouper.ieee.org/groups/754/">IEEE 754</a> 
	floating-point representations</TD>
  </tr>
  <tr>
    <TD colspan="4" bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="12"><a href="#IEEE_754.Generic_Single_Precision">Generic_Single_Precision</a></TD>
    <TD>32-bit single precision <a href="http://grouper.ieee.org/groups/754/">IEEE 754</a> 
	floating-point representations</TD>
  </tr>
  <tr>
    <TD colspan="4" bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-top-style:none; border-top-width:medium">&nbsp;</TD>
    <TD colspan="12"><a href="#IEEE_754.Long_Floats">Long_Floats</a></TD>
    <TD>An instance of <a href="#IEEE_754.Generic_Double_Precision">IEEE_754.Generic_Double_Precision</a> 
	with Long_Float</TD>
  </tr>
  <tr>
    <TD colspan="16"><a href="#Long_Chebyshev_Polynomials">
	Long_Chebyshev_Polynomials</a></TD>
    <TD>An instance of
<a href="#Generic_Chebyshev_Polynomials">Generic_Chebyshev_Polynomials</a> with 
	Long_Float</TD>
  </tr>
  <tr>
    <TD colspan="16"><a href="#Object">Object</a></TD>
    <TD>The type <a href="#Entity">Entity</a></TD>
  </tr>
  <tr>
    <TD bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="15"><a href="#Object.Archived">Archived</a></TD>
    <TD>The types <a href="#Deposit">Deposit</a>, <a href="#Backward_Link">
    Backward_Link</a> and <a href="#Deposit_Container">Deposit_Container</a> for 
    handling persistency</TD>
  </tr>
  <tr>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9"><a href="#Object.Archived.Handle">Handle</a></TD>
    <TD>The type <a href="#Object.Archived.Handle.Handle">Handle</a> (to 
    persistent objects) and operations on it. The package is generic</TD>
  </tr>
  <tr>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9"><a href="#Object.Archived.Iterators">Iterators</a></TD>
    <TD>The type <a href="#References_Iterator">References_Iterator</a>, an 
    iterator of object's references</TD>
  </tr>
  <tr>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9"><a href="#Object.Archived.Lists">Lists</a></TD>
    <TD>The type <a href="#Deposit_List">Deposit_List</a>, a list of persistent 
    objects</TD>
  </tr>
  <tr>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium">&nbsp;</TD>
    <TD colspan="9"><a href="#Object.Archived.Sets">Sets</a></TD>
    <TD>The type <a href="#Deposit_Set">Deposit_Set</a>, a set of persistent 
    objects</TD>
  </tr>
  <tr>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="15" style="border-left-style: solid; border-left-width: 1px"><a href="#Object.Handle">Handle</a></TD>
    <TD>The type <a href="#Handle">Handle</a> and operations on it</TD>
  </tr>
  <tr>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9"><a href="#Object.Handle.Generic_Bounded_Array">
    Generic_Bounded_Array</a></TD>
    <TD>The type <a href="#Bounded_Array">Bounded_Array</a>, a generic bounded array of 
    objects</TD>
  </tr>
  <tr>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9"><a href="#Object.Handle.Generic_Handle_Set">Generic_Handle_Set</a></TD>
    <TD>The type <a href="#Object.Handle.Generic_Set.Set">Set</a>, a generic set of 
    objects</TD>
  </tr>
  <tr>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9"><a href="#Object.Handle.Generic_Set">Generic_Set</a></TD>
    <TD>The type <a href="#Object.Handle.Generic_Set.Set">Set</a>, a generic set of 
    objects</TD>
  </tr>
  <tr>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium">&nbsp;</TD>
    <TD colspan="9"><a href="#Object.Handle.Generic_Unbounded_Array">
    Generic_Unbounded_Array</a></TD>
    <TD>The type <a href="#Unbounded_Array">Unbounded_Array</a>, a generic unbounded 
    array of objects</TD>
  </tr>
  <TR>
    <TD colspan="16"> ODBC</TD>
    <TD>The parent package of <a href="#ODBC_Bindings">ODBC bindings</a></TD>
  </TR>
  <TR>
    <TD colspan="5" bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-bottom-style:none; border-bottom-width:medium"> &nbsp;</TD>
    <TD colspan="11"> Architecture_Dependent</TD>
    <TD>ODBC declarations dependent on the machine architecture, e.g. x86_64, 
	i686</TD>
  </TR>
  <TR>
    <TD colspan="5" bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium"> &nbsp;</TD>
    <TD colspan="11"> <a href="#ODBC.API">API</a></TD>
    <TD>Persistent objects identification in ODBC</TD>
  </TR>
  <TR>
    <TD colspan="5" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium"> &nbsp;</TD>
    <TD colspan="2" bgcolor="#C0C0C0" style="border-left-style: none; border-left-width: medium; border-right-style: solid; border-right-width: 1px; border-bottom-style:none; border-bottom-width:medium"> &nbsp;</TD>
    <TD colspan="9"> Keys</TD>
    <TD>Persistent objects identification in ODBC</TD>
  </TR>
  <TR>
    <TD colspan="5" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium"> &nbsp;</TD>
    <TD colspan="2" bgcolor="#C0C0C0" style="border-style:none; border-width:medium; "> &nbsp;</TD>
    <TD bgcolor="#C0C0C0" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-bottom-style:none; border-bottom-width:medium" colspan="5"> &nbsp;&nbsp;&nbsp;&nbsp; </TD>
    <TD colspan="4"> Edit</TD>
    <TD>String conversions for ODBC objects keys</TD>
  </TR>
  <TR>
    <TD colspan="5" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium"> &nbsp;</TD>
    <TD colspan="2" bgcolor="#C0C0C0" style="border-style:none; border-width:medium; "> &nbsp;</TD>
    <TD bgcolor="#C0C0C0" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium" colspan="5"> &nbsp;</TD>
    <TD colspan="4"> Sets</TD>
    <TD>Sets of persistent objects keys for ODBC</TD>
  </TR>
  <TR>
    <TD colspan="5" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium"> &nbsp;</TD>
    <TD colspan="2" bgcolor="#C0C0C0" style="border-left-style: none; border-left-width: medium; border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium"> &nbsp;</TD>
    <TD colspan="9" style="border-left-style: solid; border-left-width: 1px"> Links</TD>
    <TD>Management of persistent objects dependencies in ODBC</TD>
  </TR>
  <TR>
    <TD colspan="5" bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium"> &nbsp;</TD>
    <TD colspan="11"> <a href="#ODBC.Bound_Parameters">Bound_Parameters</a></TD>
    <TD>Data types used for bound parameters of prepared statements</TD>
  </TR>
  <TR>
    <TD colspan="5" bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium"> &nbsp;</TD>
    <TD colspan="11"> Driver_Dependent</TD>
    <TD>ODBC declarations dependent on the ODBC driver manager, e.g. ODBC32, 
	unixODBC</TD>
  </TR>
  <TR>
    <TD colspan="5" bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium"> &nbsp;</TD>
    <TD colspan="11"> <a href="#ODBC.Thin">Thin</a></TD>
    <TD>Thin ODBC bindings</TD>
  </TR>
  <TR>
    <TD colspan="5" bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-top-style:none; border-top-width:medium"> &nbsp;</TD>
    <TD colspan="11"> <a href="#ODBC.SQLTypes">SQLTypes</a></TD>
    <TD>ODBC data types</TD>
  </TR>
  <TR>
    <TD colspan="16"> <a href="#Parsers">Parsers</a></TD>
    <TD>The base package of syntax analyzers</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="15"><a href="#Parsers.Ada">Ada</a></TD>
    <TD>The type Ada_Expression, an implementation of Ada 95 expression parser</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="15"><a href="#Parsers.Generic_Argument">Generic_Argument</a></TD>
    <TD>The type <a href="#Parsers.Generic_Argument.Stack">Stack</a>, the 
    abstract base for argument stacks (generic)</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium">&nbsp;</TD>
    <TD colspan="9" style="border-left-style: solid; border-left-width: 1px"> <a href="#Parsers.Generic_Argument.Segmented_Stack">
    Segmented_Stack</a></TD>
    <TD>An implementation of argument stacks based on segmented stacks</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="15">
<a href="#Parsers.Generic_Lexer">Generic_Lexer</a></TD>
    <TD>The type <a href="#Parsers.Generic_Lexer.Lexer">Lexer</a>, the abstract 
    base for expression analyzers (generic)</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9">
<a href="#Parsers.Generic_Lexer.Ada_Blanks">
    Ada_Blanks</a></TD>
    <TD>An analyzer supporting Ada 95 comments and blanks</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9">
<a href="#Parsers.Generic_Lexer.Ada_2005_Blanks">Ada_2005_Blanks</a></TD>
    <TD>An analyzer supporting Ada 2005 comments and blanks</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9">
<a href="#Parsers.Generic_Lexer.Blanks">
    Blanks</a></TD>
    <TD>An analyzer supporting blanks of spaces and formatting characters HT, 
    LF, CR, VT, FF</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium">&nbsp;</TD>
    <TD colspan="9">
<a href="#Parsers.Generic_Lexer.Cpp_Blanks">Cpp_Blanks</a></TD>
    <TD>An analyzer supporting C++ comments and blanks</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="15">
<a href="#Parsers.Generic_Operation">Generic_Operation</a></TD>
    <TD>The expression operations and their descriptors (generic)</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9"> <a href="#Parsers.Generic_Operation.Generic_Stack">Generic_Stack</a></TD>
    <TD>The type <a href="#Parsers.Generic_Operation.Generic_Stack.Stack">Stack</a>, 
    the abstract base of operation stacks</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium">&nbsp;</TD>
    <TD colspan="9"> <a href="#Parsers.Generic_Operation.Segmented_Stack">
    Segmented_Stack</a></TD>
    <TD>An implementation of operation stacks based on segmented stacks</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="15">
<a href="#Parsers.Generic_Source">Generic_Source</a></TD>
    <TD>An abstract interface of code source (generic)</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9">
<a href="#Parsers.Generic_Source.Get_Ada_Blank">Get_Ada_Blank</a></TD>
    <TD>Matching an Ada 95 comment (generic procedure)</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9">
<a href="#Parsers.Generic_Source.Get_Ada_2005_Blank">Get_Ada_2005_Blank</a></TD>
    <TD>Matching an Ada 2005 comment (generic procedure)</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9">
<a href="#Parsers.Generic_Source.Get_Blank">Get_Blank</a></TD>
    <TD>Matching blank characters (generic procedure)</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9">
<a href="#Parsers.Generic_Source.Get_Cpp_Blank">Get_Cpp_Blank</a></TD>
    <TD>Matching an C++ comment (generic procedure)</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9">
<a href="#Parsers.Generic_Source.Get_Text">Get_Text</a></TD>
    <TD>Matching a text in the Latin-1 code source (generic procedure)</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9">
<a href="#Parsers.Generic_Source.Get_Token">Get_Token</a></TD>
    <TD>Matching a table against the code source (generic procedure)</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9">
<a href="#Parsers.Generic_Source.Get_UTF8_Text">Get_UTF8_Text</a></TD>
    <TD>Matching a text in the UTF-8 code source (generic procedure)</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9">
<a href="#Parsers.Generic_Source.Keywords">Keywords</a></TD>
    <TD>Keyword-matching generated from an enumeration type (generic)&nbsp;</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9">
<a href="#Parsers.Generic_Source.Text_IO">Text_IO</a></TD>
    <TD>Debugging output for source code cursors</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium">&nbsp;</TD>
    <TD colspan="9">
<a href="#Parsers.Generic_Source.XPM">XPM</a></TD>
    <TD>Matching XPM image format (generic package)</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="15"> <a href="#Parsers.Generic_Token">Generic_Token</a></TD>
    <TD>The table tokens for table-driven analyzers (generic)</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9">
<a href="#Parsers.Generic_Token.Generic_Token_Lexer">
    Generic_Token_Lexer</a></TD>
    <TD>The type <a href="#Parsers.Generic_Token.Generic_Token_Lexer.Lexer">
    Lexer</a>, the abstract base for table-driven analyzers</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium">&nbsp;</TD>
    <TD colspan="9">
<a href="#Parsers.Generic_Token.Segmented_Lexer">
    Segmented_Lexer</a></TD>
    <TD>An implementation of table-driven analyzers based on segmented argument 
    and operation stacks</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="15">
<a href="#Parsers.Multiline_Source">Multiline_Source</a></TD>
    <TD>The type <a href="#Parsers.Multiline_Source.Source">Source</a>, the 
    abstract base for sources having multiple lines of code</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9">
<a href="#Parsers.Multiline_Source.Latin1_Text_IO">Latin1_Text_IO</a></TD>
    <TD>The type <a href="#Parsers.Multiline_Source.Latin1_Text_IO.Source">Source</a>, 
    a code source based on Ada.Text_IO (with Latin-1 to UTF-8 recoding)</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9">
<a href="#Parsers.Multiline_Source.Location_Text_IO">Location_Text_IO</a></TD>
    <TD>Debugging output for source code cursors, an instance of
	<a href="#Parsers.Generic_Source.Text_IO">Parsers.Generic_Source.Text_IO</a></TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9">
<a href="#Parsers.Multiline_Source.Standard_Input">Standard_Input</a></TD>
    <TD>The type <a href="#Parsers.Multiline_Source.Standard_Input.Source">Source</a>, 
    a code source based on Ada.Text_IO</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9">
<a href="#Parsers.Multiline_Source.Stream_IO">Stream_IO</a></TD>
    <TD>The type <a href="#Parsers.Multiline_Source.Stream_IO.Source">Source</a>, 
    a code source based on Ada streams</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9">
<a href="#Parsers.Multiline_Source.Text_IO">Text_IO</a></TD>
    <TD>The type <a href="#Parsers.Multiline_Source.Text_IO.Source">Source</a>, 
    a code source based on Ada.Text_IO</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9">
<a href="#Parsers.Multiline_Source.Wide_Text_IO">Wide_Text_IO</a></TD>
    <TD>The type <a href="#Parsers.Multiline_Source.Text_IO.Source">Source</a>, 
    a code source based on Ada.Wide_Text_IO (with recording into UTF-8)</TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" colspan="6" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium">&nbsp;</TD>
    <TD colspan="9">
<a href="#Parsers.Multiline_Source.XPM">XPM</a></TD>
    <TD>An instance of <a href="#Parsers.Generic_Source.XPM">
	Parsers.Generic_Source.XPM</a> based on
<a href="#Parsers.Multiline_Source">Multiline_Source</a></TD>
  </TR>
  <TR>
    <TD bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-top-style:none; border-top-width:medium">&nbsp;</TD>
    <TD colspan="15">
<a href="#Parsers.String_Source">String_Source</a></TD>
    <TD>The type <a href="#Parsers.String_Source.Source">Source</a>, a single 
    string code source</TD>
  </TR>
  <TR>
    <TD colspan="16"><a href="#Persistent">Persistent</a></TD>
    <TD>Abstract persistent storage interface</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="10"><a href="#Persistent.APQ">APQ</a></TD>
    <TD>APQ implementation of persistent storage</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="10"><a href="#Persistent.Blocking_Files">Blocking_Files</a></TD>
    <TD>Blocking files access</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="5" style="border-left-style: none; border-left-width: medium; border-bottom-style:none; border-bottom-width:medium" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD colspan="5" style="border-left-style: solid; border-left-width: 1px"><a href="#Persistent.Blocking_Files.Text_IO">Text_IO</a></TD>
    <TD>Text output of byte index and byte offset</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="5" style="border-left-style: none; border-left-width: medium; border-bottom-style:none; border-bottom-width:medium; border-top-style:none; border-top-width:medium" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD colspan="5" style="border-left-style: solid; border-left-width: 1px">
	<a href="#Persistent.Blocking_Files.Transactional">Transactional</a></TD>
    <TD>Blocking files with transactions</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="5" style="border-left-style: none; border-left-width: medium; border-bottom-style:solid; border-bottom-width:1px; border-right-style:none; border-right-width:medium; border-top-style:none; border-top-width:medium" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD colspan="3" style="border-left-style: none; border-left-width: medium" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD colspan="2" style="border-left-style: solid; border-left-width: 1px">
	<a href="#Persistent.Blocking_Files.Transactional.Dump">Dump</a></TD>
    <TD>Textual output of internal structures of a transactional blocking file</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="10"><a href="#Persistent.Directory">Directory</a></TD>
    <TD>Persistent directory objects</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="10"><a href="#Persistent.Data_Bank">Data_Bank</a></TD>
    <TD>Abstract persistent storage with objects identified by keys</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9"><a href="#Persistent.Data_Bank.Index">Index</a></TD>
    <TD>Index for an abstract persistent storage</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" style="border-style:none; border-width:medium; ">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" style="border-left-style: none; border-left-width: medium" colspan="7">&nbsp;</TD>
    <TD colspan="2" style="border-left-style: solid; border-left-width: 1px">Text_IO</TD>
    <TD>Text output of the persistent storage index</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9"><a href="#Persistent.Data_Bank.Indexed">Indexed</a></TD>
    <TD>Abstract indexed persistent storage</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" style="border-style:none; border-width:medium; ">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" style="border-left-style: none; border-left-width: medium" colspan="7">&nbsp;</TD>
    <TD colspan="2" style="border-left-style: solid; border-left-width: 1px">Text_IO</TD>
    <TD>Text output of the persistent storage index</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="9">Mutexes</TD>
    <TD>Interlocking of <a href="#Persistent.Data_Bank.Indexed.Indexed_Storage_Object">  Indexed_Storage_Object</a>
	operations</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-top-style:none; border-top-width:medium">&nbsp;</TD>
    <TD colspan="9"><a href="#Persistent.Data_Bank.Reference">Reference</a></TD>
    <TD>Persistent storage references for proxy objects</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="10" style="border-left-style: solid; border-left-width: 1px"><a href="#Persistent.Handle">Handle</a></TD>
    <TD>Handles to persistent storage objects</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" style="border-left-style: none; border-left-width: medium">&nbsp;</TD>
    <TD colspan="9" style="border-left-style: solid; border-left-width: 1px"><a href="#Persistent.Handle.Factory">Factory</a></TD>
    <TD>Persistent storage factory</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="10" style="border-left-style: solid; border-left-width: 1px"><a href="#Persistent.Memory_Pools">Memory_Pools</a></TD>
    <TD>Persistent memory pool backed by a direct access file</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="5" bgcolor="#C0C0C0" style="border-left-style: none; border-left-width: medium; border-right-style:solid; border-right-width:1px; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="5"><a href="#Persistent.Memory_Pools.Streams">Streams</a></TD>
    <TD>Stream interface to persistent memory pool </TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="5" bgcolor="#C0C0C0" style="border-style:none; border-width:medium; ">&nbsp;</TD>
    <TD colspan="3" style="border-left-style: none; border-left-width: medium; border-bottom-style:none; border-bottom-width:medium" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD colspan="2" style="border-left-style: solid; border-left-width: 1px">
	<a href="#Persistent.Memory_Pools.Streams.External_B_Tree">External_B_Tree</a></TD>
    <TD>Persistent storage raw B-tree</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="5" bgcolor="#C0C0C0" style="border-style:none; border-width:medium; ">&nbsp;</TD>
    <TD colspan="3" style="border-style:none; border-width:medium; " bgcolor="#C0C0C0">&nbsp;</TD>
    <TD style="border-left-style: none; border-left-width: medium" bgcolor="#C0C0C0">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TD>
    <TD style="border-left-style: solid; border-left-width: 1px">
	<a href="#Persistent.Memory_Pools.Streams.External_B_Tree.Generic_Table">
	Generic_Table</a></TD>
    <TD>Persistent storage multi-keyed table</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="5" bgcolor="#C0C0C0" style="border-style:none; border-width:medium; ">&nbsp;</TD>
    <TD colspan="3" style="border-left-style: none; border-left-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD colspan="2" style="border-left-style: solid; border-left-width: 1px">
	<a href="#Persistent.Memory_Pools.Streams.Generic_External_B_Tree">Generic_External_B_Tree</a></TD>
    <TD>Persistent storage B-tree</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="5" bgcolor="#C0C0C0" style="border-left-style: none; border-left-width: medium; border-right-style:none; border-right-width:medium; border-top-style:none; border-top-width:medium">&nbsp;</TD>
    <TD colspan="3" style="border-left-style: none; border-left-width: medium; border-top-style:none; border-top-width:medium" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD colspan="2" style="border-left-style: solid; border-left-width: 1px">
	<a href="#Persistent.Memory_Pools.Streams.Generic_External_Ptr_B_Tree">Generic_External_Ptr_B_Tree</a></TD>
    <TD>Persistent storage pointer-valued B-tree</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="10" style="border-left-style: solid; border-left-width: 1px"><a href="#Persistent.Native_ODBC">Native_ODBC</a></TD>
    <TD>ODBC implementation of persistent storage</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" style="border-left-style: none; border-left-width: medium">&nbsp;</TD>
    <TD colspan="9" style="border-left-style: solid; border-left-width: 1px">Text_IO</TD>
    <TD>Text output of the ODBC persistent storage index</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="10" style="border-left-style: solid; border-left-width: 1px"><a href="#Persistent.ODBC">ODBC</a></TD>
    <TD>GNADE ODBC implementation of persistent storage</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD style="border-left-style: none; border-left-width: medium" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD colspan="9" style="border-left-style: solid; border-left-width: 1px">Text_IO</TD>
    <TD>Text output of the GNADE ODBC persistent storage index</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="10" style="border-left-style: solid; border-left-width: 1px">
	<a href="#Persistent.Single_File">Single_File</a></TD>
    <TD>Single file implementation of persistent storage</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="5" style="border-left-style: none; border-left-width: medium" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD colspan="5" style="border-left-style: solid; border-left-width: 1px">Text_IO</TD>
    <TD>Text output of the persistent storage index and underlying file 
	structures</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium">&nbsp;</TD>
    <TD colspan="10" style="border-left-style: solid; border-left-width: 1px">
	<a href="#Persistent.SQLite">SQLite</a></TD>
    <TD>SQLite implementation of persistent storage</TD>
  </TR>
  <TR>
    <TD colspan="6" bgcolor="#C0C0C0" style="border-right-style: none; border-right-width: medium; border-top-style:none; border-top-width:medium">&nbsp;</TD>
    <TD bgcolor="#C0C0C0" style="border-left-style: none; border-left-width: medium">&nbsp;</TD>
    <TD colspan="9" style="border-left-style: solid; border-left-width: 1px">Text_IO</TD>
    <TD>Text output of the SQLite persistent storage index</TD>
  </TR>
  <tr>
    <TD colspan="16"><a href="#SQLite">SQLite</a></TD>
    <TD>Native bindings to SQLite</TD>
  </tr>
  <tr>
    <TD colspan="16"><a href="#Stack_Storage">Stack_Storage</a></TD>
    <TD>The stack pools implemented by the type <a href="#Stack_Storage.Pool">
    Pool</a></TD>
  </tr>
	<tr>
    <TD bgcolor="#C0C0C0">&nbsp;</TD>
    <TD colspan="15" style="border-left-style: solid; border-left-width: 1px"><a href="#Stack_Storage.Mark_And_Release">Mark_And_Release</a></TD>
    <TD>Mark and release storage pools of limited controlled objects</TD>
  </tr>
	<tr>
    <TD colspan="16"><a href="#Storage_Streams">Storage_Streams</a></TD>
    <TD>Memory-allocated streams</TD>
  </tr>
	<tr>
    <TD colspan="16"><a href="http://www.dmitry-kazakov.de/ada/strings_edit.htm#Strings_Edit">Strings_Edit</a></TD>
    <TD>The packages dealing with strings editing as described in a separate
	<a href="http://www.dmitry-kazakov.de/ada/strings_edit.htm">document</a></TD>
  </tr>
	<tr>
    <TD bgcolor="#C0C0C0">&nbsp;</TD>
    <TD colspan="15" style="border-left-style: solid; border-left-width: 1px"><a href="#Strings_Edit.Symmetric_Serialization">
	Symmetric_Serialization</a></TD>
    <TD>Symmetric encoding and decoding strings.</TD>
  </tr>
  <TR>
    <TD colspan="16"> <a href="#Synchronization">Synchronization</a></TD>
    <TD>The parent package of the locking synchronization primitives</TD>
  </TR>
  <TR>
    <TD colspan="4" bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-bottom-style:none; border-bottom-width:medium"> &nbsp;</TD>
    <TD colspan="12"> <a href="#Synchronization.Events">Events</a></TD>
    <TD>Plain events which can be signaled, reset and awaited for</TD>
  </TR>
  <TR>
    <TD colspan="4" bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium"> &nbsp;</TD>
    <TD colspan="12"> <a href="#Synchronization.Generic_Events_Array">
	Generic_Events_Array</a></TD>
    <TD>Arrays of events which can be signaled, reset and awaited in any 
	combination of in race condition free way</TD>
  </TR>
  <TR>
    <TD colspan="4" bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium"> &nbsp;</TD>
    <TD colspan="12"> <a href="#Synchronization.Generic_Mutexes_Array">
	Generic_Mutexes_Array</a></TD>
    <TD>Arrays of reentrant mutexes, deadlock-free with an enforced order of 
	locking</TD>
  </TR>
  <TR>
    <TD colspan="4" bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium"> &nbsp;</TD>
    <TD colspan="12"> <a href="#Synchronization.Generic_Pulse_Events">
	Generic_Pulse_Events</a></TD>
    <TD>Race condition free event distributing pulsed value to multiple tasks</TD>
  </TR>
  <TR>
    <TD colspan="4" bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-top-style:none; border-top-width:medium; border-bottom-style:none; border-bottom-width:medium"> &nbsp;</TD>
    <TD colspan="12"> <a href="#Synchronization.Mutexes">Muexes</a></TD>
    <TD>Reentrant mutexes</TD>
  </TR>
  <TR>
    <TD colspan="4" bgcolor="#C0C0C0" style="border-right-style: solid; border-right-width: 1px; border-top-style:none; border-top-width:medium"> &nbsp;</TD>
    <TD colspan="12"> <a href="#Synchronization.Pulse_Events">Pulse_Events</a></TD>
    <TD>Race condition free pulse events</TD>
  </TR>
  <TR>
    <TD colspan="16"> <a href="http://www.dmitry-kazakov.de/ada/tables.htm">Tables</a></TD>
    <TD>The packages related to tables management as described in a separate
	<a href="http://www.dmitry-kazakov.de/ada/tables.htm">document</a></TD>
  </TR>
  <TR>
    <TD colspan="2" bgcolor="#C0C0C0"> &nbsp;</TD>
    <TD colspan="14" style="border-left-style: solid; border-left-width: 1px"> <a href="http://www.dmitry-kazakov.de/ada/tables.htm#Tables.UTF8_Names">UTF8_Names</a></TD>
    <TD>Tables of UTF-8 encoded case-insensitive items</TD>
  </TR>
  </TABLE>
<p>The packages related to tables management are described in <a href="http://www.dmitry-kazakov.de/ada/tables.htm">Tables</a>.</p>
<p>For the packages dealing with strings editing see <a href="http://www.dmitry-kazakov.de/ada/strings_edit.htm">Strings edit</a>.</p>
<p align="right">
  <A name="17.2"></A><a href="#17.1"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></A><a href="#18"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H3>17.2. Tests and examples</H3>
<H4>17.2.1. Tests</H4>
<p><a name="tests"></a>The subdirectory <i> test_components</i> contains various tests and examples:</p>
<TABLE border="5" cellpadding="3" cellspacing="0">
  <TR>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>Compilation unit</b></font></TD>
    <TD bgcolor="#008080" align="center"><font color="#FFFFFF"><b>Executable</b></font></TD>
    <TD bgcolor="#008080"><FONT color="#FFFFFF"><B>Provides</B></FONT></TD>
    <TD bgcolor="#008080" align="center"><font color="#FFFFFF"><b>Requires</b></font></TD>
  </TR>
  <tr>
    <TD>test_approximations</TD>
    <TD align="center">yes</TD>
    <TD>Test for Chebyshev series and gamma function</TD>
    <TD align="center">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_APQ_persistence</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">APQ persistent storage test</TD>
    <TD align="center" bgcolor="#FFFF99">APQ</TD>
  </tr>
  <tr>
    <TD>test_APQ_session</TD>
    <TD align="center">no</TD>
    <TD>A package used to open an APQ session. Queries for connection parameters
      using text I/O</TD>
    <TD align="center">APQ</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_association</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for infix operation associations. Uses the file <i>test_association.txt</i>
      as the source to parse.</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <tr>
    <TD>test_association_expression</TD>
    <TD align="center">no</TD>
    <TD>Used by <i> test_association</i></TD>
    <TD align="center">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_b_trees</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for B-trees</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_blackboard</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for blackboards</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_blackboard_performance</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for blackboards performance</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_block_streams</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for block streams</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_blocking_files</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for blocking files access</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_cubic_spline</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for cubic spline interpolation</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_data_client</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test client for multiple connections test server</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
	<tr>
    <TD bgcolor="#FFFF99">test_data_server</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Multiple connections test server</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
	<tr>
    <TD>test_data_servers</TD>
    <TD align="center">no</TD>
    <TD>Implementation of the multiple connections test server</TD>
    <TD align="center">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_dining_philosophers</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">A solution of the <a href="#Dining_philosophers">
	dining philosophers</a> problem</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <tr>
    <TD>test_dining_philosophers_forks</TD>
    <TD align="center">no</TD>
    <TD>Used in <i>test_dining_philosophers</i></TD>
    <TD align="center">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_echo_client</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Echo client test</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
	<tr>
    <TD bgcolor="#FFFF99">test_echo_client_async</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Echo client test using multiple connections server</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
	<tr>
    <TD bgcolor="#FFFF99">test_echo_server</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Echo server test</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
	<tr>
    <TD>test_echo_servers</TD>
    <TD align="center">no</TD>
    <TD>Implementation of the echo server</TD>
    <TD align="center">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_elv_max_cube_client</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for ELV/e-Q3 MAX! cube client</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_fifo</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for FIFO</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_generic_sets</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for Generic_Set</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_generic_indefinite_sets</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for Generic_Indefinite_Set</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_graphs</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for Generic_Directed_Graph</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_handles</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for handles to objects</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_http_client</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for HTTP client</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_http_continouos_server</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for HTTP server that keeps on sending an 
	&quot;infinite&quot; page </TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
	<tr>
    <TD>test_http_continouos_servers</TD>
    <TD align="center">no</TD>
    <TD>Implementation of a custom HTTP server sending an &quot;infinite&quot; page</TD>
    <TD align="center">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_http_sqlite_browser</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">SQLite database browser test</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
	<tr>
    <TD>test_http_sqlite_server</TD>
    <TD align="center">no</TD>
    <TD>Implementation of a server to browse SQLite databases</TD>
    <TD align="center">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_http_server</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for HTTP server</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <tr>
    <TD>test_http_servers</TD>
    <TD align="center">no</TD>
    <TD>Implementation of a custom HTTP server</TD>
    <TD align="center">&nbsp;</TD>
  </tr>
  <tr>
    <TD>test_http_servers-secure</TD>
    <TD align="center">no</TD>
    <TD>Implementation of a custom secure HTTP server factory</TD>
    <TD align="center">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_https_client</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for HTTPS client</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_https_server</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for HTTPS server</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_ieee_754</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for IEEE 754 packages</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <tr>
    <TD>test_integer_b_trees</TD>
    <TD align="center">no</TD>
    <TD>Used in <i>test_b_trees</i></TD>
    <TD align="center">&nbsp;</TD>
  </tr>
  <tr>
    <TD>test_integer_fifo</TD>
    <TD align="center">no</TD>
    <TD>Used in <i>test_fifo</i></TD>
    <TD align="center">&nbsp;</TD>
  </tr>
  <tr>
    <TD>test_integer_signaled_fifo</TD>
    <TD align="center">no</TD>
    <TD>Used in <i>test_fifo</i></TD>
    <TD align="center">&nbsp;</TD>
  </tr>
  <tr>
    <TD>test_integer_sets</TD>
    <TD align="center">no</TD>
    <TD>Used in <i>test_generic_sets</i></TD>
    <TD align="center">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_linked_lists</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for doubly-linked webs and lists</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <tr>
    <TD>test_linked_lists.controlled_elements</TD>
    <TD align="center">no</TD>
    <TD>Test for doubly-linked webs and lists, a separate body for class-wide 
	controlled items</TD>
    <TD align="center">&nbsp;</TD>
  </tr>
  <tr>
    <TD>test_linked_lists.string_elements</TD>
    <TD align="center">no</TD>
    <TD>Test for doubly-linked webs and lists, a separate body for string items</TD>
    <TD align="center">&nbsp;</TD>
  </tr>
  <tr>
    <TD>test_linked_lists.task_elements</TD>
    <TD align="center">no</TD>
    <TD>Test for doubly-linked webs and lists, a separate body for task items</TD>
    <TD align="center">&nbsp;</TD>
  </tr>
  <tr>
    <TD>test_linked_lists_of_elements</TD>
    <TD align="center">no</TD>
    <TD>Test package for doubly-linked webs and lists. Instantiations for the 
	base type of for class-wide controlled items</TD>
    <TD align="center">&nbsp;</TD>
  </tr>
  <tr>
    <TD>test_linked_lists_of_elements.strings</TD>
    <TD align="center">no</TD>
    <TD>Test package for doubly-linked webs and lists. Controlled items 
	containing strings</TD>
    <TD align="center">&nbsp;</TD>
  </tr>
  <tr>
    <TD>test_linked_lists_of_strings</TD>
    <TD align="center">no</TD>
    <TD>Test package for doubly-linked webs and lists. Instantiations for string 
	items</TD>
    <TD align="center">&nbsp;</TD>
  </tr>
  <tr>
    <TD>test_linked_lists_of_tasks</TD>
    <TD align="center">no</TD>
    <TD>Test package for doubly-linked webs and lists. Instantiations for task 
	items</TD>
    <TD align="center">&nbsp;</TD>
  </tr>
  <tr>
    <TD>test_linked_lists_scheduler</TD>
    <TD align="center">no</TD>
    <TD>Test package for doubly-linked list based scheduler example.</TD>
    <TD align="center">&nbsp;</TD>
  </tr>
	<tr>
    <TD bgcolor="#FFFF99">test_linked_lists_scheduler_test</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test program for doubly-linked list based scheduler example.</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_modbus_client</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for MODBUS client</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_mqtt_client</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for MQTT client</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <tr>
    <TD>test_mqtt_clients</TD>
    <TD align="center">no</TD>
    <TD>Test package for MQTT client, used in <i>test_mqtt_client</i></TD>
    <TD align="center">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_mqtt_server</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for MQTT server</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <tr>
    <TD>test_mqtt_servers</TD>
    <TD align="center">no</TD>
    <TD>Test package for MQTT server, used in <i>test_mqtt_server</i></TD>
    <TD align="center">&nbsp;</TD>
  </tr>
  <tr>
    <TD>test_my_string</TD>
    <TD align="center">no</TD>
    <TD>An implementation of varying strings using objects, illustrative <a href="#test_my_string.ads">example</a>.
      Used in <i>test_handles</i>.</TD>
    <TD align="center">&nbsp;</TD>
  </tr>
  <tr>
    <TD>test_my_string.handle</TD>
    <TD align="center">no</TD>
    <TD>An implementation of handles to string objects, <a href="#test_my_string.handle.ads">example</a>.
      Used in <i>test_handles</i>.</TD>
    <TD align="center">&nbsp;</TD>
  </tr>
  <TR>
    <TD bgcolor="#FFFF99">test_native_odbc_persistence</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">ODBC persistent storage test</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </TR>
  <TR>
    <TD>test_native_odbc_session</TD>
    <TD align="center">no</TD>
    <TD>A package used to open an ODBC session. Queries for connection parameters
      using text I/O</TD>
    <TD align="center"><a href="http://gnade.sourceforge.net/">GNADE</a></TD>
  </TR>
  <TR>
    <TD>test_object</TD>
    <TD align="center">no</TD>
    <TD>A test object used in <i>test_handles</i>.</TD>
    <TD align="center">&nbsp;</TD>
  </TR>
  <TR>
    <TD>test_object.handle</TD>
    <TD align="center">no</TD>
    <TD>Handles to test objects. Used in <i>test_handles</i>.</TD>
    <TD align="center">&nbsp;</TD>
  </TR>
  <TR>
    <TD>test_object.handle_array</TD>
    <TD align="center">no</TD>
    <TD>Arrays of test objects. Used in <i>test_handles</i>.</TD>
    <TD align="center">&nbsp;</TD>
  </TR>
  <TR>
    <TD bgcolor="#FFFF99">test_odbc_bindings</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">An extensive test for ODBC bindings provided by the 
	library</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </TR>
  <TR>
    <TD bgcolor="#FFFF99">test_odbc_persistence</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">GNADE ODBC persistent storage test, <a href="#test_ODBC_persistence">example</a>.</TD>
    <TD align="center" bgcolor="#FFFF99"><a href="http://gnade.sourceforge.net/">GNADE</a></TD>
  </TR>
  <TR>
    <TD>test_odbc_session</TD>
    <TD align="center">no</TD>
    <TD>A package used to open a GNADE ODBC session. Queries for connection parameters
      using text I/O</TD>
    <TD align="center"><a href="http://gnade.sourceforge.net/">GNADE</a></TD>
  </TR>
  <TR>
    <TD bgcolor="#FFFF99">test_parser_stream_io</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">A test for stream based sources</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </TR>
  <TR>
    <TD>test_persistent_file_storage</TD>
    <TD align="center">no</TD>
    <TD>An implementation of persistent storage using direct I/O.</TD>
    <TD align="center">&nbsp;</TD>
  </TR>
  <tr>
    <TD bgcolor="#FFFF99">test_persistent_memory_pool</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Persistent memory pool test.</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <TR>
    <TD bgcolor="#FFFF99">test_persistent_storage</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Persistent storage test, <a href="#test_persistent_storage">example</a>.</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </TR>
  <TR>
    <TD>test_persistent_tree</TD>
    <TD align="center">no</TD>
    <TD>An implementation of tree nodes as persistent objects, <a href="#test_persistent_tree">example</a></TD>
    <TD align="center">&nbsp;</TD>
  </TR>
  <TR>
    <TD>test_record_blackboards</TD>
    <TD align="center">no</TD>
    <TD>Used in <i>test_blackboard</i></TD>
    <TD align="center">&nbsp;</TD>
  </TR>
  <TR>
    <TD bgcolor="#FFFF99">test_sequencer</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for symmetric serialization</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </TR>
  <TR>
    <TD>test_sequencer_sets</TD>
    <TD align="center">no</TD>
    <TD>Used in <i>test_sequencer</i></TD>
    <TD align="center">&nbsp;</TD>
  </TR>
  <TR>
    <TD>test_set</TD>
    <TD align="center">no</TD>
    <TD>A set of string objects declared in <i>test_my_string.handle</i>. Used
      in <i>test_handles</i>.</TD>
    <TD align="center">&nbsp;</TD>
  </TR>
  <tr>
    <TD bgcolor="#FFFF99">test_single_file_persistence</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Single file persistent storage test</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_sqlite_benchmark</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">SQLite vs. persistent B-tree benchmark test</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <tr>
    <TD bgcolor="#FFFF99">test_sqlite_persistence</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">SQLite persistent storage test, <a href="#test_ODBC_persistence">example</a>.</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <TR>
    <TD bgcolor="#FFFF99">test_stack</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for <a href="#Stack_Storage.Mark_And_Release">mark and release
      stacks</a></TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </TR>
  <TR>
    <TD>test_stack_item</TD>
    <TD align="center">no</TD>
    <TD>Used in <i>test_stack</i></TD>
    <TD align="center">&nbsp;</TD>
  </TR>
  <TR>
    <TD>test_safe_string_blackboards</TD>
    <TD align="center">no</TD>
    <TD>Used in <i>test_blackboard</i></TD>
    <TD align="center">&nbsp;</TD>
  </TR>
	<tr>
    <TD bgcolor="#FFFF99">test_storage_streams</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for storage streams</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
	<tr>
    <TD>test_string_blackboards</TD>
    <TD align="center">no</TD>
    <TD>Used in <i>test_blackboard</i></TD>
    <TD align="center">&nbsp;</TD>
  </tr>
	<tr>
    <TD>test_string_fifo</TD>
    <TD align="center">no</TD>
    <TD>Used in <i>test_fifo</i></TD>
    <TD align="center">&nbsp;</TD>
  </tr>
	<tr>
    <TD>test_string_graph</TD>
    <TD align="center">no</TD>
    <TD>Used in <i>test_graphs</i></TD>
    <TD align="center">&nbsp;</TD>
  </tr>
	<tr>
    <TD>test_string_signaled_fifo</TD>
    <TD align="center">no</TD>
    <TD>Used in <i>test_fifo</i></TD>
    <TD align="center">&nbsp;</TD>
  </tr>
  <TR>
    <TD>test_suffix_tree</TD>
    <TD align="center">ni</TD>
    <TD>Used in <i>test_graphs</i> and as an <a href="#suffix_tree_sample">
	example</a>.</TD>
    <TD align="center">&nbsp;</TD>
  </TR>
  <TR>
    <TD bgcolor="#FFFF99">test_synchronization_events</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for synchronization primitives</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </TR>
  <TR>
    <TD>test_synchronization_events_array</TD>
    <TD align="center">no</TD>
    <TD>Used in <i>test_synchronization_events</i></TD>
    <TD align="center">&nbsp;</TD>
  </TR>
  <tr>
    <TD>test_synchronization_pulse_events</TD>
    <TD align="center">no</TD>
    <TD>Used in <i>test_synchronization_events</i></TD>
    <TD align="center">&nbsp;</TD>
  </tr>
  <TR>
    <TD bgcolor="#FFFF99">test_transactional_blocking_files</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for transactional blocking files</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </TR>
  <TR>
    <TD bgcolor="#FFFF99">test_utf8_tables</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for tables of UTF-8 tokens</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </TR>
  <tr>
    <TD>test_utf8_tables_table</TD>
    <TD align="center">no</TD>
    <TD>Used in <i>test_utf8_tables</i></TD>
    <TD align="center">&nbsp;</TD>
  </tr>
	<tr>
    <TD bgcolor="#FFFF99">test_websocket_duplex_server</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for full-duplex WebSockets</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
	<tr>
    <TD>test_websocket_duplex_servers</TD>
    <TD align="center">no</TD>
    <TD>Used in <i>test_websocket_duplex_server</i></TD>
    <TD align="center">&nbsp;</TD>
  </tr>
	<tr>
    <TD bgcolor="#FFFF99">test_websocket_server</TD>
    <TD align="center" bgcolor="#FFFF99">yes</TD>
    <TD bgcolor="#FFFF99">Test for half-duplex WebSockets</TD>
    <TD align="center" bgcolor="#FFFF99">&nbsp;</TD>
  </tr>
  <TR>
    <TD>test_websocket_servers</TD>
    <TD align="center">no</TD>
    <TD>Used in <i>test_websocket_server</i></TD>
    <TD align="center">&nbsp;</TD>
  </TR>
</TABLE>
<H4>17.2.2. Building tests with GNAT</H4>
<p>Tests that do not require nether <a href="http://gnade.sourceforge.net/">GNADE</a>
nor APQ can be built using gnatmake:</p>
<blockquote>
<p><tt>gnatmake -I..&nbsp;<font color="#000080">&lt;file-name&gt;</font></tt></p>
</blockquote>
<p>Note that <tt><font color="#000080">&lt;file-name&gt;</font></tt> should
refer an *.adb file. For example:</p>
<blockquote>
<p><tt>gnatmake -I..&nbsp;test_handles.adb</tt></p>
</blockquote>
<H4><span style="font-weight: 400">Alternatively the file <i>components-tests.gpr</i> 
is the GNAT GPS project files which can be used instead.</span></H4>
<H4>17.2.3. Building tests that use GNADE</H4>
<p>The tests depending on <a href="http://gnade.sourceforge.net/">GNADE</a> will
require an installation of <a href="http://gnade.sourceforge.net/">GNADE</a>. On
a Linux box they can be built using gnatmake as follows:</p>
<blockquote>
<p><tt>gnatmake -I..&nbsp;-I/usr/local/gnade/include test_odbc_persistence.adb</tt></p>
</blockquote>
<p>Under Windows it might be (one command line):</p>
<blockquote>
<p><tt>gnatmake -I.. -Ic:/gnade/win32-include test_odbc_persistence.adb -largs -Lc:/gnade/win32-lib
-lgnadeodbc -LC:/gnade/lib/win32 -lodbc32</tt></p>
</blockquote>
<p>Refer to <a href="http://gnade.sourceforge.net/">GNADE</a> documentation for
more information. <a href="http://gnade.sourceforge.net/">GNADE</a> is under
development, so paths might change.</p>
<H4><span style="font-weight: 400">The file <i>
components-gnade-odbc_persistence_tests.gpr</i> is the GNAT GPS project files to 
build the test under GPS.</span></H4>
<H4>17.2.4. Building tests that use APQ</H4>
<p>The tests that use APQ should require no additional parameters. At least
under Windows APQ is fully integrated with GNAT compiler. If you use a source
distribution of APQ, it would probably be required to specify additional directory
paths.</p>
<H4>17.2.5. Parser examples</H4>
<p>The subdirectory <i>parser-examples</i> contains examples of using parsers.
It has the following subdirectories:</p>
<ul>
  <li><i>calculator</i> contains the sources of the simple <a href="#console_calculator">console
    calculator example</a>;</li>
  <li><i>operation-stacks</i> contains the sources of the <a href="#operation_stack_example">example
    illustrating a direct use of the operation stack</a>;</li>
  <li><i>parsing-tree</i> contains the sources of a <a href="#Parsers.Ada">full
    Ada 95 expression parser</a>;</li>
</ul>
<p>The
following command in the corresponding subdirectory can be used to build a
parser example:</p>
<blockquote>
<p><tt>gnatmake -I../..&nbsp;<font color="#000080">&lt;file-name&gt;</font></tt></p>
</blockquote>
<p>The subdirectory <i>xpm</i> contains <a href="#Parsers.Generic_Source.XPM">Parsers.Generic_Source.XPM</a> and 
<a href="#Parsers.Multiline_Source.XPM">Parsers.Multiline_Source.XPM</a>.</p>

<H4>17.2.6. Building tests that use SQLite</H4>
<p>The test that uses SQLite is built using gnatmake as follows:</p>
<blockquote>
<p><tt>gcc -c ../sqlite-sources/sqlite3.c<br>
gnatmake -c -I.. test_sqlite_persistence.adb<br>
gnatbind -I.. test_sqlite_persistence.ali<br>
gnatlink test_sqlite_persistence.ali sqlite3.o</tt></p>
</blockquote>
<p><span style="font-weight: 400">The file <i>
components-sqlite-sqlite_persistence_tests.gpr</i> is the GNAT GPS project files 
to build the test under GPS.</span></p>

<H4>17.2.7. Building tests that use native ODBC bindings</H4>
<p>The ODBC bindings test under Windows is built as:</p>
<blockquote>
<p><tt>gnatmake -I.. -I../odbc -I../odbc/odbc32 -I../odbc/odbc32/i686 
test_odbc_bindings.adb -largs -lodbc32</tt></p>
</blockquote>
<p><span style="font-weight: 400">Under Linux:</span></p>
<blockquote>
<p><tt>gnatmake -I.. -I../odbc -I../odbc/unixodbc -I../odbc/unixodbc/i686 
test_odbc_bindings.adb -largs -lodbc</tt></p>
</blockquote>
<p>Depending on the architecture either i686 or x86_64 subdirectory must be 
specified. The project file <i>components-odbc-odbc_bindings_tests.gpr</i> can 
be used with the GNAT. Note that the scenario variables <i>
<a href="#arch_scenario">arch</a></i> and <i><a href="#odbc_scenario">odbc</a></i> 
must be correctly set.</p>
<p>Similarly is built <i>test_native_odbc_persistence.adb</i>. The corresponding 
project file is <i>components-odbc-odbc_persistence_tests.gpr</i>.</p>

<hr>
<p align="right">
<a name="18"></a><a href="#17.2"><IMG src="prev.gif" alt="[Back]" width="29" height="29"></a><A href="#20"><IMG src="index.gif"
 alt="[TOC]" width="29" height="29"></A><a href="#19"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>18. Installation</H2>
<P>
The software does not require special installation. The archive's content can be 
put in a directory and used as-is. For users of <a href="http://libre.adacore.com/libre/">GNAT compiler</a> 
the software provides gpr project files, which can be used in the
<a href="https://libre.adacore.com/gps/main.html">Gnat Programming Studio</a> 
(GPS).<p>To ease use of the software with GPS, it can be integrated into the GPS 
using the <a href="http://www.dmitry-kazakov.de/ada/gps_installer.htm">GPS 
Library Installer</a> (gps_installer). Start the gps_installer as root (or with 
the corresponding administrative rights to the GNAT installation directory) 
specifying the source directory as the argument. Follow the instructions.</p><P>
Persistence packages based on the <a href="http://gnade.sourceforge.net/">GNADE
  project</a> and the APQ require the corresponding software installed. When the 
Simple Components for Ada are installed using
<a href="http://www.dmitry-kazakov.de/ada/gps_installer.htm">GPS Library 
Installer</a> without GNADE, APQ, SQLite etc, then the installation of the corresponding 
parts of the Simple Components will fail. These faults can be safely ignored 
during the installation.</p>
<TABLE border="5" cellpadding="3" cellspacing="0">
  <TR>
    <TD valign="bottom" bgcolor="#008080" rowspan="13"><FONT color="#FFFFFF"><B>Project files </B>
	*.gpr</FONT></TD>
    <TD valign="top" bgcolor="#008080" colspan="14" style="border-right-style: none; border-right-width: medium; border-bottom-style: none; border-bottom-width: medium"><b><font color="#FFFFFF">Simple Components,
	Strings Edit,
	Tables</font></b></TD>
  </TR>
  <TR>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" colspan="13" style="border-left-style: solid; border-left-width: 1px; border-right-style: none; border-right-width: medium; border-top-style: solid; border-top-width: 1px; border-bottom-style: none; border-bottom-width: medium"><b><font color="#FFFFFF">Multiple 
	TCP/IP connections server</font></b></TD>
  </TR>
  <TR>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-left-style: solid; border-left-width: 1px; border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" colspan="12" style="border-right-style: none; border-right-width: medium; border-top-style: solid; border-top-width: 1px; border-bottom-style: none; border-bottom-width: medium"><b><font color="#FFFFFF">HTTP server 
	and client</font></b></TD>
  </TR>
  <TR>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-left-style: solid; border-left-width: 1px; border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium" colspan="11">
	<b><font color="#FFFFFF">ELV/e-Q3 MAX! cube client</font></b></TD>
  </TR>
  <TR>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-left-style: solid; border-left-width: 1px; border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium" colspan="10">
	<b><font color="#FFFFFF">MODBUS client</font></b></TD>
  </TR>
  <TR>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-left-style: solid; border-left-width: 1px; border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" colspan="9" style="border-right-style: none; border-right-width: medium; border-top-style: solid; border-top-width: 1px; border-bottom-style: none; border-bottom-width: medium"><b><font color="#FFFFFF">Secure 
	SSL/TSL connections server</font></b></TD>
  </TR>
  <TR>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-left-style: solid; border-left-width: 1px; border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" colspan="8" style="border-right-style: none; border-right-width: medium; border-top-style: solid; border-top-width: 1px; border-bottom-style: none; border-bottom-width: medium"><b><font color="#FFFFFF">SQLite3</font></b></TD>
  </TR>
  <TR>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-left-style: solid; border-left-width: 1px; border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" colspan="7" style="border-right-style: none; border-right-width: medium; border-top-style: solid; border-top-width: 1px; border-bottom-style: none; border-bottom-width: medium"><b><font color="#FFFFFF">ODBC 
	32/64</font></b></TD>
  </TR>
  <TR>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-left-style: solid; border-left-width: 1px; border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" colspan="6" style="border-right-style: none; border-right-width: medium; border-top-style: solid; border-top-width: 1px; border-bottom-style: none; border-bottom-width: medium"><b><font color="#FFFFFF">SQLite3 HTTP 
	browser</font></b></TD>
  </TR>
  <TR>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-left-style: solid; border-left-width: 1px; border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" colspan="5" style="border-right-style: none; border-right-width: medium; border-top-style: solid; border-top-width: 1px; border-bottom-style: none; border-bottom-width: medium"><b><font color="#FFFFFF">GNUTLS</font></b></TD>
  </TR>
  <TR>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-left-style: solid; border-left-width: 1px; border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-right-style: none; border-right-width: medium; border-top-style: solid; border-top-width: 1px; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" colspan="4" style="border-right-style: none; border-right-width: medium; border-top-style: solid; border-top-width: 1px; border-bottom-style: none; border-bottom-width: medium">
	<font color="#FFFFFF"><b>MQTT</b></font></TD>
  </TR>
  <TR>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-left-style: solid; border-left-width: 1px; border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium; border-bottom-style: none; border-bottom-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" colspan="3" style="border-right-style: none; border-right-width: medium; border-top-style: solid; border-top-width: 1px; border-bottom-style: none; border-bottom-width: medium"><font color="#FFFFFF"><b>GNADE </b>
	(depreciated)</font></TD>
  </TR>
  <TR>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-left-style: solid; border-left-width: 1px; border-top-style: none; border-top-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" style="border-top-style: none; border-top-width: medium">&nbsp;</TD>
    <TD valign="top" bgcolor="#008080" colspan="2" style="border-right-style: none; border-right-width: medium; border-top-style: solid; border-top-width: 1px"><b><font color="#FFFFFF">APQ</font></b><font color="#FFFFFF">
	(depreciated)<B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Usage in 
	a custom 
	project</B></font></TD>
  </TR>
  <TR>
    <TD valign="top">components</TD>
    <TD align="center" style="border-top-style: solid; border-top-width: 1px">+</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD valign="top"><tt>
	<font color="#0000FF">with</font> 
	&quot;components.gpr&quot;;</tt></TD>
  </TR>
  <TR>
    <TD valign="top">components-apq</TD>
    <TD align="center">+</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center">+</TD>
    <TD valign="top"><tt>
	<font color="#0000FF">with</font> 
	&quot;components-apq.gpr&quot;;</tt></TD>
  </TR>
  <tr>
    <TD valign="top">components-connections_server</TD>
    <TD align="center">+</TD>
    <TD align="center">+</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD valign="top"><tt>
	<font color="#0000FF">with</font> 
	&quot;components-connections_server.gpr&quot;;</tt></TD>
  </tr>
	<tr>
    <TD valign="top">components-connections_server-http_server</TD>
    <TD align="center">+</TD>
    <TD align="center">+</TD>
    <TD align="center">+</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD valign="top"><tt>
	<font color="#0000FF">with</font> 
	&quot;components-connections_server-http_server.gpr&quot;;</tt></TD>
  </tr>
  <tr>
    <TD valign="top">components-connections_server-http_server-sqlite_browser</TD>
    <TD align="center">+</TD>
    <TD align="center">+</TD>
    <TD align="center">+</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center">+</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center">+</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD valign="top"><tt>
	<font color="#0000FF">with</font> 
	&quot;components-connections_server-http_server-sqlite_browser.gpr&quot;;</tt></TD>
  </tr>
  <tr>
    <TD valign="top">components-connections_server-elv_max_cube_client</TD>
    <TD align="center">+</TD>
    <TD align="center">+</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#FFFFFF">+</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD valign="top"><tt>
	<font color="#0000FF">with</font> 
	&quot;components-connections_server-elv_max_cube_client.gpr&quot;;</tt></TD>
  </tr>
  <tr>
    <TD valign="top">components-connections_server-modbus_client</TD>
    <TD align="center">+</TD>
    <TD align="center">+</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center">+</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD valign="top"><tt>
	<font color="#0000FF">with</font> 
	&quot;components-connections_server-modbus_client.gpr&quot;;</tt></TD>
  </tr>
  <tr>
    <TD valign="top">components-connections_server-mqtt</TD>
    <TD align="center">+</TD>
    <TD align="center">+</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center">+</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD valign="top"><tt>
	<font color="#0000FF">with</font> 
	&quot;components-connections_server-mqtt.gpr&quot;;</tt></TD>
  </tr>
  <tr>
    <TD valign="top">components-connections_server-secure</TD>
    <TD align="center">+</TD>
    <TD align="center">+</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center">+</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD valign="top"><tt>
	<font color="#0000FF">with</font> 
	&quot;components-connections_server-secure.gpr&quot;;</tt></TD>
  </tr>
  <tr>
    <TD valign="top">components-gnade</TD>
    <TD align="center">+</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center">+</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD valign="top"><tt>
	<font color="#0000FF">with</font> 
	&quot;components-gnade.gpr&quot;;</tt></TD>
  </tr>
  <tr>
    <TD valign="top">components-gnutls</TD>
    <TD align="center">+</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center">+</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD valign="top"><tt>
	<font color="#0000FF">with</font> 
	&quot;components-gnutls.gpr&quot;;</tt></TD>
  </tr>
  <tr>
    <TD valign="top">components-odbc</TD>
    <TD align="center">+</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center">+</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD valign="top"><tt>
	<font color="#0000FF">with</font> 
	&quot;components-odbc.gpr&quot;;</tt></TD>
  </tr>
  <tr>
    <TD valign="top">components-sqlite</TD>
    <TD align="center">+</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">+</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD align="center" bgcolor="#C0C0C0">-</TD>
    <TD valign="top" style="border-bottom-style: solid; border-bottom-width: 1px"><tt>
	<font color="#0000FF">with</font> 
	&quot;components-sqlite.gpr&quot;;</tt></TD>
  </tr>
  </TABLE>
<h3><a name="18.1"></a>18.1. Debian and Fedora packages</h3>
<p>Under Fedora, Debian Linux and their derivates you can use packages for
<a href="#fedora_packages">Fedora</a> and
	<a href="#debian_packages">Debian</a> and the corresponding architectures.
See release notes of the corresponding pages.</p>
<h3><a name="18.2"></a>18.2. Fedora packages repository</h3>
<p>The Fedora packages of this library are located in a <i>yum</i> software 
package manager repository. They can be searched, installed and updated 
automatically using <i>yum</i>. In order to do so, the file
<a href="http://dmitry-kazakov.de/dmitry-kazakov.repo">dmitry-kazakov.repo</a> 
can be put into the directory <i>/etc/yum.repos.d</i>.</p>
<h3><a name="18.3"></a>18.3. Debian packages repository</h3>
<p>In order to use <i>apt</i> Debian repository for automatic install and update 
these packages add the following line to <i>/etc/apt/sources.list</i>:</p>
<blockquote>
	<tt>deb http://dmitry-kazakov.de/distributions sid main</tt></blockquote>
<hr>
<p align="right">
  <a name="19"></a><a href="#18"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><A href="#20"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"><IMG src="next.gif" alt="[Next]" width="29" height="29"></A></p>
<H2>19.
<a name="changes_log"></a>Changes log</H2>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
<i>GNAT GPL 2015 (20150428-49)</i></li>
	<li><i>GNAT 5.3</i></li>
  </ul>
<P>
Changes (10 April 2016) to the version 4.11:<ul>
	<li>MQTT protocol implementation added;</li>
	<li>A variant of Purge with selector parameter were added to Generic_FIFO 
	and Generic_FIFO.Generic_Signaled;</li>
	<li>Conditional procedures Replace with user-defined function were added to 
	Generic_Set and Generic_Indefinite_Set.</li>
	</ul>
<P>
Changes (1 March 2016) to the version 4.10:<ul>
	<li>ELV/e-Q3 MAX! client protocol implementation corrected;</li>
	<li>ELV/e-Q3 MAX! client supports reading measured temperature from a 
	radiator thermostats;</li>
	<li>ELV/e-Q3 MAX! client subprograms Get_Error, Has_Device_Data, Query_NTP_Servers, Reset_Devices, Reset_Error, Set_NTP_Servers added;</li>
	<li>ELV/e-Q3 MAX! client messages and commands A, F, N support added;</li>
	<li>GNUTLS bindings updated to the latest version.</li>
	</ul>
<P>
Changes (18 October 2015) to the version 4.9:<ul>
	<li>ELV/e-Q3 MAX! client wall thermostat support added;</li>
	<li>ELV/e-Q3 MAX! device data available through Get_Device_Data;</li>
	<li>ELV/e-Q3 MAX! interface calls querying topology, device parameters and 
	data are task-safe;</li>
	<li>Socket_Error 11004 workaround added.</li>
	</ul>
<P>
Changes (24 August 2015) to the version 4.8:<ul>
	<li>ELV/e-Q3 MAX! client implementation is provided;</li>
	<li>Bug fix in test server.</li>
	</ul>
<P>
Changes (29 June 2015) to the version 4.7:<ul>
	<li>Adapted to GNAT GPL 2015;</li>
	<li>Bug fix in Persistent-Single_File;</li>
	<li>Connected callback added to GNAT.Sockets.Server.</li>
	</ul>
<p>
<i>
The following versions were tested with the compilers:</i>
</p>
<ul>
  <li>
<i>GNAT GPL 2014 (20140331)</i></li>
	<li>
<i>GNAT 4.8.2 (20131212)</i></li>
  <li><i>GNAT 4.9.0</i></li>
  </ul>
<P>
Changes (13 June 2015) to the version 4.6:<ul>
	<li>GNAT.Sockets.Server supports outgoing connections as well;</li>
	<li>MODBUS client implementation is provided;</li>
	<li>HTTP client implementation is provided;</li>
	<li>Stack_Storage.Deallocate_All bug fix.</li>
	</ul>
<P>
Changes (2 April 2015) to the version 4.5:<ul>
	<li>Receiving WebSocked messages in chunks was added;</li>
	<li>Shutdown was added to connection object to drop connection explicitly;</li>
	<li>Support for atomic access to 64-bit Stream_Element_Offset on 32-bit 
	platforms;</li>
	<li>Added support for custom validation of CGI keys;</li>
	<li>ARMv7 (AKA armhf) support.</li>
	</ul>
<P>
Changes (17 January 2015) to the version 4.4:<ul>
	<li>Dynamically allocated terminated strings added in the package 
	GNAT.Sockets.Connection_State_Machine.Terminated_Strings;</li>
	<li>Input buffer size discriminant added to HTTP_Client connection object;</li>
	<li>Tracing primitive operation extended for encoded/ciphered content;</li>
	<li>GNUTLS bindings added;</li>
	<li>Secure SSL/TLS multiple-connections servers added. The implementation is 
	based on GNUTLS;</li>
	<li>Secure HTTP implementation added.</li>
	</ul>
<P>
Changes (20 December 2014) to the version 4.3:<ul>
	<li>URI scheme recognition added;</li>
	<li>Get_Server_Address added to the connections server to allow limiting the 
	addresses being listened;</li>
	<li>Socket send events are blocked when the server has no data to sent;</li>
	<li>Get_IO_Timeout is added to control waiting for socket events;</li>
	<li>Get_Polling_Timeout is added to control maximal time socket send polling 
	remain stopped;</li>
	<li>Trace_Sending is added to trace socket polling events;</li>
	<li>Documentation improved;</li>
	<li>Bug fixes.</li>
	</ul>
<P>
Changes (23 November 2014) to the version 4.2:<ul>
	<li>Persistent.Memory_Pool.Generic_External_Ptr_B_Tree was added;</li>
	<li>Persistent.Memory_Pool.External_B_Tree was added;</li>
	<li>Persistent.Memory_Pool.External_B_Tree.Generic_Table was added (provides 
	multiple-keyed table);</li>
	<li>Persistent.Memory_Pool behavior of Finalize changed not to close the 
	underlying file;</li>
	<li>Persistent.Single_File package was added to provide persistence layer 
	over persistent transactional array files;</li>
	<li>WebSockets implementation added;</li>
	<li>Bug fixes.</li>
	</ul>
<P>
Changes (16 September 2014) to the version 4.1:<ul>
	<li>Transactional block files provided by the package 
	Persistent.Blocking_Files.Transactional;</li>
	<li>Persistent.Memory_Pool provides task-safe access to the underlying 
	container file;</li>
	<li>Persistent.Memory_Pool.Generic_External_B_Tree is changed to support 
	multiple trees on the same pool;</li>
	<li>Various bug fixes and code cleanup.</li>
	</ul>
<P>
Changes (24 July 2014) to the version 4.0:<ul>
	<li>Minor bug fixes.</li>
	</ul>
<P>
Changes (June 2014) to the version 3.22:<ul>
	<li>Missing implementation of the function and procedure Locate added to 
	Tables.UTF8_Names.</li>
	</ul>
<P>
Changes (1 June 2014) to the version 3.22:<ul>
	<li>ODBC bindings bug causing a connection left opened despite object 
	finalization was fixed;</li>
	<li>Generic_Blackboard supports GCC platforms with no Pragma Atomic 
	available for 64-bit integers;</li>
	<li>SQLite3 bindings are switched to the amalgamation version 3080200;</li>
	<li>Column_Type and Is_Valid functions added to the package SQLite;</li>
	<li>HTTP SQLite3 database browser added;</li>
	<li>Blocking file access support added;</li>
	<li>Persistent memory pools added;</li>
	<li>B-tree implementation added.</li>
	</ul>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
<i>GNAT Pro 6.4.2 (20110614-4)</i></li>
	<li>
<i>GNAT 4.6.2 (20111027)</i></li>
  </ul>
<P>
Changes (15 March 2013) to the version 3.21:<ul>
	<li>Multiple connections server support;</li>
	<li>Task pooled connection server implementation added;</li>
	<li>HTTP server implementation;</li>
	<li>Deallocate_All was added to the Stack_Storage package.</li>
	</ul>
<P>
Changes (20 October 2012) to the version 3.20:<ul>
	<li>Bug fix in Get_Data ODBC bindings returning string. The error appeared 
	when string to be assembled from several pieces;</li>
	<li>Stream-oriented Get_Data added to ODBC bindings;</li>
	<li>In-place string Get_Data added to ODBC bindings;</li>
	<li>Data sources enumeration added.</li>
	</ul>
<P>
Changes (14 October 2012) to the version 3.19:<ul>
	<li>Native ODBC bindings added;</li>
	<li>Persistence level based on native ODBC bindings added.</li>
	</ul>
<P>
Changes (10 August 2012) to the version 3.18:<ul>
	<li>Bug fix in test_string_streams.</li>
	</ul>
<P>
Changes to the version 3.17:<ul>
	<li>Bug fix in binding strings of the sqlite interface. The bug caused 
	passing extra NUL at the end of argument strings;</li>
	<li>Informational operations added to the package Stack_Storage.</li>
	</ul>
<P>
Changes to the version 3.16:<ul>
	<li>Sets and maps of discrete types based on ranges of elements are 
	included;</li>
	<li>Set complement operation was added to generic set packages;</li>
	<li>Deep equality operation was added to generic map packages.</li>
	</ul>
<P>
Changes to the version 3.15:<ul>
	<li>Bug fix in the package Storage_Streams. The bug was caused by an 
	overflow in index computations.</li>
	</ul>
<P>
Changes to the version 3.14:<ul>
	<li>Parsers have a mechanism to disallow an operation outside brackets;</li>
	<li>Closing brackets can be returned back when misplaced switching to infix 
	context. For example, it is now possible to parse expressions like <i>f</i>(|<i>a</i>|+1|<i>x</i>), 
	where | is both |<font face="Times New Roman">&middot;</font>|-brackets and an 
	infix operation;</li>
	<li>Association checks are performed on all operations and brackets.</li>
	</ul>
<P>
Changes to the version 3.13:<ul>
	<li>The package Generic_Cubic_Spline provides interpolation by normal cubic 
	splines;</li>
	<li>Indefinite maps and sets added;</li>
	<li>On_Missing_Operand of the Parsers.Generic_Lexer has additional parameter 
	to identify the operation expecting missing operand.</li>
	</ul>
<P>
Changes to the version 3.12:<ul>
	<li>Minor bug fixes in the packages Generic_Blackboard and 
	Strings_Edit.Symmetric_Serialization;</li>
	<li>Adaptation to 64-bit targets;</li>
	<li>Fedora and Debian packages are provided for both 32- and 64-bit 
	architectures.</li>
	</ul>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
	<i>GNAT Pro 6.4.2 (20110614)</i></li>
	<li>
	<i>GNAT GPL 2011 (20110908)</i></li>
</ul>
<P>
Changes to the version 3.11:<ul>
	<li>The package Block_Streams provides block-oriented I/O layer with 
	checksums and sequence numbers over a stream. The layer itself is interfaced 
	as a stream;</li>
	<li>The package Storage_Streams provides memory-allocated streams.</li>
	</ul>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
	<i>GNAT Pro 6.3.2 (20100111)</i></li>
	<li>
	<i>GNAT GPL 2009 (20090511)</i></li>
</ul>
<P>
Changes to the version 3.10:<ul>
	<li>The procedure Has_Dependants in the package Persistent.Data_Bank was 
	extended to count all types of links;</li>
	<li>Bug fixed in the package Persistent.Data_Bank, in particular it is save 
	to remove backward links from Delete.</li>
	</ul>
<P>
Changes to the version 3.9:<ul>
	<li>The package Object.Handle.Generic_Set supports use of objects in Find, 
	Is_In, Remove.</li>
	</ul>
<P>
Changes to the version 3.8:<ul>
	<li>Packaged for Debian and Fedora.</li>
	</ul>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
	<i>GNAT Pro 6.3.1 (20100111-43)</i></li>
	<li>
	<i>GNAT GPL 2009 (20090511)</i></li>
</ul>
<P>
Changes to the version 3.7:<ul>
	<li>Function Get_Server_Name was added to Persistent.ODBC;</li>
	<li>The package SQLite was added to provide bindings to 
	SQLite;</li>
	<li>Persistent.SQLite was added to implement persistence backed by SQLite;</li>
	<li>Parsers.Multiline_Source.Stream_IO was added to provide stream-based 
	sources.</li>
	</ul>
<P>
Changes to the version 3.6:<ul>
	<li>A procedure Remove was added to Generic_Set with a third parameter 
	indicating if the item was in the set;</li>
	<li>Bug fix in Ada 95 parser example when parsing string literals;</li>
	<li>Bug fix in Persistent.Data_Bank.Indexed: object's modification flag
	reset when the object is stored;</li>
	<li>Forward compatibility with Ada 2005, Object.Handle can be instantiated 
	with a local access type;</li>
	<li>Blackboad support items protected from overwritting;</li>
	<li>Generic_Directed_Graph implements directed graphs;</li>
	<li>Generic_Directed_Weighted_Graph implements directed weighted graphs;</li>
	<li>Generic_Address_Order implements objects comparisons by their addresses.</li>
	</ul>
<P>
Changes to the version 3.5:<ul>
	<li>Packages for text output of the persistent storage index added;</li>
	<li>Is_Directory was added to Persistent.Directory;</li>
	<li>Handles and sets of backward links added.</li>
	</ul>
<P>
Changes to the version 3.4:<ul>
	<li>Example test_ada_parser.adb fixed;</li>
	<li>Bug fix in Parsers.Generic_Source.Get_Cpp_Blank;</li>
	<li>Minor bug fixes.</li>
	</ul>
<P>
Changes to the version 3.3:<ul>
	<li>The Test_Sequencer procedure made Ada 95 conform;</li>
	<li>The package Parsers.Multiline_Source.Latin1_Text_IO was added to support 
	Latin-1 text I/O;</li>
	<li>The package Parsers.Multiline_Source.Wide_Text_IO was added to support 
	wide text I/O;</li>
	<li>The generic procedure Parsers.Multiline_Source.Get_UTF8_Text was added 
	for matching texts in UTF-8 sources;</li>
	<li>Parsers.Generic_Lexer.Ada_2005_Blanks and 
	Parsers.Generic_Source.Get_Ada_2005_Blank were added to support Ada 2005 in 
	UTF-8 encoding;</li>
	<li>Task-safe implementation of reference counting was added;</li>
	<li>Task-safe implementation of persistent storage was added;</li>
	<li>Tracing implementation for GNAT Ada for reference counting object was 
	added;</li>
	<li>Get_Class abstract operation was added to the persistent storage 
	interface;</li>
	<li>Generic_Chebyshev_Polynomials was added to sum Chebyshev series of the 
	first kind;</li>
	<li>Gamma function approximation for Float;</li>
	<li>Parsers.Generic_Source.Text_IO expands tabs;</li>
	<li>Procedures Get_Location and Skip were added to Parsers.Multiline_Source;</li>
	<li>Installation instructions added.</li>
	</ul>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
	<i>GNAT GPL 2008 (20080521)</i><blockquote>
		<p><i><a name="GNAT_bug"></a>Warning</i>. The tested version of GNAT compiler has a bug in 
		initialization of record types using aggregates when these types have a 
		discriminant and a controlled component. The bug manifests itself an 
		improper initialization/finalization. The subdirectory <i>
		test_components</i> contains<i> test_handles.adb</i>, which detects this 
		bug. Fortunately, situations where this might become critical are rare.</p>
	</blockquote>
	</li>
</ul>
<P>
Changes to the version 3.2:<ul>
	<li>The procedure Purge and the function Is_Preserved were added to the packages 
	Generic_FIFO and Generic_FIFO.Generic_Signaled in order to remove undesired 
	FIFO elements;</li>
	<li>References of blackboards are made comparable;</li>
	<li>Bug fix in blackboards. The bug manifested itself as ghost elements 
	appearing under certain cicrumstances.</li>
	</ul>
<P>
Changes to the version 3.1:<ul>
	<li>The package IEEE_754 and its children provide portable support of IEEE 
	754 floating-point numbers.</li>
	</ul>
<P>
Changes to the version 3.0:<ul>
	<li>Generic_FIFO.Generic_Signaled allows asynchronous cancelation of 
	waiting;</li>
	<li>Packages Generic_Indefinite_FIFO and its child 
	Generic_Indefinite_FIFO.Generic_Signaled provide lock-free FIFOs of 
	indefinite elements.</li>
	</ul>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
	<i>GNAT GPL 2007 (20070402);</i></li>
	<li><i>GNAT GPL 2007 (20070405-41)</i></li>
</ul>
<P>
Changes to the version 2.9:<ul>
	<li>Various locking primitives added:</li>
	<li>Plain events which can be signaled, reset and awaited for;</li>
	<li>Arrays of events which can be signaled, reset and awaited in any 
	combination of in race condition free way;</li>
	<li>Arrays of reentrant mutexes, deadlock-free with an enforced order of 
	locking;</li>
	<li>Race condition free event distributing pulsed value to multiple tasks;</li>
	<li>Reentrant mutexes;</li>
	<li>Race condition free pulse events;</li>
	<li>A solution of the problem of mutliple tasks synchronization at a check 
	point based on sets of events;</li>
	<li>A solution of the dining philosophers problem based on sets of mutexes.</li>
	</ul>
<P>
Changes to the version 2.8:<ul>
	<li>Persistent and Persistent.Handle packages use UTF-8 mapping function 
	defined in Strings_Edit.UTF8.Maps;</li>
	<li>Lock-free shared structures are added:</li>
	<li>Generic_FIFO implements a lock-free peer-to-peer FIFO;</li>
	<li>Generic_FIFO.Generic_Signaled implements an almost lock-free 
	peer-to-peer FIFO, which locks only if blocking;</li>
	<li>Generic_Blackboard implements lock-free one to many blackboards;</li>
	<li>Generic_Blackboard.Generic_Task_Safe implements blocking many to 
	lock-free many blackboard.</li>
	</ul>
<P>
Changes to the version 2.7:<ul>
	<li>Tables of UTF-8 encoded case-insensitive strings;</li>
	<li>Is_Named was added to Persistent and Persistent.Handle packages.</li>
	</ul>
<P>
Changes to the version 2.5:<ul>
	<li>Function Is_Empty was added to doubly-linked lists;</li>
	<li>Functions Erase and Take were added for doubly-linked webs and lists:</li>
	<li>Persistent storage packages interface was changed from Wide_String 
	(UCS-2) to String (UTF-8) Unicode support;</li>
	<li>Persistent storage now supports hierarchical names of objects;</li>
	<li>Get_Class abstract operation was added to the persistent storage 
	interface;</li>
	<li>The package Generic_Random_Sequence was added to provide random 
	sequences of non-repeating numbers;</li>
	<li>The package Strings_Edit.Symetric_Serialization provides symmetric 
	encryption and encoding of short plain strings, which can be used for 
	storing user credentials.</li>
	</ul>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
	<i>GNAT 4.1.1 20070105;</i></li>
	<li><i>GNAT GPL 2007 (20070405-41)</i></li>
</ul>
<P>
Changes to the version 2.4:<ul>
	<li>Functions Is_In were added for doubly-linked webs and lists;</li>
	<li>For GNAT users GPS project files were added.</li>
	</ul>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
<i>
GNAT 2006, GCC 4.1.1 (20060525);</i></li>
  <li><i>GNAT 3.15p (doubly-linked webs may crash the compiler).</i></li>
</ul>
<P>
Changes to the version 2.3:<ul>
	<li>Doubly-linked webs and lists of items with referential semantics;</li>
	<li>Get_Line procedure was added to the abstract source interface to improve 
	parser performance in the cases when compiler optimization is poor;</li>
	<li>Slicing and concatenation operations were added to the package 
	Object.Handle.Generic_Bounded_Array;</li>
	<li>The code was slightly re-arranged to circumvent bugs of
GNAT 2006, GCC 4.1.1 (20060525).</li>
	</ul>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
<i>
GNAT 2005, GCC 4.0.2 (20051125);</i></li>
  <li><i>GNAT 3.15p.</i></li>
</ul>
<P>
Changes to the version 2.2:<ul>
	<li>Generic package Object.Handle.Generic_Handle_Set is provided for 
	sets of objects accessed through handles;</li>
	<li>Insert procedure was added to Generic_Set with a parameter to determine 
	whether the item has been added to the set:</li>
	<li>Bug fix in Stack_Storage.</li>
	<li>Bug fix in the implementation of &quot;and&quot; in Generic_Set and 
	Object.Handle.Generic_Set;</li>
	<li>The package Parsers.Multiline_Sources.Standard_Input was added to 
	provide interface to the standard input file;</li>
	<li>Packages for dealing with XPM image format were added.</li>
	</ul>
<P>
Changes to the version 2.1:
<ul>
  <li>Conformity with Ada 2005;</li>
	<li>Procedure Set was added to the package Object.Handle;</li>
	<li>Procedure Fetch was added to Generic_Unbounded_Array.</li>
</ul>
<P>
<i>The following versions were tested with the GNAT 3.15p compiler:</i>
<P>
Changes to the version 2.0:<ul>
  <li>Parsers.Multiline_Source.Get_Line raises End_Error at the source end
    (instead of Constraint_Error);</li>
  <li>Behavior of arguments sublists separators was clarified.</li>
  </ul>
<P>
Changes to the version 1.10:<ul>
  <li>Get_Token procedure was added to provide matching sources against a table
    of tokens;</li>
  <li>Keywords package was added to generate keyword matching parser from an
    enumeration type, which literals are the keywords to match.</li>
  </ul>
<P>
Changes to the version 1.9:<ul>
  <li>Support for implied infix operators as in 2<i>x</i> + 3<i>y</i>;</li>
  <li>Get_Text procedure is added to help creation of simple recursively
    descending parsers;</li>
  <li>Ada expression parser bug fix (in numeric literals parsing).</li>
  </ul>
<P>
Changes to the version 1.8:<ul>
  <li>Insert for Generic_Set;</li>
  <li>Minor bug fixing in the Ada expression parser example;</li>
  <li>Changes in the documentation.</li>
  </ul>
<P>
Changes to the version 1.7:<ul>
  <li>Abstract persistent storage interface (package Persistent);</li>
  <li>Handles to persistent storage objects (package Persistent.Handle);</li>
  <li>Persistent storage backed by an ODBC data base;</li>
  <li>Persistent storage backed by an APQ data base;</li>
  <li>Interface for developing new persistent storage objects.</li>
  </ul>
<P>
Changes to the version 1.6:<ul>
  <li>Object persistency implemented by the packages Object.Archived.*.</li>
  </ul>
<P>
Changes to the version 1.5:<ul>
  <li>The child package Object.Handle.Generic_Set provides sets of objects;</li>
  <li>Erase operation was added to Generic_Unbounded_Array, 
  Generic_Unbounded_Ptr_Array and Object.Handle.Generic_Unbounded_Array;</li>
  <li>Bug fix in Generic_Set. Set-theoretic operations work correctly when both 
  arguments are the same set.</li>
  </ul>
<P>
Changes to the version 1.4:<ul>
  <li>Licensing wording was corrected to comply with GMGPL</li>
  </ul>
<P>
Changes to the version 1.3:<ul>
<li>The package Generic_Segmented_Stack provides a specialization of the generic
stack package;</li>
<li>Random access to generic stacks (Get / Put);</li>
<li>The packages rooted in Parsers provide infix expressions syntax analyzers;</li>
<li>Strings edit facilities;</li>
<li>Tables management package.</li>
</ul>
<P>
Changes to the version 1.2:<ul>
<li>The package Generic_Map provides maps (associative arrays);</li>
</ul>
<P>
Changes to the version 1.1:<ul>
<li>The package Generic_Stack provides a stack implemented on a dynamic array 
type;</li>
<li>All packages were reviewed to allow use of pool-specific access types where 
possible. So some changes in the specifications of the package Object.Handle and 
Object were made;</li>
<li>The packages Stack_Storage and its child Mark_And_Release provide stack 
pools. </li>
</ul>
<P>
Changes to the version 1.0:
<ul>
  <li>Child generic packages of Object.Handle were added to deal with arrays of 
  objects;</li>
  <li>Object.Handle was made a public descendant of Ada.Finalization.Controlled;</li>
  <li>Generic_Set has now a new procedure Replace;</li>
  <li>Removed bug in Generic_Set.Erase (wrong dealing with Use_Count).</li>
</ul>
  <HR>
<H2 align="right">
  <a name="20"></a><a href="#19"><IMG src="prev.gif" alt="[Back]" width="29" height="29"></a><a href="#20"><IMG src="index.gif" alt="[TOC]" width="29" height="29"></a></H2>
<H2>20. Table of Contents</H2>
<table border="0" cellpadding="0" cellspacing="20">
<tr><td valign="top">
<b><big><big>1</big></big></b>&nbsp;<A href="#1"><big>Objects and handles (smart pointers)</big></A><BR>
&nbsp;&nbsp;&nbsp; <A href="#1.1">1.1. Objects</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#1.1.1">1.1.1 Tasking</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#1.2">1.2. Handles to objects</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#1.3">1.3. An example of use</a><br>
&nbsp;&nbsp;&nbsp; <A href="#1.4">1.4. Bounded arrays of objects</a><br>
&nbsp;&nbsp;&nbsp; <A href="#1.5">1.5. Unbounded arrays of objects</a><br>
&nbsp;&nbsp;&nbsp; <A href="#1.6">1.6. Sets of objects</a><br>
&nbsp;&nbsp;&nbsp; <A href="#1.7">1.7. Universal sets of objects</a><br>
<hr>
<b><big><big>2</big></big></b>&nbsp;<A href="#2"><big>Persistency</big></A><BR>
&nbsp;&nbsp;&nbsp; <A href="#2.1">2.1. Persistent objects</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.1.1">2.1.1. Types</a><br>
&nbsp;&nbsp;&nbsp; <A href="#2.2">2.2. Handles to persistent objects</a><br>
&nbsp;&nbsp;&nbsp; <A href="#2.3">2.3. Persistent directories</a><br>
&nbsp;&nbsp;&nbsp; <A href="#2.4">2.4. Persistent storage implementation example</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.4.1">2.4.1. Persistent storage implementation</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.4.2">2.4.2. Persistent objects implementation</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.4.3">2.4.3. Test program</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.4.4">2.4.4. Predefined 
persistent storage test</a><br>
&nbsp;&nbsp;&nbsp; <A href="#2.5">2.5. Abstract persistent storage</a><br>
&nbsp;&nbsp;&nbsp; <A href="#2.6">2.6. Handles to persistent storage</a><br>
&nbsp;&nbsp;&nbsp; <A href="#2.7">2.7. Persistent storage factory</a><br>
&nbsp;&nbsp;&nbsp; <A href="#2.8">2.8. Persistent storage implementations</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.8.1">2.8.1. ODBC databases</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.8.2">2.8.2. GNADE ODBC databases</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.8.3">2.8.3. APQ-interfaced databases</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.8.4">2.8.4. SQLite3 databases</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.8.5">2.8.5. Single file implementation</a><br>
&nbsp;&nbsp;&nbsp; <A href="#2.9">2.9. Implementation of a new persistent storage</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.9.1">2.9.1. Databases</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.9.2">2.9.2. Storages with keys</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.9.3">2.9.3. Storage index</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.9.4">2.9.4. Indexed storage</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.9.5">2.9.5. Proxy objects</a><br>
&nbsp;&nbsp;&nbsp; <A href="#2.10">2.10. Visual browsing of a persistent storage</a><br>
&nbsp;&nbsp;&nbsp; <A href="#2.11">2.11. Blocking files</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.11.1">2.11.1. Text I/O</a><br>
&nbsp;&nbsp;&nbsp; <A href="#2.12">2.12. Transactional blocking files</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.11.1">2.12.1. Textual output of internal structures</a><br>
<hr>
<b><big><big>3</big></big></b>&nbsp;<A href="#3"><big>Sets and maps</big></A><BR>
&nbsp;&nbsp;&nbsp; <A href="#3.1">3.1. Sets</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#3.1.1">3.1.1. Sets of indefinite elements</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#3.1.2">3.1.2. Sets of discrete elements</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#3.2">3.2. Maps</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#3.2.1">3.2.1. Maps of indefinite keys and objects</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#3.2.2">3.2.2. Maps of discrete keys</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#3.2.3">3.2.3. Maps of discrete keys to indefinite objects</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#3.3">3.3. B-trees</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#3.3.1">3.3.1. B-trees of definite keys and objects</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#3.3.2">3.3.2. B-trees of indefinite keys and objects</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#3.3.3">3.3.3. Persistent B-trees</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#3.3.4">3.3.4. Persistent pointer-valued B-trees</A><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#3.3.5">3.3.5. Persistent raw B-trees</A><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#3.3.6">3.3.6. Persistent multi-keyed tables</A><hr>
<b><big><big>4</big></big></b>&nbsp;<A href="#4"><big>Unbounded arrays</big></A><br>
<hr>
<b><big><big>5</big></big></b>&nbsp;<A href="#5"><big>Unbounded arrays of pointers</big></A><BR>
<hr>
<b><big><big>6</big></big></b>&nbsp;<A href="#6"><big>Stacks</big></a><br>
&nbsp;&nbsp;&nbsp; <A href="#6.1">6.1. Stacks based on abstract arrays</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#6.2">6.2. Segmented stacks</A>
<hr>
<b><big><big>7</big></big></b>&nbsp;<A href="#7"><big>Pools</big></a><br>
&nbsp;&nbsp;&nbsp; <a href="#7.1">7.1. Stack pool</a><BR>
&nbsp;&nbsp;&nbsp; <a href="#7.2">7.2. Mark and release pool for controlled objects</a><br>
&nbsp;&nbsp;&nbsp; <a href="#7.3">7.3. Persistent storage memory pool</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#7.3.1">7.3.1. Concurrent access to the container file</a><br>
&nbsp;&nbsp;&nbsp; <a href="#7.4">7.4. Streams to persistent storage memory pool</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#7.4.1">7.4.1. Output stream</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#7.4.2">7.4.2. Input streams</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#7.4.3">7.4.3. Generic look ahead</a><br>
<hr>
<b><big><big>8</big></big></b>&nbsp;<a href="#8"><big>Doubly-linked networks</big></a><br>
&nbsp;&nbsp;&nbsp; <a href="#8.1">8.1. Doubly-linked lists of networks (specialization)</a><BR>
&nbsp;&nbsp;&nbsp; <a href="#8.2">8.2. Doubly-linked lists</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#8.2.1">8.2.1. Double-linked list example</a>
<hr>
<b><big><big>9</big></big></b>&nbsp;<a href="#9"><big>Graphs</big></a><br>
&nbsp;&nbsp;&nbsp; <a href="#9.1">9.1. Directed graphs</a><br>
&nbsp;&nbsp;&nbsp; <a href="#9.2">9.2. Directed weighted graphs</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#9.2.1">9.2.1. Suffix tree example</a>
<hr>
<b><big><big>10</big></big></b>&nbsp;<a href="#10"><big>Lock-free structures</big></a><br>
&nbsp;&nbsp;&nbsp; <a href="#10.1">10.1. FIFO</a><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#10.1.1">10.1.1. Lock-free FIFO of definite elements</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#10.1.2">10.1.2. Signaled FIFO of definite elements</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#10.1.3">10.1.3. Lock-free FIFO of indefinite elements</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#10.1.4">10.1.4. Signaled FIFO of indefinite elements</a><br>
&nbsp;&nbsp;&nbsp; <a href="#10.2">10.2. Blackboard</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#10.2.1">10.2.1. Single publisher blackboard</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#10.2.2">10.2.2. Multiple publishers blackboard</a>
<hr>
<b><big><big>11</big></big></b>&nbsp;<a href="#11"><big>Locking synchronization primitives</big></a><br>
&nbsp;&nbsp;&nbsp; <a href="#11.1">11.1. Notes on programming with protected objects</a><BR>
&nbsp;&nbsp;&nbsp; <a href="#11.2">11.2. Events</a><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.2.1">11.2.1. Simple event</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.2.2">11.2.2. Pulse event</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.2.3">11.2.3. Events pulsing a value</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.2.4">11.2.4. Arrays of events</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.2.5">11.2.5. Synchronization at a checkpoint, 
Sample</a><br>
&nbsp;&nbsp;&nbsp; <a href="#11.3">11.3. Mutexes</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.3.1">11.3.1. Reentrant mutex</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.3.2">11.3.2. Arrays of mutexes</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.3.3">11.3.3. Dining philosophers sample</a><hr>
<b><big><big>12</big></big></b>&nbsp;<a href="#12"><big>Parsers</big></a><br>
&nbsp;&nbsp;&nbsp; <a href="#12.1">12.1. Example first, a small calculator</a><BR>
&nbsp;&nbsp;&nbsp; <a href="#12.2">12.2. Basic considerations</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.2.1">12.2.1. Types of lexical tokens</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.2.2">12.2.2. Priorities and association</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.2.3">12.2.3. Association checks</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.2.4">12.2.4. Commutative operatiors</a><br>
&nbsp;&nbsp;&nbsp; <a href="#12.3">12.3. The base package</a><br>
&nbsp;&nbsp;&nbsp; <a href="#12.4">12.4. Sources</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.4.1">12.4.1. Source cursors I/O</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.4.2">12.4.2. Procedures to skip blanks</a>
</td>
<td valign="top">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.4.3">12.4.3. Procedure to skip text</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.4.4">12.4.4. Matching keywords</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.4.5">12.4.5. Parsing XPM files</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.4.6">12.4.6. String sources</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.4.7">12.4.7. Multi-line sources</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.4.8">12.4.8. Text file sources</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.4.9">12.4.9. Standard input sources</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.4.10">12.4.10. Latin-1 and wide text file sources</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.4.11">12.4.11. Stream sources</a><br>
&nbsp;&nbsp; <a href="#12.5">12.5. Tokens</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.5.1">12.5.1. Table-driven lexers</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.5.2">12.5.2. Table-driven segmented lexers</a><br>
&nbsp;&nbsp;&nbsp; <a href="#12.6">12.6. Lexers</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.6.1">12.6.1. Blank skipping</a><br>
&nbsp;&nbsp;&nbsp; <a href="#12.7">12.7. Operations</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.7.1">12.7.1. Operation stack</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.7.2">12.7.2. Segmented operation stack</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.7.3">12.7.3. Example of direct 
usage of the operation stack</a><br>
&nbsp;&nbsp;&nbsp; <a href="#12.8">12.8. Arguments</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.8.1">12.8.1. Argument stack</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.8.2">12.8.2. Segmented argument stack</a><br>
&nbsp;&nbsp;&nbsp; <a href="#12.9">12.9. Parsing tree example. Ada 95 expression parser</a><hr>
<b><big><big>13</big></big></b>&nbsp;<a href="#13"><big>Cryptography</big></a><br>
&nbsp;&nbsp;&nbsp; <a href="#13.1">13.1. Sequences of non-repeating pseudo random numbers</a><br>
&nbsp;&nbsp;&nbsp; <a href="#13.2">13.2. Symmetric serialization</a>
<hr>
<b><big><big>14</big></big></b>&nbsp;<a href="#14"><big>Numerics</big></a><br>
&nbsp;&nbsp;&nbsp; <a href="#14.1">14.1. IEEE 754 representations</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#14.1.1">14.1.1. Single precision 32-bit floating-point numbers</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#14.1.2">14.1.2. Double precision 64-bit floating-point numbers</a><br>
&nbsp;&nbsp;&nbsp; <a href="#14.2">14.2. Chebyshev series</a><br>
&nbsp;&nbsp;&nbsp; <a href="#14.3">14.3. Gamma function</a><br>
&nbsp;&nbsp;&nbsp; <a href="#14.4">14.4. Normal cubic spline interpolation</a>
<hr>
<b><big><big>15</big></big></b>&nbsp;<a href="#15"><big>Miscellany</big></a><br>
&nbsp;&nbsp;&nbsp; <a href="#15.1">15.1. Address order</a><br>
&nbsp;&nbsp;&nbsp; <a href="#15.2">15.2. SQLite bindings</a><br>
&nbsp;&nbsp;&nbsp; <a href="#15.3">15.3. Block streams</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#15.3.1">15.3.1. Input block stream</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#15.3.2">15.3.2. Output block stream</a><br>
&nbsp;&nbsp;&nbsp; <a href="#15.4">15.4. Storage streams</a><br>
&nbsp;&nbsp;&nbsp; <a href="#15.5">15.5. String streams</a><br>
&nbsp;&nbsp;&nbsp; <a href="#15.6">15.6. ODBC bindings</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#15.6.1">15.6.1. Thin bindings</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#15.6.2">15.6.2. Thick bindings</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#15.6.3">15.6.3. ODBC environments</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#15.6.4">15.6.4. ODBC connections</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#15.6.5">15.6.5. Transactions</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#15.6.6">15.6.6. ODBC commands</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#15.6.7">15.6.7. Binding parameters</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="#15.7">15.7. GNUTLS bindings</a><br>
<hr>
<b><big><big>16</big></big></b>&nbsp;<a href="#16"><big>Networking</big></a><br>
&nbsp;&nbsp;&nbsp; <a href="#16.1">16.1. Multiple TCP connections server</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.1.1">16.1.1. Multiple connection servers</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.1.2">16.1.2. Connection objects</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.1.3">16.1.3. Secure servers</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.1.4">16.1.4. Simple echo server sample</a><br>
&nbsp;&nbsp;&nbsp; <a href="#16.2">16.2. Connection state machine</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.2.1">16.2.1. State machine connection object</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.2.2">16.2.2. State machine 
data items</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.2.3">16.2.3. Block of data 
items</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.2.4">16.2.4. Null data item</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.2.5">16.2.5. Data items 
selector</a><br>
&nbsp;&nbsp;&nbsp; <a href="#16.3">16.3. Data items encoded big-endian</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.3.1">16.3.1. Big-endian IEEE 754 double precision float numbers</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.3.2">16.3.2. Big-endian IEEE 754 single precision float numbers</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.3.3">16.3.3. Big-endian signed integers</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.3.4">16.3.4. Big-endian unsigned integers</a><br>
&nbsp;&nbsp;&nbsp; <a href="#16.4">16.4. Data items encoded little-endian</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.4.1">16.4.1. Little-endian IEEE 754 double precision float numbers</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.4.2">16.4.2. Little-endian IEEE 754 single precision float numbers</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.4.3">16.4.3. Little-endian signed integers</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.4.4">16.4.4. Little-endian unsigned integers</a><br>
&nbsp;&nbsp;&nbsp; <a href="#16.5">16.5. Data items encoded using chain code</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.5.1">16.5.1. Chain-encoded signed integers</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.5.2">16.5.2. Chain-encoded unsigned integers</a><br>
&nbsp;&nbsp;&nbsp; <a href="#16.6">16.6. Strings encoded using a terminator character</a><br>
&nbsp;&nbsp;&nbsp; <a href="#16.7">16.7. Variable-length strings</a><br>
&nbsp;&nbsp;&nbsp; <a href="#16.8">16.8. Variable-length arrays</a><br>
&nbsp;&nbsp;&nbsp; <a href="#16.9">16.9. Expected sequence</a><br>
&nbsp;&nbsp;&nbsp; <a href="#16.10">16.10. Server with a pool of worker tasks</a><br>
&nbsp;&nbsp;&nbsp; <a href="#16.11">16.11. HTTP server protocol implementation</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.11.1">16.11.1. Common operations</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.11.2">16.11.2. Method callbacks</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.11.3">16.11.3. Request header fields</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.11.4">16.11.4. Receiving request bodies</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.11.5">16.11.5. Sending short responses</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.11.6">16.11.6. Sending response header fields</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.11.7">16.11.7. Sending response bodies</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.11.8">16.11.8. WebSockets</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.11.9">16.11.9. Utility routines</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.11.10">16.11.10. SQLite3 database browser</a><br>
&nbsp;&nbsp;&nbsp; <a href="#16.12">16.12. HTTP client protocol implementation</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.12.1">16.12.1. Signaled client</a><br>
&nbsp;&nbsp;&nbsp; <a href="#16.13">16.13. MODBUS client protocol implementation</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.13.1">16.13.1. Synchronous client</a><br>
&nbsp;&nbsp;&nbsp; <a href="#16.14">16.14. ELV/e-Q3 MAX! Cube protocol implementation</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.14.1">16.14.1. Stream I/O</a><br>
&nbsp;&nbsp;&nbsp; <a href="#16.15">16.15. MQTT protocol implementation</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.15.1">16.15.1. MQTT pier</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.15.2">16.15.2. MQTT message 
stream I/O</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#16.15.3">16.15.3. MQTT server (broker)</a><hr>
<b><big><big>17</big></big></b>&nbsp;<a href="#17"><big>Packages</big></a><br>
&nbsp;&nbsp;&nbsp; <a href="#17.1">17.1. Source packages</a><br>
&nbsp;&nbsp;&nbsp; <a href="#17.2">17.2. Tests and examples</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://www.dmitry-kazakov.de/ada/tables.htm">Tables</a> (a separate document)<br>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://www.dmitry-kazakov.de/ada/strings_edit.htm">Strings edit</a> (a separate document)
<hr>
<b><big><big>18</big></big></b>&nbsp;<a href="#18"><big>Installation</big></a><br>
&nbsp;&nbsp;&nbsp; <a href="#18.1">18.1. Debian and Fedora packages</a><br>
&nbsp;&nbsp;&nbsp; <a href="#18.2">18.2. Fedora packages repository</a><br>
&nbsp;&nbsp;&nbsp; <a href="#18.3">18.3. Debian packages repository</a>
<hr>
<b><big><big>19</big></big></b>&nbsp;<a href="#19"><big>Changes log</big></a>
<hr>
<b><big><big>20</big></big></b>&nbsp;<a href="#20"><big>Table of contents</big></a></td>
</tr>
</table>
</BODY>
</HTML>
